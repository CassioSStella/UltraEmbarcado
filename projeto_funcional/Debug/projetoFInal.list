
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800677c  0800677c  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006784  08006784  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800678c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a8  2000006c  080067f8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001414  080067f8  00008414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ccd  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366a  00000000  00000000  00020d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  000243d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112e  00000000  00000000  000259e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003196  00000000  00000000  00026b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018824  00000000  00000000  00029cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3c5  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  001108d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001168c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080066c8 	.word	0x080066c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080066c8 	.word	0x080066c8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <led_task+0x3c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f004 f9db 	bl	800491c <xQueueSemaphoreTake>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1f5      	bne.n	8000558 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f000 feae 	bl	80012d8 <HAL_GPIO_TogglePin>
			vTaskDelay(led->time);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4618      	mov	r0, r3
 8000582:	f004 fd29 	bl	8004fd8 <vTaskDelay>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000586:	e7e7      	b.n	8000558 <led_task+0xc>
 8000588:	20000124 	.word	0x20000124

0800058c <uart_task>:
		xSemaphoreGive(lSemaphore);

	}
}

void uart_task(void *argument){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

	uint8_t *string = (uint8_t *) "Ola Mundo da tarefa 1!\n\r";
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <uart_task+0x48>)
 8000596:	60fb      	str	r3, [r7, #12]

	while(1){

		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <uart_task+0x4c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f9bb 	bl	800491c <xQueueSemaphoreTake>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10b      	bne.n	80005c4 <uart_task+0x38>

			HAL_UART_Transmit_IT(&hlpuart1, string, 25);
 80005ac:	2219      	movs	r2, #25
 80005ae:	68f9      	ldr	r1, [r7, #12]
 80005b0:	480a      	ldr	r0, [pc, #40]	@ (80005dc <uart_task+0x50>)
 80005b2:	f002 fa49 	bl	8002a48 <HAL_UART_Transmit_IT>

			xSemaphoreTake(sUART, portMAX_DELAY);
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <uart_task+0x54>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 31ff 	mov.w	r1, #4294967295
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f9ac 	bl	800491c <xQueueSemaphoreTake>
		}
		xSemaphoreGive(mUART);
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <uart_task+0x4c>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f813 	bl	80045f8 <xQueueGenericSend>
		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 80005d2:	e7e1      	b.n	8000598 <uart_task+0xc>
 80005d4:	080066e0 	.word	0x080066e0
 80005d8:	2000012c 	.word	0x2000012c
 80005dc:	20000088 	.word	0x20000088
 80005e0:	20000128 	.word	0x20000128

080005e4 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <HAL_UART_TxCpltCallback+0x3c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f107 020c 	add.w	r2, r7, #12
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f8fe 	bl	80047fc <xQueueGiveFromISR>

	if (pxHigherPriorityTaskWokenTX == pdTRUE)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d107      	bne.n	8000616 <HAL_UART_TxCpltCallback+0x32>
	{
		portYIELD();
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <HAL_UART_TxCpltCallback+0x40>)
 8000608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	f3bf 8f6f 	isb	sy
	}
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000128 	.word	0x20000128
 8000624:	e000ed04 	.word	0xe000ed04

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fae2 	bl	8000bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f861 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8f3 	bl	8000820 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800063a:	f000 f8a7 	bl	800078c <MX_LPUART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
 800063e:	2203      	movs	r2, #3
 8000640:	2100      	movs	r1, #0
 8000642:	2001      	movs	r0, #1
 8000644:	f003 ff50 	bl	80044e8 <xQueueGenericCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a20      	ldr	r2, [pc, #128]	@ (80006cc <main+0xa4>)
 800064c:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 800064e:	2203      	movs	r2, #3
 8000650:	2100      	movs	r1, #0
 8000652:	2001      	movs	r0, #1
 8000654:	f003 ff48 	bl	80044e8 <xQueueGenericCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <main+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 800065e:	2203      	movs	r2, #3
 8000660:	2100      	movs	r1, #0
 8000662:	2001      	movs	r0, #1
 8000664:	f003 ff40 	bl	80044e8 <xQueueGenericCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a1a      	ldr	r2, [pc, #104]	@ (80006d4 <main+0xac>)
 800066c:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 800066e:	2001      	movs	r0, #1
 8000670:	f003 ffaa 	bl	80045c8 <xQueueCreateMutex>
 8000674:	4603      	mov	r3, r0
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <main+0xb0>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <main+0xb4>)
 800067c:	1d3c      	adds	r4, r7, #4
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fdd2 	bl	8004236 <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <main+0xb8>)
 8000696:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 256, &led, 1, NULL);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <main+0xbc>)
 80006a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a6:	4910      	ldr	r1, [pc, #64]	@ (80006e8 <main+0xc0>)
 80006a8:	4810      	ldr	r0, [pc, #64]	@ (80006ec <main+0xc4>)
 80006aa:	f004 fb49 	bl	8004d40 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 256, NULL, 2, NULL);
 80006ae:	2300      	movs	r3, #0
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2302      	movs	r3, #2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006bc:	490c      	ldr	r1, [pc, #48]	@ (80006f0 <main+0xc8>)
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <main+0xcc>)
 80006c0:	f004 fb3e 	bl	8004d40 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c4:	f003 fdb0 	bl	8004228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <main+0xa0>
 80006cc:	20000120 	.word	0x20000120
 80006d0:	20000124 	.word	0x20000124
 80006d4:	20000128 	.word	0x20000128
 80006d8:	2000012c 	.word	0x2000012c
 80006dc:	08006720 	.word	0x08006720
 80006e0:	2000011c 	.word	0x2000011c
 80006e4:	20000000 	.word	0x20000000
 80006e8:	080066fc 	.word	0x080066fc
 80006ec:	0800054d 	.word	0x0800054d
 80006f0:	08006708 	.word	0x08006708
 80006f4:	0800058d 	.word	0x0800058d

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2238      	movs	r2, #56	@ 0x38
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 feee 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fe1a 	bl	8001354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	2303      	movs	r3, #3
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000732:	2306      	movs	r3, #6
 8000734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000736:	2355      	movs	r3, #85	@ 0x55
 8000738:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	4618      	mov	r0, r3
 800074c:	f000 feb6 	bl	80014bc <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000756:	f000 f8df 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2303      	movs	r3, #3
 8000760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f9b4 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800077e:	f000 f8cb 	bl	8000918 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000792:	4a22      	ldr	r2, [pc, #136]	@ (800081c <MX_LPUART1_UART_Init+0x90>)
 8000794:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ce:	4812      	ldr	r0, [pc, #72]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f002 f8ea 	bl	80029a8 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f89d 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	480d      	ldr	r0, [pc, #52]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	f003 fc3e 	bl	8004062 <HAL_UARTEx_SetTxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007ec:	f000 f894 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	f003 fc73 	bl	80040de <HAL_UARTEx_SetRxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007fe:	f000 f88b 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000804:	f003 fbf4 	bl	8003ff0 <HAL_UARTEx_DisableFifoMode>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800080e:	f000 f883 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000088 	.word	0x20000088
 800081c:	40008000 	.word	0x40008000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a28      	ldr	r2, [pc, #160]	@ (80008dc <MX_GPIO_Init+0xbc>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <MX_GPIO_Init+0xbc>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a1c      	ldr	r2, [pc, #112]	@ (80008dc <MX_GPIO_Init+0xbc>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_GPIO_Init+0xbc>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f000 fd0f 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800088a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000890:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <MX_GPIO_Init+0xc0>)
 80008a2:	f000 fb7f 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008a6:	2320      	movs	r3, #32
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f000 fb70 	bl	8000fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	2028      	movs	r0, #40	@ 0x28
 80008ca:	f000 fa83 	bl	8000dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ce:	2028      	movs	r0, #40	@ 0x28
 80008d0:	f000 fa9a 	bl	8000e08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 fcc9 	bl	8004284 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x8>

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000906:	f000 f98f 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40012c00 	.word	0x40012c00

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_MspInit+0x50>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <HAL_MspInit+0x50>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_MspInit+0x50>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_MspInit+0x50>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <HAL_MspInit+0x50>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x50>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fa37 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000966:	f000 fd99 	bl	800149c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09a      	sub	sp, #104	@ 0x68
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	2244      	movs	r2, #68	@ 0x44
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f005 fda5 	bl	80064e8 <memset>
  if(huart->Instance==LPUART1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a23      	ldr	r2, [pc, #140]	@ (8000a30 <HAL_UART_MspInit+0xb8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d13e      	bne.n	8000a26 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009a8:	2320      	movs	r3, #32
 80009aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fae1 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ffaa 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_UART_MspInit+0xbc>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a04:	230c      	movs	r3, #12
 8000a06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f000 fac7 	bl	8000fa4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	205b      	movs	r0, #91	@ 0x5b
 8000a1c:	f000 f9da 	bl	8000dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a20:	205b      	movs	r0, #91	@ 0x5b
 8000a22:	f000 f9f1 	bl	8000e08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a26:	bf00      	nop
 8000a28:	3768      	adds	r7, #104	@ 0x68
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40008000 	.word	0x40008000
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <HAL_InitTick+0xc4>)
 8000a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <HAL_InitTick+0xc4>)
 8000a4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a52:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <HAL_InitTick+0xc4>)
 8000a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fa0e 	bl	8001e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a70:	f001 f9f6 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 8000a74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_InitTick+0xc8>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000a86:	4a20      	ldr	r2, [pc, #128]	@ (8000b08 <HAL_InitTick+0xd0>)
 8000a88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000a8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000aa4:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000aa6:	f001 fc59 	bl	800235c <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d11b      	bne.n	8000af0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ab8:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <HAL_InitTick+0xcc>)
 8000aba:	f001 fcb1 	bl	8002420 <HAL_TIM_Base_Start_IT>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d111      	bne.n	8000af0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000acc:	2019      	movs	r0, #25
 8000ace:	f000 f99b 	bl	8000e08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d808      	bhi.n	8000aea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2019      	movs	r0, #25
 8000ade:	f000 f979 	bl	8000dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_InitTick+0xd4>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e002      	b.n	8000af0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000af0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3730      	adds	r7, #48	@ 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	20000130 	.word	0x20000130
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	20000010 	.word	0x20000010

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b4e:	f001 fcd1 	bl	80024f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000130 	.word	0x20000130

08000b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000b60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b64:	f000 fbd2 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <LPUART1_IRQHandler+0x10>)
 8000b72:	f001 fffd 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000088 	.word	0x20000088

08000b80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba8:	f7ff ffea 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f005 fcef 	bl	80065b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd6:	f7ff fd27 	bl	8000628 <main>

08000bda <LoopForever>:

LoopForever:
    b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   r0, =_estack
 8000bdc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000be8:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 8000bec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bf0:	20001414 	.word	0x20001414

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>

08000bf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8dc 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff ff16 	bl	8000a38 <HAL_InitTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e001      	b.n	8000c1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c18:	f7ff fe84 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x1c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_IncTick+0x20>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a03      	ldr	r2, [pc, #12]	@ (8000c44 <HAL_IncTick+0x1c>)
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2000017c 	.word	0x2000017c
 8000c48:	20000014 	.word	0x20000014

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000017c 	.word	0x2000017c

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff63 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb3 	bl	8000d58 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff82 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff56 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d005      	beq.n	8000e48 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2204      	movs	r2, #4
 8000e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	e037      	b.n	8000eb8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 020e 	bic.w	r2, r2, #14
 8000e56:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e66:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e94:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00c      	beq.n	8000eb8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000eac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000eb6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d00d      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e047      	b.n	8000f9a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 020e 	bic.w	r2, r2, #14
 8000f18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f003 021f 	and.w	r2, r3, #31
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00c      	beq.n	8000f7a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
    }
  }
  return status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fb2:	e15a      	b.n	800126a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 814c 	beq.w	8001264 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d130      	bne.n	8001046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 0201 	and.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b03      	cmp	r3, #3
 8001050:	d017      	beq.n	8001082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	6939      	ldr	r1, [r7, #16]
 80010d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0203 	and.w	r2, r3, #3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80a6 	beq.w	8001264 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	4b5b      	ldr	r3, [pc, #364]	@ (8001288 <HAL_GPIO_Init+0x2e4>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111c:	4a5a      	ldr	r2, [pc, #360]	@ (8001288 <HAL_GPIO_Init+0x2e4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6613      	str	r3, [r2, #96]	@ 0x60
 8001124:	4b58      	ldr	r3, [pc, #352]	@ (8001288 <HAL_GPIO_Init+0x2e4>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001130:	4a56      	ldr	r2, [pc, #344]	@ (800128c <HAL_GPIO_Init+0x2e8>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800115a:	d01f      	beq.n	800119c <HAL_GPIO_Init+0x1f8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <HAL_GPIO_Init+0x2ec>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d019      	beq.n	8001198 <HAL_GPIO_Init+0x1f4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <HAL_GPIO_Init+0x2f0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d013      	beq.n	8001194 <HAL_GPIO_Init+0x1f0>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a4a      	ldr	r2, [pc, #296]	@ (8001298 <HAL_GPIO_Init+0x2f4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1ec>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a49      	ldr	r2, [pc, #292]	@ (800129c <HAL_GPIO_Init+0x2f8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1e8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a48      	ldr	r2, [pc, #288]	@ (80012a0 <HAL_GPIO_Init+0x2fc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1e4>
 8001184:	2305      	movs	r3, #5
 8001186:	e00a      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 8001188:	2306      	movs	r3, #6
 800118a:	e008      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 800118c:	2304      	movs	r3, #4
 800118e:	e006      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 8001190:	2303      	movs	r3, #3
 8001192:	e004      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 8001194:	2302      	movs	r3, #2
 8001196:	e002      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <HAL_GPIO_Init+0x1fa>
 800119c:	2300      	movs	r3, #0
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	f002 0203 	and.w	r2, r2, #3
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	4093      	lsls	r3, r2
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ae:	4937      	ldr	r1, [pc, #220]	@ (800128c <HAL_GPIO_Init+0x2e8>)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011bc:	4b39      	ldr	r3, [pc, #228]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e0:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e6:	4b2f      	ldr	r3, [pc, #188]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800120a:	4a26      	ldr	r2, [pc, #152]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125e:	4a11      	ldr	r2, [pc, #68]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	f47f ae9d 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	48001400 	.word	0x48001400
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4013      	ands	r3, r2
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43d9      	mvns	r1, r3
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	400b      	ands	r3, r1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f806 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d141      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001362:	4b4b      	ldr	r3, [pc, #300]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800136e:	d131      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001370:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001376:	4a46      	ldr	r2, [pc, #280]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800137c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001380:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001388:	4a41      	ldr	r2, [pc, #260]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800138e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001390:	4b40      	ldr	r3, [pc, #256]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2232      	movs	r2, #50	@ 0x32
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a6:	e002      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ba:	d102      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f2      	bne.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ce:	d158      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e057      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013da:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013e4:	e04d      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ec:	d141      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fa:	d131      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001414:	4a1e      	ldr	r2, [pc, #120]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2232      	movs	r2, #50	@ 0x32
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001432:	e002      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b01      	subs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001446:	d102      	bne.n	800144e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f2      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800145a:	d112      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e011      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001470:	e007      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001480:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40007000 	.word	0x40007000
 8001494:	2000000c 	.word	0x2000000c
 8001498:	431bde83 	.word	0x431bde83

0800149c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014aa:	6093      	str	r3, [r2, #8]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007000 	.word	0x40007000

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e2fe      	b.n	8001acc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d075      	beq.n	80015c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b97      	ldr	r3, [pc, #604]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e4:	4b94      	ldr	r3, [pc, #592]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x3e>
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d002      	beq.n	8001500 <HAL_RCC_OscConfig+0x44>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b8d      	ldr	r3, [pc, #564]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x108>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d157      	bne.n	80015c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2d9      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x74>
 8001522:	4b85      	ldr	r3, [pc, #532]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a84      	ldr	r2, [pc, #528]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b7f      	ldr	r3, [pc, #508]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7e      	ldr	r2, [pc, #504]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7b      	ldr	r2, [pc, #492]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001554:	4b78      	ldr	r3, [pc, #480]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a77      	ldr	r2, [pc, #476]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b75      	ldr	r3, [pc, #468]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a74      	ldr	r2, [pc, #464]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb6a 	bl	8000c4c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fb66 	bl	8000c4c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e29e      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xc0>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fb56 	bl	8000c4c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb52 	bl	8000c4c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e28a      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	4b60      	ldr	r3, [pc, #384]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0xe8>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d2:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0x136>
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d002      	beq.n	80015f8 <HAL_RCC_OscConfig+0x13c>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d11f      	bne.n	8001638 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x154>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e25d      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4946      	ldr	r1, [pc, #280]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001624:	4b45      	ldr	r3, [pc, #276]	@ (800173c <HAL_RCC_OscConfig+0x280>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fa05 	bl	8000a38 <HAL_InitTick>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d043      	beq.n	80016bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e249      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d023      	beq.n	8001688 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a3c      	ldr	r2, [pc, #240]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fafe 	bl	8000c4c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fafa 	bl	8000c4c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e232      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001666:	4b34      	ldr	r3, [pc, #208]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	492d      	ldr	r1, [pc, #180]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e01a      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001688:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2a      	ldr	r2, [pc, #168]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800168e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fada 	bl	8000c4c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fad6 	bl	8000c4c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e20e      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x1e0>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d041      	beq.n	800174e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01c      	beq.n	800170c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fab3 	bl	8000c4c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff faaf 	bl	8000c4c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1e7      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ef      	beq.n	80016ea <HAL_RCC_OscConfig+0x22e>
 800170a:	e020      	b.n	800174e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fa96 	bl	8000c4c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001722:	e00d      	b.n	8001740 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fa92 	bl	8000c4c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d906      	bls.n	8001740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1ca      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001740:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ea      	bne.n	8001724 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80a6 	beq.w	80018a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001760:	4b84      	ldr	r3, [pc, #528]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_OscConfig+0x2b4>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x2b6>
 8001770:	2300      	movs	r3, #0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	4a7e      	ldr	r2, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
 8001782:	4b7c      	ldr	r3, [pc, #496]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001792:	4b79      	ldr	r3, [pc, #484]	@ (8001978 <HAL_RCC_OscConfig+0x4bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179e:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_OscConfig+0x4bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <HAL_RCC_OscConfig+0x4bc>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fa4f 	bl	8000c4c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff fa4b 	bl	8000c4c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e183      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x4bc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d108      	bne.n	80017ea <HAL_RCC_OscConfig+0x32e>
 80017d8:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	4a65      	ldr	r2, [pc, #404]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e8:	e024      	b.n	8001834 <HAL_RCC_OscConfig+0x378>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d110      	bne.n	8001814 <HAL_RCC_OscConfig+0x358>
 80017f2:	4b60      	ldr	r3, [pc, #384]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001802:	4b5c      	ldr	r3, [pc, #368]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001808:	4a5a      	ldr	r2, [pc, #360]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x378>
 8001814:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181a:	4a56      	ldr	r2, [pc, #344]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001824:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d016      	beq.n	800186a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fa06 	bl	8000c4c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa02 	bl	8000c4c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e138      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ed      	beq.n	8001844 <HAL_RCC_OscConfig+0x388>
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff f9ef 	bl	8000c4c <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f9eb 	bl	8000c4c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e121      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001888:	4b3a      	ldr	r3, [pc, #232]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ed      	bne.n	8001872 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001896:	7ffb      	ldrb	r3, [r7, #31]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	4a34      	ldr	r2, [pc, #208]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03c      	beq.n	800192e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f9be 	bl	8000c4c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d4:	f7ff f9ba 	bl	8000c4c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0f2      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ef      	beq.n	80018d4 <HAL_RCC_OscConfig+0x418>
 80018f4:	e01b      	b.n	800192e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f9a1 	bl	8000c4c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800190e:	f7ff f99d 	bl	8000c4c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0d5      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80c9 	beq.w	8001aca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b0c      	cmp	r3, #12
 8001942:	f000 8083 	beq.w	8001a4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d15e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f977 	bl	8000c4c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	e00c      	b.n	800197c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f973 	bl	8000c4c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d905      	bls.n	800197c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0ab      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
 8001974:	40021000 	.word	0x40021000
 8001978:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	4b55      	ldr	r3, [pc, #340]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ec      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001988:	4b52      	ldr	r3, [pc, #328]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b52      	ldr	r3, [pc, #328]	@ (8001ad8 <HAL_RCC_OscConfig+0x61c>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6a11      	ldr	r1, [r2, #32]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001998:	3a01      	subs	r2, #1
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019a2:	0212      	lsls	r2, r2, #8
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019aa:	0852      	lsrs	r2, r2, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0552      	lsls	r2, r2, #21
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019b6:	0852      	lsrs	r2, r2, #1
 80019b8:	3a01      	subs	r2, #1
 80019ba:	0652      	lsls	r2, r2, #25
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019c2:	06d2      	lsls	r2, r2, #27
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4943      	ldr	r1, [pc, #268]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a40      	ldr	r2, [pc, #256]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f932 	bl	8000c4c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f92e 	bl	8000c4c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e066      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x530>
 8001a0a:	e05e      	b.n	8001aca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a30      	ldr	r2, [pc, #192]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f918 	bl	8000c4c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f914 	bl	8000c4c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04c      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	4924      	ldr	r1, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_RCC_OscConfig+0x620>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]
 8001a4a:	e03e      	b.n	8001aca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e039      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCC_OscConfig+0x618>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d12c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d123      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d113      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	019f800c 	.word	0x019f800c
 8001adc:	feeefffc 	.word	0xfeeefffc

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e11e      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b91      	ldr	r3, [pc, #580]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b8e      	ldr	r3, [pc, #568]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 020f 	bic.w	r2, r3, #15
 8001b0e:	498c      	ldr	r1, [pc, #560]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b8a      	ldr	r3, [pc, #552]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e106      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d073      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d129      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b81      	ldr	r3, [pc, #516]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0f4      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b4c:	f000 f9d0 	bl	8001ef0 <RCC_GetSysClockFreqFromPLLSource>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4a7c      	ldr	r2, [pc, #496]	@ (8001d48 <HAL_RCC_ClockConfig+0x268>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d93f      	bls.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d033      	beq.n	8001bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d12f      	bne.n	8001bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b7a:	4b72      	ldr	r3, [pc, #456]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b82:	4a70      	ldr	r2, [pc, #448]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e024      	b.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b98:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0c6      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba8:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0be      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bb8:	f000 f8ce 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4a61      	ldr	r2, [pc, #388]	@ (8001d48 <HAL_RCC_ClockConfig+0x268>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d909      	bls.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bce:	4a5d      	ldr	r2, [pc, #372]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b5a      	ldr	r3, [pc, #360]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4957      	ldr	r1, [pc, #348]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bec:	f7ff f82e 	bl	8000c4c <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f82a 	bl	8000c4c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e095      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b43      	ldr	r3, [pc, #268]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a42      	ldr	r2, [pc, #264]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c54:	4a3b      	ldr	r2, [pc, #236]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b39      	ldr	r3, [pc, #228]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4936      	ldr	r1, [pc, #216]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b80      	cmp	r3, #128	@ 0x80
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c76:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c82:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d21d      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c90:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 020f 	bic.w	r2, r3, #15
 8001c98:	4929      	ldr	r1, [pc, #164]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe ffd4 	bl	8000c4c <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7fe ffd0 	bl	8000c4c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e03b      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ed      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4917      	ldr	r1, [pc, #92]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	490f      	ldr	r1, [pc, #60]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0a:	f000 f825 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <HAL_RCC_ClockConfig+0x26c>)
 8001d1c:	5ccb      	ldrb	r3, [r1, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_RCC_ClockConfig+0x270>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x274>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fe82 	bl	8000a38 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	04c4b400 	.word	0x04c4b400
 8001d4c:	0800673c 	.word	0x0800673c
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000010 	.word	0x20000010

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e047      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d7c:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e03e      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d82:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d136      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3301      	adds	r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dac:	4a1a      	ldr	r2, [pc, #104]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db6:	68d2      	ldr	r2, [r2, #12]
 8001db8:	0a12      	lsrs	r2, r2, #8
 8001dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
      break;
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc6:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	0a12      	lsrs	r2, r2, #8
 8001dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0e5b      	lsrs	r3, r3, #25
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e001      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e00:	693b      	ldr	r3, [r7, #16]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	016e3600 	.word	0x016e3600

08001e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4904      	ldr	r1, [pc, #16]	@ (8001e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	0800674c 	.word	0x0800674c

08001e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e64:	f7ff ffda 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0adb      	lsrs	r3, r3, #11
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4904      	ldr	r1, [pc, #16]	@ (8001e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	0800674c 	.word	0x0800674c

08001e8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ece:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <HAL_RCC_GetClockConfig+0x60>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40022000 	.word	0x40022000

08001ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d10c      	bne.n	8001f2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1e:	68d2      	ldr	r2, [r2, #12]
 8001f20:	0a12      	lsrs	r2, r2, #8
 8001f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
    break;
 8001f2c:	e00c      	b.n	8001f48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	0a12      	lsrs	r2, r2, #8
 8001f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    break;
 8001f46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0e5b      	lsrs	r3, r3, #25
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f62:	687b      	ldr	r3, [r7, #4]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	016e3600 	.word	0x016e3600
 8001f78:	00f42400 	.word	0x00f42400

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8098 	beq.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	4a3f      	ldr	r2, [pc, #252]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a39      	ldr	r2, [pc, #228]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe fe3b 	bl	8000c4c <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd8:	e009      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7fe fe37 	bl	8000c4c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	74fb      	strb	r3, [r7, #19]
        break;
 8001fec:	e005      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fee:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ef      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d159      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01e      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d019      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800201c:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe fdf7 	bl	8000c4c <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e00b      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fdf3 	bl	8000c4c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d902      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	74fb      	strb	r3, [r7, #19]
            break;
 8002078:	e006      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ec      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4903      	ldr	r1, [pc, #12]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020a4:	e008      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	74bb      	strb	r3, [r7, #18]
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b8:	7c7b      	ldrb	r3, [r7, #17]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4ba6      	ldr	r3, [pc, #664]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	4aa5      	ldr	r2, [pc, #660]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020dc:	f023 0203 	bic.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	499c      	ldr	r1, [pc, #624]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f8:	4b97      	ldr	r3, [pc, #604]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f023 020c 	bic.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4994      	ldr	r1, [pc, #592]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211a:	4b8f      	ldr	r3, [pc, #572]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002120:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	498b      	ldr	r1, [pc, #556]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213c:	4b86      	ldr	r3, [pc, #536]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	4983      	ldr	r1, [pc, #524]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800215e:	4b7e      	ldr	r3, [pc, #504]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	497a      	ldr	r1, [pc, #488]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002180:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4972      	ldr	r1, [pc, #456]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4969      	ldr	r1, [pc, #420]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c4:	4b64      	ldr	r3, [pc, #400]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4961      	ldr	r1, [pc, #388]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	4958      	ldr	r1, [pc, #352]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002208:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	4950      	ldr	r1, [pc, #320]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002228:	4b4b      	ldr	r3, [pc, #300]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a4a      	ldr	r2, [pc, #296]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002232:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002240:	4b45      	ldr	r3, [pc, #276]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	4942      	ldr	r1, [pc, #264]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800225e:	d105      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002260:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a3c      	ldr	r2, [pc, #240]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002278:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4934      	ldr	r1, [pc, #208]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002296:	d105      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a2e      	ldr	r2, [pc, #184]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022be:	4926      	ldr	r1, [pc, #152]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ce:	d105      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a20      	ldr	r2, [pc, #128]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f6:	4918      	ldr	r1, [pc, #96]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	490a      	ldr	r1, [pc, #40]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800233e:	d105      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800234c:	7cbb      	ldrb	r3, [r7, #18]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e049      	b.n	8002402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f841 	bl	800240a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f000 fa22 	bl	80027e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e04a      	b.n	80024ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <HAL_TIM_Base_Start_IT+0xbc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002462:	d013      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d115      	bne.n	80024b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d015      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d011      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	e008      	b.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e000      	b.n	80024cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40013400 	.word	0x40013400
 80024ec:	40014000 	.word	0x40014000
 80024f0:	00010007 	.word	0x00010007

080024f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d020      	beq.n	8002558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0202 	mvn.w	r2, #2
 8002528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f931 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f923 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f934 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0204 	mvn.w	r2, #4
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f90b 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8fd 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f90e 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0208 	mvn.w	r2, #8
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2204      	movs	r2, #4
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8e5 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8d7 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8e8 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d020      	beq.n	800263c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0210 	mvn.w	r2, #16
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2208      	movs	r2, #8
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8bf 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8b1 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8c2 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0201 	mvn.w	r2, #1
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe f94a 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f951 	bl	8002930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f949 	bl	8002944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f87c 	bl	80027ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00c      	beq.n	80026fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0220 	mvn.w	r2, #32
 80026f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f911 	bl	800291c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f91d 	bl	8002958 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00c      	beq.n	8002742 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f915 	bl	800296c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800275e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f90d 	bl	8002980 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00c      	beq.n	800278a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f905 	bl	8002994 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a42      	ldr	r2, [pc, #264]	@ (8002900 <TIM_Base_SetConfig+0x11c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00f      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002802:	d00b      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <TIM_Base_SetConfig+0x120>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3e      	ldr	r2, [pc, #248]	@ (8002908 <TIM_Base_SetConfig+0x124>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <TIM_Base_SetConfig+0x38>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3d      	ldr	r2, [pc, #244]	@ (800290c <TIM_Base_SetConfig+0x128>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a33      	ldr	r2, [pc, #204]	@ (8002900 <TIM_Base_SetConfig+0x11c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01b      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283c:	d017      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <TIM_Base_SetConfig+0x120>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2f      	ldr	r2, [pc, #188]	@ (8002908 <TIM_Base_SetConfig+0x124>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00f      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2e      	ldr	r2, [pc, #184]	@ (800290c <TIM_Base_SetConfig+0x128>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00b      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <TIM_Base_SetConfig+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <TIM_Base_SetConfig+0x130>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x8a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2b      	ldr	r2, [pc, #172]	@ (8002918 <TIM_Base_SetConfig+0x134>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <TIM_Base_SetConfig+0x11c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00f      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a17      	ldr	r2, [pc, #92]	@ (800290c <TIM_Base_SetConfig+0x128>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00b      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <TIM_Base_SetConfig+0x12c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a15      	ldr	r2, [pc, #84]	@ (8002914 <TIM_Base_SetConfig+0x130>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0xe8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <TIM_Base_SetConfig+0x134>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d103      	bne.n	80028d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
  }
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40013400 	.word	0x40013400
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800

0800291c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e042      	b.n	8002a40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fd ffd3 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2224      	movs	r2, #36	@ 0x24
 80029d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fee0 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fc11 	bl	8003220 <UART_SetConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01b      	b.n	8002a40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 ff5f 	bl	80038fc <UART_CheckIdleState>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b091      	sub	sp, #68	@ 0x44
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d178      	bne.n	8002b52 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Transmit_IT+0x24>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e071      	b.n	8002b54 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	@ 0x21
 8002a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aa4:	d12a      	bne.n	8002afc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aae:	d107      	bne.n	8002ac0 <HAL_UART_Transmit_IT+0x78>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a29      	ldr	r2, [pc, #164]	@ (8002b60 <HAL_UART_Transmit_IT+0x118>)
 8002abc:	679a      	str	r2, [r3, #120]	@ 0x78
 8002abe:	e002      	b.n	8002ac6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <HAL_UART_Transmit_IT+0x11c>)
 8002ac4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3308      	adds	r3, #8
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002adc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ae6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002aec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e5      	bne.n	8002ac6 <HAL_UART_Transmit_IT+0x7e>
 8002afa:	e028      	b.n	8002b4e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b04:	d107      	bne.n	8002b16 <HAL_UART_Transmit_IT+0xce>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <HAL_UART_Transmit_IT+0x120>)
 8002b12:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b14:	e002      	b.n	8002b1c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <HAL_UART_Transmit_IT+0x124>)
 8002b1a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e6      	bne.n	8002b1c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3744      	adds	r7, #68	@ 0x44
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	08003e75 	.word	0x08003e75
 8002b64:	08003d95 	.word	0x08003d95
 8002b68:	08003cd3 	.word	0x08003cd3
 8002b6c:	08003c1b 	.word	0x08003c1b

08002b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ba      	sub	sp, #232	@ 0xe8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002b9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11b      	bne.n	8002be4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8300 	beq.w	80031da <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
      }
      return;
 8002be2:	e2fa      	b.n	80031da <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8123 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e28 <HAL_UART_IRQHandler+0x2b8>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002bfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <HAL_UART_IRQHandler+0x2bc>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8116 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d011      	beq.n	8002c38 <HAL_UART_IRQHandler+0xc8>
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d011      	beq.n	8002c68 <HAL_UART_IRQHandler+0xf8>
 8002c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2202      	movs	r2, #2
 8002c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d011      	beq.n	8002c98 <HAL_UART_IRQHandler+0x128>
 8002c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2204      	movs	r2, #4
 8002c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	f043 0202 	orr.w	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <HAL_UART_IRQHandler+0x2b8>)
 8002cb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f043 0208 	orr.w	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_UART_IRQHandler+0x196>
 8002ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8266 	beq.w	80031de <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d013      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d005      	beq.n	8002d6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d054      	beq.n	8002e14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fedd 	bl	8003b2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b40      	cmp	r3, #64	@ 0x40
 8002d7c:	d146      	bne.n	8002e0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3308      	adds	r3, #8
 8002d84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3308      	adds	r3, #8
 8002da6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002daa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1d9      	bne.n	8002d7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dda:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <HAL_UART_IRQHandler+0x2c0>)
 8002ddc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe f876 	bl	8000ed6 <HAL_DMA_Abort_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d019      	beq.n	8002e24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e02:	e00f      	b.n	8002e24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f9f5 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0a:	e00b      	b.n	8002e24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f9f1 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e12:	e007      	b.n	8002e24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f9ed 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002e22:	e1dc      	b.n	80031de <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	bf00      	nop
    return;
 8002e26:	e1da      	b.n	80031de <HAL_UART_IRQHandler+0x66e>
 8002e28:	10000001 	.word	0x10000001
 8002e2c:	04000120 	.word	0x04000120
 8002e30:	08003bf7 	.word	0x08003bf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 8170 	bne.w	800311e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8169 	beq.w	800311e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8162 	beq.w	800311e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2210      	movs	r2, #16
 8002e60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b40      	cmp	r3, #64	@ 0x40
 8002e6e:	f040 80d8 	bne.w	8003022 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80af 	beq.w	8002fe8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f080 80a7 	bcs.w	8002fe8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8087 	bne.w	8002fc6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ee2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ee6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1da      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3308      	adds	r3, #8
 8002f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e1      	bne.n	8002f02 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3308      	adds	r3, #8
 8002f44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f94:	f023 0310 	bic.w	r3, r3, #16
 8002f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e4      	bne.n	8002f84 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd ff2f 	bl	8000e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f911 	bl	8003208 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002fe6:	e0fc      	b.n	80031e2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	f040 80f5 	bne.w	80031e2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	f040 80eb 	bne.w	80031e2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8f4 	bl	8003208 <HAL_UARTEx_RxEventCallback>
      return;
 8003020:	e0df      	b.n	80031e2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800302e:	b29b      	uxth	r3, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80d1 	beq.w	80031e6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80cc 	beq.w	80031e6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003070:	647b      	str	r3, [r7, #68]	@ 0x44
 8003072:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800307e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e4      	bne.n	800304e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	623b      	str	r3, [r7, #32]
   return(result);
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e1      	bne.n	8003084 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0310 	bic.w	r3, r3, #16
 80030e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	69b9      	ldr	r1, [r7, #24]
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	617b      	str	r3, [r7, #20]
   return(result);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e4      	bne.n	80030d4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f876 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800311c:	e063      	b.n	80031e6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <HAL_UART_IRQHandler+0x5d8>
 800312a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800313e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 ff37 	bl	8003fb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003146:	e051      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d014      	beq.n	800317e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03a      	beq.n	80031ea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    }
    return;
 800317c:	e035      	b.n	80031ea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_UART_IRQHandler+0x62e>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fee1 	bl	8003f5e <UART_EndTransmit_IT>
    return;
 800319c:	e026      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_UART_IRQHandler+0x64e>
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 ff10 	bl	8003fdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031bc:	e016      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_UART_IRQHandler+0x67c>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da0c      	bge.n	80031ec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fef8 	bl	8003fc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031d8:	e008      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
      return;
 80031da:	bf00      	nop
 80031dc:	e006      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
    return;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
      return;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
      return;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <HAL_UART_IRQHandler+0x67c>
    return;
 80031ea:	bf00      	nop
  }
}
 80031ec:	37e8      	adds	r7, #232	@ 0xe8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b08c      	sub	sp, #48	@ 0x30
 8003226:	af00      	add	r7, sp, #0
 8003228:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4bab      	ldr	r3, [pc, #684]	@ (80034fc <UART_SetConfig+0x2dc>)
 8003250:	4013      	ands	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003258:	430b      	orrs	r3, r1
 800325a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4aa0      	ldr	r2, [pc, #640]	@ (8003500 <UART_SetConfig+0x2e0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003288:	4313      	orrs	r3, r2
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003296:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	f023 010f 	bic.w	r1, r3, #15
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a91      	ldr	r2, [pc, #580]	@ (8003504 <UART_SetConfig+0x2e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d125      	bne.n	8003310 <UART_SetConfig+0xf0>
 80032c4:	4b90      	ldr	r3, [pc, #576]	@ (8003508 <UART_SetConfig+0x2e8>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d81a      	bhi.n	8003308 <UART_SetConfig+0xe8>
 80032d2:	a201      	add	r2, pc, #4	@ (adr r2, 80032d8 <UART_SetConfig+0xb8>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003301 	.word	0x08003301
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e0d6      	b.n	800349e <UART_SetConfig+0x27e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	e0d2      	b.n	800349e <UART_SetConfig+0x27e>
 80032f8:	2304      	movs	r3, #4
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fe:	e0ce      	b.n	800349e <UART_SetConfig+0x27e>
 8003300:	2308      	movs	r3, #8
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003306:	e0ca      	b.n	800349e <UART_SetConfig+0x27e>
 8003308:	2310      	movs	r3, #16
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800330e:	e0c6      	b.n	800349e <UART_SetConfig+0x27e>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7d      	ldr	r2, [pc, #500]	@ (800350c <UART_SetConfig+0x2ec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d138      	bne.n	800338c <UART_SetConfig+0x16c>
 800331a:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <UART_SetConfig+0x2e8>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d82d      	bhi.n	8003384 <UART_SetConfig+0x164>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0x110>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003365 	.word	0x08003365
 8003334:	08003385 	.word	0x08003385
 8003338:	08003385 	.word	0x08003385
 800333c:	08003385 	.word	0x08003385
 8003340:	08003375 	.word	0x08003375
 8003344:	08003385 	.word	0x08003385
 8003348:	08003385 	.word	0x08003385
 800334c:	08003385 	.word	0x08003385
 8003350:	0800336d 	.word	0x0800336d
 8003354:	08003385 	.word	0x08003385
 8003358:	08003385 	.word	0x08003385
 800335c:	08003385 	.word	0x08003385
 8003360:	0800337d 	.word	0x0800337d
 8003364:	2300      	movs	r3, #0
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336a:	e098      	b.n	800349e <UART_SetConfig+0x27e>
 800336c:	2302      	movs	r3, #2
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003372:	e094      	b.n	800349e <UART_SetConfig+0x27e>
 8003374:	2304      	movs	r3, #4
 8003376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337a:	e090      	b.n	800349e <UART_SetConfig+0x27e>
 800337c:	2308      	movs	r3, #8
 800337e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003382:	e08c      	b.n	800349e <UART_SetConfig+0x27e>
 8003384:	2310      	movs	r3, #16
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338a:	e088      	b.n	800349e <UART_SetConfig+0x27e>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a5f      	ldr	r2, [pc, #380]	@ (8003510 <UART_SetConfig+0x2f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d125      	bne.n	80033e2 <UART_SetConfig+0x1c2>
 8003396:	4b5c      	ldr	r3, [pc, #368]	@ (8003508 <UART_SetConfig+0x2e8>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033a0:	2b30      	cmp	r3, #48	@ 0x30
 80033a2:	d016      	beq.n	80033d2 <UART_SetConfig+0x1b2>
 80033a4:	2b30      	cmp	r3, #48	@ 0x30
 80033a6:	d818      	bhi.n	80033da <UART_SetConfig+0x1ba>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d00a      	beq.n	80033c2 <UART_SetConfig+0x1a2>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d814      	bhi.n	80033da <UART_SetConfig+0x1ba>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <UART_SetConfig+0x19a>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d008      	beq.n	80033ca <UART_SetConfig+0x1aa>
 80033b8:	e00f      	b.n	80033da <UART_SetConfig+0x1ba>
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c0:	e06d      	b.n	800349e <UART_SetConfig+0x27e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c8:	e069      	b.n	800349e <UART_SetConfig+0x27e>
 80033ca:	2304      	movs	r3, #4
 80033cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d0:	e065      	b.n	800349e <UART_SetConfig+0x27e>
 80033d2:	2308      	movs	r3, #8
 80033d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d8:	e061      	b.n	800349e <UART_SetConfig+0x27e>
 80033da:	2310      	movs	r3, #16
 80033dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e0:	e05d      	b.n	800349e <UART_SetConfig+0x27e>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4b      	ldr	r2, [pc, #300]	@ (8003514 <UART_SetConfig+0x2f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d125      	bne.n	8003438 <UART_SetConfig+0x218>
 80033ec:	4b46      	ldr	r3, [pc, #280]	@ (8003508 <UART_SetConfig+0x2e8>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f8:	d016      	beq.n	8003428 <UART_SetConfig+0x208>
 80033fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80033fc:	d818      	bhi.n	8003430 <UART_SetConfig+0x210>
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d00a      	beq.n	8003418 <UART_SetConfig+0x1f8>
 8003402:	2b80      	cmp	r3, #128	@ 0x80
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x210>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <UART_SetConfig+0x1f0>
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d008      	beq.n	8003420 <UART_SetConfig+0x200>
 800340e:	e00f      	b.n	8003430 <UART_SetConfig+0x210>
 8003410:	2300      	movs	r3, #0
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003416:	e042      	b.n	800349e <UART_SetConfig+0x27e>
 8003418:	2302      	movs	r3, #2
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341e:	e03e      	b.n	800349e <UART_SetConfig+0x27e>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003426:	e03a      	b.n	800349e <UART_SetConfig+0x27e>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342e:	e036      	b.n	800349e <UART_SetConfig+0x27e>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003436:	e032      	b.n	800349e <UART_SetConfig+0x27e>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <UART_SetConfig+0x2e0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d12a      	bne.n	8003498 <UART_SetConfig+0x278>
 8003442:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <UART_SetConfig+0x2e8>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800344c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003450:	d01a      	beq.n	8003488 <UART_SetConfig+0x268>
 8003452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003456:	d81b      	bhi.n	8003490 <UART_SetConfig+0x270>
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800345c:	d00c      	beq.n	8003478 <UART_SetConfig+0x258>
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003462:	d815      	bhi.n	8003490 <UART_SetConfig+0x270>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <UART_SetConfig+0x250>
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	d008      	beq.n	8003480 <UART_SetConfig+0x260>
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x270>
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003476:	e012      	b.n	800349e <UART_SetConfig+0x27e>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347e:	e00e      	b.n	800349e <UART_SetConfig+0x27e>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003486:	e00a      	b.n	800349e <UART_SetConfig+0x27e>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348e:	e006      	b.n	800349e <UART_SetConfig+0x27e>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003496:	e002      	b.n	800349e <UART_SetConfig+0x27e>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <UART_SetConfig+0x2e0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f040 80a8 	bne.w	80035fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d834      	bhi.n	800351c <UART_SetConfig+0x2fc>
 80034b2:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <UART_SetConfig+0x298>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034dd 	.word	0x080034dd
 80034bc:	0800351d 	.word	0x0800351d
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	080034eb 	.word	0x080034eb
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800351d 	.word	0x0800351d
 80034d4:	0800351d 	.word	0x0800351d
 80034d8:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7fe fcaa 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 80034e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e2:	e021      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <UART_SetConfig+0x2f8>)
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034e8:	e01e      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7fe fc35 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034f0:	e01a      	b.n	8003528 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034f8:	e016      	b.n	8003528 <UART_SetConfig+0x308>
 80034fa:	bf00      	nop
 80034fc:	cfff69f3 	.word	0xcfff69f3
 8003500:	40008000 	.word	0x40008000
 8003504:	40013800 	.word	0x40013800
 8003508:	40021000 	.word	0x40021000
 800350c:	40004400 	.word	0x40004400
 8003510:	40004800 	.word	0x40004800
 8003514:	40004c00 	.word	0x40004c00
 8003518:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003526:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 812a 	beq.w	8003784 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	4a9e      	ldr	r2, [pc, #632]	@ (80037b0 <UART_SetConfig+0x590>)
 8003536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353a:	461a      	mov	r2, r3
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003542:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d305      	bcc.n	8003560 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d903      	bls.n	8003568 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003566:	e10d      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2200      	movs	r2, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	60fa      	str	r2, [r7, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	4a8e      	ldr	r2, [pc, #568]	@ (80037b0 <UART_SetConfig+0x590>)
 8003576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357a:	b29b      	uxth	r3, r3
 800357c:	2200      	movs	r2, #0
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800358a:	f7fc fe49 	bl	8000220 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	020b      	lsls	r3, r1, #8
 80035a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035a4:	0202      	lsls	r2, r0, #8
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	6849      	ldr	r1, [r1, #4]
 80035aa:	0849      	lsrs	r1, r1, #1
 80035ac:	2000      	movs	r0, #0
 80035ae:	460c      	mov	r4, r1
 80035b0:	4605      	mov	r5, r0
 80035b2:	eb12 0804 	adds.w	r8, r2, r4
 80035b6:	eb43 0905 	adc.w	r9, r3, r5
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	469a      	mov	sl, r3
 80035c2:	4693      	mov	fp, r2
 80035c4:	4652      	mov	r2, sl
 80035c6:	465b      	mov	r3, fp
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	f7fc fe28 	bl	8000220 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035de:	d308      	bcc.n	80035f2 <UART_SetConfig+0x3d2>
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e6:	d204      	bcs.n	80035f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e0c8      	b.n	8003784 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035f8:	e0c4      	b.n	8003784 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003602:	d167      	bne.n	80036d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003608:	2b08      	cmp	r3, #8
 800360a:	d828      	bhi.n	800365e <UART_SetConfig+0x43e>
 800360c:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <UART_SetConfig+0x3f4>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003639 	.word	0x08003639
 8003618:	08003641 	.word	0x08003641
 800361c:	08003649 	.word	0x08003649
 8003620:	0800365f 	.word	0x0800365f
 8003624:	0800364f 	.word	0x0800364f
 8003628:	0800365f 	.word	0x0800365f
 800362c:	0800365f 	.word	0x0800365f
 8003630:	0800365f 	.word	0x0800365f
 8003634:	08003657 	.word	0x08003657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fbfc 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800363e:	e014      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003640:	f7fe fc0e 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003646:	e010      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003648:	4b5a      	ldr	r3, [pc, #360]	@ (80037b4 <UART_SetConfig+0x594>)
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800364c:	e00d      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364e:	f7fe fb83 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003654:	e009      	b.n	800366a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800365c:	e005      	b.n	800366a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8089 	beq.w	8003784 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	4a4e      	ldr	r2, [pc, #312]	@ (80037b0 <UART_SetConfig+0x590>)
 8003678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800367c:	461a      	mov	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	fbb3 f3f2 	udiv	r3, r3, r2
 8003684:	005a      	lsls	r2, r3, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	441a      	add	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d916      	bls.n	80036cc <UART_SetConfig+0x4ac>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a4:	d212      	bcs.n	80036cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	8bfb      	ldrh	r3, [r7, #30]
 80036be:	4313      	orrs	r3, r2
 80036c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	8bfa      	ldrh	r2, [r7, #30]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e05b      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036d2:	e057      	b.n	8003784 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d828      	bhi.n	800372e <UART_SetConfig+0x50e>
 80036dc:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x4c4>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003719 	.word	0x08003719
 80036f0:	0800372f 	.word	0x0800372f
 80036f4:	0800371f 	.word	0x0800371f
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
 8003704:	08003727 	.word	0x08003727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7fe fb94 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800370e:	e014      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7fe fba6 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 8003714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003716:	e010      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <UART_SetConfig+0x594>)
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800371c:	e00d      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7fe fb1b 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003722:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003724:	e009      	b.n	800373a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800372c:	e005      	b.n	800373a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003738:	bf00      	nop
    }

    if (pclk != 0U)
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d021      	beq.n	8003784 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <UART_SetConfig+0x590>)
 8003746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800374a:	461a      	mov	r2, r3
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	441a      	add	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	d909      	bls.n	800377e <UART_SetConfig+0x55e>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d205      	bcs.n	800377e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	b29a      	uxth	r2, r3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e002      	b.n	8003784 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2201      	movs	r2, #1
 8003788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2201      	movs	r2, #1
 8003790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3730      	adds	r7, #48	@ 0x30
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	08006754 	.word	0x08006754
 80037b4:	00f42400 	.word	0x00f42400

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01a      	beq.n	80038ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b6:	d10a      	bne.n	80038ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b098      	sub	sp, #96	@ 0x60
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800390c:	f7fd f99e 	bl	8000c4c <HAL_GetTick>
 8003910:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d12f      	bne.n	8003980 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003920:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f88e 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d022      	beq.n	8003980 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800394e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003958:	647b      	str	r3, [r7, #68]	@ 0x44
 800395a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800395e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e063      	b.n	8003a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d149      	bne.n	8003a22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f857 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03c      	beq.n	8003a22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	623b      	str	r3, [r7, #32]
   return(result);
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e6      	bne.n	80039a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039fa:	61fa      	str	r2, [r7, #28]
 80039fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	617b      	str	r3, [r7, #20]
   return(result);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e5      	bne.n	80039da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e012      	b.n	8003a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3758      	adds	r7, #88	@ 0x58
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a60:	e04f      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d04b      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fd f8ef 	bl	8000c4c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e04e      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d037      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d034      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d031      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d110      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f838 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2208      	movs	r2, #8
 8003abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e029      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	d111      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f81e 	bl	8003b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e00f      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d0a0      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b095      	sub	sp, #84	@ 0x54
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d118      	bne.n	8003bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6979      	ldr	r1, [r7, #20]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	@ 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff faf1 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b08f      	sub	sp, #60	@ 0x3c
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	2b21      	cmp	r3, #33	@ 0x21
 8003c2a:	d14c      	bne.n	8003cc6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d132      	bne.n	8003c9e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	613b      	str	r3, [r7, #16]
   return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c9c:	e013      	b.n	8003cc6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003cc6:	bf00      	nop
 8003cc8:	373c      	adds	r7, #60	@ 0x3c
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b091      	sub	sp, #68	@ 0x44
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce0:	2b21      	cmp	r3, #33	@ 0x21
 8003ce2:	d151      	bne.n	8003d88 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d132      	bne.n	8003d56 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e6      	bne.n	8003cf0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d54:	e018      	b.n	8003d88 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003d88:	bf00      	nop
 8003d8a:	3744      	adds	r7, #68	@ 0x44
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b091      	sub	sp, #68	@ 0x44
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	2b21      	cmp	r3, #33	@ 0x21
 8003da4:	d160      	bne.n	8003e68 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003dac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003dae:	e057      	b.n	8003e60 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d133      	bne.n	8003e24 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	623b      	str	r3, [r7, #32]
   return(result);
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ddc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e6      	bne.n	8003df0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003e22:	e021      	b.n	8003e68 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003e60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1a4      	bne.n	8003db0 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003e66:	e7ff      	b.n	8003e68 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003e68:	bf00      	nop
 8003e6a:	3744      	adds	r7, #68	@ 0x44
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b091      	sub	sp, #68	@ 0x44
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	2b21      	cmp	r3, #33	@ 0x21
 8003e84:	d165      	bne.n	8003f52 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003e8e:	e05c      	b.n	8003f4a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d133      	bne.n	8003f04 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6979      	ldr	r1, [r7, #20]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	613b      	str	r3, [r7, #16]
   return(result);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f02:	e026      	b.n	8003f52 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f46:	3b01      	subs	r3, #1
 8003f48:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f4a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d19f      	bne.n	8003e90 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003f50:	e7ff      	b.n	8003f52 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003f52:	bf00      	nop
 8003f54:	3744      	adds	r7, #68	@ 0x44
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6979      	ldr	r1, [r7, #20]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	613b      	str	r3, [r7, #16]
   return(result);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e6      	bne.n	8003f66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc fb1c 	bl	80005e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fac:	bf00      	nop
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UARTEx_DisableFifoMode+0x16>
 8004002:	2302      	movs	r3, #2
 8004004:	e027      	b.n	8004056 <HAL_UARTEx_DisableFifoMode+0x66>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	@ 0x24
 8004012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004034:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004076:	2302      	movs	r3, #2
 8004078:	e02d      	b.n	80040d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	@ 0x24
 8004086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f850 	bl	800415c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e02d      	b.n	8004152 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2224      	movs	r2, #36	@ 0x24
 8004102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f812 	bl	800415c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004168:	2b00      	cmp	r3, #0
 800416a:	d108      	bne.n	800417e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800417c:	e031      	b.n	80041e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800417e:	2308      	movs	r3, #8
 8004180:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004182:	2308      	movs	r3, #8
 8004184:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	0e5b      	lsrs	r3, r3, #25
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	0f5b      	lsrs	r3, r3, #29
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041a6:	7bbb      	ldrb	r3, [r7, #14]
 80041a8:	7b3a      	ldrb	r2, [r7, #12]
 80041aa:	4911      	ldr	r1, [pc, #68]	@ (80041f0 <UARTEx_SetNbDataToProcess+0x94>)
 80041ac:	5c8a      	ldrb	r2, [r1, r2]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041b2:	7b3a      	ldrb	r2, [r7, #12]
 80041b4:	490f      	ldr	r1, [pc, #60]	@ (80041f4 <UARTEx_SetNbDataToProcess+0x98>)
 80041b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	7b7a      	ldrb	r2, [r7, #13]
 80041c8:	4909      	ldr	r1, [pc, #36]	@ (80041f0 <UARTEx_SetNbDataToProcess+0x94>)
 80041ca:	5c8a      	ldrb	r2, [r1, r2]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041d0:	7b7a      	ldrb	r2, [r7, #13]
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <UARTEx_SetNbDataToProcess+0x98>)
 80041d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	0800676c 	.word	0x0800676c
 80041f4:	08006774 	.word	0x08006774

080041f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420a:	2b84      	cmp	r3, #132	@ 0x84
 800420c:	d005      	beq.n	800421a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800420e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	3303      	adds	r3, #3
 8004218:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800422c:	f000 ff0a 	bl	8005044 <vTaskStartScheduler>
  
  return osOK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	bd80      	pop	{r7, pc}

08004236 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004238:	b087      	sub	sp, #28
 800423a:	af02      	add	r7, sp, #8
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685c      	ldr	r4, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800424c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ffcf 	bl	80041f8 <makeFreeRtosPriority>
 800425a:	4602      	mov	r2, r0
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9200      	str	r2, [sp, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4632      	mov	r2, r6
 8004268:	4629      	mov	r1, r5
 800426a:	4620      	mov	r0, r4
 800426c:	f000 fd68 	bl	8004d40 <xTaskCreate>
 8004270:	4603      	mov	r3, r0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d001      	beq.n	800427a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004284 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <osDelay+0x16>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	e000      	b.n	800429c <osDelay+0x18>
 800429a:	2301      	movs	r3, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe9b 	bl	8004fd8 <vTaskDelay>
  
  return osOK;
 80042a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 0208 	add.w	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0208 	add.w	r2, r3, #8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f103 0208 	add.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d103      	bne.n	800436e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e00c      	b.n	8004388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3308      	adds	r3, #8
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e002      	b.n	800437c <vListInsert+0x2e>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d2f6      	bcs.n	8004376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6892      	ldr	r2, [r2, #8]
 80043d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6852      	ldr	r2, [r2, #4]
 80043e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d103      	bne.n	80043f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004440:	f001 fd42 	bl	8005ec8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	441a      	add	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004470:	3b01      	subs	r3, #1
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	22ff      	movs	r2, #255	@ 0xff
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	22ff      	movs	r2, #255	@ 0xff
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d114      	bne.n	80044c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01a      	beq.n	80044d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3310      	adds	r3, #16
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f810 	bl	80054c8 <xTaskRemoveFromEventList>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d012      	beq.n	80044d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <xQueueGenericReset+0xd0>)
 80044b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	e009      	b.n	80044d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3310      	adds	r3, #16
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fef1 	bl	80042ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3324      	adds	r3, #36	@ 0x24
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff feec 	bl	80042ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044d4:	f001 fd2a 	bl	8005f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000ed04 	.word	0xe000ed04

080044e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	@ 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10b      	bne.n	8004514 <xQueueGenericCreate+0x2c>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3348      	adds	r3, #72	@ 0x48
 8004522:	4618      	mov	r0, r3
 8004524:	f001 fdf2 	bl	800610c <pvPortMalloc>
 8004528:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3348      	adds	r3, #72	@ 0x48
 8004538:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f805 	bl	8004556 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800454c:	69bb      	ldr	r3, [r7, #24]
	}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e002      	b.n	8004578 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004584:	2101      	movs	r1, #1
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f7ff ff44 	bl	8004414 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045b4:	2300      	movs	r3, #0
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f81c 	bl	80045f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	461a      	mov	r2, r3
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f7ff ff81 	bl	80044e8 <xQueueGenericCreate>
 80045e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ffd3 	bl	8004594 <prvInitialiseMutex>

		return xNewQueue;
 80045ee:	68fb      	ldr	r3, [r7, #12]
	}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08e      	sub	sp, #56	@ 0x38
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004606:	2300      	movs	r3, #0
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <xQueueGenericSend+0x34>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <xQueueGenericSend+0x42>
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <xQueueGenericSend+0x46>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <xQueueGenericSend+0x48>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <xQueueGenericSend+0x64>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x72>
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <xQueueGenericSend+0x76>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xQueueGenericSend+0x78>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <xQueueGenericSend+0x94>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800468c:	f001 f8c2 	bl	8005814 <xTaskGetSchedulerState>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <xQueueGenericSend+0xa4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <xQueueGenericSend+0xa8>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <xQueueGenericSend+0xaa>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <xQueueGenericSend+0xc6>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	61fb      	str	r3, [r7, #28]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046be:	f001 fc03 	bl	8005ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <xQueueGenericSend+0xdc>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d129      	bne.n	8004728 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046da:	f000 fa47 	bl	8004b6c <prvCopyDataToQueue>
 80046de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d010      	beq.n	800470a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ea:	3324      	adds	r3, #36	@ 0x24
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 feeb 	bl	80054c8 <xTaskRemoveFromEventList>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f8:	4b3f      	ldr	r3, [pc, #252]	@ (80047f8 <xQueueGenericSend+0x200>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	e00a      	b.n	8004720 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004710:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <xQueueGenericSend+0x200>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004720:	f001 fc04 	bl	8005f2c <vPortExitCritical>
				return pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	e063      	b.n	80047f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800472e:	f001 fbfd 	bl	8005f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004732:	2300      	movs	r3, #0
 8004734:	e05c      	b.n	80047f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	4618      	mov	r0, r3
 8004742:	f000 ff25 	bl	8005590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800474a:	f001 fbef 	bl	8005f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474e:	f000 fccb 	bl	80050e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004752:	f001 fbb9 	bl	8005ec8 <vPortEnterCritical>
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800475c:	b25b      	sxtb	r3, r3
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d103      	bne.n	800476c <xQueueGenericSend+0x174>
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004772:	b25b      	sxtb	r3, r3
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d103      	bne.n	8004782 <xQueueGenericSend+0x18a>
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004782:	f001 fbd3 	bl	8005f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004786:	1d3a      	adds	r2, r7, #4
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ff14 	bl	80055bc <xTaskCheckForTimeOut>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d124      	bne.n	80047e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800479a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800479c:	f000 fab8 	bl	8004d10 <prvIsQueueFull>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d018      	beq.n	80047d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	3310      	adds	r3, #16
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fe64 	bl	800547c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047b6:	f000 fa43 	bl	8004c40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047ba:	f000 fca3 	bl	8005104 <xTaskResumeAll>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f af7c 	bne.w	80046be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047c6:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <xQueueGenericSend+0x200>)
 80047c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	e772      	b.n	80046be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047da:	f000 fa31 	bl	8004c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047de:	f000 fc91 	bl	8005104 <xTaskResumeAll>
 80047e2:	e76c      	b.n	80046be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047e6:	f000 fa2b 	bl	8004c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ea:	f000 fc8b 	bl	8005104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3738      	adds	r7, #56	@ 0x38
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	@ 0x38
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	623b      	str	r3, [r7, #32]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61fb      	str	r3, [r7, #28]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueGiveFromISR+0x5c>
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueGiveFromISR+0x60>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueGiveFromISR+0x62>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61bb      	str	r3, [r7, #24]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800487a:	f001 fc05 	bl	8006088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800487e:	f3ef 8211 	mrs	r2, BASEPRI
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	617a      	str	r2, [r7, #20]
 8004894:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004896:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d22b      	bcs.n	8004902 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d112      	bne.n	80048ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	3324      	adds	r3, #36	@ 0x24
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fdf8 	bl	80054c8 <xTaskRemoveFromEventList>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00e      	beq.n	80048fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e007      	b.n	80048fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048f0:	3301      	adds	r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	b25a      	sxtb	r2, r3
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004900:	e001      	b.n	8004906 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004902:	2300      	movs	r3, #0
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004910:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004914:	4618      	mov	r0, r3
 8004916:	3738      	adds	r7, #56	@ 0x38
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	623b      	str	r3, [r7, #32]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	61fb      	str	r3, [r7, #28]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004970:	f000 ff50 	bl	8005814 <xTaskGetSchedulerState>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <xQueueSemaphoreTake+0x64>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <xQueueSemaphoreTake+0x68>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <xQueueSemaphoreTake+0x6a>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61bb      	str	r3, [r7, #24]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049a2:	f001 fa91 	bl	8005ec8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d024      	beq.n	80049fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049c2:	f001 f8d3 	bl	8005b6c <pvTaskIncrementMutexHeldCount>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00f      	beq.n	80049f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	3310      	adds	r3, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fd75 	bl	80054c8 <xTaskRemoveFromEventList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b54      	ldr	r3, [pc, #336]	@ (8004b38 <xQueueSemaphoreTake+0x21c>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049f4:	f001 fa9a 	bl	8005f2c <vPortExitCritical>
				return pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e098      	b.n	8004b2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d112      	bne.n	8004a28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	617b      	str	r3, [r7, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a20:	f001 fa84 	bl	8005f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e082      	b.n	8004b2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a2e:	f107 030c 	add.w	r3, r7, #12
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fdac 	bl	8005590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a3c:	f001 fa76 	bl	8005f2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a40:	f000 fb52 	bl	80050e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a44:	f001 fa40 	bl	8005ec8 <vPortEnterCritical>
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d103      	bne.n	8004a5e <xQueueSemaphoreTake+0x142>
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d103      	bne.n	8004a74 <xQueueSemaphoreTake+0x158>
 8004a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a74:	f001 fa5a 	bl	8005f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a78:	463a      	mov	r2, r7
 8004a7a:	f107 030c 	add.w	r3, r7, #12
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd9b 	bl	80055bc <xTaskCheckForTimeOut>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d132      	bne.n	8004af2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a8e:	f000 f929 	bl	8004ce4 <prvIsQueueEmpty>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d026      	beq.n	8004ae6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004aa0:	f001 fa12 	bl	8005ec8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fed1 	bl	8005850 <xTaskPriorityInherit>
 8004aae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004ab0:	f001 fa3c 	bl	8005f2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	3324      	adds	r3, #36	@ 0x24
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fcdd 	bl	800547c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ac4:	f000 f8bc 	bl	8004c40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ac8:	f000 fb1c 	bl	8005104 <xTaskResumeAll>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f47f af67 	bne.w	80049a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004ad4:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <xQueueSemaphoreTake+0x21c>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	e75d      	b.n	80049a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ae6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae8:	f000 f8aa 	bl	8004c40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aec:	f000 fb0a 	bl	8005104 <xTaskResumeAll>
 8004af0:	e757      	b.n	80049a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004af4:	f000 f8a4 	bl	8004c40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004af8:	f000 fb04 	bl	8005104 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004afe:	f000 f8f1 	bl	8004ce4 <prvIsQueueEmpty>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f43f af4c 	beq.w	80049a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b10:	f001 f9da 	bl	8005ec8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b16:	f000 f811 	bl	8004b3c <prvGetDisinheritPriorityAfterTimeout>
 8004b1a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ff92 	bl	8005a4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b28:	f001 fa00 	bl	8005f2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3738      	adds	r7, #56	@ 0x38
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e001      	b.n	8004b5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d14d      	bne.n	8004c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fed0 	bl	800593c <xTaskPriorityDisinherit>
 8004b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	e043      	b.n	8004c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d119      	bne.n	8004be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6858      	ldr	r0, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	f001 fd22 	bl	8006600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d32b      	bcc.n	8004c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	e026      	b.n	8004c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68d8      	ldr	r0, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	461a      	mov	r2, r3
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	f001 fd08 	bl	8006600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d207      	bcs.n	8004c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	425b      	negs	r3, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d105      	bne.n	8004c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c48:	f001 f93e 	bl	8005ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c54:	e011      	b.n	8004c7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d012      	beq.n	8004c84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3324      	adds	r3, #36	@ 0x24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fc30 	bl	80054c8 <xTaskRemoveFromEventList>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c6e:	f000 fd09 	bl	8005684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dce9      	bgt.n	8004c56 <prvUnlockQueue+0x16>
 8004c82:	e000      	b.n	8004c86 <prvUnlockQueue+0x46>
					break;
 8004c84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	22ff      	movs	r2, #255	@ 0xff
 8004c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c8e:	f001 f94d 	bl	8005f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c92:	f001 f919 	bl	8005ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c9e:	e011      	b.n	8004cc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3310      	adds	r3, #16
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fc0b 	bl	80054c8 <xTaskRemoveFromEventList>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cb8:	f000 fce4 	bl	8005684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dce9      	bgt.n	8004ca0 <prvUnlockQueue+0x60>
 8004ccc:	e000      	b.n	8004cd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	22ff      	movs	r2, #255	@ 0xff
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cd8:	f001 f928 	bl	8005f2c <vPortExitCritical>
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cec:	f001 f8ec 	bl	8005ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e001      	b.n	8004d02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d02:	f001 f913 	bl	8005f2c <vPortExitCritical>

	return xReturn;
 8004d06:	68fb      	ldr	r3, [r7, #12]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d18:	f001 f8d6 	bl	8005ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d102      	bne.n	8004d2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e001      	b.n	8004d32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d32:	f001 f8fb 	bl	8005f2c <vPortExitCritical>

	return xReturn;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 f9d9 	bl	800610c <pvPortMalloc>
 8004d5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00e      	beq.n	8004d80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d62:	20a0      	movs	r0, #160	@ 0xa0
 8004d64:	f001 f9d2 	bl	800610c <pvPortMalloc>
 8004d68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d76:	e005      	b.n	8004d84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f001 fa95 	bl	80062a8 <vPortFree>
 8004d7e:	e001      	b.n	8004d84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d013      	beq.n	8004db2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f80f 	bl	8004dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da6:	69f8      	ldr	r0, [r7, #28]
 8004da8:	f000 f8ac 	bl	8004f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dac:	2301      	movs	r3, #1
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e002      	b.n	8004db8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
 8004db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004db8:	69bb      	ldr	r3, [r7, #24]
	}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	617b      	str	r3, [r7, #20]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e012      	b.n	8004e40 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	7819      	ldrb	r1, [r3, #0]
 8004e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	3334      	adds	r3, #52	@ 0x34
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	d9e9      	bls.n	8004e1a <prvInitialiseNewTask+0x56>
 8004e46:	e000      	b.n	8004e4a <prvInitialiseNewTask+0x86>
			{
				break;
 8004e48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e52:	e003      	b.n	8004e5c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d901      	bls.n	8004e66 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e62:	2306      	movs	r3, #6
 8004e64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fa35 	bl	80042ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	3318      	adds	r3, #24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fa30 	bl	80042ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	f1c3 0207 	rsb	r2, r3, #7
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	334c      	adds	r3, #76	@ 0x4c
 8004eb6:	224c      	movs	r2, #76	@ 0x4c
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 fb14 	bl	80064e8 <memset>
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef8 <prvInitialiseNewTask+0x134>)
 8004ec4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8004efc <prvInitialiseNewTask+0x138>)
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	4a0c      	ldr	r2, [pc, #48]	@ (8004f00 <prvInitialiseNewTask+0x13c>)
 8004ed0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68f9      	ldr	r1, [r7, #12]
 8004ed6:	69b8      	ldr	r0, [r7, #24]
 8004ed8:	f000 fec2 	bl	8005c60 <pxPortInitialiseStack>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200012d4 	.word	0x200012d4
 8004efc:	2000133c 	.word	0x2000133c
 8004f00:	200013a4 	.word	0x200013a4

08004f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f0c:	f000 ffdc 	bl	8005ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f1a:	4b29      	ldr	r3, [pc, #164]	@ (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f22:	4a27      	ldr	r2, [pc, #156]	@ (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f28:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d110      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f30:	f000 fbcc 	bl	80056cc <prvInitialiseTaskLists>
 8004f34:	e00d      	b.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f36:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d802      	bhi.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f52:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc8 <prvAddNewTaskToReadyList+0xc4>)
 8004f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <prvAddNewTaskToReadyList+0xc8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <prvAddNewTaskToReadyList+0xc8>)
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <prvAddNewTaskToReadyList+0xcc>)
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f7ff f9be 	bl	8004306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f8a:	f000 ffcf 	bl	8005f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <prvAddNewTaskToReadyList+0xc0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d207      	bcs.n	8004fb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <prvAddNewTaskToReadyList+0xd0>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000280 	.word	0x20000280
 8004fc0:	20000180 	.word	0x20000180
 8004fc4:	2000028c 	.word	0x2000028c
 8004fc8:	2000029c 	.word	0x2000029c
 8004fcc:	20000288 	.word	0x20000288
 8004fd0:	20000184 	.word	0x20000184
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d018      	beq.n	800501c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fea:	4b14      	ldr	r3, [pc, #80]	@ (800503c <vTaskDelay+0x64>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <vTaskDelay+0x32>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	e7fd      	b.n	8005006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800500a:	f000 f86d 	bl	80050e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800500e:	2100      	movs	r1, #0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fdbf 	bl	8005b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005016:	f000 f875 	bl	8005104 <xTaskResumeAll>
 800501a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005022:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <vTaskDelay+0x68>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200002a8 	.word	0x200002a8
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800504a:	4b1f      	ldr	r3, [pc, #124]	@ (80050c8 <vTaskStartScheduler+0x84>)
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	2300      	movs	r3, #0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	2280      	movs	r2, #128	@ 0x80
 8005056:	491d      	ldr	r1, [pc, #116]	@ (80050cc <vTaskStartScheduler+0x88>)
 8005058:	481d      	ldr	r0, [pc, #116]	@ (80050d0 <vTaskStartScheduler+0x8c>)
 800505a:	f7ff fe71 	bl	8004d40 <xTaskCreate>
 800505e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d11b      	bne.n	800509e <vTaskStartScheduler+0x5a>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60bb      	str	r3, [r7, #8]
}
 8005078:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800507a:	4b16      	ldr	r3, [pc, #88]	@ (80050d4 <vTaskStartScheduler+0x90>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	334c      	adds	r3, #76	@ 0x4c
 8005080:	4a15      	ldr	r2, [pc, #84]	@ (80050d8 <vTaskStartScheduler+0x94>)
 8005082:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005084:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <vTaskStartScheduler+0x98>)
 8005086:	f04f 32ff 	mov.w	r2, #4294967295
 800508a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800508c:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <vTaskStartScheduler+0x9c>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005092:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <vTaskStartScheduler+0xa0>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005098:	f000 fe72 	bl	8005d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800509c:	e00f      	b.n	80050be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d10b      	bne.n	80050be <vTaskStartScheduler+0x7a>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	607b      	str	r3, [r7, #4]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <vTaskStartScheduler+0x76>
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200002a4 	.word	0x200002a4
 80050cc:	08006734 	.word	0x08006734
 80050d0:	0800569d 	.word	0x0800569d
 80050d4:	20000180 	.word	0x20000180
 80050d8:	2000001c 	.word	0x2000001c
 80050dc:	200002a0 	.word	0x200002a0
 80050e0:	2000028c 	.word	0x2000028c
 80050e4:	20000284 	.word	0x20000284

080050e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <vTaskSuspendAll+0x18>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a03      	ldr	r2, [pc, #12]	@ (8005100 <vTaskSuspendAll+0x18>)
 80050f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050f6:	bf00      	nop
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	200002a8 	.word	0x200002a8

08005104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005112:	4b42      	ldr	r3, [pc, #264]	@ (800521c <xTaskResumeAll+0x118>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10b      	bne.n	8005132 <xTaskResumeAll+0x2e>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	603b      	str	r3, [r7, #0]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005132:	f000 fec9 	bl	8005ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <xTaskResumeAll+0x118>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3b01      	subs	r3, #1
 800513c:	4a37      	ldr	r2, [pc, #220]	@ (800521c <xTaskResumeAll+0x118>)
 800513e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005140:	4b36      	ldr	r3, [pc, #216]	@ (800521c <xTaskResumeAll+0x118>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d161      	bne.n	800520c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005148:	4b35      	ldr	r3, [pc, #212]	@ (8005220 <xTaskResumeAll+0x11c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05d      	beq.n	800520c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005150:	e02e      	b.n	80051b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005152:	4b34      	ldr	r3, [pc, #208]	@ (8005224 <xTaskResumeAll+0x120>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3318      	adds	r3, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f92e 	bl	80043c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff f929 	bl	80043c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	2201      	movs	r2, #1
 8005174:	409a      	lsls	r2, r3
 8005176:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <xTaskResumeAll+0x124>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <xTaskResumeAll+0x124>)
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a27      	ldr	r2, [pc, #156]	@ (800522c <xTaskResumeAll+0x128>)
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7ff f8b5 	bl	8004306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <xTaskResumeAll+0x12c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80051aa:	4b22      	ldr	r3, [pc, #136]	@ (8005234 <xTaskResumeAll+0x130>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005224 <xTaskResumeAll+0x120>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1cc      	bne.n	8005152 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051be:	f000 fb09 	bl	80057d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <xTaskResumeAll+0x134>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051ce:	f000 f837 	bl	8005240 <xTaskIncrementTick>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80051d8:	4b16      	ldr	r3, [pc, #88]	@ (8005234 <xTaskResumeAll+0x130>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f1      	bne.n	80051ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80051ea:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <xTaskResumeAll+0x134>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051f0:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <xTaskResumeAll+0x130>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051fc:	4b0f      	ldr	r3, [pc, #60]	@ (800523c <xTaskResumeAll+0x138>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800520c:	f000 fe8e 	bl	8005f2c <vPortExitCritical>

	return xAlreadyYielded;
 8005210:	68bb      	ldr	r3, [r7, #8]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200002a8 	.word	0x200002a8
 8005220:	20000280 	.word	0x20000280
 8005224:	20000240 	.word	0x20000240
 8005228:	20000288 	.word	0x20000288
 800522c:	20000184 	.word	0x20000184
 8005230:	20000180 	.word	0x20000180
 8005234:	20000294 	.word	0x20000294
 8005238:	20000290 	.word	0x20000290
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524a:	4b4f      	ldr	r3, [pc, #316]	@ (8005388 <xTaskIncrementTick+0x148>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 808f 	bne.w	8005372 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005254:	4b4d      	ldr	r3, [pc, #308]	@ (800538c <xTaskIncrementTick+0x14c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800525c:	4a4b      	ldr	r2, [pc, #300]	@ (800538c <xTaskIncrementTick+0x14c>)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d121      	bne.n	80052ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005268:	4b49      	ldr	r3, [pc, #292]	@ (8005390 <xTaskIncrementTick+0x150>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	603b      	str	r3, [r7, #0]
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	e7fd      	b.n	8005286 <xTaskIncrementTick+0x46>
 800528a:	4b41      	ldr	r3, [pc, #260]	@ (8005390 <xTaskIncrementTick+0x150>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	4b40      	ldr	r3, [pc, #256]	@ (8005394 <xTaskIncrementTick+0x154>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3e      	ldr	r2, [pc, #248]	@ (8005390 <xTaskIncrementTick+0x150>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	4a3e      	ldr	r2, [pc, #248]	@ (8005394 <xTaskIncrementTick+0x154>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b3e      	ldr	r3, [pc, #248]	@ (8005398 <xTaskIncrementTick+0x158>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005398 <xTaskIncrementTick+0x158>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	f000 fa94 	bl	80057d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052ac:	4b3b      	ldr	r3, [pc, #236]	@ (800539c <xTaskIncrementTick+0x15c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d348      	bcc.n	8005348 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052b6:	4b36      	ldr	r3, [pc, #216]	@ (8005390 <xTaskIncrementTick+0x150>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c0:	4b36      	ldr	r3, [pc, #216]	@ (800539c <xTaskIncrementTick+0x15c>)
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	601a      	str	r2, [r3, #0]
					break;
 80052c8:	e03e      	b.n	8005348 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ca:	4b31      	ldr	r3, [pc, #196]	@ (8005390 <xTaskIncrementTick+0x150>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d203      	bcs.n	80052ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052e2:	4a2e      	ldr	r2, [pc, #184]	@ (800539c <xTaskIncrementTick+0x15c>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052e8:	e02e      	b.n	8005348 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f866 	bl	80043c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3318      	adds	r3, #24
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff f85d 	bl	80043c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	2201      	movs	r2, #1
 800530c:	409a      	lsls	r2, r3
 800530e:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <xTaskIncrementTick+0x160>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	4a22      	ldr	r2, [pc, #136]	@ (80053a0 <xTaskIncrementTick+0x160>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4a1f      	ldr	r2, [pc, #124]	@ (80053a4 <xTaskIncrementTick+0x164>)
 8005326:	441a      	add	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe ffe9 	bl	8004306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <xTaskIncrementTick+0x168>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	429a      	cmp	r2, r3
 8005340:	d3b9      	bcc.n	80052b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005342:	2301      	movs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005346:	e7b6      	b.n	80052b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <xTaskIncrementTick+0x168>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534e:	4915      	ldr	r1, [pc, #84]	@ (80053a4 <xTaskIncrementTick+0x164>)
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d901      	bls.n	8005364 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005364:	4b11      	ldr	r3, [pc, #68]	@ (80053ac <xTaskIncrementTick+0x16c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e004      	b.n	800537c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005372:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <xTaskIncrementTick+0x170>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <xTaskIncrementTick+0x170>)
 800537a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800537c:	697b      	ldr	r3, [r7, #20]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200002a8 	.word	0x200002a8
 800538c:	20000284 	.word	0x20000284
 8005390:	20000238 	.word	0x20000238
 8005394:	2000023c 	.word	0x2000023c
 8005398:	20000298 	.word	0x20000298
 800539c:	200002a0 	.word	0x200002a0
 80053a0:	20000288 	.word	0x20000288
 80053a4:	20000184 	.word	0x20000184
 80053a8:	20000180 	.word	0x20000180
 80053ac:	20000294 	.word	0x20000294
 80053b0:	20000290 	.word	0x20000290

080053b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005464 <vTaskSwitchContext+0xb0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c2:	4b29      	ldr	r3, [pc, #164]	@ (8005468 <vTaskSwitchContext+0xb4>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053c8:	e045      	b.n	8005456 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <vTaskSwitchContext+0xb4>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d0:	4b26      	ldr	r3, [pc, #152]	@ (800546c <vTaskSwitchContext+0xb8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f1c3 031f 	rsb	r3, r3, #31
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	4922      	ldr	r1, [pc, #136]	@ (8005470 <vTaskSwitchContext+0xbc>)
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <vTaskSwitchContext+0x5e>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	607b      	str	r3, [r7, #4]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <vTaskSwitchContext+0x5a>
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <vTaskSwitchContext+0xbc>)
 800541e:	4413      	add	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3308      	adds	r3, #8
 8005434:	429a      	cmp	r2, r3
 8005436:	d104      	bne.n	8005442 <vTaskSwitchContext+0x8e>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4a0a      	ldr	r2, [pc, #40]	@ (8005474 <vTaskSwitchContext+0xc0>)
 800544a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <vTaskSwitchContext+0xc0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	334c      	adds	r3, #76	@ 0x4c
 8005452:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vTaskSwitchContext+0xc4>)
 8005454:	6013      	str	r3, [r2, #0]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200002a8 	.word	0x200002a8
 8005468:	20000294 	.word	0x20000294
 800546c:	20000288 	.word	0x20000288
 8005470:	20000184 	.word	0x20000184
 8005474:	20000180 	.word	0x20000180
 8005478:	2000001c 	.word	0x2000001c

0800547c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10b      	bne.n	80054a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60fb      	str	r3, [r7, #12]
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054a4:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <vTaskPlaceOnEventList+0x48>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3318      	adds	r3, #24
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fe ff4e 	bl	800434e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054b2:	2101      	movs	r1, #1
 80054b4:	6838      	ldr	r0, [r7, #0]
 80054b6:	f000 fb6d 	bl	8005b94 <prvAddCurrentTaskToDelayedList>
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000180 	.word	0x20000180

080054c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3318      	adds	r3, #24
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe ff60 	bl	80043c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005500:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <xTaskRemoveFromEventList+0xb0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11c      	bne.n	8005542 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe ff57 	bl	80043c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	2201      	movs	r2, #1
 8005518:	409a      	lsls	r2, r3
 800551a:	4b18      	ldr	r3, [pc, #96]	@ (800557c <xTaskRemoveFromEventList+0xb4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <xTaskRemoveFromEventList+0xb4>)
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <xTaskRemoveFromEventList+0xb8>)
 8005532:	441a      	add	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7fe fee3 	bl	8004306 <vListInsertEnd>
 8005540:	e005      	b.n	800554e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3318      	adds	r3, #24
 8005546:	4619      	mov	r1, r3
 8005548:	480e      	ldr	r0, [pc, #56]	@ (8005584 <xTaskRemoveFromEventList+0xbc>)
 800554a:	f7fe fedc 	bl	8004306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <xTaskRemoveFromEventList+0xc0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	429a      	cmp	r2, r3
 800555a:	d905      	bls.n	8005568 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005560:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <xTaskRemoveFromEventList+0xc4>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e001      	b.n	800556c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800556c:	697b      	ldr	r3, [r7, #20]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200002a8 	.word	0x200002a8
 800557c:	20000288 	.word	0x20000288
 8005580:	20000184 	.word	0x20000184
 8005584:	20000240 	.word	0x20000240
 8005588:	20000180 	.word	0x20000180
 800558c:	20000294 	.word	0x20000294

08005590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005598:	4b06      	ldr	r3, [pc, #24]	@ (80055b4 <vTaskInternalSetTimeOutState+0x24>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <vTaskInternalSetTimeOutState+0x28>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20000298 	.word	0x20000298
 80055b8:	20000284 	.word	0x20000284

080055bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	e7fd      	b.n	80055fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005602:	f000 fc61 	bl	8005ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005606:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <xTaskCheckForTimeOut+0xc0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d102      	bne.n	8005626 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	e023      	b.n	800566e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <xTaskCheckForTimeOut+0xc4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d007      	beq.n	8005642 <xTaskCheckForTimeOut+0x86>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	429a      	cmp	r2, r3
 800563a:	d302      	bcc.n	8005642 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e015      	b.n	800566e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	d20b      	bcs.n	8005664 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff99 	bl	8005590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e004      	b.n	800566e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800566e:	f000 fc5d 	bl	8005f2c <vPortExitCritical>

	return xReturn;
 8005672:	69fb      	ldr	r3, [r7, #28]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000284 	.word	0x20000284
 8005680:	20000298 	.word	0x20000298

08005684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005688:	4b03      	ldr	r3, [pc, #12]	@ (8005698 <vTaskMissedYield+0x14>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000294 	.word	0x20000294

0800569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056a4:	f000 f852 	bl	800574c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <prvIdleTask+0x28>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d9f9      	bls.n	80056a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <prvIdleTask+0x2c>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056c0:	e7f0      	b.n	80056a4 <prvIdleTask+0x8>
 80056c2:	bf00      	nop
 80056c4:	20000184 	.word	0x20000184
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	e00c      	b.n	80056f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4a12      	ldr	r2, [pc, #72]	@ (800572c <prvInitialiseTaskLists+0x60>)
 80056e4:	4413      	add	r3, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fde0 	bl	80042ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3301      	adds	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d9ef      	bls.n	80056d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056f8:	480d      	ldr	r0, [pc, #52]	@ (8005730 <prvInitialiseTaskLists+0x64>)
 80056fa:	f7fe fdd7 	bl	80042ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056fe:	480d      	ldr	r0, [pc, #52]	@ (8005734 <prvInitialiseTaskLists+0x68>)
 8005700:	f7fe fdd4 	bl	80042ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005704:	480c      	ldr	r0, [pc, #48]	@ (8005738 <prvInitialiseTaskLists+0x6c>)
 8005706:	f7fe fdd1 	bl	80042ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800570a:	480c      	ldr	r0, [pc, #48]	@ (800573c <prvInitialiseTaskLists+0x70>)
 800570c:	f7fe fdce 	bl	80042ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005710:	480b      	ldr	r0, [pc, #44]	@ (8005740 <prvInitialiseTaskLists+0x74>)
 8005712:	f7fe fdcb 	bl	80042ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <prvInitialiseTaskLists+0x78>)
 8005718:	4a05      	ldr	r2, [pc, #20]	@ (8005730 <prvInitialiseTaskLists+0x64>)
 800571a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800571c:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <prvInitialiseTaskLists+0x7c>)
 800571e:	4a05      	ldr	r2, [pc, #20]	@ (8005734 <prvInitialiseTaskLists+0x68>)
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000184 	.word	0x20000184
 8005730:	20000210 	.word	0x20000210
 8005734:	20000224 	.word	0x20000224
 8005738:	20000240 	.word	0x20000240
 800573c:	20000254 	.word	0x20000254
 8005740:	2000026c 	.word	0x2000026c
 8005744:	20000238 	.word	0x20000238
 8005748:	2000023c 	.word	0x2000023c

0800574c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005752:	e019      	b.n	8005788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005754:	f000 fbb8 	bl	8005ec8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005758:	4b10      	ldr	r3, [pc, #64]	@ (800579c <prvCheckTasksWaitingTermination+0x50>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe fe2b 	bl	80043c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3b01      	subs	r3, #1
 8005770:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <prvCheckTasksWaitingTermination+0x54>)
 8005772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	4a0a      	ldr	r2, [pc, #40]	@ (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800577c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800577e:	f000 fbd5 	bl	8005f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f810 	bl	80057a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005788:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <prvCheckTasksWaitingTermination+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e1      	bne.n	8005754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000254 	.word	0x20000254
 80057a0:	20000280 	.word	0x20000280
 80057a4:	20000268 	.word	0x20000268

080057a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	334c      	adds	r3, #76	@ 0x4c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fe9f 	bl	80064f8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fd72 	bl	80062a8 <vPortFree>
			vPortFree( pxTCB );
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fd6f 	bl	80062a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057da:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <prvResetNextTaskUnblockTime+0x38>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <prvResetNextTaskUnblockTime+0x3c>)
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057ec:	e008      	b.n	8005800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ee:	4b07      	ldr	r3, [pc, #28]	@ (800580c <prvResetNextTaskUnblockTime+0x38>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a04      	ldr	r2, [pc, #16]	@ (8005810 <prvResetNextTaskUnblockTime+0x3c>)
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000238 	.word	0x20000238
 8005810:	200002a0 	.word	0x200002a0

08005814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800581a:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <xTaskGetSchedulerState+0x34>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005822:	2301      	movs	r3, #1
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	e008      	b.n	800583a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005828:	4b08      	ldr	r3, [pc, #32]	@ (800584c <xTaskGetSchedulerState+0x38>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005830:	2302      	movs	r3, #2
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	e001      	b.n	800583a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005836:	2300      	movs	r3, #0
 8005838:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800583a:	687b      	ldr	r3, [r7, #4]
	}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	2000028c 	.word	0x2000028c
 800584c:	200002a8 	.word	0x200002a8

08005850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d05e      	beq.n	8005924 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586a:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <xTaskPriorityInherit+0xe0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d24e      	bcs.n	8005912 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	db06      	blt.n	800588a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587c:	4b2c      	ldr	r3, [pc, #176]	@ (8005930 <xTaskPriorityInherit+0xe0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005882:	f1c3 0207 	rsb	r2, r3, #7
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6959      	ldr	r1, [r3, #20]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <xTaskPriorityInherit+0xe4>)
 800589c:	4413      	add	r3, r2
 800589e:	4299      	cmp	r1, r3
 80058a0:	d12f      	bne.n	8005902 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fd8a 	bl	80043c0 <uxListRemove>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	2201      	movs	r2, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43da      	mvns	r2, r3
 80058be:	4b1e      	ldr	r3, [pc, #120]	@ (8005938 <xTaskPriorityInherit+0xe8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4013      	ands	r3, r2
 80058c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <xTaskPriorityInherit+0xe8>)
 80058c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <xTaskPriorityInherit+0xe0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	2201      	movs	r2, #1
 80058d8:	409a      	lsls	r2, r3
 80058da:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <xTaskPriorityInherit+0xe8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <xTaskPriorityInherit+0xe8>)
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4a10      	ldr	r2, [pc, #64]	@ (8005934 <xTaskPriorityInherit+0xe4>)
 80058f2:	441a      	add	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f7fe fd03 	bl	8004306 <vListInsertEnd>
 8005900:	e004      	b.n	800590c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005902:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <xTaskPriorityInherit+0xe0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e008      	b.n	8005924 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <xTaskPriorityInherit+0xe0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d201      	bcs.n	8005924 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005924:	68fb      	ldr	r3, [r7, #12]
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000180 	.word	0x20000180
 8005934:	20000184 	.word	0x20000184
 8005938:	20000288 	.word	0x20000288

0800593c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d070      	beq.n	8005a34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005952:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <xTaskPriorityDisinherit+0x104>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d00b      	beq.n	8005974 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60fb      	str	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d044      	beq.n	8005a34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d140      	bne.n	8005a34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fd02 	bl	80043c0 <uxListRemove>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d115      	bne.n	80059ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c6:	491f      	ldr	r1, [pc, #124]	@ (8005a44 <xTaskPriorityDisinherit+0x108>)
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xTaskPriorityDisinherit+0xb2>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	2201      	movs	r2, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	4b18      	ldr	r3, [pc, #96]	@ (8005a48 <xTaskPriorityDisinherit+0x10c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4013      	ands	r3, r2
 80059ea:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <xTaskPriorityDisinherit+0x10c>)
 80059ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	f1c3 0207 	rsb	r2, r3, #7
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	2201      	movs	r2, #1
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a48 <xTaskPriorityDisinherit+0x10c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <xTaskPriorityDisinherit+0x10c>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a08      	ldr	r2, [pc, #32]	@ (8005a44 <xTaskPriorityDisinherit+0x108>)
 8005a22:	441a      	add	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe fc6b 	bl	8004306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a34:	697b      	ldr	r3, [r7, #20]
	}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000180 	.word	0x20000180
 8005a44:	20000184 	.word	0x20000184
 8005a48:	20000288 	.word	0x20000288

08005a4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d079      	beq.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d902      	bls.n	8005a94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e002      	b.n	8005a9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d059      	beq.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d154      	bne.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005aae:	4b2c      	ldr	r3, [pc, #176]	@ (8005b60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d10b      	bne.n	8005ad0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60bb      	str	r3, [r7, #8]
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	e7fd      	b.n	8005acc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db04      	blt.n	8005aee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f1c3 0207 	rsb	r2, r3, #7
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	6959      	ldr	r1, [r3, #20]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005afe:	4413      	add	r3, r2
 8005b00:	4299      	cmp	r1, r3
 8005b02:	d129      	bne.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fc59 	bl	80043c0 <uxListRemove>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	4b11      	ldr	r3, [pc, #68]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4013      	ands	r3, r2
 8005b26:	4a10      	ldr	r2, [pc, #64]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	2201      	movs	r2, #1
 8005b30:	409a      	lsls	r2, r3
 8005b32:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	4a0b      	ldr	r2, [pc, #44]	@ (8005b68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4a06      	ldr	r2, [pc, #24]	@ (8005b64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b4a:	441a      	add	r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f7fe fbd7 	bl	8004306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b58:	bf00      	nop
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000180 	.word	0x20000180
 8005b64:	20000184 	.word	0x20000184
 8005b68:	20000288 	.word	0x20000288

08005b6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b70:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7e:	3201      	adds	r2, #1
 8005b80:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005b82:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b84:	681b      	ldr	r3, [r3, #0]
	}
 8005b86:	4618      	mov	r0, r3
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000180 	.word	0x20000180

08005b94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b9e:	4b29      	ldr	r3, [pc, #164]	@ (8005c44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba4:	4b28      	ldr	r3, [pc, #160]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fc08 	bl	80043c0 <uxListRemove>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bb6:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	4b21      	ldr	r3, [pc, #132]	@ (8005c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	4a20      	ldr	r2, [pc, #128]	@ (8005c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d10a      	bne.n	8005bec <prvAddCurrentTaskToDelayedList+0x58>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	481a      	ldr	r0, [pc, #104]	@ (8005c50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005be6:	f7fe fb8e 	bl	8004306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bea:	e026      	b.n	8005c3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bf4:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d209      	bcs.n	8005c18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c04:	4b13      	ldr	r3, [pc, #76]	@ (8005c54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe fb9c 	bl	800434e <vListInsert>
}
 8005c16:	e010      	b.n	8005c3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c18:	4b0f      	ldr	r3, [pc, #60]	@ (8005c58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe fb92 	bl	800434e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d202      	bcs.n	8005c3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c34:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6013      	str	r3, [r2, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000284 	.word	0x20000284
 8005c48:	20000180 	.word	0x20000180
 8005c4c:	20000288 	.word	0x20000288
 8005c50:	2000026c 	.word	0x2000026c
 8005c54:	2000023c 	.word	0x2000023c
 8005c58:	20000238 	.word	0x20000238
 8005c5c:	200002a0 	.word	0x200002a0

08005c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b04      	subs	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c90:	4a0c      	ldr	r2, [pc, #48]	@ (8005cc4 <pxPortInitialiseStack+0x64>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3b14      	subs	r3, #20
 8005c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f06f 0202 	mvn.w	r2, #2
 8005cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3b20      	subs	r3, #32
 8005cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	08005cc9 	.word	0x08005cc9

08005cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cd2:	4b13      	ldr	r3, [pc, #76]	@ (8005d20 <prvTaskExitError+0x58>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d00b      	beq.n	8005cf4 <prvTaskExitError+0x2c>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <prvTaskExitError+0x28>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60bb      	str	r3, [r7, #8]
}
 8005d06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d08:	bf00      	nop
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0fc      	beq.n	8005d0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000018 	.word	0x20000018
	...

08005d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <pxCurrentTCBConst2>)
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	6808      	ldr	r0, [r1, #0]
 8005d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	f380 8809 	msr	PSP, r0
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8811 	msr	BASEPRI, r0
 8005d4a:	4770      	bx	lr
 8005d4c:	f3af 8000 	nop.w

08005d50 <pxCurrentTCBConst2>:
 8005d50:	20000180 	.word	0x20000180
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop

08005d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d58:	4808      	ldr	r0, [pc, #32]	@ (8005d7c <prvPortStartFirstTask+0x24>)
 8005d5a:	6800      	ldr	r0, [r0, #0]
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f380 8808 	msr	MSP, r0
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8814 	msr	CONTROL, r0
 8005d6a:	b662      	cpsie	i
 8005d6c:	b661      	cpsie	f
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	df00      	svc	0
 8005d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d7a:	bf00      	nop
 8005d7c:	e000ed08 	.word	0xe000ed08

08005d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d86:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <xPortStartScheduler+0x124>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a47      	ldr	r2, [pc, #284]	@ (8005ea8 <xPortStartScheduler+0x128>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10b      	bne.n	8005da8 <xPortStartScheduler+0x28>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005da8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea4 <xPortStartScheduler+0x124>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a3f      	ldr	r2, [pc, #252]	@ (8005eac <xPortStartScheduler+0x12c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10b      	bne.n	8005dca <xPortStartScheduler+0x4a>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	613b      	str	r3, [r7, #16]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <xPortStartScheduler+0x130>)
 8005dcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	22ff      	movs	r2, #255	@ 0xff
 8005dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	4b31      	ldr	r3, [pc, #196]	@ (8005eb4 <xPortStartScheduler+0x134>)
 8005df0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005df2:	4b31      	ldr	r3, [pc, #196]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005df4:	2207      	movs	r2, #7
 8005df6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005df8:	e009      	b.n	8005e0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d0ef      	beq.n	8005dfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e1a:	4b27      	ldr	r3, [pc, #156]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f1c3 0307 	rsb	r3, r3, #7
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d00b      	beq.n	8005e3e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60bb      	str	r3, [r7, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e48:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e50:	4a19      	ldr	r2, [pc, #100]	@ (8005eb8 <xPortStartScheduler+0x138>)
 8005e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e5c:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <xPortStartScheduler+0x13c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a16      	ldr	r2, [pc, #88]	@ (8005ebc <xPortStartScheduler+0x13c>)
 8005e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e68:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <xPortStartScheduler+0x13c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	@ (8005ebc <xPortStartScheduler+0x13c>)
 8005e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e74:	f000 f8da 	bl	800602c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <xPortStartScheduler+0x140>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e7e:	f000 f8f9 	bl	8006074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e82:	4b10      	ldr	r3, [pc, #64]	@ (8005ec4 <xPortStartScheduler+0x144>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a0f      	ldr	r2, [pc, #60]	@ (8005ec4 <xPortStartScheduler+0x144>)
 8005e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e8e:	f7ff ff63 	bl	8005d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e92:	f7ff fa8f 	bl	80053b4 <vTaskSwitchContext>
	prvTaskExitError();
 8005e96:	f7ff ff17 	bl	8005cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	e000ed00 	.word	0xe000ed00
 8005ea8:	410fc271 	.word	0x410fc271
 8005eac:	410fc270 	.word	0x410fc270
 8005eb0:	e000e400 	.word	0xe000e400
 8005eb4:	200002ac 	.word	0x200002ac
 8005eb8:	200002b0 	.word	0x200002b0
 8005ebc:	e000ed20 	.word	0xe000ed20
 8005ec0:	20000018 	.word	0x20000018
 8005ec4:	e000ef34 	.word	0xe000ef34

08005ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <vPortEnterCritical+0x5c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f24 <vPortEnterCritical+0x5c>)
 8005eea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005eec:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <vPortEnterCritical+0x5c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d110      	bne.n	8005f16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <vPortEnterCritical+0x60>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <vPortEnterCritical+0x4e>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	603b      	str	r3, [r7, #0]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <vPortEnterCritical+0x4a>
	}
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000018 	.word	0x20000018
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f32:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <vPortExitCritical+0x50>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <vPortExitCritical+0x26>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	607b      	str	r3, [r7, #4]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f52:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <vPortExitCritical+0x50>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4a08      	ldr	r2, [pc, #32]	@ (8005f7c <vPortExitCritical+0x50>)
 8005f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f5c:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <vPortExitCritical+0x50>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <vPortExitCritical+0x44>
 8005f64:	2300      	movs	r3, #0
 8005f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
}
 8005f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000018 	.word	0x20000018

08005f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f80:	f3ef 8009 	mrs	r0, PSP
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	4b15      	ldr	r3, [pc, #84]	@ (8005fe0 <pxCurrentTCBConst>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	f01e 0f10 	tst.w	lr, #16
 8005f90:	bf08      	it	eq
 8005f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	6010      	str	r0, [r2, #0]
 8005f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fa4:	f380 8811 	msr	BASEPRI, r0
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f7ff fa00 	bl	80053b4 <vTaskSwitchContext>
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f380 8811 	msr	BASEPRI, r0
 8005fbc:	bc09      	pop	{r0, r3}
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	6808      	ldr	r0, [r1, #0]
 8005fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc6:	f01e 0f10 	tst.w	lr, #16
 8005fca:	bf08      	it	eq
 8005fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fd0:	f380 8809 	msr	PSP, r0
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	f3af 8000 	nop.w

08005fe0 <pxCurrentTCBConst>:
 8005fe0:	20000180 	.word	0x20000180
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop

08005fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	607b      	str	r3, [r7, #4]
}
 8006000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006002:	f7ff f91d 	bl	8005240 <xTaskIncrementTick>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800600c:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <SysTick_Handler+0x40>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	2300      	movs	r3, #0
 8006016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f383 8811 	msr	BASEPRI, r3
}
 800601e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006030:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <vPortSetupTimerInterrupt+0x34>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006036:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <vPortSetupTimerInterrupt+0x38>)
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800603c:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <vPortSetupTimerInterrupt+0x3c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0a      	ldr	r2, [pc, #40]	@ (800606c <vPortSetupTimerInterrupt+0x40>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	4a09      	ldr	r2, [pc, #36]	@ (8006070 <vPortSetupTimerInterrupt+0x44>)
 800604a:	3b01      	subs	r3, #1
 800604c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800604e:	4b04      	ldr	r3, [pc, #16]	@ (8006060 <vPortSetupTimerInterrupt+0x34>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
}
 8006054:	bf00      	nop
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	e000e010 	.word	0xe000e010
 8006064:	e000e018 	.word	0xe000e018
 8006068:	2000000c 	.word	0x2000000c
 800606c:	10624dd3 	.word	0x10624dd3
 8006070:	e000e014 	.word	0xe000e014

08006074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006084 <vPortEnableVFP+0x10>
 8006078:	6801      	ldr	r1, [r0, #0]
 800607a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800607e:	6001      	str	r1, [r0, #0]
 8006080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006082:	bf00      	nop
 8006084:	e000ed88 	.word	0xe000ed88

08006088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800608e:	f3ef 8305 	mrs	r3, IPSR
 8006092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b0f      	cmp	r3, #15
 8006098:	d915      	bls.n	80060c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800609a:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <vPortValidateInterruptPriority+0x74>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060a4:	4b16      	ldr	r3, [pc, #88]	@ (8006100 <vPortValidateInterruptPriority+0x78>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	7afa      	ldrb	r2, [r7, #11]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d20b      	bcs.n	80060c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	607b      	str	r3, [r7, #4]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <vPortValidateInterruptPriority+0x7c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <vPortValidateInterruptPriority+0x80>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d90b      	bls.n	80060ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	603b      	str	r3, [r7, #0]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <vPortValidateInterruptPriority+0x62>
	}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	e000e3f0 	.word	0xe000e3f0
 8006100:	200002ac 	.word	0x200002ac
 8006104:	e000ed0c 	.word	0xe000ed0c
 8006108:	200002b0 	.word	0x200002b0

0800610c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	@ 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006118:	f7fe ffe6 	bl	80050e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800611c:	4b5c      	ldr	r3, [pc, #368]	@ (8006290 <pvPortMalloc+0x184>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006124:	f000 f924 	bl	8006370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006128:	4b5a      	ldr	r3, [pc, #360]	@ (8006294 <pvPortMalloc+0x188>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 8095 	bne.w	8006260 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01e      	beq.n	800617a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800613c:	2208      	movs	r2, #8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d015      	beq.n	800617a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	3308      	adds	r3, #8
 8006156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <pvPortMalloc+0x6e>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	617b      	str	r3, [r7, #20]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d06f      	beq.n	8006260 <pvPortMalloc+0x154>
 8006180:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <pvPortMalloc+0x18c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d86a      	bhi.n	8006260 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800618a:	4b44      	ldr	r3, [pc, #272]	@ (800629c <pvPortMalloc+0x190>)
 800618c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800618e:	4b43      	ldr	r3, [pc, #268]	@ (800629c <pvPortMalloc+0x190>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006194:	e004      	b.n	80061a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d903      	bls.n	80061b2 <pvPortMalloc+0xa6>
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f1      	bne.n	8006196 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061b2:	4b37      	ldr	r3, [pc, #220]	@ (8006290 <pvPortMalloc+0x184>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d051      	beq.n	8006260 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2208      	movs	r2, #8
 80061c2:	4413      	add	r3, r2
 80061c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	2308      	movs	r3, #8
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	429a      	cmp	r2, r3
 80061dc:	d920      	bls.n	8006220 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <pvPortMalloc+0xfc>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	613b      	str	r3, [r7, #16]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800621a:	69b8      	ldr	r0, [r7, #24]
 800621c:	f000 f90a 	bl	8006434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006220:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <pvPortMalloc+0x18c>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	4a1b      	ldr	r2, [pc, #108]	@ (8006298 <pvPortMalloc+0x18c>)
 800622c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <pvPortMalloc+0x18c>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b1b      	ldr	r3, [pc, #108]	@ (80062a0 <pvPortMalloc+0x194>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d203      	bcs.n	8006242 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800623a:	4b17      	ldr	r3, [pc, #92]	@ (8006298 <pvPortMalloc+0x18c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a18      	ldr	r2, [pc, #96]	@ (80062a0 <pvPortMalloc+0x194>)
 8006240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	4b13      	ldr	r3, [pc, #76]	@ (8006294 <pvPortMalloc+0x188>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	431a      	orrs	r2, r3
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006256:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <pvPortMalloc+0x198>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3301      	adds	r3, #1
 800625c:	4a11      	ldr	r2, [pc, #68]	@ (80062a4 <pvPortMalloc+0x198>)
 800625e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006260:	f7fe ff50 	bl	8005104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <pvPortMalloc+0x17a>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <pvPortMalloc+0x176>
	return pvReturn;
 8006286:	69fb      	ldr	r3, [r7, #28]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3728      	adds	r7, #40	@ 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200012bc 	.word	0x200012bc
 8006294:	200012d0 	.word	0x200012d0
 8006298:	200012c0 	.word	0x200012c0
 800629c:	200012b4 	.word	0x200012b4
 80062a0:	200012c4 	.word	0x200012c4
 80062a4:	200012c8 	.word	0x200012c8

080062a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d04f      	beq.n	800635a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062ba:	2308      	movs	r3, #8
 80062bc:	425b      	negs	r3, r3
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <vPortFree+0xbc>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <vPortFree+0x46>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <vPortFree+0x66>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60bb      	str	r3, [r7, #8]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4b14      	ldr	r3, [pc, #80]	@ (8006364 <vPortFree+0xbc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01e      	beq.n	800635a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d11a      	bne.n	800635a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4b0e      	ldr	r3, [pc, #56]	@ (8006364 <vPortFree+0xbc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	43db      	mvns	r3, r3
 800632e:	401a      	ands	r2, r3
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006334:	f7fe fed8 	bl	80050e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <vPortFree+0xc0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4413      	add	r3, r2
 8006342:	4a09      	ldr	r2, [pc, #36]	@ (8006368 <vPortFree+0xc0>)
 8006344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006346:	6938      	ldr	r0, [r7, #16]
 8006348:	f000 f874 	bl	8006434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <vPortFree+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	4a06      	ldr	r2, [pc, #24]	@ (800636c <vPortFree+0xc4>)
 8006354:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006356:	f7fe fed5 	bl	8005104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200012d0 	.word	0x200012d0
 8006368:	200012c0 	.word	0x200012c0
 800636c:	200012cc 	.word	0x200012cc

08006370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800637a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800637c:	4b27      	ldr	r3, [pc, #156]	@ (800641c <prvHeapInit+0xac>)
 800637e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3307      	adds	r3, #7
 800638e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0307 	bic.w	r3, r3, #7
 8006396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	4a1f      	ldr	r2, [pc, #124]	@ (800641c <prvHeapInit+0xac>)
 80063a0:	4413      	add	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <prvHeapInit+0xb0>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <prvHeapInit+0xb0>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4413      	add	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063bc:	2208      	movs	r2, #8
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a15      	ldr	r2, [pc, #84]	@ (8006424 <prvHeapInit+0xb4>)
 80063d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063d2:	4b14      	ldr	r3, [pc, #80]	@ (8006424 <prvHeapInit+0xb4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <prvHeapInit+0xb4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	1ad2      	subs	r2, r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <prvHeapInit+0xb4>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006428 <prvHeapInit+0xb8>)
 80063fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a09      	ldr	r2, [pc, #36]	@ (800642c <prvHeapInit+0xbc>)
 8006406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <prvHeapInit+0xc0>)
 800640a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800640e:	601a      	str	r2, [r3, #0]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	200002b4 	.word	0x200002b4
 8006420:	200012b4 	.word	0x200012b4
 8006424:	200012bc 	.word	0x200012bc
 8006428:	200012c4 	.word	0x200012c4
 800642c:	200012c0 	.word	0x200012c0
 8006430:	200012d0 	.word	0x200012d0

08006434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800643c:	4b28      	ldr	r3, [pc, #160]	@ (80064e0 <prvInsertBlockIntoFreeList+0xac>)
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e002      	b.n	8006448 <prvInsertBlockIntoFreeList+0x14>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d8f7      	bhi.n	8006442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4413      	add	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d108      	bne.n	8006476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	441a      	add	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	441a      	add	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d118      	bne.n	80064bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d00d      	beq.n	80064b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	441a      	add	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	e008      	b.n	80064c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064b2:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <prvInsertBlockIntoFreeList+0xb0>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e003      	b.n	80064c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d002      	beq.n	80064d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	200012b4 	.word	0x200012b4
 80064e4:	200012bc 	.word	0x200012bc

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <_reclaim_reent>:
 80064f8:	4b2d      	ldr	r3, [pc, #180]	@ (80065b0 <_reclaim_reent+0xb8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4283      	cmp	r3, r0
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	d053      	beq.n	80065ac <_reclaim_reent+0xb4>
 8006504:	69c3      	ldr	r3, [r0, #28]
 8006506:	b31b      	cbz	r3, 8006550 <_reclaim_reent+0x58>
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	b163      	cbz	r3, 8006526 <_reclaim_reent+0x2e>
 800650c:	2500      	movs	r5, #0
 800650e:	69e3      	ldr	r3, [r4, #28]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	5959      	ldr	r1, [r3, r5]
 8006514:	b9b1      	cbnz	r1, 8006544 <_reclaim_reent+0x4c>
 8006516:	3504      	adds	r5, #4
 8006518:	2d80      	cmp	r5, #128	@ 0x80
 800651a:	d1f8      	bne.n	800650e <_reclaim_reent+0x16>
 800651c:	69e3      	ldr	r3, [r4, #28]
 800651e:	4620      	mov	r0, r4
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	f000 f87b 	bl	800661c <_free_r>
 8006526:	69e3      	ldr	r3, [r4, #28]
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	b111      	cbz	r1, 8006532 <_reclaim_reent+0x3a>
 800652c:	4620      	mov	r0, r4
 800652e:	f000 f875 	bl	800661c <_free_r>
 8006532:	69e3      	ldr	r3, [r4, #28]
 8006534:	689d      	ldr	r5, [r3, #8]
 8006536:	b15d      	cbz	r5, 8006550 <_reclaim_reent+0x58>
 8006538:	4629      	mov	r1, r5
 800653a:	4620      	mov	r0, r4
 800653c:	682d      	ldr	r5, [r5, #0]
 800653e:	f000 f86d 	bl	800661c <_free_r>
 8006542:	e7f8      	b.n	8006536 <_reclaim_reent+0x3e>
 8006544:	680e      	ldr	r6, [r1, #0]
 8006546:	4620      	mov	r0, r4
 8006548:	f000 f868 	bl	800661c <_free_r>
 800654c:	4631      	mov	r1, r6
 800654e:	e7e1      	b.n	8006514 <_reclaim_reent+0x1c>
 8006550:	6961      	ldr	r1, [r4, #20]
 8006552:	b111      	cbz	r1, 800655a <_reclaim_reent+0x62>
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f861 	bl	800661c <_free_r>
 800655a:	69e1      	ldr	r1, [r4, #28]
 800655c:	b111      	cbz	r1, 8006564 <_reclaim_reent+0x6c>
 800655e:	4620      	mov	r0, r4
 8006560:	f000 f85c 	bl	800661c <_free_r>
 8006564:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006566:	b111      	cbz	r1, 800656e <_reclaim_reent+0x76>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f857 	bl	800661c <_free_r>
 800656e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006570:	b111      	cbz	r1, 8006578 <_reclaim_reent+0x80>
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f852 	bl	800661c <_free_r>
 8006578:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800657a:	b111      	cbz	r1, 8006582 <_reclaim_reent+0x8a>
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f84d 	bl	800661c <_free_r>
 8006582:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006584:	b111      	cbz	r1, 800658c <_reclaim_reent+0x94>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f848 	bl	800661c <_free_r>
 800658c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800658e:	b111      	cbz	r1, 8006596 <_reclaim_reent+0x9e>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f843 	bl	800661c <_free_r>
 8006596:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006598:	b111      	cbz	r1, 80065a0 <_reclaim_reent+0xa8>
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f83e 	bl	800661c <_free_r>
 80065a0:	6a23      	ldr	r3, [r4, #32]
 80065a2:	b11b      	cbz	r3, 80065ac <_reclaim_reent+0xb4>
 80065a4:	4620      	mov	r0, r4
 80065a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065aa:	4718      	bx	r3
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	bf00      	nop
 80065b0:	2000001c 	.word	0x2000001c

080065b4 <__libc_init_array>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4d0d      	ldr	r5, [pc, #52]	@ (80065ec <__libc_init_array+0x38>)
 80065b8:	4c0d      	ldr	r4, [pc, #52]	@ (80065f0 <__libc_init_array+0x3c>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	2600      	movs	r6, #0
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	d109      	bne.n	80065d8 <__libc_init_array+0x24>
 80065c4:	4d0b      	ldr	r5, [pc, #44]	@ (80065f4 <__libc_init_array+0x40>)
 80065c6:	4c0c      	ldr	r4, [pc, #48]	@ (80065f8 <__libc_init_array+0x44>)
 80065c8:	f000 f87e 	bl	80066c8 <_init>
 80065cc:	1b64      	subs	r4, r4, r5
 80065ce:	10a4      	asrs	r4, r4, #2
 80065d0:	2600      	movs	r6, #0
 80065d2:	42a6      	cmp	r6, r4
 80065d4:	d105      	bne.n	80065e2 <__libc_init_array+0x2e>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065dc:	4798      	blx	r3
 80065de:	3601      	adds	r6, #1
 80065e0:	e7ee      	b.n	80065c0 <__libc_init_array+0xc>
 80065e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e6:	4798      	blx	r3
 80065e8:	3601      	adds	r6, #1
 80065ea:	e7f2      	b.n	80065d2 <__libc_init_array+0x1e>
 80065ec:	08006784 	.word	0x08006784
 80065f0:	08006784 	.word	0x08006784
 80065f4:	08006784 	.word	0x08006784
 80065f8:	08006788 	.word	0x08006788

080065fc <__retarget_lock_acquire_recursive>:
 80065fc:	4770      	bx	lr

080065fe <__retarget_lock_release_recursive>:
 80065fe:	4770      	bx	lr

08006600 <memcpy>:
 8006600:	440a      	add	r2, r1
 8006602:	4291      	cmp	r1, r2
 8006604:	f100 33ff 	add.w	r3, r0, #4294967295
 8006608:	d100      	bne.n	800660c <memcpy+0xc>
 800660a:	4770      	bx	lr
 800660c:	b510      	push	{r4, lr}
 800660e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006616:	4291      	cmp	r1, r2
 8006618:	d1f9      	bne.n	800660e <memcpy+0xe>
 800661a:	bd10      	pop	{r4, pc}

0800661c <_free_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4605      	mov	r5, r0
 8006620:	2900      	cmp	r1, #0
 8006622:	d041      	beq.n	80066a8 <_free_r+0x8c>
 8006624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006628:	1f0c      	subs	r4, r1, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfb8      	it	lt
 800662e:	18e4      	addlt	r4, r4, r3
 8006630:	f000 f83e 	bl	80066b0 <__malloc_lock>
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <_free_r+0x90>)
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	b933      	cbnz	r3, 8006648 <_free_r+0x2c>
 800663a:	6063      	str	r3, [r4, #4]
 800663c:	6014      	str	r4, [r2, #0]
 800663e:	4628      	mov	r0, r5
 8006640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006644:	f000 b83a 	b.w	80066bc <__malloc_unlock>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d908      	bls.n	800665e <_free_r+0x42>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	1821      	adds	r1, r4, r0
 8006650:	428b      	cmp	r3, r1
 8006652:	bf01      	itttt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	1809      	addeq	r1, r1, r0
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	e7ed      	b.n	800663a <_free_r+0x1e>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x4c>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x42>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1850      	adds	r0, r2, r1
 800666c:	42a0      	cmp	r0, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x6c>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	4401      	add	r1, r0
 8006674:	1850      	adds	r0, r2, r1
 8006676:	4283      	cmp	r3, r0
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1e0      	bne.n	800663e <_free_r+0x22>
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4408      	add	r0, r1
 8006684:	6010      	str	r0, [r2, #0]
 8006686:	e7da      	b.n	800663e <_free_r+0x22>
 8006688:	d902      	bls.n	8006690 <_free_r+0x74>
 800668a:	230c      	movs	r3, #12
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	e7d6      	b.n	800663e <_free_r+0x22>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	1821      	adds	r1, r4, r0
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1809      	addeq	r1, r1, r0
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7ca      	b.n	800663e <_free_r+0x22>
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	20001410 	.word	0x20001410

080066b0 <__malloc_lock>:
 80066b0:	4801      	ldr	r0, [pc, #4]	@ (80066b8 <__malloc_lock+0x8>)
 80066b2:	f7ff bfa3 	b.w	80065fc <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	2000140c 	.word	0x2000140c

080066bc <__malloc_unlock>:
 80066bc:	4801      	ldr	r0, [pc, #4]	@ (80066c4 <__malloc_unlock+0x8>)
 80066be:	f7ff bf9e 	b.w	80065fe <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	2000140c 	.word	0x2000140c

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
