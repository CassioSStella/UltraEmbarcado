
EMBARCADOS_UltraEmbarcado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005bac  08005bac  00006bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c4c  08005c4c  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c4c  08005c4c  00006c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c54  08005c54  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005c5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  2000006c  08005cc8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001010  08005cc8  00008010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018028  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003480  00000000  00000000  0001f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00022548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b7  00000000  00000000  00023ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc8  00000000  00000000  00024b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c60  00000000  00000000  00027b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce17d  00000000  00000000  0003e79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c91c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  0010c960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001126e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b94 	.word	0x08005b94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005b94 	.word	0x08005b94

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
	GPIO_TypeDef* port;
	uint16_t pin;
	TickType_t time;
}led_t;

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		HAL_GPIO_TogglePin(led->port, led->pin);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f000 fda4 	bl	80010b0 <HAL_GPIO_TogglePin>
 8000568:	e7f6      	b.n	8000558 <led_task+0xc>
	...

0800056c <button_task>:
	}
}

void button_task(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

	while(1){
		xSemaphoreTake(bSemaphore,portMAX_DELAY);
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <button_task+0x24>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fc77 	bl	8003e6c <xQueueSemaphoreTake>
		vTaskDelay(50);
 800057e:	2032      	movs	r0, #50	@ 0x32
 8000580:	f003 ffd2 	bl	8004528 <vTaskDelay>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000584:	2028      	movs	r0, #40	@ 0x28
 8000586:	f000 fc03 	bl	8000d90 <HAL_NVIC_EnableIRQ>
		xSemaphoreTake(bSemaphore,portMAX_DELAY);
 800058a:	bf00      	nop
 800058c:	e7f0      	b.n	8000570 <button_task+0x4>
 800058e:	bf00      	nop
 8000590:	20000120 	.word	0x20000120

08000594 <uart_task>:
	}
}

void uart_task(void *argument){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	uint8_t *string = (uint8_t *) "Ola Mundo TASK 1\n\r";
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <uart_task+0x48>)
 800059e:	60fb      	str	r3, [r7, #12]

	while(1){

		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <uart_task+0x4c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fc5f 	bl	8003e6c <xQueueSemaphoreTake>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10b      	bne.n	80005cc <uart_task+0x38>

			HAL_UART_Transmit_IT(&hlpuart1, string, 25);
 80005b4:	2219      	movs	r2, #25
 80005b6:	68f9      	ldr	r1, [r7, #12]
 80005b8:	480a      	ldr	r0, [pc, #40]	@ (80005e4 <uart_task+0x50>)
 80005ba:	f002 f931 	bl	8002820 <HAL_UART_Transmit_IT>

			xSemaphoreTake(sUART, portMAX_DELAY);
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <uart_task+0x54>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fc50 	bl	8003e6c <xQueueSemaphoreTake>
		}
		xSemaphoreGive(mUART);
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <uart_task+0x4c>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 fb47 	bl	8003c68 <xQueueGenericSend>
		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 80005da:	e7e1      	b.n	80005a0 <uart_task+0xc>
 80005dc:	08005bac 	.word	0x08005bac
 80005e0:	20000128 	.word	0x20000128
 80005e4:	20000088 	.word	0x20000088
 80005e8:	20000124 	.word	0x20000124

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	static led_t led = {.port = GPIOA, .pin = GPIO_PIN_5, .time = 500};
	(void)xTaskCreate(led_task, "led_task", 256, &led, 7, NULL);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2307      	movs	r3, #7
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <main+0xac>)
 80005fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000600:	4926      	ldr	r1, [pc, #152]	@ (800069c <main+0xb0>)
 8000602:	4827      	ldr	r0, [pc, #156]	@ (80006a0 <main+0xb4>)
 8000604:	f003 fe44 	bl	8004290 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 256, NULL, 7, NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2307      	movs	r3, #7
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000616:	4923      	ldr	r1, [pc, #140]	@ (80006a4 <main+0xb8>)
 8000618:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <main+0xbc>)
 800061a:	f003 fe39 	bl	8004290 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 256, NULL, 7, NULL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2307      	movs	r3, #7
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800062c:	491f      	ldr	r1, [pc, #124]	@ (80006ac <main+0xc0>)
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <main+0xc4>)
 8000630:	f003 fe2e 	bl	8004290 <xTaskCreate>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 faa3 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f846 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8da 	bl	80007f4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000640:	f000 f88e 	bl	8000760 <MX_LPUART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
 8000644:	2203      	movs	r2, #3
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f003 fa85 	bl	8003b58 <xQueueGenericCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <main+0xc8>)
 8000652:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000654:	2203      	movs	r2, #3
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f003 fa7d 	bl	8003b58 <xQueueGenericCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <main+0xcc>)
 8000662:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 8000664:	2001      	movs	r0, #1
 8000666:	f003 fae7 	bl	8003c38 <xQueueCreateMutex>
 800066a:	4603      	mov	r3, r0
 800066c:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <main+0xd0>)
 800066e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <main+0xd4>)
 8000672:	1d3c      	adds	r4, r7, #4
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	682b      	ldr	r3, [r5, #0]
 800067c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f90f 	bl	80038a6 <osThreadCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <main+0xd8>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f003 f903 	bl	8003898 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0xa6>
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000
 800069c:	08005bc0 	.word	0x08005bc0
 80006a0:	0800054d 	.word	0x0800054d
 80006a4:	08005bcc 	.word	0x08005bcc
 80006a8:	0800056d 	.word	0x0800056d
 80006ac:	08005bd8 	.word	0x08005bd8
 80006b0:	08000595 	.word	0x08000595
 80006b4:	20000120 	.word	0x20000120
 80006b8:	20000124 	.word	0x20000124
 80006bc:	20000128 	.word	0x20000128
 80006c0:	08005bf0 	.word	0x08005bf0
 80006c4:	2000011c 	.word	0x2000011c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	@ 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f96c 	bl	80059b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fd1e 	bl	800112c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000706:	2304      	movs	r3, #4
 8000708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800070a:	2355      	movs	r3, #85	@ 0x55
 800070c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdb8 	bl	8001294 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800072a:	f000 f8cb 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f8b6 	bl	80018b8 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000752:	f000 f8b7 	bl	80008c4 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000766:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <MX_LPUART1_UART_Init+0x8c>)
 8000768:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 800076c:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <MX_LPUART1_UART_Init+0x90>)
 800076e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000784:	220c      	movs	r2, #12
 8000786:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007a0:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 80007a2:	f001 ffed 	bl	8002780 <HAL_UART_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80007ac:	f000 f88a 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 80007b4:	f002 ff8e 	bl	80036d4 <HAL_UARTEx_SetTxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80007be:	f000 f881 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 80007c6:	f002 ffc3 	bl	8003750 <HAL_UARTEx_SetRxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80007d0:	f000 f878 	bl	80008c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_LPUART1_UART_Init+0x88>)
 80007d6:	f002 ff44 	bl	8003662 <HAL_UARTEx_DisableFifoMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80007e0:	f000 f870 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000088 	.word	0x20000088
 80007ec:	40008000 	.word	0x40008000
 80007f0:	00033324 	.word	0x00033324

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_GPIO_Init+0x94>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_GPIO_Init+0x94>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_GPIO_Init+0x94>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000858:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4808      	ldr	r0, [pc, #32]	@ (800088c <MX_GPIO_Init+0x98>)
 800086a:	f000 fa9f 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2028      	movs	r0, #40	@ 0x28
 8000874:	f000 fa72 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000878:	2028      	movs	r0, #40	@ 0x28
 800087a:	f000 fa89 	bl	8000d90 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	48000800 	.word	0x48000800

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f003 f82b 	bl	80038f4 <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartDefaultTask+0x8>

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008b2:	f000 f97d 	bl	8000bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_MspInit+0x50>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008da:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <HAL_MspInit+0x50>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x50>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x50>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <HAL_MspInit+0x50>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x50>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 fa25 	bl	8000d5c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000912:	f000 fcaf 	bl	8001274 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09a      	sub	sp, #104	@ 0x68
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2244      	movs	r2, #68	@ 0x44
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f005 f835 	bl	80059b4 <memset>
  if(huart->Instance==LPUART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d136      	bne.n	80009c2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000954:	2320      	movs	r3, #32
 8000956:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f9f7 	bl	8001d54 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ffaa 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000974:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800097e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a0:	230c      	movs	r3, #12
 80009a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009b0:	230c      	movs	r3, #12
 80009b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f000 f9f5 	bl	8000dac <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3768      	adds	r7, #104	@ 0x68
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40008000 	.word	0x40008000
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	@ 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <HAL_InitTick+0xc4>)
 80009e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a98 <HAL_InitTick+0xc4>)
 80009ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f0:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <HAL_InitTick+0xc4>)
 80009f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 020c 	add.w	r2, r7, #12
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 f92c 	bl	8001c64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a0c:	f001 f914 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8000a10:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_InitTick+0xc8>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a22:	4a20      	ldr	r2, [pc, #128]	@ (8000aa4 <HAL_InitTick+0xd0>)
 8000a24:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000a40:	4817      	ldr	r0, [pc, #92]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a42:	f001 fb77 	bl	8002134 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11b      	bne.n	8000a8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <HAL_InitTick+0xcc>)
 8000a56:	f001 fbcf 	bl	80021f8 <HAL_TIM_Base_Start_IT>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d111      	bne.n	8000a8c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f000 f991 	bl	8000d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d808      	bhi.n	8000a86 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	2019      	movs	r0, #25
 8000a7a:	f000 f96f 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_InitTick+0xd4>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e002      	b.n	8000a8c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3730      	adds	r7, #48	@ 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	2000012c 	.word	0x2000012c
 8000aa4:	40012c00 	.word	0x40012c00
 8000aa8:	20000010 	.word	0x20000010

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aea:	f001 fbef 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000012c 	.word	0x2000012c

08000af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000afc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b00:	f000 faf0 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <LoopForever+0x2>)
 8000b2e:	4685      	mov	sp, r0
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopForever+0x6>)
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopForever+0xa>)
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopForever+0xe>)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:
 8000b3e:	58d4      	ldr	r4, [r2, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:
 8000b44:	18c4      	adds	r4, r0, r3
 8000b46:	428c      	cmp	r4, r1
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopForever+0x12>)
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopForever+0x16>)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:
 8000b56:	42a2      	cmp	r2, r4
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>
 8000b5a:	f004 ff91 	bl	8005a80 <__libc_init_array>
 8000b5e:	f7ff fd45 	bl	80005ec <main>

08000b62 <LoopForever>:
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
 8000b64:	20008000 	.word	0x20008000
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	2000006c 	.word	0x2000006c
 8000b70:	08005c5c 	.word	0x08005c5c
 8000b74:	2000006c 	.word	0x2000006c
 8000b78:	20001010 	.word	0x20001010

08000b7c <ADC1_2_IRQHandler>:
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>

08000b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f8dc 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f7ff ff20 	bl	80009d4 <HAL_InitTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e001      	b.n	8000ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba0:	f7ff fe96 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a03      	ldr	r2, [pc, #12]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bc0:	6013      	str	r3, [r2, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000178 	.word	0x20000178
 8000bd0:	20000014 	.word	0x20000014

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000178 	.word	0x20000178

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6a:	f7ff ff63 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ffb3 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff82 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff56 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dba:	e15a      	b.n	8001072 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 814c 	beq.w	800106c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d017      	beq.n	8000e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	6939      	ldr	r1, [r7, #16]
 8000eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0203 	and.w	r2, r3, #3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80a6 	beq.w	800106c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b5b      	ldr	r3, [pc, #364]	@ (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f24:	4a5a      	ldr	r2, [pc, #360]	@ (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2c:	4b58      	ldr	r3, [pc, #352]	@ (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f38:	4a56      	ldr	r2, [pc, #344]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f62:	d01f      	beq.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4c      	ldr	r2, [pc, #304]	@ (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d019      	beq.n	8000fa0 <HAL_GPIO_Init+0x1f4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800109c <HAL_GPIO_Init+0x2f0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1f0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <HAL_GPIO_Init+0x2f4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a49      	ldr	r2, [pc, #292]	@ (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a48      	ldr	r2, [pc, #288]	@ (80010a8 <HAL_GPIO_Init+0x2fc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	e00a      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000f90:	2306      	movs	r3, #6
 8000f92:	e008      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000f94:	2304      	movs	r3, #4
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x1fa>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb6:	4937      	ldr	r1, [pc, #220]	@ (8001094 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc4:	4b39      	ldr	r3, [pc, #228]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001012:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001018:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_GPIO_Init+0x300>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <HAL_GPIO_Init+0x300>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f ae9d 	bne.w	8000dbc <HAL_GPIO_Init+0x10>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4013      	ands	r3, r2
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43d9      	mvns	r1, r3
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	400b      	ands	r3, r1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f806 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d141      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800113a:	4b4b      	ldr	r3, [pc, #300]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001146:	d131      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001148:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800114e:	4a46      	ldr	r2, [pc, #280]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	4b43      	ldr	r3, [pc, #268]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001160:	4a41      	ldr	r2, [pc, #260]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001168:	4b40      	ldr	r3, [pc, #256]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2232      	movs	r2, #50	@ 0x32
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	4a3f      	ldr	r2, [pc, #252]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9b      	lsrs	r3, r3, #18
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117e:	e002      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3b01      	subs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001186:	4b38      	ldr	r3, [pc, #224]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001192:	d102      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f2      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800119a:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a6:	d158      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e057      	b.n	800125c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011bc:	e04d      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011c4:	d141      	bne.n	800124a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d2:	d131      	bne.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2232      	movs	r2, #50	@ 0x32
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120a:	e002      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3b01      	subs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800121a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121e:	d102      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f2      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001232:	d112      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e011      	b.n	800125c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001248:	e007      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001258:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40007000 	.word	0x40007000
 800126c:	2000000c 	.word	0x2000000c
 8001270:	431bde83 	.word	0x431bde83

08001274 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001282:	6093      	str	r3, [r2, #8]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000

08001294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e2fe      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d075      	beq.n	800139e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b2:	4b97      	ldr	r3, [pc, #604]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012bc:	4b94      	ldr	r3, [pc, #592]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3e>
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d002      	beq.n	80012d8 <HAL_RCC_OscConfig+0x44>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d05b      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e2d9      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x74>
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a84      	ldr	r2, [pc, #528]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b7f      	ldr	r3, [pc, #508]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7e      	ldr	r2, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b7c      	ldr	r3, [pc, #496]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7b      	ldr	r2, [pc, #492]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 800132c:	4b78      	ldr	r3, [pc, #480]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a77      	ldr	r2, [pc, #476]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b75      	ldr	r3, [pc, #468]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a74      	ldr	r2, [pc, #464]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc42 	bl	8000bd4 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc3e 	bl	8000bd4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	@ 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e29e      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001366:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xc0>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fc2e 	bl	8000bd4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc2a 	bl	8000bd4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e28a      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138e:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0xe8>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d075      	beq.n	8001496 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b4:	4b56      	ldr	r3, [pc, #344]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d102      	bne.n	80013ca <HAL_RCC_OscConfig+0x136>
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d002      	beq.n	80013d0 <HAL_RCC_OscConfig+0x13c>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d11f      	bne.n	8001410 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x154>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e25d      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	061b      	lsls	r3, r3, #24
 80013f6:	4946      	ldr	r1, [pc, #280]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013fc:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_RCC_OscConfig+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fae7 	bl	80009d4 <HAL_InitTick>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d043      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e249      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3c      	ldr	r2, [pc, #240]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fbd6 	bl	8000bd4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fbd2 	bl	8000bd4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e232      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	061b      	lsls	r3, r3, #24
 8001458:	492d      	ldr	r1, [pc, #180]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
 800145e:	e01a      	b.n	8001496 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2a      	ldr	r2, [pc, #168]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800146a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbb2 	bl	8000bd4 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fbae 	bl	8000bd4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e20e      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1e0>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d041      	beq.n	8001526 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff fb8b 	bl	8000bd4 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fb87 	bl	8000bd4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1e7      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ef      	beq.n	80014c2 <HAL_RCC_OscConfig+0x22e>
 80014e2:	e020      	b.n	8001526 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fb6e 	bl	8000bd4 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fa:	e00d      	b.n	8001518 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb6a 	bl	8000bd4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d906      	bls.n	8001518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1ca      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	4b8c      	ldr	r3, [pc, #560]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ea      	bne.n	80014fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001538:	4b84      	ldr	r3, [pc, #528]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x2b4>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x2b6>
 8001548:	2300      	movs	r3, #0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b7f      	ldr	r3, [pc, #508]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a7e      	ldr	r2, [pc, #504]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156a:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <HAL_RCC_OscConfig+0x4bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001576:	4b76      	ldr	r3, [pc, #472]	@ (8001750 <HAL_RCC_OscConfig+0x4bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a75      	ldr	r2, [pc, #468]	@ (8001750 <HAL_RCC_OscConfig+0x4bc>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fb27 	bl	8000bd4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fb23 	bl	8000bd4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e183      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	4b6c      	ldr	r3, [pc, #432]	@ (8001750 <HAL_RCC_OscConfig+0x4bc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_RCC_OscConfig+0x32e>
 80015b0:	4b66      	ldr	r3, [pc, #408]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a65      	ldr	r2, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c0:	e024      	b.n	800160c <HAL_RCC_OscConfig+0x378>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d110      	bne.n	80015ec <HAL_RCC_OscConfig+0x358>
 80015ca:	4b60      	ldr	r3, [pc, #384]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d0:	4a5e      	ldr	r2, [pc, #376]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015da:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e0:	4a5a      	ldr	r2, [pc, #360]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ea:	e00f      	b.n	800160c <HAL_RCC_OscConfig+0x378>
 80015ec:	4b57      	ldr	r3, [pc, #348]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f2:	4a56      	ldr	r2, [pc, #344]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001602:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d016      	beq.n	8001642 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fade 	bl	8000bd4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fada 	bl	8000bd4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e138      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ed      	beq.n	800161c <HAL_RCC_OscConfig+0x388>
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fac7 	bl	8000bd4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fac3 	bl	8000bd4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e121      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001660:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ed      	bne.n	800164a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b35      	ldr	r3, [pc, #212]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	4a34      	ldr	r2, [pc, #208]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d03c      	beq.n	8001706 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01c      	beq.n	80016ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800169a:	4a2c      	ldr	r2, [pc, #176]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa96 	bl	8000bd4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ac:	f7ff fa92 	bl	8000bd4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0f2      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016be:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ef      	beq.n	80016ac <HAL_RCC_OscConfig+0x418>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa79 	bl	8000bd4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e6:	f7ff fa75 	bl	8000bd4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0d5      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 80016fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ef      	bne.n	80016e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80c9 	beq.w	80018a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b0c      	cmp	r3, #12
 800171a:	f000 8083 	beq.w	8001824 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d15e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fa4f 	bl	8000bd4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001738:	e00c      	b.n	8001754 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fa4b 	bl	8000bd4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d905      	bls.n	8001754 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0ab      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ec      	bne.n	800173a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001760:	4b52      	ldr	r3, [pc, #328]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	4b52      	ldr	r3, [pc, #328]	@ (80018b0 <HAL_RCC_OscConfig+0x61c>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6a11      	ldr	r1, [r2, #32]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001770:	3a01      	subs	r2, #1
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800177a:	0212      	lsls	r2, r2, #8
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001782:	0852      	lsrs	r2, r2, #1
 8001784:	3a01      	subs	r2, #1
 8001786:	0552      	lsls	r2, r2, #21
 8001788:	4311      	orrs	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800178e:	0852      	lsrs	r2, r2, #1
 8001790:	3a01      	subs	r2, #1
 8001792:	0652      	lsls	r2, r2, #25
 8001794:	4311      	orrs	r1, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800179a:	06d2      	lsls	r2, r2, #27
 800179c:	430a      	orrs	r2, r1
 800179e:	4943      	ldr	r1, [pc, #268]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a40      	ldr	r2, [pc, #256]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b0:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a3d      	ldr	r2, [pc, #244]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa0a 	bl	8000bd4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fa06 	bl	8000bd4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e066      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x530>
 80017e2:	e05e      	b.n	80018a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a30      	ldr	r2, [pc, #192]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f9f0 	bl	8000bd4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f9ec 	bl	8000bd4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e04c      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4924      	ldr	r1, [pc, #144]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_RCC_OscConfig+0x620>)
 800181e:	4013      	ands	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
 8001822:	e03e      	b.n	80018a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e039      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <HAL_RCC_OscConfig+0x618>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d12c      	bne.n	800189e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	3b01      	subs	r3, #1
 8001850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d123      	bne.n	800189e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d11b      	bne.n	800189e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d113      	bne.n	800189e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d109      	bne.n	800189e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	019f800c 	.word	0x019f800c
 80018b4:	feeefffc 	.word	0xfeeefffc

080018b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e11e      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b91      	ldr	r3, [pc, #580]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d910      	bls.n	8001900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b8e      	ldr	r3, [pc, #568]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 020f 	bic.w	r2, r3, #15
 80018e6:	498c      	ldr	r1, [pc, #560]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e106      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d073      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d129      	bne.n	8001968 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001914:	4b81      	ldr	r3, [pc, #516]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0f4      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001924:	f000 f9d0 	bl	8001cc8 <RCC_GetSysClockFreqFromPLLSource>
 8001928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4a7c      	ldr	r2, [pc, #496]	@ (8001b20 <HAL_RCC_ClockConfig+0x268>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d93f      	bls.n	80019b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001932:	4b7a      	ldr	r3, [pc, #488]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001946:	2b00      	cmp	r3, #0
 8001948:	d033      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d12f      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001952:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800195a:	4a70      	ldr	r2, [pc, #448]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001960:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e024      	b.n	80019b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d107      	bne.n	8001980 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001970:	4b6a      	ldr	r3, [pc, #424]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0c6      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b66      	ldr	r3, [pc, #408]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0be      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001990:	f000 f8ce 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4a61      	ldr	r2, [pc, #388]	@ (8001b20 <HAL_RCC_ClockConfig+0x268>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d909      	bls.n	80019b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800199e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019a6:	4a5d      	ldr	r2, [pc, #372]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4957      	ldr	r1, [pc, #348]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c4:	f7ff f906 	bl	8000bd4 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f902 	bl	8000bd4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e095      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 020c 	and.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1eb      	bne.n	80019cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a42      	ldr	r2, [pc, #264]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a24:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4936      	ldr	r1, [pc, #216]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b80      	cmp	r3, #128	@ 0x80
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a4e:	4b33      	ldr	r3, [pc, #204]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d21d      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 020f 	bic.w	r2, r3, #15
 8001a70:	4929      	ldr	r1, [pc, #164]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a78:	f7ff f8ac 	bl	8000bd4 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff f8a8 	bl	8000bd4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e03b      	b.n	8001b0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_RCC_ClockConfig+0x260>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ed      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4917      	ldr	r1, [pc, #92]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490f      	ldr	r1, [pc, #60]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae2:	f000 f825 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_RCC_ClockConfig+0x264>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <HAL_RCC_ClockConfig+0x26c>)
 8001af4:	5ccb      	ldrb	r3, [r1, r3]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x270>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_RCC_ClockConfig+0x274>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe ff64 	bl	80009d4 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	04c4b400 	.word	0x04c4b400
 8001b24:	08005c0c 	.word	0x08005c0c
 8001b28:	2000000c 	.word	0x2000000c
 8001b2c:	20000010 	.word	0x20000010

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e047      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b48:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b54:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	e03e      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b5a:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d136      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b84:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	68d2      	ldr	r2, [r2, #12]
 8001b90:	0a12      	lsrs	r2, r2, #8
 8001b92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
      break;
 8001b9c:	e00c      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba8:	68d2      	ldr	r2, [r2, #12]
 8001baa:	0a12      	lsrs	r2, r2, #8
 8001bac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
      break;
 8001bb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0e5b      	lsrs	r3, r3, #25
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e001      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bd8:	693b      	ldr	r3, [r7, #16]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	02dc6c00 	.word	0x02dc6c00

08001bf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08005c1c 	.word	0x08005c1c

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c3c:	f7ff ffda 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0adb      	lsrs	r3, r3, #11
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4904      	ldr	r1, [pc, #16]	@ (8001c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08005c1c 	.word	0x08005c1c

08001c64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	220f      	movs	r2, #15
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d10c      	bne.n	8001d06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf6:	68d2      	ldr	r2, [r2, #12]
 8001cf8:	0a12      	lsrs	r2, r2, #8
 8001cfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
    break;
 8001d04:	e00c      	b.n	8001d20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	0a12      	lsrs	r2, r2, #8
 8001d14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    break;
 8001d1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0e5b      	lsrs	r3, r3, #25
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	02dc6c00 	.word	0x02dc6c00
 8001d50:	00f42400 	.word	0x00f42400

08001d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d60:	2300      	movs	r3, #0
 8001d62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8098 	beq.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b43      	ldr	r3, [pc, #268]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b40      	ldr	r3, [pc, #256]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a3f      	ldr	r2, [pc, #252]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a39      	ldr	r2, [pc, #228]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001daa:	f7fe ff13 	bl	8000bd4 <HAL_GetTick>
 8001dae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db0:	e009      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7fe ff0f 	bl	8000bd4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d902      	bls.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	74fb      	strb	r3, [r7, #19]
        break;
 8001dc4:	e005      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dc6:	4b30      	ldr	r3, [pc, #192]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0ef      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d159      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01e      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d019      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a1f      	ldr	r2, [pc, #124]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e10:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e20:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe fecf 	bl	8000bd4 <HAL_GetTick>
 8001e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e38:	e00b      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7fe fecb 	bl	8000bd4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d902      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e50:	e006      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ec      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e66:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	4903      	ldr	r1, [pc, #12]	@ (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e7c:	e008      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	74bb      	strb	r3, [r7, #18]
 8001e82:	e005      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e90:	7c7b      	ldrb	r3, [r7, #17]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	4aa5      	ldr	r2, [pc, #660]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eae:	4ba0      	ldr	r3, [pc, #640]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb4:	f023 0203 	bic.w	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	499c      	ldr	r1, [pc, #624]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed0:	4b97      	ldr	r3, [pc, #604]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	f023 020c 	bic.w	r2, r3, #12
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4994      	ldr	r1, [pc, #592]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	498b      	ldr	r1, [pc, #556]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f14:	4b86      	ldr	r3, [pc, #536]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	4983      	ldr	r1, [pc, #524]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f36:	4b7e      	ldr	r3, [pc, #504]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	497a      	ldr	r1, [pc, #488]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f58:	4b75      	ldr	r3, [pc, #468]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4972      	ldr	r1, [pc, #456]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4969      	ldr	r1, [pc, #420]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f9c:	4b64      	ldr	r3, [pc, #400]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4961      	ldr	r1, [pc, #388]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	4958      	ldr	r1, [pc, #352]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d015      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe0:	4b53      	ldr	r3, [pc, #332]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	4950      	ldr	r1, [pc, #320]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ffe:	d105      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002000:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a4a      	ldr	r2, [pc, #296]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800200a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002018:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	4942      	ldr	r1, [pc, #264]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002036:	d105      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002038:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a3c      	ldr	r2, [pc, #240]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002042:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002050:	4b37      	ldr	r3, [pc, #220]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4934      	ldr	r1, [pc, #208]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002070:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a2e      	ldr	r2, [pc, #184]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800207a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002096:	4926      	ldr	r1, [pc, #152]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a20      	ldr	r2, [pc, #128]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ce:	4918      	ldr	r1, [pc, #96]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002106:	490a      	ldr	r1, [pc, #40]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002124:	7cbb      	ldrb	r3, [r7, #18]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e049      	b.n	80021da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f841 	bl	80021e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fa22 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d001      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e04a      	b.n	80022a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d018      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x6c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223a:	d013      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x6c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00e      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x6c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_TIM_Base_Start_IT+0xc4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x6c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1a      	ldr	r2, [pc, #104]	@ (80022c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_TIM_Base_Start_IT+0x6c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d115      	bne.n	8002290 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d015      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0xaa>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227c:	d011      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228e:	e008      	b.n	80022a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e000      	b.n	80022a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40013400 	.word	0x40013400
 80022c4:	40014000 	.word	0x40014000
 80022c8:	00010007 	.word	0x00010007

080022cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0202 	mvn.w	r2, #2
 8002300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f931 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f923 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f934 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0204 	mvn.w	r2, #4
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f90b 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8fd 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f90e 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0208 	mvn.w	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8e5 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8d7 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8e8 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0210 	mvn.w	r2, #16
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2208      	movs	r2, #8
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8bf 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8b1 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8c2 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0201 	mvn.w	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fa34 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00c      	beq.n	8002466 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800245e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f951 	bl	8002708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f949 	bl	800271c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00c      	beq.n	80024ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f87c 	bl	80025a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0220 	mvn.w	r2, #32
 80024ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f911 	bl	80026f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00c      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80024ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f91d 	bl	8002730 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f915 	bl	8002744 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f90d 	bl	8002758 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f905 	bl	800276c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a42      	ldr	r2, [pc, #264]	@ (80026d8 <TIM_Base_SetConfig+0x11c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00f      	beq.n	80025f4 <TIM_Base_SetConfig+0x38>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025da:	d00b      	beq.n	80025f4 <TIM_Base_SetConfig+0x38>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3f      	ldr	r2, [pc, #252]	@ (80026dc <TIM_Base_SetConfig+0x120>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <TIM_Base_SetConfig+0x38>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3e      	ldr	r2, [pc, #248]	@ (80026e0 <TIM_Base_SetConfig+0x124>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x38>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3d      	ldr	r2, [pc, #244]	@ (80026e4 <TIM_Base_SetConfig+0x128>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a33      	ldr	r2, [pc, #204]	@ (80026d8 <TIM_Base_SetConfig+0x11c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01b      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002614:	d017      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a30      	ldr	r2, [pc, #192]	@ (80026dc <TIM_Base_SetConfig+0x120>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2f      	ldr	r2, [pc, #188]	@ (80026e0 <TIM_Base_SetConfig+0x124>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <TIM_Base_SetConfig+0x128>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <TIM_Base_SetConfig+0x12c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <TIM_Base_SetConfig+0x130>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x8a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <TIM_Base_SetConfig+0x134>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <TIM_Base_SetConfig+0x11c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00f      	beq.n	80026a4 <TIM_Base_SetConfig+0xe8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <TIM_Base_SetConfig+0x128>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00b      	beq.n	80026a4 <TIM_Base_SetConfig+0xe8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <TIM_Base_SetConfig+0x12c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0xe8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <TIM_Base_SetConfig+0x130>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0xe8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <TIM_Base_SetConfig+0x134>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d103      	bne.n	80026ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f023 0201 	bic.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]
  }
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40000800 	.word	0x40000800
 80026e4:	40013400 	.word	0x40013400
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40014800 	.word	0x40014800

080026f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e042      	b.n	8002818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f8bd 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	@ 0x24
 80027ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fb88 	bl	8002ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8b9 	bl	8002948 <UART_SetConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e01b      	b.n	8002818 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fc07 	bl	8003024 <UART_CheckIdleState>
 8002816:	4603      	mov	r3, r0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002820:	b480      	push	{r7}
 8002822:	b091      	sub	sp, #68	@ 0x44
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	2b20      	cmp	r3, #32
 8002836:	d178      	bne.n	800292a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Transmit_IT+0x24>
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e071      	b.n	800292c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2221      	movs	r2, #33	@ 0x21
 8002870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800287c:	d12a      	bne.n	80028d4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	d107      	bne.n	8002898 <HAL_UART_Transmit_IT+0x78>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a29      	ldr	r2, [pc, #164]	@ (8002938 <HAL_UART_Transmit_IT+0x118>)
 8002894:	679a      	str	r2, [r3, #120]	@ 0x78
 8002896:	e002      	b.n	800289e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a28      	ldr	r2, [pc, #160]	@ (800293c <HAL_UART_Transmit_IT+0x11c>)
 800289c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3308      	adds	r3, #8
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3308      	adds	r3, #8
 80028bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028be:	637a      	str	r2, [r7, #52]	@ 0x34
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <HAL_UART_Transmit_IT+0x7e>
 80028d2:	e028      	b.n	8002926 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028dc:	d107      	bne.n	80028ee <HAL_UART_Transmit_IT+0xce>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <HAL_UART_Transmit_IT+0x120>)
 80028ea:	679a      	str	r2, [r3, #120]	@ 0x78
 80028ec:	e002      	b.n	80028f4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a14      	ldr	r2, [pc, #80]	@ (8002944 <HAL_UART_Transmit_IT+0x124>)
 80028f2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	613b      	str	r3, [r7, #16]
   return(result);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	69f9      	ldr	r1, [r7, #28]
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e6      	bne.n	80028f4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3744      	adds	r7, #68	@ 0x44
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	08003579 	.word	0x08003579
 800293c:	08003499 	.word	0x08003499
 8002940:	080033d7 	.word	0x080033d7
 8002944:	0800331f 	.word	0x0800331f

08002948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b08c      	sub	sp, #48	@ 0x30
 800294e:	af00      	add	r7, sp, #0
 8002950:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	431a      	orrs	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	431a      	orrs	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4313      	orrs	r3, r2
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4bab      	ldr	r3, [pc, #684]	@ (8002c24 <UART_SetConfig+0x2dc>)
 8002978:	4013      	ands	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4aa0      	ldr	r2, [pc, #640]	@ (8002c28 <UART_SetConfig+0x2e0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b0:	4313      	orrs	r3, r2
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80029be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	f023 010f 	bic.w	r1, r3, #15
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a91      	ldr	r2, [pc, #580]	@ (8002c2c <UART_SetConfig+0x2e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d125      	bne.n	8002a38 <UART_SetConfig+0xf0>
 80029ec:	4b90      	ldr	r3, [pc, #576]	@ (8002c30 <UART_SetConfig+0x2e8>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d81a      	bhi.n	8002a30 <UART_SetConfig+0xe8>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <UART_SetConfig+0xb8>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a21 	.word	0x08002a21
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a29 	.word	0x08002a29
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a16:	e0d6      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a1e:	e0d2      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a20:	2304      	movs	r3, #4
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a26:	e0ce      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a28:	2308      	movs	r3, #8
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a2e:	e0ca      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a30:	2310      	movs	r3, #16
 8002a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a36:	e0c6      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c34 <UART_SetConfig+0x2ec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d138      	bne.n	8002ab4 <UART_SetConfig+0x16c>
 8002a42:	4b7b      	ldr	r3, [pc, #492]	@ (8002c30 <UART_SetConfig+0x2e8>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d82d      	bhi.n	8002aac <UART_SetConfig+0x164>
 8002a50:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <UART_SetConfig+0x110>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002aad 	.word	0x08002aad
 8002a60:	08002aad 	.word	0x08002aad
 8002a64:	08002aad 	.word	0x08002aad
 8002a68:	08002a9d 	.word	0x08002a9d
 8002a6c:	08002aad 	.word	0x08002aad
 8002a70:	08002aad 	.word	0x08002aad
 8002a74:	08002aad 	.word	0x08002aad
 8002a78:	08002a95 	.word	0x08002a95
 8002a7c:	08002aad 	.word	0x08002aad
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002aad 	.word	0x08002aad
 8002a88:	08002aa5 	.word	0x08002aa5
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a92:	e098      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a9a:	e094      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aa2:	e090      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aaa:	e08c      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002aac:	2310      	movs	r3, #16
 8002aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab2:	e088      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c38 <UART_SetConfig+0x2f0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d125      	bne.n	8002b0a <UART_SetConfig+0x1c2>
 8002abe:	4b5c      	ldr	r3, [pc, #368]	@ (8002c30 <UART_SetConfig+0x2e8>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d016      	beq.n	8002afa <UART_SetConfig+0x1b2>
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d818      	bhi.n	8002b02 <UART_SetConfig+0x1ba>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d00a      	beq.n	8002aea <UART_SetConfig+0x1a2>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d814      	bhi.n	8002b02 <UART_SetConfig+0x1ba>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <UART_SetConfig+0x19a>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d008      	beq.n	8002af2 <UART_SetConfig+0x1aa>
 8002ae0:	e00f      	b.n	8002b02 <UART_SetConfig+0x1ba>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae8:	e06d      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af0:	e069      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002af2:	2304      	movs	r3, #4
 8002af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af8:	e065      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002afa:	2308      	movs	r3, #8
 8002afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b00:	e061      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b02:	2310      	movs	r3, #16
 8002b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b08:	e05d      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c3c <UART_SetConfig+0x2f4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d125      	bne.n	8002b60 <UART_SetConfig+0x218>
 8002b14:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <UART_SetConfig+0x2e8>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b20:	d016      	beq.n	8002b50 <UART_SetConfig+0x208>
 8002b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b24:	d818      	bhi.n	8002b58 <UART_SetConfig+0x210>
 8002b26:	2b80      	cmp	r3, #128	@ 0x80
 8002b28:	d00a      	beq.n	8002b40 <UART_SetConfig+0x1f8>
 8002b2a:	2b80      	cmp	r3, #128	@ 0x80
 8002b2c:	d814      	bhi.n	8002b58 <UART_SetConfig+0x210>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <UART_SetConfig+0x1f0>
 8002b32:	2b40      	cmp	r3, #64	@ 0x40
 8002b34:	d008      	beq.n	8002b48 <UART_SetConfig+0x200>
 8002b36:	e00f      	b.n	8002b58 <UART_SetConfig+0x210>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	e042      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b40:	2302      	movs	r3, #2
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b46:	e03e      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4e:	e03a      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b50:	2308      	movs	r3, #8
 8002b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b56:	e036      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b58:	2310      	movs	r3, #16
 8002b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b5e:	e032      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a30      	ldr	r2, [pc, #192]	@ (8002c28 <UART_SetConfig+0x2e0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d12a      	bne.n	8002bc0 <UART_SetConfig+0x278>
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <UART_SetConfig+0x2e8>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b78:	d01a      	beq.n	8002bb0 <UART_SetConfig+0x268>
 8002b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b7e:	d81b      	bhi.n	8002bb8 <UART_SetConfig+0x270>
 8002b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b84:	d00c      	beq.n	8002ba0 <UART_SetConfig+0x258>
 8002b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b8a:	d815      	bhi.n	8002bb8 <UART_SetConfig+0x270>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <UART_SetConfig+0x250>
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b94:	d008      	beq.n	8002ba8 <UART_SetConfig+0x260>
 8002b96:	e00f      	b.n	8002bb8 <UART_SetConfig+0x270>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b9e:	e012      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ba6:	e00e      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bae:	e00a      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb6:	e006      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bbe:	e002      	b.n	8002bc6 <UART_SetConfig+0x27e>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a17      	ldr	r2, [pc, #92]	@ (8002c28 <UART_SetConfig+0x2e0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f040 80a8 	bne.w	8002d22 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d834      	bhi.n	8002c44 <UART_SetConfig+0x2fc>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <UART_SetConfig+0x298>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002c05 	.word	0x08002c05
 8002be4:	08002c45 	.word	0x08002c45
 8002be8:	08002c0d 	.word	0x08002c0d
 8002bec:	08002c45 	.word	0x08002c45
 8002bf0:	08002c13 	.word	0x08002c13
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c45 	.word	0x08002c45
 8002bfc:	08002c45 	.word	0x08002c45
 8002c00:	08002c1b 	.word	0x08002c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff f802 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c0a:	e021      	b.n	8002c50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <UART_SetConfig+0x2f8>)
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c10:	e01e      	b.n	8002c50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c12:	f7fe ff8d 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002c16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c18:	e01a      	b.n	8002c50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c20:	e016      	b.n	8002c50 <UART_SetConfig+0x308>
 8002c22:	bf00      	nop
 8002c24:	cfff69f3 	.word	0xcfff69f3
 8002c28:	40008000 	.word	0x40008000
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40004400 	.word	0x40004400
 8002c38:	40004800 	.word	0x40004800
 8002c3c:	40004c00 	.word	0x40004c00
 8002c40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 812a 	beq.w	8002eac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	4a9e      	ldr	r2, [pc, #632]	@ (8002ed8 <UART_SetConfig+0x590>)
 8002c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c62:	461a      	mov	r2, r3
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d305      	bcc.n	8002c88 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d903      	bls.n	8002c90 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c8e:	e10d      	b.n	8002eac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	2200      	movs	r2, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	60fa      	str	r2, [r7, #12]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed8 <UART_SetConfig+0x590>)
 8002c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cb2:	f7fd fab5 	bl	8000220 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	020b      	lsls	r3, r1, #8
 8002cc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ccc:	0202      	lsls	r2, r0, #8
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	6849      	ldr	r1, [r1, #4]
 8002cd2:	0849      	lsrs	r1, r1, #1
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4605      	mov	r5, r0
 8002cda:	eb12 0804 	adds.w	r8, r2, r4
 8002cde:	eb43 0905 	adc.w	r9, r3, r5
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	469a      	mov	sl, r3
 8002cea:	4693      	mov	fp, r2
 8002cec:	4652      	mov	r2, sl
 8002cee:	465b      	mov	r3, fp
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	f7fd fa94 	bl	8000220 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d06:	d308      	bcc.n	8002d1a <UART_SetConfig+0x3d2>
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d0e:	d204      	bcs.n	8002d1a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e0c8      	b.n	8002eac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d20:	e0c4      	b.n	8002eac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d2a:	d167      	bne.n	8002dfc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d828      	bhi.n	8002d86 <UART_SetConfig+0x43e>
 8002d34:	a201      	add	r2, pc, #4	@ (adr r2, 8002d3c <UART_SetConfig+0x3f4>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	08002d71 	.word	0x08002d71
 8002d48:	08002d87 	.word	0x08002d87
 8002d4c:	08002d77 	.word	0x08002d77
 8002d50:	08002d87 	.word	0x08002d87
 8002d54:	08002d87 	.word	0x08002d87
 8002d58:	08002d87 	.word	0x08002d87
 8002d5c:	08002d7f 	.word	0x08002d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d60:	f7fe ff54 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d66:	e014      	b.n	8002d92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d68:	f7fe ff66 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8002d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d6e:	e010      	b.n	8002d92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d70:	4b5a      	ldr	r3, [pc, #360]	@ (8002edc <UART_SetConfig+0x594>)
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d74:	e00d      	b.n	8002d92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d76:	f7fe fedb 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002d7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d7c:	e009      	b.n	8002d92 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d84:	e005      	b.n	8002d92 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8089 	beq.w	8002eac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed8 <UART_SetConfig+0x590>)
 8002da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dac:	005a      	lsls	r2, r3, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	441a      	add	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	d916      	bls.n	8002df4 <UART_SetConfig+0x4ac>
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d212      	bcs.n	8002df4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f023 030f 	bic.w	r3, r3, #15
 8002dd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	8bfb      	ldrh	r3, [r7, #30]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	8bfa      	ldrh	r2, [r7, #30]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e05b      	b.n	8002eac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002dfa:	e057      	b.n	8002eac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d828      	bhi.n	8002e56 <UART_SetConfig+0x50e>
 8002e04:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <UART_SetConfig+0x4c4>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e31 	.word	0x08002e31
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e57 	.word	0x08002e57
 8002e1c:	08002e47 	.word	0x08002e47
 8002e20:	08002e57 	.word	0x08002e57
 8002e24:	08002e57 	.word	0x08002e57
 8002e28:	08002e57 	.word	0x08002e57
 8002e2c:	08002e4f 	.word	0x08002e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e30:	f7fe feec 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002e34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e36:	e014      	b.n	8002e62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7fe fefe 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8002e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e3e:	e010      	b.n	8002e62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e40:	4b26      	ldr	r3, [pc, #152]	@ (8002edc <UART_SetConfig+0x594>)
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e44:	e00d      	b.n	8002e62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e46:	f7fe fe73 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e4c:	e009      	b.n	8002e62 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e54:	e005      	b.n	8002e62 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e60:	bf00      	nop
    }

    if (pclk != 0U)
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d021      	beq.n	8002eac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed8 <UART_SetConfig+0x590>)
 8002e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	441a      	add	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	d909      	bls.n	8002ea6 <UART_SetConfig+0x55e>
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d205      	bcs.n	8002ea6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e002      	b.n	8002eac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ec8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	@ 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	08005c24 	.word	0x08005c24
 8002edc:	00f42400 	.word	0x00f42400

08002ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01a      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fde:	d10a      	bne.n	8002ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b098      	sub	sp, #96	@ 0x60
 8003028:	af02      	add	r7, sp, #8
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003034:	f7fd fdce 	bl	8000bd4 <HAL_GetTick>
 8003038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d12f      	bne.n	80030a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f88e 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d022      	beq.n	80030a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003076:	653b      	str	r3, [r7, #80]	@ 0x50
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003080:	647b      	str	r3, [r7, #68]	@ 0x44
 8003082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800308e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e6      	bne.n	8003062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e063      	b.n	8003170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d149      	bne.n	800314a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	2200      	movs	r2, #0
 80030c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f857 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d03c      	beq.n	800314a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	623b      	str	r3, [r7, #32]
   return(result);
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e6      	bne.n	80030d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3308      	adds	r3, #8
 8003108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	60fb      	str	r3, [r7, #12]
   return(result);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3308      	adds	r3, #8
 8003120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	617b      	str	r3, [r7, #20]
   return(result);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e5      	bne.n	8003102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e012      	b.n	8003170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3758      	adds	r7, #88	@ 0x58
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003188:	e04f      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003190:	d04b      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fd fd1f 	bl	8000bd4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e04e      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d037      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d034      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d031      	beq.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d110      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2208      	movs	r2, #8
 80031da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f838 	bl	8003252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2208      	movs	r2, #8
 80031e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e029      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003204:	d111      	bne.n	800322a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800320e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f81e 	bl	8003252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e00f      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	429a      	cmp	r2, r3
 8003246:	d0a0      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003252:	b480      	push	{r7}
 8003254:	b095      	sub	sp, #84	@ 0x54
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003278:	643b      	str	r3, [r7, #64]	@ 0x40
 800327a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800327e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	61fb      	str	r3, [r7, #28]
   return(result);
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032b8:	e841 2300 	strex	r3, r2, [r1]
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e3      	bne.n	800328c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d118      	bne.n	80032fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 0310 	bic.w	r3, r3, #16
 80032e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	613b      	str	r3, [r7, #16]
   return(result);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e6      	bne.n	80032cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003312:	bf00      	nop
 8003314:	3754      	adds	r7, #84	@ 0x54
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800331e:	b480      	push	{r7}
 8003320:	b08f      	sub	sp, #60	@ 0x3c
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	2b21      	cmp	r3, #33	@ 0x21
 800332e:	d14c      	bne.n	80033ca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d132      	bne.n	80033a2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	61fb      	str	r3, [r7, #28]
   return(result);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003350:	637b      	str	r3, [r7, #52]	@ 0x34
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	60bb      	str	r3, [r7, #8]
   return(result);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6979      	ldr	r1, [r7, #20]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e6      	bne.n	800336e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80033a0:	e013      	b.n	80033ca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80033ca:	bf00      	nop
 80033cc:	373c      	adds	r7, #60	@ 0x3c
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b091      	sub	sp, #68	@ 0x44
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e4:	2b21      	cmp	r3, #33	@ 0x21
 80033e6:	d151      	bne.n	800348c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d132      	bne.n	800345a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	623b      	str	r3, [r7, #32]
   return(result);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003412:	633b      	str	r3, [r7, #48]	@ 0x30
 8003414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e6      	bne.n	80033f4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60fb      	str	r3, [r7, #12]
   return(result);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e6      	bne.n	8003426 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003458:	e018      	b.n	800348c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800348c:	bf00      	nop
 800348e:	3744      	adds	r7, #68	@ 0x44
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b091      	sub	sp, #68	@ 0x44
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	2b21      	cmp	r3, #33	@ 0x21
 80034a8:	d160      	bne.n	800356c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80034b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80034b2:	e057      	b.n	8003564 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d133      	bne.n	8003528 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	623b      	str	r3, [r7, #32]
   return(result);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80034e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60fb      	str	r3, [r7, #12]
   return(result);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	617b      	str	r3, [r7, #20]
   return(result);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e6      	bne.n	80034f4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003526:	e021      	b.n	800356c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800355e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003560:	3b01      	subs	r3, #1
 8003562:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003564:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1a4      	bne.n	80034b4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800356a:	e7ff      	b.n	800356c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800356c:	bf00      	nop
 800356e:	3744      	adds	r7, #68	@ 0x44
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b091      	sub	sp, #68	@ 0x44
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	2b21      	cmp	r3, #33	@ 0x21
 8003588:	d165      	bne.n	8003656 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003590:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003592:	e05c      	b.n	800364e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d133      	bne.n	8003608 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3308      	adds	r3, #8
 80035a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3308      	adds	r3, #8
 80035be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e5      	bne.n	80035a0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e6      	bne.n	80035d4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003606:	e026      	b.n	8003656 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800361c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003648:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800364a:	3b01      	subs	r3, #1
 800364c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800364e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003650:	2b00      	cmp	r3, #0
 8003652:	d19f      	bne.n	8003594 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003654:	e7ff      	b.n	8003656 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003656:	bf00      	nop
 8003658:	3744      	adds	r7, #68	@ 0x44
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_UARTEx_DisableFifoMode+0x16>
 8003674:	2302      	movs	r3, #2
 8003676:	e027      	b.n	80036c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	@ 0x24
 8003684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80036a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e02d      	b.n	8003748 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	@ 0x24
 80036f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f84f 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e02d      	b.n	80037c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	@ 0x24
 8003774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f811 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037ec:	e031      	b.n	8003852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037ee:	2308      	movs	r3, #8
 80037f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037f2:	2308      	movs	r3, #8
 80037f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	0e5b      	lsrs	r3, r3, #25
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0f5b      	lsrs	r3, r3, #29
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003816:	7bbb      	ldrb	r3, [r7, #14]
 8003818:	7b3a      	ldrb	r2, [r7, #12]
 800381a:	4911      	ldr	r1, [pc, #68]	@ (8003860 <UARTEx_SetNbDataToProcess+0x94>)
 800381c:	5c8a      	ldrb	r2, [r1, r2]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003822:	7b3a      	ldrb	r2, [r7, #12]
 8003824:	490f      	ldr	r1, [pc, #60]	@ (8003864 <UARTEx_SetNbDataToProcess+0x98>)
 8003826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003828:	fb93 f3f2 	sdiv	r3, r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	7b7a      	ldrb	r2, [r7, #13]
 8003838:	4909      	ldr	r1, [pc, #36]	@ (8003860 <UARTEx_SetNbDataToProcess+0x94>)
 800383a:	5c8a      	ldrb	r2, [r1, r2]
 800383c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003840:	7b7a      	ldrb	r2, [r7, #13]
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <UARTEx_SetNbDataToProcess+0x98>)
 8003844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003846:	fb93 f3f2 	sdiv	r3, r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	08005c3c 	.word	0x08005c3c
 8003864:	08005c44 	.word	0x08005c44

08003868 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800387a:	2b84      	cmp	r3, #132	@ 0x84
 800387c:	d005      	beq.n	800388a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800387e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	3303      	adds	r3, #3
 8003888:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800389c:	f000 fe7a 	bl	8004594 <vTaskStartScheduler>
  
  return osOK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685c      	ldr	r4, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038bc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ffcf 	bl	8003868 <makeFreeRtosPriority>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	9200      	str	r2, [sp, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4632      	mov	r2, r6
 80038d8:	4629      	mov	r1, r5
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 fcd8 	bl	8004290 <xTaskCreate>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d001      	beq.n	80038ea <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <osDelay+0x16>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	e000      	b.n	800390c <osDelay+0x18>
 800390a:	2301      	movs	r3, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fe0b 	bl	8004528 <vTaskDelay>
  
  return osOK;
 8003912:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d4:	d103      	bne.n	80039de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00c      	b.n	80039f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3308      	adds	r3, #8
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <vListInsert+0x2e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d2f6      	bcs.n	80039e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6892      	ldr	r2, [r2, #8]
 8003a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ab0:	f001 fcb2 	bl	8005418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	@ 0xff
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22ff      	movs	r2, #255	@ 0xff
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d114      	bne.n	8003b30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01a      	beq.n	8003b44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3310      	adds	r3, #16
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff80 	bl	8004a18 <xTaskRemoveFromEventList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <xQueueGenericReset+0xd0>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	e009      	b.n	8003b44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3310      	adds	r3, #16
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fef1 	bl	800391c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3324      	adds	r3, #36	@ 0x24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff feec 	bl	800391c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b44:	f001 fc9a 	bl	800547c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b48:	2301      	movs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	@ 0x28
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	613b      	str	r3, [r7, #16]
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3348      	adds	r3, #72	@ 0x48
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fd20 	bl	80055d8 <pvPortMalloc>
 8003b98:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3348      	adds	r3, #72	@ 0x48
 8003ba8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003baa:	79fa      	ldrb	r2, [r7, #7]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f805 	bl	8003bc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
	}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e002      	b.n	8003be8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	69b8      	ldr	r0, [r7, #24]
 8003bf8:	f7ff ff44 	bl	8003a84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c24:	2300      	movs	r3, #0
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f81c 	bl	8003c68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c42:	2301      	movs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	6978      	ldr	r0, [r7, #20]
 8003c52:	f7ff ff81 	bl	8003b58 <xQueueGenericCreate>
 8003c56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff ffd3 	bl	8003c04 <prvInitialiseMutex>

		return xNewQueue;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
	}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	@ 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c76:	2300      	movs	r3, #0
 8003c78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <xQueueGenericSend+0x34>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSend+0x42>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSend+0x46>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSend+0x48>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <xQueueGenericSend+0x64>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSend+0x72>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSend+0x76>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSend+0x78>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xQueueGenericSend+0x94>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cfc:	f001 f832 	bl	8004d64 <xTaskGetSchedulerState>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xQueueGenericSend+0xa4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <xQueueGenericSend+0xa8>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <xQueueGenericSend+0xaa>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xQueueGenericSend+0xc6>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d2e:	f001 fb73 	bl	8005418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <xQueueGenericSend+0xdc>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d129      	bne.n	8003d98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d4a:	f000 f9b7 	bl	80040bc <prvCopyDataToQueue>
 8003d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	3324      	adds	r3, #36	@ 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fe5b 	bl	8004a18 <xTaskRemoveFromEventList>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d68:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <xQueueGenericSend+0x200>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	e00a      	b.n	8003d90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <xQueueGenericSend+0x200>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d90:	f001 fb74 	bl	800547c <vPortExitCritical>
				return pdPASS;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e063      	b.n	8003e60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d9e:	f001 fb6d 	bl	800547c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e05c      	b.n	8003e60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe95 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dba:	f001 fb5f 	bl	800547c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dbe:	f000 fc3b 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dc2:	f001 fb29 	bl	8005418 <vPortEnterCritical>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd2:	d103      	bne.n	8003ddc <xQueueGenericSend+0x174>
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003de8:	d103      	bne.n	8003df2 <xQueueGenericSend+0x18a>
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003df2:	f001 fb43 	bl	800547c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003df6:	1d3a      	adds	r2, r7, #4
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fe84 	bl	8004b0c <xTaskCheckForTimeOut>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d124      	bne.n	8003e54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e0c:	f000 fa28 	bl	8004260 <prvIsQueueFull>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	3310      	adds	r3, #16
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fdd4 	bl	80049cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e26:	f000 f9b3 	bl	8004190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e2a:	f000 fc13 	bl	8004654 <xTaskResumeAll>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f af7c 	bne.w	8003d2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <xQueueGenericSend+0x200>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	e772      	b.n	8003d2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e4a:	f000 f9a1 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e4e:	f000 fc01 	bl	8004654 <xTaskResumeAll>
 8003e52:	e76c      	b.n	8003d2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e56:	f000 f99b 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e5a:	f000 fbfb 	bl	8004654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3738      	adds	r7, #56	@ 0x38
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08e      	sub	sp, #56	@ 0x38
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	623b      	str	r3, [r7, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	61fb      	str	r3, [r7, #28]
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec0:	f000 ff50 	bl	8004d64 <xTaskGetSchedulerState>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xQueueSemaphoreTake+0x64>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueSemaphoreTake+0x68>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueSemaphoreTake+0x6a>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61bb      	str	r3, [r7, #24]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef2:	f001 fa91 	bl	8005418 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d024      	beq.n	8003f4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	1e5a      	subs	r2, r3, #1
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f12:	f001 f8d3 	bl	80050bc <pvTaskIncrementMutexHeldCount>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	3310      	adds	r3, #16
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fd75 	bl	8004a18 <xTaskRemoveFromEventList>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f34:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <xQueueSemaphoreTake+0x21c>)
 8003f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f44:	f001 fa9a 	bl	800547c <vPortExitCritical>
				return pdPASS;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e098      	b.n	800407e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d112      	bne.n	8003f78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	617b      	str	r3, [r7, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f70:	f001 fa84 	bl	800547c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e082      	b.n	800407e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fdac 	bl	8004ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f8c:	f001 fa76 	bl	800547c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f90:	f000 fb52 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f94:	f001 fa40 	bl	8005418 <vPortEnterCritical>
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa4:	d103      	bne.n	8003fae <xQueueSemaphoreTake+0x142>
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fba:	d103      	bne.n	8003fc4 <xQueueSemaphoreTake+0x158>
 8003fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc4:	f001 fa5a 	bl	800547c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fc8:	463a      	mov	r2, r7
 8003fca:	f107 030c 	add.w	r3, r7, #12
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd9b 	bl	8004b0c <xTaskCheckForTimeOut>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d132      	bne.n	8004042 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fde:	f000 f929 	bl	8004234 <prvIsQueueEmpty>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d026      	beq.n	8004036 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003ff0:	f001 fa12 	bl	8005418 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fed1 	bl	8004da0 <xTaskPriorityInherit>
 8003ffe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004000:	f001 fa3c 	bl	800547c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	3324      	adds	r3, #36	@ 0x24
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fcdd 	bl	80049cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004014:	f000 f8bc 	bl	8004190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004018:	f000 fb1c 	bl	8004654 <xTaskResumeAll>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f47f af67 	bne.w	8003ef2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004024:	4b18      	ldr	r3, [pc, #96]	@ (8004088 <xQueueSemaphoreTake+0x21c>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	e75d      	b.n	8003ef2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004038:	f000 f8aa 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800403c:	f000 fb0a 	bl	8004654 <xTaskResumeAll>
 8004040:	e757      	b.n	8003ef2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004044:	f000 f8a4 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004048:	f000 fb04 	bl	8004654 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800404c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800404e:	f000 f8f1 	bl	8004234 <prvIsQueueEmpty>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	f43f af4c 	beq.w	8003ef2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004060:	f001 f9da 	bl	8005418 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004064:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004066:	f000 f811 	bl	800408c <prvGetDisinheritPriorityAfterTimeout>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ff92 	bl	8004f9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004078:	f001 fa00 	bl	800547c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800407c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800407e:	4618      	mov	r0, r3
 8004080:	3738      	adds	r7, #56	@ 0x38
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e001      	b.n	80040ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80040ae:	68fb      	ldr	r3, [r7, #12]
	}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d14d      	bne.n	800417e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fed0 	bl	8004e8c <xTaskPriorityDisinherit>
 80040ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	e043      	b.n	800417e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d119      	bne.n	8004130 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6858      	ldr	r0, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	461a      	mov	r2, r3
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	f001 fce0 	bl	8005acc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d32b      	bcc.n	800417e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e026      	b.n	800417e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68d8      	ldr	r0, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	461a      	mov	r2, r3
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	f001 fcc6 	bl	8005acc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	425b      	negs	r3, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	425b      	negs	r3, r3
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d105      	bne.n	800417e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3b01      	subs	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004198:	f001 f93e 	bl	8005418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a4:	e011      	b.n	80041ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	@ 0x24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fc30 	bl	8004a18 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041be:	f000 fd09 	bl	8004bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dce9      	bgt.n	80041a6 <prvUnlockQueue+0x16>
 80041d2:	e000      	b.n	80041d6 <prvUnlockQueue+0x46>
					break;
 80041d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	22ff      	movs	r2, #255	@ 0xff
 80041da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041de:	f001 f94d 	bl	800547c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041e2:	f001 f919 	bl	8005418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ee:	e011      	b.n	8004214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3310      	adds	r3, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fc0b 	bl	8004a18 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004208:	f000 fce4 	bl	8004bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	3b01      	subs	r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004218:	2b00      	cmp	r3, #0
 800421a:	dce9      	bgt.n	80041f0 <prvUnlockQueue+0x60>
 800421c:	e000      	b.n	8004220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800421e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	22ff      	movs	r2, #255	@ 0xff
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004228:	f001 f928 	bl	800547c <vPortExitCritical>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800423c:	f001 f8ec 	bl	8005418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004252:	f001 f913 	bl	800547c <vPortExitCritical>

	return xReturn;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004268:	f001 f8d6 	bl	8005418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	429a      	cmp	r2, r3
 8004276:	d102      	bne.n	800427e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e001      	b.n	8004282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004282:	f001 f8fb 	bl	800547c <vPortExitCritical>

	return xReturn;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	@ 0x30
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 f997 	bl	80055d8 <pvPortMalloc>
 80042aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042b2:	20a0      	movs	r0, #160	@ 0xa0
 80042b4:	f001 f990 	bl	80055d8 <pvPortMalloc>
 80042b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80042c6:	e005      	b.n	80042d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f001 fa53 	bl	8005774 <vPortFree>
 80042ce:	e001      	b.n	80042d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	2300      	movs	r3, #0
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f80f 	bl	8004314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042f6:	69f8      	ldr	r0, [r7, #28]
 80042f8:	f000 f8ac 	bl	8004454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e002      	b.n	8004308 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004308:	69bb      	ldr	r3, [r7, #24]
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800432c:	3b01      	subs	r3, #1
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	617b      	str	r3, [r7, #20]
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01f      	beq.n	80043a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e012      	b.n	8004390 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	7819      	ldrb	r1, [r3, #0]
 8004372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	3334      	adds	r3, #52	@ 0x34
 800437a:	460a      	mov	r2, r1
 800437c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	d9e9      	bls.n	800436a <prvInitialiseNewTask+0x56>
 8004396:	e000      	b.n	800439a <prvInitialiseNewTask+0x86>
			{
				break;
 8004398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a2:	e003      	b.n	80043ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d901      	bls.n	80043b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043b2:	2306      	movs	r3, #6
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	2200      	movs	r2, #0
 80043c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fac5 	bl	800395c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	3318      	adds	r3, #24
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fac0 	bl	800395c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	f1c3 0207 	rsb	r2, r3, #7
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	334c      	adds	r3, #76	@ 0x4c
 8004406:	224c      	movs	r2, #76	@ 0x4c
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fad2 	bl	80059b4 <memset>
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <prvInitialiseNewTask+0x134>)
 8004414:	651a      	str	r2, [r3, #80]	@ 0x50
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <prvInitialiseNewTask+0x138>)
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <prvInitialiseNewTask+0x13c>)
 8004420:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	69b8      	ldr	r0, [r7, #24]
 8004428:	f000 fec2 	bl	80051b0 <pxPortInitialiseStack>
 800442c:	4602      	mov	r2, r0
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800443c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800443e:	bf00      	nop
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000ed0 	.word	0x20000ed0
 800444c:	20000f38 	.word	0x20000f38
 8004450:	20000fa0 	.word	0x20000fa0

08004454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800445c:	f000 ffdc 	bl	8005418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004460:	4b2a      	ldr	r3, [pc, #168]	@ (800450c <prvAddNewTaskToReadyList+0xb8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a29      	ldr	r2, [pc, #164]	@ (800450c <prvAddNewTaskToReadyList+0xb8>)
 8004468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800446a:	4b29      	ldr	r3, [pc, #164]	@ (8004510 <prvAddNewTaskToReadyList+0xbc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004472:	4a27      	ldr	r2, [pc, #156]	@ (8004510 <prvAddNewTaskToReadyList+0xbc>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004478:	4b24      	ldr	r3, [pc, #144]	@ (800450c <prvAddNewTaskToReadyList+0xb8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d110      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004480:	f000 fbcc 	bl	8004c1c <prvInitialiseTaskLists>
 8004484:	e00d      	b.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004486:	4b23      	ldr	r3, [pc, #140]	@ (8004514 <prvAddNewTaskToReadyList+0xc0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <prvAddNewTaskToReadyList+0xbc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	429a      	cmp	r2, r3
 800449a:	d802      	bhi.n	80044a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800449c:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <prvAddNewTaskToReadyList+0xbc>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <prvAddNewTaskToReadyList+0xc4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <prvAddNewTaskToReadyList+0xc4>)
 80044aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <prvAddNewTaskToReadyList+0xcc>)
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7ff fa4e 	bl	8003976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044da:	f000 ffcf 	bl	800547c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <prvAddNewTaskToReadyList+0xc0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00e      	beq.n	8004504 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <prvAddNewTaskToReadyList+0xbc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d207      	bcs.n	8004504 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <prvAddNewTaskToReadyList+0xd0>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	2000027c 	.word	0x2000027c
 8004510:	2000017c 	.word	0x2000017c
 8004514:	20000288 	.word	0x20000288
 8004518:	20000298 	.word	0x20000298
 800451c:	20000284 	.word	0x20000284
 8004520:	20000180 	.word	0x20000180
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <vTaskDelay+0x64>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <vTaskDelay+0x32>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800455a:	f000 f86d 	bl	8004638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800455e:	2100      	movs	r1, #0
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fdbf 	bl	80050e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004566:	f000 f875 	bl	8004654 <xTaskResumeAll>
 800456a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004572:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <vTaskDelay+0x68>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200002a4 	.word	0x200002a4
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800459a:	4b1f      	ldr	r3, [pc, #124]	@ (8004618 <vTaskStartScheduler+0x84>)
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2300      	movs	r3, #0
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2300      	movs	r3, #0
 80045a4:	2280      	movs	r2, #128	@ 0x80
 80045a6:	491d      	ldr	r1, [pc, #116]	@ (800461c <vTaskStartScheduler+0x88>)
 80045a8:	481d      	ldr	r0, [pc, #116]	@ (8004620 <vTaskStartScheduler+0x8c>)
 80045aa:	f7ff fe71 	bl	8004290 <xTaskCreate>
 80045ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d11b      	bne.n	80045ee <vTaskStartScheduler+0x5a>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60bb      	str	r3, [r7, #8]
}
 80045c8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045ca:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <vTaskStartScheduler+0x90>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	334c      	adds	r3, #76	@ 0x4c
 80045d0:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <vTaskStartScheduler+0x94>)
 80045d2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045d4:	4b15      	ldr	r3, [pc, #84]	@ (800462c <vTaskStartScheduler+0x98>)
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045dc:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <vTaskStartScheduler+0x9c>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045e2:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <vTaskStartScheduler+0xa0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045e8:	f000 fe72 	bl	80052d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045ec:	e00f      	b.n	800460e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f4:	d10b      	bne.n	800460e <vTaskStartScheduler+0x7a>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	607b      	str	r3, [r7, #4]
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <vTaskStartScheduler+0x76>
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200002a0 	.word	0x200002a0
 800461c:	08005c04 	.word	0x08005c04
 8004620:	08004bed 	.word	0x08004bed
 8004624:	2000017c 	.word	0x2000017c
 8004628:	2000001c 	.word	0x2000001c
 800462c:	2000029c 	.word	0x2000029c
 8004630:	20000288 	.word	0x20000288
 8004634:	20000280 	.word	0x20000280

08004638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <vTaskSuspendAll+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	4a03      	ldr	r2, [pc, #12]	@ (8004650 <vTaskSuspendAll+0x18>)
 8004644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	200002a4 	.word	0x200002a4

08004654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004662:	4b42      	ldr	r3, [pc, #264]	@ (800476c <xTaskResumeAll+0x118>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <xTaskResumeAll+0x2e>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004682:	f000 fec9 	bl	8005418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004686:	4b39      	ldr	r3, [pc, #228]	@ (800476c <xTaskResumeAll+0x118>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	4a37      	ldr	r2, [pc, #220]	@ (800476c <xTaskResumeAll+0x118>)
 800468e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004690:	4b36      	ldr	r3, [pc, #216]	@ (800476c <xTaskResumeAll+0x118>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d161      	bne.n	800475c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004698:	4b35      	ldr	r3, [pc, #212]	@ (8004770 <xTaskResumeAll+0x11c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05d      	beq.n	800475c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046a0:	e02e      	b.n	8004700 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <xTaskResumeAll+0x120>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3318      	adds	r3, #24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f9be 	bl	8003a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff f9b9 	bl	8003a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	2201      	movs	r2, #1
 80046c4:	409a      	lsls	r2, r3
 80046c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004778 <xTaskResumeAll+0x124>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004778 <xTaskResumeAll+0x124>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4a27      	ldr	r2, [pc, #156]	@ (800477c <xTaskResumeAll+0x128>)
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7ff f945 	bl	8003976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f0:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <xTaskResumeAll+0x12c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046fa:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <xTaskResumeAll+0x130>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004700:	4b1c      	ldr	r3, [pc, #112]	@ (8004774 <xTaskResumeAll+0x120>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1cc      	bne.n	80046a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470e:	f000 fb09 	bl	8004d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <xTaskResumeAll+0x134>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471e:	f000 f837 	bl	8004790 <xTaskIncrementTick>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004728:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <xTaskResumeAll+0x130>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3b01      	subs	r3, #1
 8004732:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f1      	bne.n	800471e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800473a:	4b13      	ldr	r3, [pc, #76]	@ (8004788 <xTaskResumeAll+0x134>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004740:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <xTaskResumeAll+0x130>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <xTaskResumeAll+0x138>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800475c:	f000 fe8e 	bl	800547c <vPortExitCritical>

	return xAlreadyYielded;
 8004760:	68bb      	ldr	r3, [r7, #8]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200002a4 	.word	0x200002a4
 8004770:	2000027c 	.word	0x2000027c
 8004774:	2000023c 	.word	0x2000023c
 8004778:	20000284 	.word	0x20000284
 800477c:	20000180 	.word	0x20000180
 8004780:	2000017c 	.word	0x2000017c
 8004784:	20000290 	.word	0x20000290
 8004788:	2000028c 	.word	0x2000028c
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479a:	4b4f      	ldr	r3, [pc, #316]	@ (80048d8 <xTaskIncrementTick+0x148>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 808f 	bne.w	80048c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047a4:	4b4d      	ldr	r3, [pc, #308]	@ (80048dc <xTaskIncrementTick+0x14c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047ac:	4a4b      	ldr	r2, [pc, #300]	@ (80048dc <xTaskIncrementTick+0x14c>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d121      	bne.n	80047fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80047b8:	4b49      	ldr	r3, [pc, #292]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <xTaskIncrementTick+0x4a>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	e7fd      	b.n	80047d6 <xTaskIncrementTick+0x46>
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <xTaskIncrementTick+0x154>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3e      	ldr	r2, [pc, #248]	@ (80048e0 <xTaskIncrementTick+0x150>)
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	4a3e      	ldr	r2, [pc, #248]	@ (80048e4 <xTaskIncrementTick+0x154>)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b3e      	ldr	r3, [pc, #248]	@ (80048e8 <xTaskIncrementTick+0x158>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a3c      	ldr	r2, [pc, #240]	@ (80048e8 <xTaskIncrementTick+0x158>)
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	f000 fa94 	bl	8004d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047fc:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <xTaskIncrementTick+0x15c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d348      	bcc.n	8004898 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004806:	4b36      	ldr	r3, [pc, #216]	@ (80048e0 <xTaskIncrementTick+0x150>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004810:	4b36      	ldr	r3, [pc, #216]	@ (80048ec <xTaskIncrementTick+0x15c>)
 8004812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004816:	601a      	str	r2, [r3, #0]
					break;
 8004818:	e03e      	b.n	8004898 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481a:	4b31      	ldr	r3, [pc, #196]	@ (80048e0 <xTaskIncrementTick+0x150>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d203      	bcs.n	800483a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004832:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <xTaskIncrementTick+0x15c>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004838:	e02e      	b.n	8004898 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	3304      	adds	r3, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff f8f6 	bl	8003a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3318      	adds	r3, #24
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f8ed 	bl	8003a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	2201      	movs	r2, #1
 800485c:	409a      	lsls	r2, r3
 800485e:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <xTaskIncrementTick+0x160>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4313      	orrs	r3, r2
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <xTaskIncrementTick+0x160>)
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4a1f      	ldr	r2, [pc, #124]	@ (80048f4 <xTaskIncrementTick+0x164>)
 8004876:	441a      	add	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7ff f879 	bl	8003976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004888:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <xTaskIncrementTick+0x168>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	429a      	cmp	r2, r3
 8004890:	d3b9      	bcc.n	8004806 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	e7b6      	b.n	8004806 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004898:	4b17      	ldr	r3, [pc, #92]	@ (80048f8 <xTaskIncrementTick+0x168>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489e:	4915      	ldr	r1, [pc, #84]	@ (80048f4 <xTaskIncrementTick+0x164>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d901      	bls.n	80048b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80048b0:	2301      	movs	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048b4:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <xTaskIncrementTick+0x16c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e004      	b.n	80048cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004900 <xTaskIncrementTick+0x170>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <xTaskIncrementTick+0x170>)
 80048ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048cc:	697b      	ldr	r3, [r7, #20]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200002a4 	.word	0x200002a4
 80048dc:	20000280 	.word	0x20000280
 80048e0:	20000234 	.word	0x20000234
 80048e4:	20000238 	.word	0x20000238
 80048e8:	20000294 	.word	0x20000294
 80048ec:	2000029c 	.word	0x2000029c
 80048f0:	20000284 	.word	0x20000284
 80048f4:	20000180 	.word	0x20000180
 80048f8:	2000017c 	.word	0x2000017c
 80048fc:	20000290 	.word	0x20000290
 8004900:	2000028c 	.word	0x2000028c

08004904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800490a:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <vTaskSwitchContext+0xb0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004912:	4b29      	ldr	r3, [pc, #164]	@ (80049b8 <vTaskSwitchContext+0xb4>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004918:	e045      	b.n	80049a6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800491a:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <vTaskSwitchContext+0xb4>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b26      	ldr	r3, [pc, #152]	@ (80049bc <vTaskSwitchContext+0xb8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	f1c3 031f 	rsb	r3, r3, #31
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	4922      	ldr	r1, [pc, #136]	@ (80049c0 <vTaskSwitchContext+0xbc>)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <vTaskSwitchContext+0x5e>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	607b      	str	r3, [r7, #4]
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	e7fd      	b.n	800495e <vTaskSwitchContext+0x5a>
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <vTaskSwitchContext+0xbc>)
 800496e:	4413      	add	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3308      	adds	r3, #8
 8004984:	429a      	cmp	r2, r3
 8004986:	d104      	bne.n	8004992 <vTaskSwitchContext+0x8e>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <vTaskSwitchContext+0xc0>)
 800499a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800499c:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <vTaskSwitchContext+0xc0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	334c      	adds	r3, #76	@ 0x4c
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <vTaskSwitchContext+0xc4>)
 80049a4:	6013      	str	r3, [r2, #0]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200002a4 	.word	0x200002a4
 80049b8:	20000290 	.word	0x20000290
 80049bc:	20000284 	.word	0x20000284
 80049c0:	20000180 	.word	0x20000180
 80049c4:	2000017c 	.word	0x2000017c
 80049c8:	2000001c 	.word	0x2000001c

080049cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049f4:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <vTaskPlaceOnEventList+0x48>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3318      	adds	r3, #24
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fe ffde 	bl	80039be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a02:	2101      	movs	r1, #1
 8004a04:	6838      	ldr	r0, [r7, #0]
 8004a06:	f000 fb6d 	bl	80050e4 <prvAddCurrentTaskToDelayedList>
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2000017c 	.word	0x2000017c

08004a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	60fb      	str	r3, [r7, #12]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fff0 	bl	8003a30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <xTaskRemoveFromEventList+0xb0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11c      	bne.n	8004a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe ffe7 	bl	8003a30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	4b18      	ldr	r3, [pc, #96]	@ (8004acc <xTaskRemoveFromEventList+0xb4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <xTaskRemoveFromEventList+0xb4>)
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <xTaskRemoveFromEventList+0xb8>)
 8004a82:	441a      	add	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fe ff73 	bl	8003976 <vListInsertEnd>
 8004a90:	e005      	b.n	8004a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4619      	mov	r1, r3
 8004a98:	480e      	ldr	r0, [pc, #56]	@ (8004ad4 <xTaskRemoveFromEventList+0xbc>)
 8004a9a:	f7fe ff6c 	bl	8003976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <xTaskRemoveFromEventList+0xc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d905      	bls.n	8004ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <xTaskRemoveFromEventList+0xc4>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e001      	b.n	8004abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004abc:	697b      	ldr	r3, [r7, #20]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200002a4 	.word	0x200002a4
 8004acc:	20000284 	.word	0x20000284
 8004ad0:	20000180 	.word	0x20000180
 8004ad4:	2000023c 	.word	0x2000023c
 8004ad8:	2000017c 	.word	0x2000017c
 8004adc:	20000290 	.word	0x20000290

08004ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <vTaskInternalSetTimeOutState+0x24>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <vTaskInternalSetTimeOutState+0x28>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	20000294 	.word	0x20000294
 8004b08:	20000280 	.word	0x20000280

08004b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60fb      	str	r3, [r7, #12]
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	e7fd      	b.n	8004b4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b52:	f000 fc61 	bl	8005418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b56:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <xTaskCheckForTimeOut+0xc0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b6e:	d102      	bne.n	8004b76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	e023      	b.n	8004bbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <xTaskCheckForTimeOut+0xc4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d007      	beq.n	8004b92 <xTaskCheckForTimeOut+0x86>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	e015      	b.n	8004bbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d20b      	bcs.n	8004bb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff99 	bl	8004ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	e004      	b.n	8004bbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bbe:	f000 fc5d 	bl	800547c <vPortExitCritical>

	return xReturn;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000280 	.word	0x20000280
 8004bd0:	20000294 	.word	0x20000294

08004bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <vTaskMissedYield+0x14>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000290 	.word	0x20000290

08004bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bf4:	f000 f852 	bl	8004c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <prvIdleTask+0x28>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d9f9      	bls.n	8004bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <prvIdleTask+0x2c>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c10:	e7f0      	b.n	8004bf4 <prvIdleTask+0x8>
 8004c12:	bf00      	nop
 8004c14:	20000180 	.word	0x20000180
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	e00c      	b.n	8004c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4a12      	ldr	r2, [pc, #72]	@ (8004c7c <prvInitialiseTaskLists+0x60>)
 8004c34:	4413      	add	r3, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fe70 	bl	800391c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d9ef      	bls.n	8004c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c48:	480d      	ldr	r0, [pc, #52]	@ (8004c80 <prvInitialiseTaskLists+0x64>)
 8004c4a:	f7fe fe67 	bl	800391c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c4e:	480d      	ldr	r0, [pc, #52]	@ (8004c84 <prvInitialiseTaskLists+0x68>)
 8004c50:	f7fe fe64 	bl	800391c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c54:	480c      	ldr	r0, [pc, #48]	@ (8004c88 <prvInitialiseTaskLists+0x6c>)
 8004c56:	f7fe fe61 	bl	800391c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c5a:	480c      	ldr	r0, [pc, #48]	@ (8004c8c <prvInitialiseTaskLists+0x70>)
 8004c5c:	f7fe fe5e 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c60:	480b      	ldr	r0, [pc, #44]	@ (8004c90 <prvInitialiseTaskLists+0x74>)
 8004c62:	f7fe fe5b 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <prvInitialiseTaskLists+0x78>)
 8004c68:	4a05      	ldr	r2, [pc, #20]	@ (8004c80 <prvInitialiseTaskLists+0x64>)
 8004c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <prvInitialiseTaskLists+0x7c>)
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <prvInitialiseTaskLists+0x68>)
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000180 	.word	0x20000180
 8004c80:	2000020c 	.word	0x2000020c
 8004c84:	20000220 	.word	0x20000220
 8004c88:	2000023c 	.word	0x2000023c
 8004c8c:	20000250 	.word	0x20000250
 8004c90:	20000268 	.word	0x20000268
 8004c94:	20000234 	.word	0x20000234
 8004c98:	20000238 	.word	0x20000238

08004c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca2:	e019      	b.n	8004cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ca4:	f000 fbb8 	bl	8005418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca8:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <prvCheckTasksWaitingTermination+0x50>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe febb 	bl	8003a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <prvCheckTasksWaitingTermination+0x54>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf0 <prvCheckTasksWaitingTermination+0x54>)
 8004cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <prvCheckTasksWaitingTermination+0x58>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <prvCheckTasksWaitingTermination+0x58>)
 8004ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cce:	f000 fbd5 	bl	800547c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f810 	bl	8004cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd8:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <prvCheckTasksWaitingTermination+0x58>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e1      	bne.n	8004ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000250 	.word	0x20000250
 8004cf0:	2000027c 	.word	0x2000027c
 8004cf4:	20000264 	.word	0x20000264

08004cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	334c      	adds	r3, #76	@ 0x4c
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fe5d 	bl	80059c4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fd30 	bl	8005774 <vPortFree>
			vPortFree( pxTCB );
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fd2d 	bl	8005774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <prvResetNextTaskUnblockTime+0x38>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <prvResetNextTaskUnblockTime+0x3c>)
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d3c:	e008      	b.n	8004d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <prvResetNextTaskUnblockTime+0x38>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <prvResetNextTaskUnblockTime+0x3c>)
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000234 	.word	0x20000234
 8004d60:	2000029c 	.word	0x2000029c

08004d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <xTaskGetSchedulerState+0x34>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d72:	2301      	movs	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	e008      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d78:	4b08      	ldr	r3, [pc, #32]	@ (8004d9c <xTaskGetSchedulerState+0x38>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d80:	2302      	movs	r3, #2
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e001      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d8a:	687b      	ldr	r3, [r7, #4]
	}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	20000288 	.word	0x20000288
 8004d9c:	200002a4 	.word	0x200002a4

08004da0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d05e      	beq.n	8004e74 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <xTaskPriorityInherit+0xe0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d24e      	bcs.n	8004e62 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db06      	blt.n	8004dda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004e80 <xTaskPriorityInherit+0xe0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	f1c3 0207 	rsb	r2, r3, #7
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6959      	ldr	r1, [r3, #20]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <xTaskPriorityInherit+0xe4>)
 8004dec:	4413      	add	r3, r2
 8004dee:	4299      	cmp	r1, r3
 8004df0:	d12f      	bne.n	8004e52 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fe1a 	bl	8003a30 <uxListRemove>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <xTaskPriorityInherit+0xe8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4013      	ands	r3, r2
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <xTaskPriorityInherit+0xe8>)
 8004e16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e18:	4b19      	ldr	r3, [pc, #100]	@ (8004e80 <xTaskPriorityInherit+0xe0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	4b17      	ldr	r3, [pc, #92]	@ (8004e88 <xTaskPriorityInherit+0xe8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	4a15      	ldr	r2, [pc, #84]	@ (8004e88 <xTaskPriorityInherit+0xe8>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a10      	ldr	r2, [pc, #64]	@ (8004e84 <xTaskPriorityInherit+0xe4>)
 8004e42:	441a      	add	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fe fd93 	bl	8003976 <vListInsertEnd>
 8004e50:	e004      	b.n	8004e5c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <xTaskPriorityInherit+0xe0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e008      	b.n	8004e74 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <xTaskPriorityInherit+0xe0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d201      	bcs.n	8004e74 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e74:	68fb      	ldr	r3, [r7, #12]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000017c 	.word	0x2000017c
 8004e84:	20000180 	.word	0x20000180
 8004e88:	20000284 	.word	0x20000284

08004e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d070      	beq.n	8004f84 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <xTaskPriorityDisinherit+0x104>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d00b      	beq.n	8004ec4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60fb      	str	r3, [r7, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d044      	beq.n	8004f84 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d140      	bne.n	8004f84 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe fd92 	bl	8003a30 <uxListRemove>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d115      	bne.n	8004f3e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f16:	491f      	ldr	r1, [pc, #124]	@ (8004f94 <xTaskPriorityDisinherit+0x108>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xTaskPriorityDisinherit+0xb2>
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	4b18      	ldr	r3, [pc, #96]	@ (8004f98 <xTaskPriorityDisinherit+0x10c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	4a17      	ldr	r2, [pc, #92]	@ (8004f98 <xTaskPriorityDisinherit+0x10c>)
 8004f3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	f1c3 0207 	rsb	r2, r3, #7
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	2201      	movs	r2, #1
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <xTaskPriorityDisinherit+0x10c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	4a0d      	ldr	r2, [pc, #52]	@ (8004f98 <xTaskPriorityDisinherit+0x10c>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <xTaskPriorityDisinherit+0x108>)
 8004f72:	441a      	add	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fe fcfb 	bl	8003976 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f84:	697b      	ldr	r3, [r7, #20]
	}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000017c 	.word	0x2000017c
 8004f94:	20000180 	.word	0x20000180
 8004f98:	20000284 	.word	0x20000284

08004f9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d079      	beq.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60fb      	str	r3, [r7, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d902      	bls.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e002      	b.n	8004fea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d059      	beq.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d154      	bne.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	429a      	cmp	r2, r3
 8005006:	d10b      	bne.n	8005020 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60bb      	str	r3, [r7, #8]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	db04      	blt.n	800503e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f1c3 0207 	rsb	r2, r3, #7
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800504e:	4413      	add	r3, r2
 8005050:	4299      	cmp	r1, r3
 8005052:	d129      	bne.n	80050a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	3304      	adds	r3, #4
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fce9 	bl	8003a30 <uxListRemove>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	2201      	movs	r2, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43da      	mvns	r2, r3
 8005070:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4013      	ands	r3, r2
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005078:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	2201      	movs	r2, #1
 8005080:	409a      	lsls	r2, r3
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	4a0b      	ldr	r2, [pc, #44]	@ (80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a06      	ldr	r2, [pc, #24]	@ (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800509a:	441a      	add	r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fc67 	bl	8003976 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	2000017c 	.word	0x2000017c
 80050b4:	20000180 	.word	0x20000180
 80050b8:	20000284 	.word	0x20000284

080050bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050ce:	3201      	adds	r2, #1
 80050d0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80050d2:	4b03      	ldr	r3, [pc, #12]	@ (80050e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050d4:	681b      	ldr	r3, [r3, #0]
	}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	2000017c 	.word	0x2000017c

080050e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ee:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f4:	4b28      	ldr	r3, [pc, #160]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fc98 	bl	8003a30 <uxListRemove>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005106:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	2201      	movs	r2, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4013      	ands	r3, r2
 800511a:	4a20      	ldr	r2, [pc, #128]	@ (800519c <prvAddCurrentTaskToDelayedList+0xb8>)
 800511c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005124:	d10a      	bne.n	800513c <prvAddCurrentTaskToDelayedList+0x58>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	481a      	ldr	r0, [pc, #104]	@ (80051a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005136:	f7fe fc1e 	bl	8003976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800513a:	e026      	b.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005144:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d209      	bcs.n	8005168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005154:	4b13      	ldr	r3, [pc, #76]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe fc2c 	bl	80039be <vListInsert>
}
 8005166:	e010      	b.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005168:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f7fe fc22 	bl	80039be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	d202      	bcs.n	800518a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005184:	4a09      	ldr	r2, [pc, #36]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000280 	.word	0x20000280
 8005198:	2000017c 	.word	0x2000017c
 800519c:	20000284 	.word	0x20000284
 80051a0:	20000268 	.word	0x20000268
 80051a4:	20000238 	.word	0x20000238
 80051a8:	20000234 	.word	0x20000234
 80051ac:	2000029c 	.word	0x2000029c

080051b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b04      	subs	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b04      	subs	r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <pxPortInitialiseStack+0x64>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b14      	subs	r3, #20
 80051ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3b04      	subs	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f06f 0202 	mvn.w	r2, #2
 80051fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3b20      	subs	r3, #32
 8005204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	08005219 	.word	0x08005219

08005218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005222:	4b13      	ldr	r3, [pc, #76]	@ (8005270 <prvTaskExitError+0x58>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800522a:	d00b      	beq.n	8005244 <prvTaskExitError+0x2c>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <prvTaskExitError+0x28>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
}
 8005256:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005258:	bf00      	nop
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0fc      	beq.n	800525a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000018 	.word	0x20000018
	...

08005280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <pxCurrentTCBConst2>)
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	f380 8809 	msr	PSP, r0
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst2>:
 80052a0:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052a8:	4808      	ldr	r0, [pc, #32]	@ (80052cc <prvPortStartFirstTask+0x24>)
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f380 8808 	msr	MSP, r0
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8814 	msr	CONTROL, r0
 80052ba:	b662      	cpsie	i
 80052bc:	b661      	cpsie	f
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	df00      	svc	0
 80052c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ca:	bf00      	nop
 80052cc:	e000ed08 	.word	0xe000ed08

080052d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052d6:	4b47      	ldr	r3, [pc, #284]	@ (80053f4 <xPortStartScheduler+0x124>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a47      	ldr	r2, [pc, #284]	@ (80053f8 <xPortStartScheduler+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10b      	bne.n	80052f8 <xPortStartScheduler+0x28>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052f8:	4b3e      	ldr	r3, [pc, #248]	@ (80053f4 <xPortStartScheduler+0x124>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3f      	ldr	r2, [pc, #252]	@ (80053fc <xPortStartScheduler+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10b      	bne.n	800531a <xPortStartScheduler+0x4a>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	613b      	str	r3, [r7, #16]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <xPortStartScheduler+0x130>)
 800531c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	22ff      	movs	r2, #255	@ 0xff
 800532a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <xPortStartScheduler+0x134>)
 8005340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005342:	4b31      	ldr	r3, [pc, #196]	@ (8005408 <xPortStartScheduler+0x138>)
 8005344:	2207      	movs	r2, #7
 8005346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005348:	e009      	b.n	800535e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800534a:	4b2f      	ldr	r3, [pc, #188]	@ (8005408 <xPortStartScheduler+0x138>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3b01      	subs	r3, #1
 8005350:	4a2d      	ldr	r2, [pc, #180]	@ (8005408 <xPortStartScheduler+0x138>)
 8005352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b80      	cmp	r3, #128	@ 0x80
 8005368:	d0ef      	beq.n	800534a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <xPortStartScheduler+0x138>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1c3 0307 	rsb	r3, r3, #7
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00b      	beq.n	800538e <xPortStartScheduler+0xbe>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <xPortStartScheduler+0x138>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	4a1c      	ldr	r2, [pc, #112]	@ (8005408 <xPortStartScheduler+0x138>)
 8005396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <xPortStartScheduler+0x138>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <xPortStartScheduler+0x138>)
 80053a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ac:	4b17      	ldr	r3, [pc, #92]	@ (800540c <xPortStartScheduler+0x13c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <xPortStartScheduler+0x13c>)
 80053b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053b8:	4b14      	ldr	r3, [pc, #80]	@ (800540c <xPortStartScheduler+0x13c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	@ (800540c <xPortStartScheduler+0x13c>)
 80053be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053c4:	f000 f8da 	bl	800557c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <xPortStartScheduler+0x140>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053ce:	f000 f8f9 	bl	80055c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053d2:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <xPortStartScheduler+0x144>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005414 <xPortStartScheduler+0x144>)
 80053d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053de:	f7ff ff63 	bl	80052a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053e2:	f7ff fa8f 	bl	8004904 <vTaskSwitchContext>
	prvTaskExitError();
 80053e6:	f7ff ff17 	bl	8005218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000ed00 	.word	0xe000ed00
 80053f8:	410fc271 	.word	0x410fc271
 80053fc:	410fc270 	.word	0x410fc270
 8005400:	e000e400 	.word	0xe000e400
 8005404:	200002a8 	.word	0x200002a8
 8005408:	200002ac 	.word	0x200002ac
 800540c:	e000ed20 	.word	0xe000ed20
 8005410:	20000018 	.word	0x20000018
 8005414:	e000ef34 	.word	0xe000ef34

08005418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <vPortEnterCritical+0x5c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a0e      	ldr	r2, [pc, #56]	@ (8005474 <vPortEnterCritical+0x5c>)
 800543a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800543c:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <vPortEnterCritical+0x5c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d110      	bne.n	8005466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <vPortEnterCritical+0x60>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <vPortEnterCritical+0x4e>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <vPortEnterCritical+0x4a>
	}
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000018 	.word	0x20000018
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <vPortExitCritical+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <vPortExitCritical+0x26>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <vPortExitCritical+0x50>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <vPortExitCritical+0x50>)
 80054aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <vPortExitCritical+0x50>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <vPortExitCritical+0x44>
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	20000018 	.word	0x20000018

080054d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054d0:	f3ef 8009 	mrs	r0, PSP
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <pxCurrentTCBConst>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	f01e 0f10 	tst.w	lr, #16
 80054e0:	bf08      	it	eq
 80054e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054f4:	f380 8811 	msr	BASEPRI, r0
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f7ff fa00 	bl	8004904 <vTaskSwitchContext>
 8005504:	f04f 0000 	mov.w	r0, #0
 8005508:	f380 8811 	msr	BASEPRI, r0
 800550c:	bc09      	pop	{r0, r3}
 800550e:	6819      	ldr	r1, [r3, #0]
 8005510:	6808      	ldr	r0, [r1, #0]
 8005512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005516:	f01e 0f10 	tst.w	lr, #16
 800551a:	bf08      	it	eq
 800551c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005520:	f380 8809 	msr	PSP, r0
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w

08005530 <pxCurrentTCBConst>:
 8005530:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
}
 8005550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005552:	f7ff f91d 	bl	8004790 <xTaskIncrementTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <SysTick_Handler+0x40>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <vPortSetupTimerInterrupt+0x34>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <vPortSetupTimerInterrupt+0x38>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <vPortSetupTimerInterrupt+0x3c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <vPortSetupTimerInterrupt+0x40>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <vPortSetupTimerInterrupt+0x44>)
 800559a:	3b01      	subs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559e:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <vPortSetupTimerInterrupt+0x34>)
 80055a0:	2207      	movs	r2, #7
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e010 	.word	0xe000e010
 80055b4:	e000e018 	.word	0xe000e018
 80055b8:	2000000c 	.word	0x2000000c
 80055bc:	10624dd3 	.word	0x10624dd3
 80055c0:	e000e014 	.word	0xe000e014

080055c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055d4 <vPortEnableVFP+0x10>
 80055c8:	6801      	ldr	r1, [r0, #0]
 80055ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055ce:	6001      	str	r1, [r0, #0]
 80055d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055d2:	bf00      	nop
 80055d4:	e000ed88 	.word	0xe000ed88

080055d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055e4:	f7ff f828 	bl	8004638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055e8:	4b5c      	ldr	r3, [pc, #368]	@ (800575c <pvPortMalloc+0x184>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055f0:	f000 f924 	bl	800583c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005760 <pvPortMalloc+0x188>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 8095 	bne.w	800572c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01e      	beq.n	8005646 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005608:	2208      	movs	r2, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	2b00      	cmp	r3, #0
 8005618:	d015      	beq.n	8005646 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	3308      	adds	r3, #8
 8005622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <pvPortMalloc+0x6e>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	617b      	str	r3, [r7, #20]
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d06f      	beq.n	800572c <pvPortMalloc+0x154>
 800564c:	4b45      	ldr	r3, [pc, #276]	@ (8005764 <pvPortMalloc+0x18c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d86a      	bhi.n	800572c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005656:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <pvPortMalloc+0x190>)
 8005658:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800565a:	4b43      	ldr	r3, [pc, #268]	@ (8005768 <pvPortMalloc+0x190>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005660:	e004      	b.n	800566c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d903      	bls.n	800567e <pvPortMalloc+0xa6>
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f1      	bne.n	8005662 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800567e:	4b37      	ldr	r3, [pc, #220]	@ (800575c <pvPortMalloc+0x184>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	429a      	cmp	r2, r3
 8005686:	d051      	beq.n	800572c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2208      	movs	r2, #8
 800568e:	4413      	add	r3, r2
 8005690:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	2308      	movs	r3, #8
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d920      	bls.n	80056ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <pvPortMalloc+0xfc>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056e6:	69b8      	ldr	r0, [r7, #24]
 80056e8:	f000 f90a 	bl	8005900 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <pvPortMalloc+0x18c>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005764 <pvPortMalloc+0x18c>)
 80056f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <pvPortMalloc+0x18c>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b1b      	ldr	r3, [pc, #108]	@ (800576c <pvPortMalloc+0x194>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d203      	bcs.n	800570e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005706:	4b17      	ldr	r3, [pc, #92]	@ (8005764 <pvPortMalloc+0x18c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a18      	ldr	r2, [pc, #96]	@ (800576c <pvPortMalloc+0x194>)
 800570c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <pvPortMalloc+0x188>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	431a      	orrs	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005722:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <pvPortMalloc+0x198>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <pvPortMalloc+0x198>)
 800572a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800572c:	f7fe ff92 	bl	8004654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <pvPortMalloc+0x17a>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60fb      	str	r3, [r7, #12]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <pvPortMalloc+0x176>
	return pvReturn;
 8005752:	69fb      	ldr	r3, [r7, #28]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000eb8 	.word	0x20000eb8
 8005760:	20000ecc 	.word	0x20000ecc
 8005764:	20000ebc 	.word	0x20000ebc
 8005768:	20000eb0 	.word	0x20000eb0
 800576c:	20000ec0 	.word	0x20000ec0
 8005770:	20000ec4 	.word	0x20000ec4

08005774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d04f      	beq.n	8005826 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005786:	2308      	movs	r3, #8
 8005788:	425b      	negs	r3, r3
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4b25      	ldr	r3, [pc, #148]	@ (8005830 <vPortFree+0xbc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <vPortFree+0x46>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60fb      	str	r3, [r7, #12]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <vPortFree+0x66>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	e7fd      	b.n	80057d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <vPortFree+0xbc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01e      	beq.n	8005826 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11a      	bne.n	8005826 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <vPortFree+0xbc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	401a      	ands	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005800:	f7fe ff1a 	bl	8004638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <vPortFree+0xc0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4413      	add	r3, r2
 800580e:	4a09      	ldr	r2, [pc, #36]	@ (8005834 <vPortFree+0xc0>)
 8005810:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005812:	6938      	ldr	r0, [r7, #16]
 8005814:	f000 f874 	bl	8005900 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005818:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <vPortFree+0xc4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	4a06      	ldr	r2, [pc, #24]	@ (8005838 <vPortFree+0xc4>)
 8005820:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005822:	f7fe ff17 	bl	8004654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005826:	bf00      	nop
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000ecc 	.word	0x20000ecc
 8005834:	20000ebc 	.word	0x20000ebc
 8005838:	20000ec8 	.word	0x20000ec8

0800583c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005842:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005846:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <prvHeapInit+0xac>)
 800584a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3307      	adds	r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0307 	bic.w	r3, r3, #7
 8005862:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	4a1f      	ldr	r2, [pc, #124]	@ (80058e8 <prvHeapInit+0xac>)
 800586c:	4413      	add	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005874:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <prvHeapInit+0xb0>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800587a:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <prvHeapInit+0xb0>)
 800587c:	2200      	movs	r2, #0
 800587e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4413      	add	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005888:	2208      	movs	r2, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0307 	bic.w	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <prvHeapInit+0xb4>)
 800589c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800589e:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <prvHeapInit+0xb4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058a6:	4b12      	ldr	r3, [pc, #72]	@ (80058f0 <prvHeapInit+0xb4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058bc:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <prvHeapInit+0xb4>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <prvHeapInit+0xb8>)
 80058ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a09      	ldr	r2, [pc, #36]	@ (80058f8 <prvHeapInit+0xbc>)
 80058d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <prvHeapInit+0xc0>)
 80058d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	200002b0 	.word	0x200002b0
 80058ec:	20000eb0 	.word	0x20000eb0
 80058f0:	20000eb8 	.word	0x20000eb8
 80058f4:	20000ec0 	.word	0x20000ec0
 80058f8:	20000ebc 	.word	0x20000ebc
 80058fc:	20000ecc 	.word	0x20000ecc

08005900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005908:	4b28      	ldr	r3, [pc, #160]	@ (80059ac <prvInsertBlockIntoFreeList+0xac>)
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e002      	b.n	8005914 <prvInsertBlockIntoFreeList+0x14>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d8f7      	bhi.n	800590e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4413      	add	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d108      	bne.n	8005942 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	441a      	add	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d118      	bne.n	8005988 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b15      	ldr	r3, [pc, #84]	@ (80059b0 <prvInsertBlockIntoFreeList+0xb0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d00d      	beq.n	800597e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e008      	b.n	8005990 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800597e:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e003      	b.n	8005990 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d002      	beq.n	800599e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800599e:	bf00      	nop
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000eb0 	.word	0x20000eb0
 80059b0:	20000eb8 	.word	0x20000eb8

080059b4 <memset>:
 80059b4:	4402      	add	r2, r0
 80059b6:	4603      	mov	r3, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <_reclaim_reent>:
 80059c4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a7c <_reclaim_reent+0xb8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4283      	cmp	r3, r0
 80059ca:	b570      	push	{r4, r5, r6, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	d053      	beq.n	8005a78 <_reclaim_reent+0xb4>
 80059d0:	69c3      	ldr	r3, [r0, #28]
 80059d2:	b31b      	cbz	r3, 8005a1c <_reclaim_reent+0x58>
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	b163      	cbz	r3, 80059f2 <_reclaim_reent+0x2e>
 80059d8:	2500      	movs	r5, #0
 80059da:	69e3      	ldr	r3, [r4, #28]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	5959      	ldr	r1, [r3, r5]
 80059e0:	b9b1      	cbnz	r1, 8005a10 <_reclaim_reent+0x4c>
 80059e2:	3504      	adds	r5, #4
 80059e4:	2d80      	cmp	r5, #128	@ 0x80
 80059e6:	d1f8      	bne.n	80059da <_reclaim_reent+0x16>
 80059e8:	69e3      	ldr	r3, [r4, #28]
 80059ea:	4620      	mov	r0, r4
 80059ec:	68d9      	ldr	r1, [r3, #12]
 80059ee:	f000 f87b 	bl	8005ae8 <_free_r>
 80059f2:	69e3      	ldr	r3, [r4, #28]
 80059f4:	6819      	ldr	r1, [r3, #0]
 80059f6:	b111      	cbz	r1, 80059fe <_reclaim_reent+0x3a>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f875 	bl	8005ae8 <_free_r>
 80059fe:	69e3      	ldr	r3, [r4, #28]
 8005a00:	689d      	ldr	r5, [r3, #8]
 8005a02:	b15d      	cbz	r5, 8005a1c <_reclaim_reent+0x58>
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	682d      	ldr	r5, [r5, #0]
 8005a0a:	f000 f86d 	bl	8005ae8 <_free_r>
 8005a0e:	e7f8      	b.n	8005a02 <_reclaim_reent+0x3e>
 8005a10:	680e      	ldr	r6, [r1, #0]
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 f868 	bl	8005ae8 <_free_r>
 8005a18:	4631      	mov	r1, r6
 8005a1a:	e7e1      	b.n	80059e0 <_reclaim_reent+0x1c>
 8005a1c:	6961      	ldr	r1, [r4, #20]
 8005a1e:	b111      	cbz	r1, 8005a26 <_reclaim_reent+0x62>
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 f861 	bl	8005ae8 <_free_r>
 8005a26:	69e1      	ldr	r1, [r4, #28]
 8005a28:	b111      	cbz	r1, 8005a30 <_reclaim_reent+0x6c>
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f85c 	bl	8005ae8 <_free_r>
 8005a30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a32:	b111      	cbz	r1, 8005a3a <_reclaim_reent+0x76>
 8005a34:	4620      	mov	r0, r4
 8005a36:	f000 f857 	bl	8005ae8 <_free_r>
 8005a3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a3c:	b111      	cbz	r1, 8005a44 <_reclaim_reent+0x80>
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 f852 	bl	8005ae8 <_free_r>
 8005a44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a46:	b111      	cbz	r1, 8005a4e <_reclaim_reent+0x8a>
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 f84d 	bl	8005ae8 <_free_r>
 8005a4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a50:	b111      	cbz	r1, 8005a58 <_reclaim_reent+0x94>
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f848 	bl	8005ae8 <_free_r>
 8005a58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a5a:	b111      	cbz	r1, 8005a62 <_reclaim_reent+0x9e>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f843 	bl	8005ae8 <_free_r>
 8005a62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a64:	b111      	cbz	r1, 8005a6c <_reclaim_reent+0xa8>
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 f83e 	bl	8005ae8 <_free_r>
 8005a6c:	6a23      	ldr	r3, [r4, #32]
 8005a6e:	b11b      	cbz	r3, 8005a78 <_reclaim_reent+0xb4>
 8005a70:	4620      	mov	r0, r4
 8005a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a76:	4718      	bx	r3
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	bf00      	nop
 8005a7c:	2000001c 	.word	0x2000001c

08005a80 <__libc_init_array>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab8 <__libc_init_array+0x38>)
 8005a84:	4c0d      	ldr	r4, [pc, #52]	@ (8005abc <__libc_init_array+0x3c>)
 8005a86:	1b64      	subs	r4, r4, r5
 8005a88:	10a4      	asrs	r4, r4, #2
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	42a6      	cmp	r6, r4
 8005a8e:	d109      	bne.n	8005aa4 <__libc_init_array+0x24>
 8005a90:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac0 <__libc_init_array+0x40>)
 8005a92:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac4 <__libc_init_array+0x44>)
 8005a94:	f000 f87e 	bl	8005b94 <_init>
 8005a98:	1b64      	subs	r4, r4, r5
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	42a6      	cmp	r6, r4
 8005aa0:	d105      	bne.n	8005aae <__libc_init_array+0x2e>
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa8:	4798      	blx	r3
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7ee      	b.n	8005a8c <__libc_init_array+0xc>
 8005aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab2:	4798      	blx	r3
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	e7f2      	b.n	8005a9e <__libc_init_array+0x1e>
 8005ab8:	08005c54 	.word	0x08005c54
 8005abc:	08005c54 	.word	0x08005c54
 8005ac0:	08005c54 	.word	0x08005c54
 8005ac4:	08005c58 	.word	0x08005c58

08005ac8 <__retarget_lock_acquire_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <__retarget_lock_release_recursive>:
 8005aca:	4770      	bx	lr

08005acc <memcpy>:
 8005acc:	440a      	add	r2, r1
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad4:	d100      	bne.n	8005ad8 <memcpy+0xc>
 8005ad6:	4770      	bx	lr
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	d1f9      	bne.n	8005ada <memcpy+0xe>
 8005ae6:	bd10      	pop	{r4, pc}

08005ae8 <_free_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4605      	mov	r5, r0
 8005aec:	2900      	cmp	r1, #0
 8005aee:	d041      	beq.n	8005b74 <_free_r+0x8c>
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f0c      	subs	r4, r1, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfb8      	it	lt
 8005afa:	18e4      	addlt	r4, r4, r3
 8005afc:	f000 f83e 	bl	8005b7c <__malloc_lock>
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <_free_r+0x90>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	b933      	cbnz	r3, 8005b14 <_free_r+0x2c>
 8005b06:	6063      	str	r3, [r4, #4]
 8005b08:	6014      	str	r4, [r2, #0]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b10:	f000 b83a 	b.w	8005b88 <__malloc_unlock>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d908      	bls.n	8005b2a <_free_r+0x42>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	1821      	adds	r1, r4, r0
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf01      	itttt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	1809      	addeq	r1, r1, r0
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	e7ed      	b.n	8005b06 <_free_r+0x1e>
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b10b      	cbz	r3, 8005b34 <_free_r+0x4c>
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d9fa      	bls.n	8005b2a <_free_r+0x42>
 8005b34:	6811      	ldr	r1, [r2, #0]
 8005b36:	1850      	adds	r0, r2, r1
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	d10b      	bne.n	8005b54 <_free_r+0x6c>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	4401      	add	r1, r0
 8005b40:	1850      	adds	r0, r2, r1
 8005b42:	4283      	cmp	r3, r0
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	d1e0      	bne.n	8005b0a <_free_r+0x22>
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	6053      	str	r3, [r2, #4]
 8005b4e:	4408      	add	r0, r1
 8005b50:	6010      	str	r0, [r2, #0]
 8005b52:	e7da      	b.n	8005b0a <_free_r+0x22>
 8005b54:	d902      	bls.n	8005b5c <_free_r+0x74>
 8005b56:	230c      	movs	r3, #12
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	e7d6      	b.n	8005b0a <_free_r+0x22>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428b      	cmp	r3, r1
 8005b62:	bf04      	itt	eq
 8005b64:	6819      	ldreq	r1, [r3, #0]
 8005b66:	685b      	ldreq	r3, [r3, #4]
 8005b68:	6063      	str	r3, [r4, #4]
 8005b6a:	bf04      	itt	eq
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	6054      	str	r4, [r2, #4]
 8005b72:	e7ca      	b.n	8005b0a <_free_r+0x22>
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	2000100c 	.word	0x2000100c

08005b7c <__malloc_lock>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	@ (8005b84 <__malloc_lock+0x8>)
 8005b7e:	f7ff bfa3 	b.w	8005ac8 <__retarget_lock_acquire_recursive>
 8005b82:	bf00      	nop
 8005b84:	20001008 	.word	0x20001008

08005b88 <__malloc_unlock>:
 8005b88:	4801      	ldr	r0, [pc, #4]	@ (8005b90 <__malloc_unlock+0x8>)
 8005b8a:	f7ff bf9e 	b.w	8005aca <__retarget_lock_release_recursive>
 8005b8e:	bf00      	nop
 8005b90:	20001008 	.word	0x20001008

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
