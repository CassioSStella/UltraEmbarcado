
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf9c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800d180  0800d180  0000e180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5ac  0800d5ac  0000f1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d5ac  0800d5ac  0000e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b4  0800d5b4  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b4  0800d5b4  0000e5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5b8  0800d5b8  0000e5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d5bc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034f0  200001e8  0800d7a4  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036d8  0800d7a4  0000f6d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea16  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4e  00000000  00000000  0002dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001523  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049e5  00000000  00000000  00034be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d800  00000000  00000000  000395c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6048  00000000  00000000  00056dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ce10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c0  00000000  00000000  0013ce54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00145414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d164 	.word	0x0800d164

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d164 	.word	0x0800d164

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <led_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *args){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <led_task+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f007 fb29 	bl	8008590 <xQueueSemaphoreTake>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1f5      	bne.n	8000f30 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f003 fc9e 	bl	8004890 <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000f54:	e7ec      	b.n	8000f30 <led_task+0xc>
 8000f56:	bf00      	nop
 8000f58:	200003b4 	.word	0x200003b4

08000f5c <button_task>:
		}
	}
}

void button_task(void *args){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

	while(1){

		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <button_task+0x84>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 fb0f 	bl	8008590 <xQueueSemaphoreTake>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d1f5      	bne.n	8000f64 <button_task+0x8>
			vTaskDelay(50);
 8000f78:	2032      	movs	r0, #50	@ 0x32
 8000f7a:	f007 fe8d 	bl	8008c98 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <button_task+0x88>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	f006 fff0 	bl	8007f6c <xQueueGenericSend>
			if(sinal==1){
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <button_task+0x8c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10e      	bne.n	8000fb2 <button_task+0x56>
				sinal=0;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <button_task+0x8c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor desligado!\n\r";
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <button_task+0x90>)
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <button_task+0x94>)
 8000f9e:	601a      	str	r2, [r3, #0]
				vTaskSuspend(xecg_task);
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <button_task+0x98>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f007 fead 	bl	8008d04 <vTaskSuspend>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000faa:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <button_task+0x9c>)
 8000fac:	f004 fd68 	bl	8005a80 <HAL_TIM_Base_Stop_IT>
 8000fb0:	e012      	b.n	8000fd8 <button_task+0x7c>
			}else{
				sinal=1;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <button_task+0x8c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor ligado!\n\r";
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <button_task+0x90>)
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <button_task+0xa0>)
 8000fbc:	601a      	str	r2, [r3, #0]
				vTaskResume(xuart_task);
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <button_task+0xa4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 ff64 	bl	8008e90 <vTaskResume>
				vTaskResume(xecg_task);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <button_task+0x98>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 ff5f 	bl	8008e90 <vTaskResume>
				HAL_TIM_Base_Start_IT(&htim3);
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <button_task+0x9c>)
 8000fd4:	f004 fcea 	bl	80059ac <HAL_TIM_Base_Start_IT>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd8:	2028      	movs	r0, #40	@ 0x28
 8000fda:	f002 ff71 	bl	8003ec0 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 8000fde:	e7c1      	b.n	8000f64 <button_task+0x8>
 8000fe0:	200003b0 	.word	0x200003b0
 8000fe4:	200003b4 	.word	0x200003b4
 8000fe8:	200003d0 	.word	0x200003d0
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	0800d180 	.word	0x0800d180
 8000ff4:	200003c8 	.word	0x200003c8
 8000ff8:	20000364 	.word	0x20000364
 8000ffc:	0800d194 	.word	0x0800d194
 8001000:	200003cc 	.word	0x200003cc

08001004 <uart_task>:
		}
	}
}

void uart_task(void *argument){
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b0a1      	sub	sp, #132	@ 0x84
 8001008:	af02      	add	r7, sp, #8
 800100a:	6078      	str	r0, [r7, #4]
	char uart_buffer[100];
	ecg_data_t ecg_data;

	while(1){

		if(sinal==0){
 800100c:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <uart_task+0xd8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d124      	bne.n	800105e <uart_task+0x5a>
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8001014:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <uart_task+0xdc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	4618      	mov	r0, r3
 800101e:	f007 fab7 	bl	8008590 <xQueueSemaphoreTake>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1f1      	bne.n	800100c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 8001028:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <uart_task+0xe0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2213      	movs	r2, #19
 800102e:	4619      	mov	r1, r3
 8001030:	482d      	ldr	r0, [pc, #180]	@ (80010e8 <uart_task+0xe4>)
 8001032:	f005 fa15 	bl	8006460 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8001036:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <uart_task+0xe8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 31ff 	mov.w	r1, #4294967295
 800103e:	4618      	mov	r0, r3
 8001040:	f007 faa6 	bl	8008590 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <uart_task+0xdc>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	f006 ff8d 	bl	8007f6c <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 8001052:	4b27      	ldr	r3, [pc, #156]	@ (80010f0 <uart_task+0xec>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fe54 	bl	8008d04 <vTaskSuspend>
 800105c:	e7d6      	b.n	800100c <uart_task+0x8>
			}
		}else{
			if(xQueueReceive(ecgQueue, &ecg_data, portMAX_DELAY) == pdPASS){
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <uart_task+0xf0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 0108 	add.w	r1, r7, #8
 8001066:	f04f 32ff 	mov.w	r2, #4294967295
 800106a:	4618      	mov	r0, r3
 800106c:	f007 f9ae 	bl	80083cc <xQueueReceive>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d1ca      	bne.n	800100c <uart_task+0x8>
				if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <uart_task+0xdc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f04f 31ff 	mov.w	r1, #4294967295
 800107e:	4618      	mov	r0, r3
 8001080:	f007 fa86 	bl	8008590 <xQueueSemaphoreTake>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	d1c0      	bne.n	800100c <uart_task+0x8>
					int len = snprintf(uart_buffer, sizeof(uart_buffer),"ECG: %d, %.3fV\n\r",ecg_data.valor, ecg_data.tensao);
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	461c      	mov	r4, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa81 	bl	8000598 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	f107 0010 	add.w	r0, r7, #16
 800109e:	e9cd 2300 	strd	r2, r3, [sp]
 80010a2:	4623      	mov	r3, r4
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <uart_task+0xf4>)
 80010a6:	2164      	movs	r1, #100	@ 0x64
 80010a8:	f009 feb6 	bl	800ae18 <sniprintf>
 80010ac:	6778      	str	r0, [r7, #116]	@ 0x74
					HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)uart_buffer, len);
 80010ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <uart_task+0xe4>)
 80010ba:	f005 f9d1 	bl	8006460 <HAL_UART_Transmit_IT>
					xSemaphoreTake(sUART, portMAX_DELAY);
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <uart_task+0xe8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f04f 31ff 	mov.w	r1, #4294967295
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 fa62 	bl	8008590 <xQueueSemaphoreTake>
					xSemaphoreGive(mUART);
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <uart_task+0xdc>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	f006 ff49 	bl	8007f6c <xQueueGenericSend>
		if(sinal==0){
 80010da:	e797      	b.n	800100c <uart_task+0x8>
 80010dc:	200003d0 	.word	0x200003d0
 80010e0:	200003bc 	.word	0x200003bc
 80010e4:	20000000 	.word	0x20000000
 80010e8:	200002d0 	.word	0x200002d0
 80010ec:	200003b8 	.word	0x200003b8
 80010f0:	200003cc 	.word	0x200003cc
 80010f4:	200003c4 	.word	0x200003c4
 80010f8:	0800d1a8 	.word	0x0800d1a8

080010fc <ecg_task>:
			}
		}
	}
}

void ecg_task(void *args){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	while(1){
		if(xSemaphoreTake(adcSemaphore, portMAX_DELAY) == pdTRUE){
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <ecg_task+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	4618      	mov	r0, r3
 800110e:	f007 fa3f 	bl	8008590 <xQueueSemaphoreTake>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d1f5      	bne.n	8001104 <ecg_task+0x8>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buffer, DMA_BUFFER_SIZE);
 8001118:	2201      	movs	r2, #1
 800111a:	4903      	ldr	r1, [pc, #12]	@ (8001128 <ecg_task+0x2c>)
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <ecg_task+0x30>)
 800111e:	f001 fadb 	bl	80026d8 <HAL_ADC_Start_DMA>
		if(xSemaphoreTake(adcSemaphore, portMAX_DELAY) == pdTRUE){
 8001122:	e7ef      	b.n	8001104 <ecg_task+0x8>
 8001124:	200003c0 	.word	0x200003c0
 8001128:	200013dc 	.word	0x200013dc
 800112c:	20000204 	.word	0x20000204

08001130 <add_to_ecg_buffer>:
		}
	}
}


void add_to_ecg_buffer(ecg_data_t *data){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	ecg_buffer[buffer_head] = *data;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <add_to_ecg_buffer+0x78>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <add_to_ecg_buffer+0x7c>)
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	460a      	mov	r2, r1
 8001146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114a:	e883 0003 	stmia.w	r3, {r0, r1}
	buffer_head = (buffer_head + 1) % ECG_BUFFER_SIZE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <add_to_ecg_buffer+0x78>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	425a      	negs	r2, r3
 8001156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800115a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800115e:	bf58      	it	pl
 8001160:	4253      	negpl	r3, r2
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <add_to_ecg_buffer+0x78>)
 8001166:	801a      	strh	r2, [r3, #0]

	if(buffer_count < ECG_BUFFER_SIZE){
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <add_to_ecg_buffer+0x80>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001170:	d206      	bcs.n	8001180 <add_to_ecg_buffer+0x50>
		buffer_count++;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <add_to_ecg_buffer+0x80>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <add_to_ecg_buffer+0x80>)
 800117c:	801a      	strh	r2, [r3, #0]
	}else{
		buffer_tail = (buffer_tail + 1) % ECG_BUFFER_SIZE;
	}
}
 800117e:	e00c      	b.n	800119a <add_to_ecg_buffer+0x6a>
		buffer_tail = (buffer_tail + 1) % ECG_BUFFER_SIZE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <add_to_ecg_buffer+0x84>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	425a      	negs	r2, r3
 8001188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800118c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001190:	bf58      	it	pl
 8001192:	4253      	negpl	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <add_to_ecg_buffer+0x84>)
 8001198:	801a      	strh	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200013d4 	.word	0x200013d4
 80011ac:	200003d4 	.word	0x200003d4
 80011b0:	200013d8 	.word	0x200013d8
 80011b4:	200013d6 	.word	0x200013d6

080011b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_UART_TxCpltCallback+0x3c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f86c 	bl	80082ac <xQueueGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWokenTX);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_UART_TxCpltCallback+0x32>
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <HAL_UART_TxCpltCallback+0x40>)
 80011dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	f3bf 8f6f 	isb	sy
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200003b8 	.word	0x200003b8
 80011f8:	e000ed04 	.word	0xe000ed04

080011fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
	ecg_data_t ecg_data;

	if(hadc->Instance == ADC1){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001210:	d12e      	bne.n	8001270 <HAL_ADC_ConvCpltCallback+0x74>

		ecg_data.valor = adc_dma_buffer[0];
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	81bb      	strh	r3, [r7, #12]
		ecg_data.tensao = (ecg_data.valor * ADC_VREF) / ADC_RESOLUTION;
 800121a:	89bb      	ldrh	r3, [r7, #12]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001224:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800127c <HAL_ADC_ConvCpltCallback+0x80>
 8001228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800122c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001280 <HAL_ADC_ConvCpltCallback+0x84>
 8001230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001234:	edc7 7a04 	vstr	s15, [r7, #16]
		add_to_ecg_buffer(&ecg_data);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff77 	bl	8001130 <add_to_ecg_buffer>
		xQueueSendFromISR(ecgQueue, &ecg_data, &xHigherPriorityTaskWoken);
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_ADC_ConvCpltCallback+0x88>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 0214 	add.w	r2, r7, #20
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	2300      	movs	r3, #0
 8001250:	f006 ff8e 	bl	8008170 <xQueueGenericSendFromISR>
		HAL_ADC_Stop_DMA(&hadc1);
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001256:	f001 faf3 	bl	8002840 <HAL_ADC_Stop_DMA>

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_ADC_ConvCpltCallback+0x74>
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_ADC_ConvCpltCallback+0x90>)
 8001262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	f3bf 8f4f 	dsb	sy
 800126c:	f3bf 8f6f 	isb	sy
	}
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200013dc 	.word	0x200013dc
 800127c:	40533333 	.word	0x40533333
 8001280:	45800000 	.word	0x45800000
 8001284:	200003c4 	.word	0x200003c4
 8001288:	20000204 	.word	0x20000204
 800128c:	e000ed04 	.word	0xe000ed04

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 fdd6 	bl	8001e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f88f 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 fa11 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a2:	f000 f9e5 	bl	8001670 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80012a6:	f000 f94b 	bl	8001540 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80012aa:	f000 f993 	bl	80015d4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012ae:	f000 f8cf 	bl	8001450 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012b2:	217f      	movs	r1, #127	@ 0x7f
 80012b4:	482f      	ldr	r0, [pc, #188]	@ (8001374 <main+0xe4>)
 80012b6:	f002 fbd5 	bl	8003a64 <HAL_ADCEx_Calibration_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
 80012ba:	2203      	movs	r2, #3
 80012bc:	2100      	movs	r1, #0
 80012be:	2001      	movs	r0, #1
 80012c0:	f006 fdcc 	bl	8007e5c <xQueueGenericCreate>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001378 <main+0xe8>)
 80012c8:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 80012ca:	2203      	movs	r2, #3
 80012cc:	2100      	movs	r1, #0
 80012ce:	2001      	movs	r0, #1
 80012d0:	f006 fdc4 	bl	8007e5c <xQueueGenericCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a29      	ldr	r2, [pc, #164]	@ (800137c <main+0xec>)
 80012d8:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 80012da:	2203      	movs	r2, #3
 80012dc:	2100      	movs	r1, #0
 80012de:	2001      	movs	r0, #1
 80012e0:	f006 fdbc 	bl	8007e5c <xQueueGenericCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a26      	ldr	r2, [pc, #152]	@ (8001380 <main+0xf0>)
 80012e8:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 80012ea:	2001      	movs	r0, #1
 80012ec:	f006 fe26 	bl	8007f3c <xQueueCreateMutex>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a24      	ldr	r2, [pc, #144]	@ (8001384 <main+0xf4>)
 80012f4:	6013      	str	r3, [r2, #0]
  adcSemaphore = xSemaphoreCreateBinary();
 80012f6:	2203      	movs	r2, #3
 80012f8:	2100      	movs	r1, #0
 80012fa:	2001      	movs	r0, #1
 80012fc:	f006 fdae 	bl	8007e5c <xQueueGenericCreate>
 8001300:	4603      	mov	r3, r0
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <main+0xf8>)
 8001304:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  ecgQueue = xQueueCreate(32, sizeof(ecg_data_t));
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	2020      	movs	r0, #32
 800130c:	f006 fda6 	bl	8007e5c <xQueueGenericCreate>
 8001310:	4603      	mov	r3, r0
 8001312:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <main+0xfc>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 128, &led, 4, NULL);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2304      	movs	r3, #4
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <main+0x100>)
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	491c      	ldr	r1, [pc, #112]	@ (8001394 <main+0x104>)
 8001324:	481c      	ldr	r0, [pc, #112]	@ (8001398 <main+0x108>)
 8001326:	f007 fb6b 	bl	8008a00 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 256, NULL, 2, &xuart_task);
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <main+0x10c>)
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2302      	movs	r3, #2
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001338:	4919      	ldr	r1, [pc, #100]	@ (80013a0 <main+0x110>)
 800133a:	481a      	ldr	r0, [pc, #104]	@ (80013a4 <main+0x114>)
 800133c:	f007 fb60 	bl	8008a00 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 256, NULL, 3, NULL);
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2303      	movs	r3, #3
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134e:	4916      	ldr	r1, [pc, #88]	@ (80013a8 <main+0x118>)
 8001350:	4816      	ldr	r0, [pc, #88]	@ (80013ac <main+0x11c>)
 8001352:	f007 fb55 	bl	8008a00 <xTaskCreate>
	(void)xTaskCreate(ecg_task, "ecg_task", 256, NULL, 1, &xecg_task);
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <main+0x120>)
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2301      	movs	r3, #1
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001364:	4913      	ldr	r1, [pc, #76]	@ (80013b4 <main+0x124>)
 8001366:	4814      	ldr	r0, [pc, #80]	@ (80013b8 <main+0x128>)
 8001368:	f007 fb4a 	bl	8008a00 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800136c:	f006 fc50 	bl	8007c10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <main+0xe0>
 8001374:	20000204 	.word	0x20000204
 8001378:	200003b0 	.word	0x200003b0
 800137c:	200003b4 	.word	0x200003b4
 8001380:	200003b8 	.word	0x200003b8
 8001384:	200003bc 	.word	0x200003bc
 8001388:	200003c0 	.word	0x200003c0
 800138c:	200003c4 	.word	0x200003c4
 8001390:	20000004 	.word	0x20000004
 8001394:	0800d1bc 	.word	0x0800d1bc
 8001398:	08000f25 	.word	0x08000f25
 800139c:	200003cc 	.word	0x200003cc
 80013a0:	0800d1c8 	.word	0x0800d1c8
 80013a4:	08001005 	.word	0x08001005
 80013a8:	0800d1d4 	.word	0x0800d1d4
 80013ac:	08000f5d 	.word	0x08000f5d
 80013b0:	200003c8 	.word	0x200003c8
 80013b4:	0800d1e0 	.word	0x0800d1e0
 80013b8:	080010fd 	.word	0x080010fd

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	@ 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2238      	movs	r2, #56	@ 0x38
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 fd9d 	bl	800af0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013de:	2000      	movs	r0, #0
 80013e0:	f003 fa88 	bl	80048f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	2303      	movs	r3, #3
 80013f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80013f6:	2306      	movs	r3, #6
 80013f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013fa:	2355      	movs	r3, #85	@ 0x55
 80013fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fb24 	bl	8004a5c <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800141a:	f000 fa11 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141e:	230f      	movs	r3, #15
 8001420:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2104      	movs	r1, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fe22 	bl	8005080 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001442:	f000 f9fd 	bl	8001840 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	@ 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2220      	movs	r2, #32
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f009 fd4e 	bl	800af0a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800146e:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001470:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001476:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001478:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001484:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <MX_ADC1_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001498:	2204      	movs	r2, #4
 800149a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <MX_ADC1_Init+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a2:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80014a8:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d8:	4817      	ldr	r0, [pc, #92]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014da:	f000 ff79 	bl	80023d0 <HAL_ADC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014e4:	f000 f9ac 	bl	8001840 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4811      	ldr	r0, [pc, #68]	@ (8001538 <MX_ADC1_Init+0xe8>)
 80014f4:	f002 fb4a 	bl	8003b8c <HAL_ADCEx_MultiModeConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014fe:	f000 f99f 	bl	8001840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_ADC1_Init+0xec>)
 8001504:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001506:	2306      	movs	r3, #6
 8001508:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800150e:	237f      	movs	r3, #127	@ 0x7f
 8001510:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001512:	2304      	movs	r3, #4
 8001514:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <MX_ADC1_Init+0xe8>)
 8001520:	f001 fc28 	bl	8002d74 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800152a:	f000 f989 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	@ 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000204 	.word	0x20000204
 800153c:	04300002 	.word	0x04300002

08001540 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001544:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001546:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <MX_LPUART1_UART_Init+0x90>)
 8001548:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001582:	4812      	ldr	r0, [pc, #72]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001584:	f004 ff1c 	bl	80063c0 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800158e:	f000 f957 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	480d      	ldr	r0, [pc, #52]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 8001596:	f006 fa70 	bl	8007a7a <HAL_UARTEx_SetTxFifoThreshold>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80015a0:	f000 f94e 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 80015a8:	f006 faa5 	bl	8007af6 <HAL_UARTEx_SetRxFifoThreshold>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80015b2:	f000 f945 	bl	8001840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_LPUART1_UART_Init+0x8c>)
 80015b8:	f006 fa26 	bl	8007a08 <HAL_UARTEx_DisableFifoMode>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80015c2:	f000 f93d 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200002d0 	.word	0x200002d0
 80015d0:	40008000 	.word	0x40008000

080015d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <MX_TIM3_Init+0x94>)
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <MX_TIM3_Init+0x98>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <MX_TIM3_Init+0x94>)
 80015fa:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80015fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001608:	2263      	movs	r2, #99	@ 0x63
 800160a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <MX_TIM3_Init+0x94>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001618:	4813      	ldr	r0, [pc, #76]	@ (8001668 <MX_TIM3_Init+0x94>)
 800161a:	f004 f96f 	bl	80058fc <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001624:	f000 f90c 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001636:	f004 fba1 	bl	8005d7c <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001640:	f000 f8fe 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_TIM3_Init+0x94>)
 8001652:	f004 fded 	bl	8006230 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800165c:	f000 f8f0 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000364 	.word	0x20000364
 800166c:	40000400 	.word	0x40000400

08001670 <MX_DMA_Init>:

/**
  * @brief Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_DMA_Init+0x50>)
 8001678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <MX_DMA_Init+0x50>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6493      	str	r3, [r2, #72]	@ 0x48
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_DMA_Init+0x50>)
 8001684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_DMA_Init+0x50>)
 8001690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <MX_DMA_Init+0x50>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6493      	str	r3, [r2, #72]	@ 0x48
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_DMA_Init+0x50>)
 800169c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	200b      	movs	r0, #11
 80016ac:	f002 fbee 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b0:	200b      	movs	r0, #11
 80016b2:	f002 fc05 	bl	8003ec0 <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <MX_GPIO_Init+0xbc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <MX_GPIO_Init+0xbc>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <MX_GPIO_Init+0xbc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <MX_GPIO_Init+0xbc>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <MX_GPIO_Init+0xbc>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <MX_GPIO_Init+0xbc>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <MX_GPIO_Init+0xbc>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a1c      	ldr	r2, [pc, #112]	@ (8001780 <MX_GPIO_Init+0xbc>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_GPIO_Init+0xbc>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2120      	movs	r1, #32
 8001726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172a:	f003 f899 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800172e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001734:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <MX_GPIO_Init+0xc0>)
 8001746:	f002 ff09 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800174a:	2320      	movs	r3, #32
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001764:	f002 fefa 	bl	800455c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2105      	movs	r1, #5
 800176c:	2028      	movs	r0, #40	@ 0x28
 800176e:	f002 fb8d 	bl	8003e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001772:	2028      	movs	r0, #40	@ 0x28
 8001774:	f002 fba4 	bl	8003ec0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800

08001788 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800179c:	d115      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800179e:	2028      	movs	r0, #40	@ 0x28
 80017a0:	f002 fb9c 	bl	8003edc <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f107 020c 	add.w	r2, r7, #12
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fd7c 	bl	80082ac <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_EXTI_Callback+0x42>
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80017bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	f3bf 8f6f 	isb	sy
	}
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003b0 	.word	0x200003b0
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017ee:	f000 fb43 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d114      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
	  xSemaphoreGiveFromISR(adcSemaphore, &xHigherPriorityTaskWoken);
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f107 020c 	add.w	r2, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f006 fd4e 	bl	80082ac <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40000400 	.word	0x40000400
 8001838:	200003c0 	.word	0x200003c0
 800183c:	e000ed04 	.word	0xe000ed04

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <Error_Handler+0x8>

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_MspInit+0x50>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_MspInit+0x50>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6613      	str	r3, [r2, #96]	@ 0x60
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_MspInit+0x50>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_MspInit+0x50>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_MspInit+0x50>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	@ 0x58
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_MspInit+0x50>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	210f      	movs	r1, #15
 8001886:	f06f 0001 	mvn.w	r0, #1
 800188a:	f002 faff 	bl	8003e8c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800188e:	f003 f8d5 	bl	8004a3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	@ 0x68
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2244      	movs	r2, #68	@ 0x44
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 fb22 	bl	800af0a <memset>
  if(hadc->Instance==ADC1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ce:	d167      	bne.n	80019a0 <HAL_ADC_MspInit+0x100>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fe1b 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018ec:	f7ff ffa8 	bl	8001840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018f0:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	4a2c      	ldr	r2, [pc, #176]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 80018f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fc:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a26      	ldr	r2, [pc, #152]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_ADC_MspInit+0x108>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001920:	2301      	movs	r3, #1
 8001922:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001924:	2303      	movs	r3, #3
 8001926:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001936:	f002 fe11 	bl	800455c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <HAL_ADC_MspInit+0x110>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001942:	2205      	movs	r2, #5
 8001944:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001954:	2280      	movs	r2, #128	@ 0x80
 8001956:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 800195a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001966:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 800196a:	2220      	movs	r2, #32
 800196c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001976:	f002 fabf 	bl	8003ef8 <HAL_DMA_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001980:	f7ff ff5e 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_ADC_MspInit+0x10c>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2105      	movs	r1, #5
 8001994:	2012      	movs	r0, #18
 8001996:	f002 fa79 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800199a:	2012      	movs	r0, #18
 800199c:	f002 fa90 	bl	8003ec0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019a0:	bf00      	nop
 80019a2:	3768      	adds	r7, #104	@ 0x68
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	20000270 	.word	0x20000270
 80019b0:	40020008 	.word	0x40020008

080019b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b09a      	sub	sp, #104	@ 0x68
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2244      	movs	r2, #68	@ 0x44
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f009 fa98 	bl	800af0a <memset>
  if(huart->Instance==LPUART1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <HAL_UART_MspInit+0xb8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d13e      	bne.n	8001a62 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019e4:	2320      	movs	r3, #32
 80019e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fd93 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019fc:	f7ff ff20 	bl	8001840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	4a1a      	ldr	r2, [pc, #104]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_UART_MspInit+0xbc>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a30:	230c      	movs	r3, #12
 8001a32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a40:	230c      	movs	r3, #12
 8001a42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4e:	f002 fd85 	bl	800455c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2105      	movs	r1, #5
 8001a56:	205b      	movs	r0, #91	@ 0x5b
 8001a58:	f002 fa18 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a5c:	205b      	movs	r0, #91	@ 0x5b
 8001a5e:	f002 fa2f 	bl	8003ec0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3768      	adds	r7, #104	@ 0x68
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40008000 	.word	0x40008000
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <HAL_TIM_Base_MspInit+0x44>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d113      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	201d      	movs	r0, #29
 8001aa4:	f002 f9f2 	bl	8003e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aa8:	201d      	movs	r0, #29
 8001aaa:	f002 fa09 	bl	8003ec0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	@ 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_InitTick+0xc4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b84 <HAL_InitTick+0xc4>)
 8001ad6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ada:	6613      	str	r3, [r2, #96]	@ 0x60
 8001adc:	4b29      	ldr	r3, [pc, #164]	@ (8001b84 <HAL_InitTick+0xc4>)
 8001ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae8:	f107 020c 	add.w	r2, r7, #12
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc9a 	bl	800542c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001af8:	f003 fc82 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8001afc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b00:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <HAL_InitTick+0xc8>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b0e:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <HAL_InitTick+0xd0>)
 8001b10:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b2c:	4817      	ldr	r0, [pc, #92]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b2e:	f003 fee5 	bl	80058fc <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11b      	bne.n	8001b78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b40:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <HAL_InitTick+0xcc>)
 8001b42:	f003 ff33 	bl	80059ac <HAL_TIM_Base_Start_IT>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b54:	2019      	movs	r0, #25
 8001b56:	f002 f9b3 	bl	8003ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d808      	bhi.n	8001b72 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	2019      	movs	r0, #25
 8001b66:	f002 f991 	bl	8003e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_InitTick+0xd4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e002      	b.n	8001b78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3730      	adds	r7, #48	@ 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	200013e0 	.word	0x200013e0
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	20000014 	.word	0x20000014

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bd6:	f002 fb72 	bl	80042be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000270 	.word	0x20000270

08001be4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <ADC1_2_IRQHandler+0x10>)
 8001bea:	f000 fe8b 	bl	8002904 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000204 	.word	0x20000204

08001bf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bfe:	f003 ff6e 	bl	8005ade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200013e0 	.word	0x200013e0

08001c0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <TIM3_IRQHandler+0x10>)
 8001c12:	f003 ff64 	bl	8005ade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000364 	.word	0x20000364

08001c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001c24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c28:	f002 fe4c 	bl	80048c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <LPUART1_IRQHandler+0x10>)
 8001c36:	f004 fca7 	bl	8006588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002d0 	.word	0x200002d0

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5e:	f009 fa05 	bl	800b06c <__errno>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
  return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c86:	bf00      	nop
 8001c88:	e7fd      	b.n	8001c86 <_exit+0x12>

08001c8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e00a      	b.n	8001cb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbf0      	blt.n	8001c9c <_read+0x12>
  }

  return len;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e009      	b.n	8001cea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf1      	blt.n	8001cd6 <_write+0x12>
  }
  return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_close>:

int _close(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d24:	605a      	str	r2, [r3, #4]
  return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_isatty>:

int _isatty(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f009 f96a 	bl	800b06c <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20008000 	.word	0x20008000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	2000142c 	.word	0x2000142c
 8001dcc:	200036d8 	.word	0x200036d8

08001dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff ffea 	bl	8001dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	@ (8001e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <LoopForever+0xe>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <LoopForever+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f009 f929 	bl	800b078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e26:	f7ff fa33 	bl	8001290 <main>

08001e2a <LoopForever>:

LoopForever:
    b LoopForever
 8001e2a:	e7fe      	b.n	8001e2a <LoopForever>
  ldr   r0, =_estack
 8001e2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e38:	0800d5bc 	.word	0x0800d5bc
  ldr r2, =_sbss
 8001e3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e40:	200036d8 	.word	0x200036d8

08001e44 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <COMP1_2_3_IRQHandler>

08001e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f002 f810 	bl	8003e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e56:	200f      	movs	r0, #15
 8001e58:	f7ff fe32 	bl	8001ac0 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	71fb      	strb	r3, [r7, #7]
 8001e66:	e001      	b.n	8001e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e68:	f7ff fcf0 	bl	800184c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a03      	ldr	r2, [pc, #12]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20001430 	.word	0x20001430
 8001e98:	20000018 	.word	0x20000018

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20001430 	.word	0x20001430

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3360      	adds	r3, #96	@ 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <LL_ADC_SetOffset+0x44>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	03fff000 	.word	0x03fff000

08001f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3360      	adds	r3, #96	@ 0x60
 8001f72:	461a      	mov	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3360      	adds	r3, #96	@ 0x60
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b087      	sub	sp, #28
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3360      	adds	r3, #96	@ 0x60
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3360      	adds	r3, #96	@ 0x60
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	615a      	str	r2, [r3, #20]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3330      	adds	r3, #48	@ 0x30
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	211f      	movs	r1, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 011f 	and.w	r1, r3, #31
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3314      	adds	r3, #20
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0d1b      	lsrs	r3, r3, #20
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2107      	movs	r1, #7
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0d1b      	lsrs	r3, r3, #20
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	43db      	mvns	r3, r3
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0318 	and.w	r3, r3, #24
 8002176:	4908      	ldr	r1, [pc, #32]	@ (8002198 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002178:	40d9      	lsrs	r1, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	400b      	ands	r3, r1
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	431a      	orrs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	0007ffff 	.word	0x0007ffff

0800219c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 031f 	and.w	r3, r3, #31
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6093      	str	r3, [r2, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800220c:	d101      	bne.n	8002212 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002230:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002234:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800225c:	d101      	bne.n	8002262 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_IsEnabled+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_IsEnabled+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d101      	bne.n	80022fe <LL_ADC_IsDisableOngoing+0x18>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <LL_ADC_IsDisableOngoing+0x1a>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800231c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d101      	bne.n	8002374 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002392:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e167      	b.n	80026ba <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fa51 	bl	80018a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fef1 	bl	80021f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fed7 	bl	80021d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff0c 	bl	8002248 <LL_ADC_IsInternalRegulatorEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fef0 	bl	8002220 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002440:	4ba0      	ldr	r3, [pc, #640]	@ (80026c4 <HAL_ADC_Init+0x2f4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	4aa0      	ldr	r2, [pc, #640]	@ (80026c8 <HAL_ADC_Init+0x2f8>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002454:	e002      	b.n	800245c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b01      	subs	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff feee 	bl	8002248 <LL_ADC_IsInternalRegulatorEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff62 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002498:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8100 	bne.w	80026a8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 80fc 	bne.w	80026a8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fefb 	bl	80022c0 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024d4:	f7ff fef4 	bl	80022c0 <LL_ADC_IsEnabled>
 80024d8:	4604      	mov	r4, r0
 80024da:	487c      	ldr	r0, [pc, #496]	@ (80026cc <HAL_ADC_Init+0x2fc>)
 80024dc:	f7ff fef0 	bl	80022c0 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4323      	orrs	r3, r4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4878      	ldr	r0, [pc, #480]	@ (80026d0 <HAL_ADC_Init+0x300>)
 80024f0:	f7ff fce0 	bl	8001eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7f5b      	ldrb	r3, [r3, #29]
 80024f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002504:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800250a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002512:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800251e:	2b01      	cmp	r3, #1
 8002520:	d106      	bne.n	8002530 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	045b      	lsls	r3, r3, #17
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <HAL_ADC_Init+0x304>)
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff15 	bl	80023aa <LL_ADC_INJ_IsConversionOngoing>
 8002580:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d16d      	bne.n	8002664 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d16a      	bne.n	8002664 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002592:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800259a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025aa:	f023 0302 	bic.w	r3, r3, #2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6911      	ldr	r1, [r2, #16]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025ee:	e013      	b.n	8002618 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002614:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261e:	2b01      	cmp	r3, #1
 8002620:	d118      	bne.n	8002654 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800263e:	4311      	orrs	r1, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002644:	430a      	orrs	r2, r1
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	e007      	b.n	8002664 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f023 010f 	bic.w	r1, r3, #15
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
 8002684:	e007      	b.n	8002696 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020f 	bic.w	r2, r2, #15
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026a6:	e007      	b.n	80026b8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000010 	.word	0x20000010
 80026c8:	053e2d63 	.word	0x053e2d63
 80026cc:	50000100 	.word	0x50000100
 80026d0:	50000300 	.word	0x50000300
 80026d4:	fff04007 	.word	0xfff04007

080026d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e4:	4851      	ldr	r0, [pc, #324]	@ (800282c <HAL_ADC_Start_DMA+0x154>)
 80026e6:	f7ff fd59 	bl	800219c <LL_ADC_GetMultimode>
 80026ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe33 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 808f 	bne.w	800281c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADC_Start_DMA+0x34>
 8002708:	2302      	movs	r3, #2
 800270a:	e08a      	b.n	8002822 <HAL_ADC_Start_DMA+0x14a>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d002      	beq.n	8002726 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b09      	cmp	r3, #9
 8002724:	d173      	bne.n	800280e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 ffd0 	bl	80036cc <ADC_Enable>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d166      	bne.n	8002804 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a38      	ldr	r2, [pc, #224]	@ (8002830 <HAL_ADC_Start_DMA+0x158>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_ADC_Start_DMA+0x82>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e001      	b.n	800275e <HAL_ADC_Start_DMA+0x86>
 800275a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4293      	cmp	r3, r2
 8002764:	d002      	beq.n	800276c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	f023 0206 	bic.w	r2, r3, #6
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002790:	e002      	b.n	8002798 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	4a25      	ldr	r2, [pc, #148]	@ (8002834 <HAL_ADC_Start_DMA+0x15c>)
 800279e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a4:	4a24      	ldr	r2, [pc, #144]	@ (8002838 <HAL_ADC_Start_DMA+0x160>)
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <HAL_ADC_Start_DMA+0x164>)
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	221c      	movs	r2, #28
 80027b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0210 	orr.w	r2, r2, #16
 80027ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3340      	adds	r3, #64	@ 0x40
 80027ea:	4619      	mov	r1, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f001 fc2a 	bl	8004048 <HAL_DMA_Start_IT>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd85 	bl	800230c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002802:	e00d      	b.n	8002820 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800280c:	e008      	b.n	8002820 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800281a:	e001      	b.n	8002820 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	50000300 	.word	0x50000300
 8002830:	50000100 	.word	0x50000100
 8002834:	08003897 	.word	0x08003897
 8002838:	0800396f 	.word	0x0800396f
 800283c:	0800398b 	.word	0x0800398b

08002840 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Stop_DMA+0x16>
 8002852:	2302      	movs	r3, #2
 8002854:	e051      	b.n	80028fa <HAL_ADC_Stop_DMA+0xba>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800285e:	2103      	movs	r1, #3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fe77 	bl	8003554 <ADC_ConversionStop>
 8002866:	4603      	mov	r3, r0
 8002868:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d13f      	bne.n	80028f0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002884:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d10f      	bne.n	80028ae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	4618      	mov	r0, r3
 8002894:	f001 fc53 	bl	800413e <HAL_DMA_Abort>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0210 	bic.w	r2, r2, #16
 80028bc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 ff87 	bl	80037d8 <ADC_Disable>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 ff81 	bl	80037d8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	@ 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002920:	4883      	ldr	r0, [pc, #524]	@ (8002b30 <HAL_ADC_IRQHandler+0x22c>)
 8002922:	f7ff fc3b 	bl	800219c <LL_ADC_GetMultimode>
 8002926:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <HAL_ADC_IRQHandler+0x5e>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f001 f90f 	bl	8003b78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_ADC_IRQHandler+0x72>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8085 	beq.w	8002a8c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d07f      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fb55 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d064      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <HAL_ADC_IRQHandler+0x230>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d002      	beq.n	80029c4 <HAL_ADC_IRQHandler+0xc0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e001      	b.n	80029c8 <HAL_ADC_IRQHandler+0xc4>
 80029c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d008      	beq.n	80029e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d104      	bne.n	80029ec <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	e00d      	b.n	8002a08 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <HAL_ADC_IRQHandler+0x230>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d002      	beq.n	80029fc <HAL_ADC_IRQHandler+0xf8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e001      	b.n	8002a00 <HAL_ADC_IRQHandler+0xfc>
 80029fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a00:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d135      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d12e      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc99 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d11a      	bne.n	8002a66 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 020c 	bic.w	r2, r2, #12
 8002a3e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d112      	bne.n	8002a7e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a64:	e00b      	b.n	8002a7e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fbbc 	bl	80011fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	220c      	movs	r2, #12
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x19c>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 809e 	beq.w	8002be8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8098 	beq.w	8002be8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fafe 	bl	80020d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ada:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fab9 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ae6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_ADC_IRQHandler+0x230>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d002      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x1f4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e001      	b.n	8002afc <HAL_ADC_IRQHandler+0x1f8>
 8002af8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d008      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d002      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b07      	cmp	r3, #7
 8002b14:	d104      	bne.n	8002b20 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	e011      	b.n	8002b44 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a03      	ldr	r2, [pc, #12]	@ (8002b34 <HAL_ADC_IRQHandler+0x230>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d006      	beq.n	8002b38 <HAL_ADC_IRQHandler+0x234>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e005      	b.n	8002b3c <HAL_ADC_IRQHandler+0x238>
 8002b30:	50000300 	.word	0x50000300
 8002b34:	50000100 	.word	0x50000100
 8002b38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b3c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d047      	beq.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x260>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d03f      	beq.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13a      	bne.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	2b40      	cmp	r3, #64	@ 0x40
 8002b70:	d133      	bne.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12e      	bne.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fc12 	bl	80023aa <LL_ADC_INJ_IsConversionOngoing>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11a      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b9a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d112      	bne.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bc0:	e00b      	b.n	8002bda <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 ffa4 	bl	8003b28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2260      	movs	r2, #96	@ 0x60
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x312>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f89f 	bl	8002d4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2280      	movs	r2, #128	@ 0x80
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x342>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 ff8a 	bl	8003b50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x372>
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 ff7c 	bl	8003b64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d036      	beq.n	8002cee <HAL_ADC_IRQHandler+0x3ea>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d031      	beq.n	8002cee <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	e014      	b.n	8002cc2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c9e:	4825      	ldr	r0, [pc, #148]	@ (8002d34 <HAL_ADC_IRQHandler+0x430>)
 8002ca0:	f7ff fa8a 	bl	80021b8 <LL_ADC_GetMultiDMATransfer>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002caa:	2301      	movs	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e008      	b.n	8002cc2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	f043 0202 	orr.w	r2, r3, #2
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f83d 	bl	8002d60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2210      	movs	r2, #16
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d018      	beq.n	8002d2a <HAL_ADC_IRQHandler+0x426>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	f043 0208 	orr.w	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 ff09 	bl	8003b3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	@ 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	50000300 	.word	0x50000300

08002d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b0b6      	sub	sp, #216	@ 0xd8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x22>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e3c8      	b.n	8003528 <HAL_ADC_ConfigChannel+0x7b4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fada 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 83ad 	bne.w	800350a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f7ff f95e 	bl	800207e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fac8 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8002dcc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fae8 	bl	80023aa <LL_ADC_INJ_IsConversionOngoing>
 8002dda:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 81d9 	bne.w	800319a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 81d4 	bne.w	800319a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dfa:	d10f      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7ff f978 	bl	80020fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f90c 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e1a:	e00e      	b.n	8002e3a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff f967 	bl	80020fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f8fc 	bl	8002032 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d022      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6919      	ldr	r1, [r3, #16]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e6c:	f7ff f856 	bl	8001f1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f7ff f8a2 	bl	8001fc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x124>
 8002e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e96:	e000      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x126>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f7ff f8ae 	bl	8001ffc <LL_ADC_SetOffsetSaturation>
 8002ea0:	e17b      	b.n	800319a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f85b 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x15a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff f850 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	e01e      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x198>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff f845 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002f00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1b0>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	e018      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1e2>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f814 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fff8 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x220>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe ffed 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	e01e      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x25e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe ffe2 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e004      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x276>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	e018      	b.n	800301c <HAL_ADC_ConfigChannel+0x2a8>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003006:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe ffb1 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe ff95 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x2e6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2102      	movs	r1, #2
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff8a 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	e01e      	b.n	8003098 <HAL_ADC_ConfigChannel+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe ff7f 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800307c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e004      	b.n	8003096 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800308c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x33c>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	e016      	b.n	80030de <HAL_ADC_ConfigChannel+0x36a>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e004      	b.n	80030de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030de:	429a      	cmp	r2, r3
 80030e0:	d106      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2102      	movs	r1, #2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ff50 	bl	8001f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2103      	movs	r1, #3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe ff34 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_ADC_ConfigChannel+0x3a8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2103      	movs	r1, #3
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe ff29 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	f003 021f 	and.w	r2, r3, #31
 800311a:	e017      	b.n	800314c <HAL_ADC_ConfigChannel+0x3d8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2103      	movs	r1, #3
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ff1e 	bl	8001f64 <LL_ADC_GetOffsetChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003136:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e003      	b.n	800314a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x3f0>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	e011      	b.n	8003188 <HAL_ADC_ConfigChannel+0x414>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003172:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003174:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e003      	b.n	8003188 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003188:	429a      	cmp	r2, r3
 800318a:	d106      	bne.n	800319a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	2103      	movs	r1, #3
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fefb 	bl	8001f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f88e 	bl	80022c0 <LL_ADC_IsEnabled>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 8140 	bne.w	800342c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f7fe ffcb 	bl	8002154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a8f      	ldr	r2, [pc, #572]	@ (8003400 <HAL_ADC_ConfigChannel+0x68c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	f040 8131 	bne.w	800342c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x47e>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	0e9b      	lsrs	r3, r3, #26
 80031e0:	3301      	adds	r3, #1
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	2b09      	cmp	r3, #9
 80031e8:	bf94      	ite	ls
 80031ea:	2301      	movls	r3, #1
 80031ec:	2300      	movhi	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e019      	b.n	8003226 <HAL_ADC_ConfigChannel+0x4b2>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003202:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800320e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2b09      	cmp	r3, #9
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003226:	2b00      	cmp	r3, #0
 8003228:	d079      	beq.n	800331e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x4d2>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	3301      	adds	r3, #1
 800323e:	069b      	lsls	r3, r3, #26
 8003240:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003244:	e015      	b.n	8003272 <HAL_ADC_ConfigChannel+0x4fe>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003256:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	3301      	adds	r3, #1
 800326c:	069b      	lsls	r3, r3, #26
 800326e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x51e>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	e017      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x54e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80032ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x574>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 021f 	and.w	r2, r3, #31
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	051b      	lsls	r3, r3, #20
 80032e6:	e018      	b.n	800331a <HAL_ADC_ConfigChannel+0x5a6>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e003      	b.n	800330c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f003 021f 	and.w	r2, r3, #31
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331a:	430b      	orrs	r3, r1
 800331c:	e081      	b.n	8003422 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_ADC_ConfigChannel+0x5c6>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	3301      	adds	r3, #1
 8003332:	069b      	lsls	r3, r3, #26
 8003334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003338:	e015      	b.n	8003366 <HAL_ADC_ConfigChannel+0x5f2>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e003      	b.n	800335e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3301      	adds	r3, #1
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x612>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	e017      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x642>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	61fb      	str	r3, [r7, #28]
  return result;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	ea42 0103 	orr.w	r1, r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x66e>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 021f 	and.w	r2, r3, #31
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	3b1e      	subs	r3, #30
 80033da:	051b      	lsls	r3, r3, #20
 80033dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	e01e      	b.n	8003420 <HAL_ADC_ConfigChannel+0x6ac>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	613b      	str	r3, [r7, #16]
  return result;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e006      	b.n	800340c <HAL_ADC_ConfigChannel+0x698>
 80033fe:	bf00      	nop
 8003400:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	051b      	lsls	r3, r3, #20
 800341c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003420:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003426:	4619      	mov	r1, r3
 8003428:	f7fe fe68 	bl	80020fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b3f      	ldr	r3, [pc, #252]	@ (8003530 <HAL_ADC_ConfigChannel+0x7bc>)
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d071      	beq.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003438:	483e      	ldr	r0, [pc, #248]	@ (8003534 <HAL_ADC_ConfigChannel+0x7c0>)
 800343a:	f7fe fd61 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 800343e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <HAL_ADC_ConfigChannel+0x7c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x6e2>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3a      	ldr	r2, [pc, #232]	@ (800353c <HAL_ADC_ConfigChannel+0x7c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d127      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800345a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d121      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346a:	d157      	bne.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003474:	4619      	mov	r1, r3
 8003476:	482f      	ldr	r0, [pc, #188]	@ (8003534 <HAL_ADC_ConfigChannel+0x7c0>)
 8003478:	f7fe fd2f 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800347c:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <HAL_ADC_ConfigChannel+0x7cc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	4a30      	ldr	r2, [pc, #192]	@ (8003544 <HAL_ADC_ConfigChannel+0x7d0>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003496:	e002      	b.n	800349e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3b01      	subs	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a4:	e03a      	b.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <HAL_ADC_ConfigChannel+0x7d4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d113      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <HAL_ADC_ConfigChannel+0x7d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02a      	beq.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	4619      	mov	r1, r3
 80034d0:	4818      	ldr	r0, [pc, #96]	@ (8003534 <HAL_ADC_ConfigChannel+0x7c0>)
 80034d2:	f7fe fd02 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d6:	e021      	b.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003550 <HAL_ADC_ConfigChannel+0x7dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d11c      	bne.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a16      	ldr	r2, [pc, #88]	@ (800354c <HAL_ADC_ConfigChannel+0x7d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d011      	beq.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003500:	4619      	mov	r1, r3
 8003502:	480c      	ldr	r0, [pc, #48]	@ (8003534 <HAL_ADC_ConfigChannel+0x7c0>)
 8003504:	f7fe fce9 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8003508:	e008      	b.n	800351c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003524:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003528:	4618      	mov	r0, r3
 800352a:	37d8      	adds	r7, #216	@ 0xd8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	80080000 	.word	0x80080000
 8003534:	50000300 	.word	0x50000300
 8003538:	c3210000 	.word	0xc3210000
 800353c:	90c00010 	.word	0x90c00010
 8003540:	20000010 	.word	0x20000010
 8003544:	053e2d63 	.word	0x053e2d63
 8003548:	c7520000 	.word	0xc7520000
 800354c:	50000100 	.word	0x50000100
 8003550:	cb840000 	.word	0xcb840000

08003554 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fef6 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8003570:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ff17 	bl	80023aa <LL_ADC_INJ_IsConversionOngoing>
 800357c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8098 	beq.w	80036bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02a      	beq.n	80035f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7f5b      	ldrb	r3, [r3, #29]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d126      	bne.n	80035f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7f1b      	ldrb	r3, [r3, #28]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d122      	bne.n	80035f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ae:	e014      	b.n	80035da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4a45      	ldr	r2, [pc, #276]	@ (80036c8 <ADC_ConversionStop+0x174>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d90d      	bls.n	80035d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f043 0210 	orr.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e074      	b.n	80036be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d1e3      	bne.n	80035b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2240      	movs	r2, #64	@ 0x40
 80035ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d014      	beq.n	8003620 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe feae 	bl	800235c <LL_ADC_REG_IsConversionOngoing>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe6b 	bl	80022e6 <LL_ADC_IsDisableOngoing>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fe8a 	bl	8002334 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d014      	beq.n	8003650 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe febd 	bl	80023aa <LL_ADC_INJ_IsConversionOngoing>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe53 	bl	80022e6 <LL_ADC_IsDisableOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fe99 	bl	8002382 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d005      	beq.n	8003662 <ADC_ConversionStop+0x10e>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d105      	bne.n	8003668 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800365c:	230c      	movs	r3, #12
 800365e:	617b      	str	r3, [r7, #20]
        break;
 8003660:	e005      	b.n	800366e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003662:	2308      	movs	r3, #8
 8003664:	617b      	str	r3, [r7, #20]
        break;
 8003666:	e002      	b.n	800366e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003668:	2304      	movs	r3, #4
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800366e:	f7fe fc15 	bl	8001e9c <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003674:	e01b      	b.n	80036ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003676:	f7fe fc11 	bl	8001e9c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b05      	cmp	r3, #5
 8003682:	d914      	bls.n	80036ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e007      	b.n	80036be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1dc      	bne.n	8003676 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	a33fffff 	.word	0xa33fffff

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fdef 	bl	80022c0 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d169      	bne.n	80037bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <ADC_Enable+0xfc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e055      	b.n	80037be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fdaa 	bl	8002270 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800371c:	482b      	ldr	r0, [pc, #172]	@ (80037cc <ADC_Enable+0x100>)
 800371e:	f7fe fbef 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8003722:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372c:	4b28      	ldr	r3, [pc, #160]	@ (80037d0 <ADC_Enable+0x104>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	4a28      	ldr	r2, [pc, #160]	@ (80037d4 <ADC_Enable+0x108>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003746:	e002      	b.n	800374e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3b01      	subs	r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f9      	bne.n	8003748 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003754:	f7fe fba2 	bl	8001e9c <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375a:	e028      	b.n	80037ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fdad 	bl	80022c0 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fd7d 	bl	8002270 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003776:	f7fe fb91 	bl	8001e9c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d914      	bls.n	80037ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00d      	beq.n	80037ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1cf      	bne.n	800375c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	8000003f 	.word	0x8000003f
 80037cc:	50000300 	.word	0x50000300
 80037d0:	20000010 	.word	0x20000010
 80037d4:	053e2d63 	.word	0x053e2d63

080037d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fd7e 	bl	80022e6 <LL_ADC_IsDisableOngoing>
 80037ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fd65 	bl	80022c0 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d144      	bne.n	800388c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030d 	and.w	r3, r3, #13
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fd3f 	bl	8002298 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003822:	f7fe fb3b 	bl	8001e9c <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003828:	e029      	b.n	800387e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003846:	f7fe fb29 	bl	8001e9c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d914      	bls.n	800387e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1dc      	bne.n	8003846 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d14b      	bne.n	8003948 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d021      	beq.n	800390e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fbc2 	bl	8002058 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d032      	beq.n	8003940 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d12b      	bne.n	8003940 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11f      	bne.n	8003940 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800390c:	e018      	b.n	8003940 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7fd fc5b 	bl	80011fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003946:	e00e      	b.n	8003966 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff fa03 	bl	8002d60 <HAL_ADC_ErrorCallback>
}
 800395a:	e004      	b.n	8003966 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff f9db 	bl	8002d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff f9d5 	bl	8002d60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <LL_ADC_IsEnabled>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <LL_ADC_IsEnabled+0x18>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <LL_ADC_IsEnabled+0x1a>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_StartCalibration>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80039f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a2a:	d101      	bne.n	8003a30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d101      	bne.n	8003a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e04d      	b.n	8003b1c <HAL_ADCEx_Calibration_Start+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fea5 	bl	80037d8 <ADC_Disable>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d136      	bne.n	8003b06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003aa0:	f023 0302 	bic.w	r3, r3, #2
 8003aa4:	f043 0202 	orr.w	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff96 	bl	80039e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ab8:	e014      	b.n	8003ae4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d90d      	bls.n	8003ae4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	f023 0312 	bic.w	r3, r3, #18
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e01b      	b.n	8003b1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff94 	bl	8003a16 <LL_ADC_IsCalibrationOnGoing>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e2      	bne.n	8003aba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f023 0303 	bic.w	r3, r3, #3
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b04:	e005      	b.n	8003b12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f043 0210 	orr.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0004de01 	.word	0x0004de01

08003b28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b0a1      	sub	sp, #132	@ 0x84
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e08b      	b.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc2:	d102      	bne.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	e001      	b.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e06a      	b.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff25 	bl	8003a3e <LL_ADC_REG_IsConversionOngoing>
 8003bf4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff1f 	bl	8003a3e <LL_ADC_REG_IsConversionOngoing>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14c      	bne.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d149      	bne.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c0c:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c2a:	035b      	lsls	r3, r3, #13
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c38:	f7ff fec1 	bl	80039be <LL_ADC_IsEnabled>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4823      	ldr	r0, [pc, #140]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c40:	f7ff febd 	bl	80039be <LL_ADC_IsEnabled>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4323      	orrs	r3, r4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d133      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c54:	f023 030f 	bic.w	r3, r3, #15
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	6811      	ldr	r1, [r2, #0]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c66:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c68:	e024      	b.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c76:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c7a:	f7ff fea0 	bl	80039be <LL_ADC_IsEnabled>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4812      	ldr	r0, [pc, #72]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c82:	f7ff fe9c 	bl	80039be <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4323      	orrs	r3, r4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d112      	bne.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c96:	f023 030f 	bic.w	r3, r3, #15
 8003c9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c9c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9e:	e009      	b.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3784      	adds	r7, #132	@ 0x84
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	50000300 	.word	0x50000300

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	@ (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db12      	blt.n	8003dac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	490a      	ldr	r1, [pc, #40]	@ (8003db8 <__NVIC_DisableIRQ+0x44>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003da0:	f3bf 8f4f 	dsb	sy
}
 8003da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da6:	f3bf 8f6f 	isb	sy
}
 8003daa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	@ (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	@ 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f1c3 0307 	rsb	r3, r3, #7
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf28      	it	cs
 8003e2e:	2304      	movcs	r3, #4
 8003e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d902      	bls.n	8003e40 <NVIC_EncodePriority+0x30>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3b03      	subs	r3, #3
 8003e3e:	e000      	b.n	8003e42 <NVIC_EncodePriority+0x32>
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	401a      	ands	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	4313      	orrs	r3, r2
         );
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	@ 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff28 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9a:	f7ff ff3f 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003e9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	6978      	ldr	r0, [r7, #20]
 8003ea6:	f7ff ffb3 	bl	8003e10 <NVIC_EncodePriority>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff82 	bl	8003dbc <__NVIC_SetPriority>
}
 8003eb8:	bf00      	nop
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff32 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff42 	bl	8003d74 <__NVIC_DisableIRQ>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e08d      	b.n	8004026 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b47      	ldr	r3, [pc, #284]	@ (8004030 <HAL_DMA_Init+0x138>)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d80f      	bhi.n	8003f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b45      	ldr	r3, [pc, #276]	@ (8004034 <HAL_DMA_Init+0x13c>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a45      	ldr	r2, [pc, #276]	@ (8004038 <HAL_DMA_Init+0x140>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a42      	ldr	r2, [pc, #264]	@ (800403c <HAL_DMA_Init+0x144>)
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f34:	e00e      	b.n	8003f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b40      	ldr	r3, [pc, #256]	@ (8004040 <HAL_DMA_Init+0x148>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a3d      	ldr	r2, [pc, #244]	@ (8004038 <HAL_DMA_Init+0x140>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	009a      	lsls	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a3c      	ldr	r2, [pc, #240]	@ (8004044 <HAL_DMA_Init+0x14c>)
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa76 	bl	8004498 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb4:	d102      	bne.n	8003fbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <HAL_DMA_Init+0x104>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d80c      	bhi.n	8003ffc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa96 	bl	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e008      	b.n	800400e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40020407 	.word	0x40020407
 8004034:	bffdfff8 	.word	0xbffdfff8
 8004038:	cccccccd 	.word	0xcccccccd
 800403c:	40020000 	.word	0x40020000
 8004040:	bffdfbf8 	.word	0xbffdfbf8
 8004044:	40020400 	.word	0x40020400

08004048 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_DMA_Start_IT+0x20>
 8004064:	2302      	movs	r3, #2
 8004066:	e066      	b.n	8004136 <HAL_DMA_Start_IT+0xee>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d155      	bne.n	8004128 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f9bb 	bl	800441c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 020e 	orr.w	r2, r2, #14
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e00f      	b.n	80040e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0204 	bic.w	r2, r2, #4
 80040ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 020a 	orr.w	r2, r2, #10
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004114:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e005      	b.n	8004134 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004130:	2302      	movs	r3, #2
 8004132:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d005      	beq.n	8004162 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e037      	b.n	80041d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 020e 	bic.w	r2, r2, #14
 8004170:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004180:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f003 021f 	and.w	r2, r3, #31
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00c      	beq.n	80041d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d00d      	beq.n	8004224 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e047      	b.n	80042b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 020e 	bic.w	r2, r2, #14
 8004232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	2101      	movs	r1, #1
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004270:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004288:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004292:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
    }
  }
  return status;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2204      	movs	r2, #4
 80042e0:	409a      	lsls	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d026      	beq.n	8004338 <HAL_DMA_IRQHandler+0x7a>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d021      	beq.n	8004338 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0204 	bic.w	r2, r2, #4
 8004310:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	2104      	movs	r1, #4
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	2b00      	cmp	r3, #0
 800432c:	d071      	beq.n	8004412 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004336:	e06c      	b.n	8004412 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2202      	movs	r2, #2
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02e      	beq.n	80043aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d029      	beq.n	80043aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 020a 	bic.w	r2, r2, #10
 8004372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	f003 021f 	and.w	r2, r3, #31
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	2102      	movs	r1, #2
 800438a:	fa01 f202 	lsl.w	r2, r1, r2
 800438e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d038      	beq.n	8004412 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a8:	e033      	b.n	8004412 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2208      	movs	r2, #8
 80043b4:	409a      	lsls	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02a      	beq.n	8004414 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d025      	beq.n	8004414 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020e 	bic.w	r2, r2, #14
 80043d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	2101      	movs	r1, #1
 80043e6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004412:	bf00      	nop
 8004414:	bf00      	nop
}
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004432:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004444:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444a:	f003 021f 	and.w	r2, r3, #31
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d108      	bne.n	800447c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800447a:	e007      	b.n	800448c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b16      	ldr	r3, [pc, #88]	@ (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d802      	bhi.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e001      	b.n	80044b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044b4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	3b08      	subs	r3, #8
 80044c2:	4a12      	ldr	r2, [pc, #72]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	461a      	mov	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40020407 	.word	0x40020407
 8004504:	40020800 	.word	0x40020800
 8004508:	40020820 	.word	0x40020820
 800450c:	cccccccd 	.word	0xcccccccd
 8004510:	40020880 	.word	0x40020880

08004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a08      	ldr	r2, [pc, #32]	@ (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004536:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b01      	subs	r3, #1
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	1000823f 	.word	0x1000823f
 8004558:	40020940 	.word	0x40020940

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800456a:	e15a      	b.n	8004822 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 814c 	beq.w	800481c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d005      	beq.n	800459c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004598:	2b02      	cmp	r3, #2
 800459a:	d130      	bne.n	80045fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d2:	2201      	movs	r2, #1
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f003 0201 	and.w	r2, r3, #1
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b03      	cmp	r3, #3
 8004608:	d017      	beq.n	800463a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2203      	movs	r2, #3
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d123      	bne.n	800468e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	08da      	lsrs	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	08da      	lsrs	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3208      	adds	r2, #8
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	2203      	movs	r2, #3
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0203 	and.w	r2, r3, #3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a6 	beq.w	800481c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004840 <HAL_GPIO_Init+0x2e4>)
 80046d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004840 <HAL_GPIO_Init+0x2e4>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6613      	str	r3, [r2, #96]	@ 0x60
 80046dc:	4b58      	ldr	r3, [pc, #352]	@ (8004840 <HAL_GPIO_Init+0x2e4>)
 80046de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046e8:	4a56      	ldr	r2, [pc, #344]	@ (8004844 <HAL_GPIO_Init+0x2e8>)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	3302      	adds	r3, #2
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	220f      	movs	r2, #15
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004712:	d01f      	beq.n	8004754 <HAL_GPIO_Init+0x1f8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a4c      	ldr	r2, [pc, #304]	@ (8004848 <HAL_GPIO_Init+0x2ec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d019      	beq.n	8004750 <HAL_GPIO_Init+0x1f4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a4b      	ldr	r2, [pc, #300]	@ (800484c <HAL_GPIO_Init+0x2f0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <HAL_GPIO_Init+0x1f0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a4a      	ldr	r2, [pc, #296]	@ (8004850 <HAL_GPIO_Init+0x2f4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00d      	beq.n	8004748 <HAL_GPIO_Init+0x1ec>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a49      	ldr	r2, [pc, #292]	@ (8004854 <HAL_GPIO_Init+0x2f8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <HAL_GPIO_Init+0x1e8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a48      	ldr	r2, [pc, #288]	@ (8004858 <HAL_GPIO_Init+0x2fc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_GPIO_Init+0x1e4>
 800473c:	2305      	movs	r3, #5
 800473e:	e00a      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 8004740:	2306      	movs	r3, #6
 8004742:	e008      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 8004744:	2304      	movs	r3, #4
 8004746:	e006      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 8004748:	2303      	movs	r3, #3
 800474a:	e004      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 800474c:	2302      	movs	r3, #2
 800474e:	e002      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_GPIO_Init+0x1fa>
 8004754:	2300      	movs	r3, #0
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	f002 0203 	and.w	r2, r2, #3
 800475c:	0092      	lsls	r2, r2, #2
 800475e:	4093      	lsls	r3, r2
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004766:	4937      	ldr	r1, [pc, #220]	@ (8004844 <HAL_GPIO_Init+0x2e8>)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	3302      	adds	r3, #2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004774:	4b39      	ldr	r3, [pc, #228]	@ (800485c <HAL_GPIO_Init+0x300>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43db      	mvns	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004798:	4a30      	ldr	r2, [pc, #192]	@ (800485c <HAL_GPIO_Init+0x300>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800479e:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <HAL_GPIO_Init+0x300>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047c2:	4a26      	ldr	r2, [pc, #152]	@ (800485c <HAL_GPIO_Init+0x300>)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047c8:	4b24      	ldr	r3, [pc, #144]	@ (800485c <HAL_GPIO_Init+0x300>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4013      	ands	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047ec:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <HAL_GPIO_Init+0x300>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <HAL_GPIO_Init+0x300>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004816:	4a11      	ldr	r2, [pc, #68]	@ (800485c <HAL_GPIO_Init+0x300>)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	3301      	adds	r3, #1
 8004820:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f ae9d 	bne.w	800456c <HAL_GPIO_Init+0x10>
  }
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40021000 	.word	0x40021000
 8004844:	40010000 	.word	0x40010000
 8004848:	48000400 	.word	0x48000400
 800484c:	48000800 	.word	0x48000800
 8004850:	48000c00 	.word	0x48000c00
 8004854:	48001000 	.word	0x48001000
 8004858:	48001400 	.word	0x48001400
 800485c:	40010400 	.word	0x40010400

08004860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800487c:	e002      	b.n	8004884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4013      	ands	r3, r2
 80048a8:	041a      	lsls	r2, r3, #16
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	43d9      	mvns	r1, r3
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	400b      	ands	r3, r1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048da:	4a05      	ldr	r2, [pc, #20]	@ (80048f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc ff50 	bl	8001788 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40010400 	.word	0x40010400

080048f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d141      	bne.n	8004986 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004902:	4b4b      	ldr	r3, [pc, #300]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490e:	d131      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b47      	ldr	r3, [pc, #284]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004916:	4a46      	ldr	r2, [pc, #280]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004920:	4b43      	ldr	r3, [pc, #268]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004928:	4a41      	ldr	r2, [pc, #260]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800492e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004930:	4b40      	ldr	r3, [pc, #256]	@ (8004a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2232      	movs	r2, #50	@ 0x32
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004946:	e002      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495a:	d102      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f2      	bne.n	8004948 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004962:	4b33      	ldr	r3, [pc, #204]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496e:	d158      	bne.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e057      	b.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004974:	4b2e      	ldr	r3, [pc, #184]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004980:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004984:	e04d      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800498c:	d141      	bne.n	8004a12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800498e:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d131      	bne.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800499c:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a2:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ac:	4b20      	ldr	r3, [pc, #128]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2232      	movs	r2, #50	@ 0x32
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	0c9b      	lsrs	r3, r3, #18
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049d2:	e002      	b.n	80049da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049da:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e6:	d102      	bne.n	80049ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f2      	bne.n	80049d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d112      	bne.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e011      	b.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a06:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a10:	e007      	b.n	8004a22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a12:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a1a:	4a05      	ldr	r2, [pc, #20]	@ (8004a30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40007000 	.word	0x40007000
 8004a34:	20000010 	.word	0x20000010
 8004a38:	431bde83 	.word	0x431bde83

08004a3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a04      	ldr	r2, [pc, #16]	@ (8004a58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a4a:	6093      	str	r3, [r2, #8]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40007000 	.word	0x40007000

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e2fe      	b.n	800506c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d075      	beq.n	8004b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7a:	4b97      	ldr	r3, [pc, #604]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a84:	4b94      	ldr	r3, [pc, #592]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d102      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3e>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x44>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05b      	beq.n	8004b64 <HAL_RCC_OscConfig+0x108>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d157      	bne.n	8004b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e2d9      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x74>
 8004ac2:	4b85      	ldr	r3, [pc, #532]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a84      	ldr	r2, [pc, #528]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e01d      	b.n	8004b0c <HAL_RCC_OscConfig+0xb0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x98>
 8004ada:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7e      	ldr	r2, [pc, #504]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7b      	ldr	r2, [pc, #492]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e00b      	b.n	8004b0c <HAL_RCC_OscConfig+0xb0>
 8004af4:	4b78      	ldr	r3, [pc, #480]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a77      	ldr	r2, [pc, #476]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b75      	ldr	r3, [pc, #468]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a74      	ldr	r2, [pc, #464]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd f9c2 	bl	8001e9c <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fd f9be 	bl	8001e9c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	@ 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e29e      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0xc0>
 8004b3a:	e014      	b.n	8004b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fd f9ae 	bl	8001e9c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fd f9aa 	bl	8001e9c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	@ 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e28a      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b56:	4b60      	ldr	r3, [pc, #384]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0xe8>
 8004b62:	e000      	b.n	8004b66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d075      	beq.n	8004c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7c:	4b56      	ldr	r3, [pc, #344]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_OscConfig+0x136>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d002      	beq.n	8004b98 <HAL_RCC_OscConfig+0x13c>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11f      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x154>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e25d      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b49      	ldr	r3, [pc, #292]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	4946      	ldr	r1, [pc, #280]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bc4:	4b45      	ldr	r3, [pc, #276]	@ (8004cdc <HAL_RCC_OscConfig+0x280>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fc ff79 	bl	8001ac0 <HAL_InitTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d043      	beq.n	8004c5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e249      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be0:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd f956 	bl	8001e9c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fd f952 	bl	8001e9c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e232      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c06:	4b34      	ldr	r3, [pc, #208]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c12:	4b31      	ldr	r3, [pc, #196]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	492d      	ldr	r1, [pc, #180]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
 8004c26:	e01a      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c28:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd f932 	bl	8001e9c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7fd f92e 	bl	8001e9c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e20e      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c4e:	4b22      	ldr	r3, [pc, #136]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x1e0>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d041      	beq.n	8004cee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01c      	beq.n	8004cac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c78:	4a17      	ldr	r2, [pc, #92]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fd f90b 	bl	8001e9c <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7fd f907 	bl	8001e9c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1e7      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ef      	beq.n	8004c8a <HAL_RCC_OscConfig+0x22e>
 8004caa:	e020      	b.n	8004cee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cb2:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd f8ee 	bl	8001e9c <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cc2:	e00d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fd f8ea 	bl	8001e9c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d906      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1ca      	b.n	800506c <HAL_RCC_OscConfig+0x610>
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ea      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80a6 	beq.w	8004e48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d00:	4b84      	ldr	r3, [pc, #528]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_OscConfig+0x2b4>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x2b6>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4b7f      	ldr	r3, [pc, #508]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d22:	4b7c      	ldr	r3, [pc, #496]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d32:	4b79      	ldr	r3, [pc, #484]	@ (8004f18 <HAL_RCC_OscConfig+0x4bc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d3e:	4b76      	ldr	r3, [pc, #472]	@ (8004f18 <HAL_RCC_OscConfig+0x4bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a75      	ldr	r2, [pc, #468]	@ (8004f18 <HAL_RCC_OscConfig+0x4bc>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd f8a7 	bl	8001e9c <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fd f8a3 	bl	8001e9c <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e183      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d64:	4b6c      	ldr	r3, [pc, #432]	@ (8004f18 <HAL_RCC_OscConfig+0x4bc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d108      	bne.n	8004d8a <HAL_RCC_OscConfig+0x32e>
 8004d78:	4b66      	ldr	r3, [pc, #408]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	4a65      	ldr	r2, [pc, #404]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d88:	e024      	b.n	8004dd4 <HAL_RCC_OscConfig+0x378>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d110      	bne.n	8004db4 <HAL_RCC_OscConfig+0x358>
 8004d92:	4b60      	ldr	r3, [pc, #384]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	4a5e      	ldr	r2, [pc, #376]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004da2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004db2:	e00f      	b.n	8004dd4 <HAL_RCC_OscConfig+0x378>
 8004db4:	4b57      	ldr	r3, [pc, #348]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	4a56      	ldr	r2, [pc, #344]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc4:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	4a52      	ldr	r2, [pc, #328]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd f85e 	bl	8001e9c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd f85a 	bl	8001e9c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e138      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	4b46      	ldr	r3, [pc, #280]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ed      	beq.n	8004de4 <HAL_RCC_OscConfig+0x388>
 8004e08:	e015      	b.n	8004e36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0a:	f7fd f847 	bl	8001e9c <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fd f843 	bl	8001e9c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e121      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e28:	4b3a      	ldr	r3, [pc, #232]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1ed      	bne.n	8004e12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d03c      	beq.n	8004ece <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01c      	beq.n	8004e96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e62:	4a2c      	ldr	r2, [pc, #176]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6c:	f7fd f816 	bl	8001e9c <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e74:	f7fd f812 	bl	8001e9c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e0f2      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e86:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ef      	beq.n	8004e74 <HAL_RCC_OscConfig+0x418>
 8004e94:	e01b      	b.n	8004ece <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fc fff9 	bl	8001e9c <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eae:	f7fc fff5 	bl	8001e9c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0d5      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ef      	bne.n	8004eae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80c9 	beq.w	800506a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	f000 8083 	beq.w	8004fec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d15e      	bne.n	8004fac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a08      	ldr	r2, [pc, #32]	@ (8004f14 <HAL_RCC_OscConfig+0x4b8>)
 8004ef4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fc ffcf 	bl	8001e9c <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	e00c      	b.n	8004f1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fc ffcb 	bl	8001e9c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d905      	bls.n	8004f1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0ab      	b.n	800506c <HAL_RCC_OscConfig+0x610>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	4b55      	ldr	r3, [pc, #340]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ec      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f28:	4b52      	ldr	r3, [pc, #328]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b52      	ldr	r3, [pc, #328]	@ (8005078 <HAL_RCC_OscConfig+0x61c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6a11      	ldr	r1, [r2, #32]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f42:	0212      	lsls	r2, r2, #8
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f4a:	0852      	lsrs	r2, r2, #1
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0552      	lsls	r2, r2, #21
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f62:	06d2      	lsls	r2, r2, #27
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4943      	ldr	r1, [pc, #268]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b41      	ldr	r3, [pc, #260]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a40      	ldr	r2, [pc, #256]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a3d      	ldr	r2, [pc, #244]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc ff8a 	bl	8001e9c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc ff86 	bl	8001e9c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e066      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b35      	ldr	r3, [pc, #212]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x530>
 8004faa:	e05e      	b.n	800506a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b31      	ldr	r3, [pc, #196]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fc ff70 	bl	8001e9c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fc ff6c 	bl	8001e9c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e04c      	b.n	800506c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd2:	4b28      	ldr	r3, [pc, #160]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fde:	4b25      	ldr	r3, [pc, #148]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	4924      	ldr	r1, [pc, #144]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004fe4:	4b25      	ldr	r3, [pc, #148]	@ (800507c <HAL_RCC_OscConfig+0x620>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60cb      	str	r3, [r1, #12]
 8004fea:	e03e      	b.n	800506a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e039      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <HAL_RCC_OscConfig+0x618>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f003 0203 	and.w	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d12c      	bne.n	8005066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	3b01      	subs	r3, #1
 8005018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d123      	bne.n	8005066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d11b      	bne.n	8005066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d113      	bne.n	8005066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	3b01      	subs	r3, #1
 800504c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d109      	bne.n	8005066 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d001      	beq.n	800506a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	019f800c 	.word	0x019f800c
 800507c:	feeefffc 	.word	0xfeeefffc

08005080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e11e      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b91      	ldr	r3, [pc, #580]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d910      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b8e      	ldr	r3, [pc, #568]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 020f 	bic.w	r2, r3, #15
 80050ae:	498c      	ldr	r1, [pc, #560]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b8a      	ldr	r3, [pc, #552]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e106      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d073      	beq.n	80051bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d129      	bne.n	8005130 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050dc:	4b81      	ldr	r3, [pc, #516]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0f4      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050ec:	f000 f9d0 	bl	8005490 <RCC_GetSysClockFreqFromPLLSource>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4a7c      	ldr	r2, [pc, #496]	@ (80052e8 <HAL_RCC_ClockConfig+0x268>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d93f      	bls.n	800517a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050fa:	4b7a      	ldr	r3, [pc, #488]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800510e:	2b00      	cmp	r3, #0
 8005110:	d033      	beq.n	800517a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005116:	2b00      	cmp	r3, #0
 8005118:	d12f      	bne.n	800517a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800511a:	4b72      	ldr	r3, [pc, #456]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005122:	4a70      	ldr	r2, [pc, #448]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005128:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800512a:	2380      	movs	r3, #128	@ 0x80
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e024      	b.n	800517a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d107      	bne.n	8005148 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005138:	4b6a      	ldr	r3, [pc, #424]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0c6      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005148:	4b66      	ldr	r3, [pc, #408]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0be      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005158:	f000 f8ce 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 800515c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4a61      	ldr	r2, [pc, #388]	@ (80052e8 <HAL_RCC_ClockConfig+0x268>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d909      	bls.n	800517a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005166:	4b5f      	ldr	r3, [pc, #380]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516e:	4a5d      	ldr	r2, [pc, #372]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005174:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b5a      	ldr	r3, [pc, #360]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4957      	ldr	r1, [pc, #348]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fc fe86 	bl	8001e9c <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fc fe82 	bl	8001e9c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e095      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b4e      	ldr	r3, [pc, #312]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d023      	beq.n	8005210 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d4:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051ec:	4b3d      	ldr	r3, [pc, #244]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051f4:	4a3b      	ldr	r2, [pc, #236]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b39      	ldr	r3, [pc, #228]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4936      	ldr	r1, [pc, #216]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
 800520e:	e008      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b80      	cmp	r3, #128	@ 0x80
 8005214:	d105      	bne.n	8005222 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005216:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4a32      	ldr	r2, [pc, #200]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800521c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005220:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005222:	4b2f      	ldr	r3, [pc, #188]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d21d      	bcs.n	800526c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005230:	4b2b      	ldr	r3, [pc, #172]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 020f 	bic.w	r2, r3, #15
 8005238:	4929      	ldr	r1, [pc, #164]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005240:	f7fc fe2c 	bl	8001e9c <HAL_GetTick>
 8005244:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	e00a      	b.n	800525e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005248:	f7fc fe28 	bl	8001e9c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e03b      	b.n	80052d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b20      	ldr	r3, [pc, #128]	@ (80052e0 <HAL_RCC_ClockConfig+0x260>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d1ed      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4917      	ldr	r1, [pc, #92]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	490f      	ldr	r1, [pc, #60]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052aa:	f000 f825 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052ae:	4602      	mov	r2, r0
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <HAL_RCC_ClockConfig+0x264>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	490c      	ldr	r1, [pc, #48]	@ (80052ec <HAL_RCC_ClockConfig+0x26c>)
 80052bc:	5ccb      	ldrb	r3, [r1, r3]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <HAL_RCC_ClockConfig+0x270>)
 80052c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052ca:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <HAL_RCC_ClockConfig+0x274>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fc fbf6 	bl	8001ac0 <HAL_InitTick>
 80052d4:	4603      	mov	r3, r0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40022000 	.word	0x40022000
 80052e4:	40021000 	.word	0x40021000
 80052e8:	04c4b400 	.word	0x04c4b400
 80052ec:	0800d1f4 	.word	0x0800d1f4
 80052f0:	20000010 	.word	0x20000010
 80052f4:	20000014 	.word	0x20000014

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052fe:	4b2c      	ldr	r3, [pc, #176]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b04      	cmp	r3, #4
 8005308:	d102      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800530a:	4b2a      	ldr	r3, [pc, #168]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e047      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005310:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 030c 	and.w	r3, r3, #12
 8005318:	2b08      	cmp	r3, #8
 800531a:	d102      	bne.n	8005322 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800531c:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	e03e      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005322:	4b23      	ldr	r3, [pc, #140]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d136      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800532e:	4b20      	ldr	r3, [pc, #128]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005338:	4b1d      	ldr	r3, [pc, #116]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	3301      	adds	r3, #1
 8005344:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d10c      	bne.n	8005366 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800534c:	4a1a      	ldr	r2, [pc, #104]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005356:	68d2      	ldr	r2, [r2, #12]
 8005358:	0a12      	lsrs	r2, r2, #8
 800535a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	617b      	str	r3, [r7, #20]
      break;
 8005364:	e00c      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005366:	4a13      	ldr	r2, [pc, #76]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	4a10      	ldr	r2, [pc, #64]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005370:	68d2      	ldr	r2, [r2, #12]
 8005372:	0a12      	lsrs	r2, r2, #8
 8005374:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
      break;
 800537e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	0e5b      	lsrs	r3, r3, #25
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	3301      	adds	r3, #1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e001      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053a0:	693b      	ldr	r3, [r7, #16]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	016e3600 	.word	0x016e3600

080053bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000010 	.word	0x20000010

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4904      	ldr	r1, [pc, #16]	@ (80053fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800d204 	.word	0x0800d204

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005404:	f7ff ffda 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0adb      	lsrs	r3, r3, #11
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4904      	ldr	r1, [pc, #16]	@ (8005428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000
 8005428:	0800d204 	.word	0x0800d204

0800542c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	220f      	movs	r2, #15
 800543a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800543c:	4b12      	ldr	r3, [pc, #72]	@ (8005488 <HAL_RCC_GetClockConfig+0x5c>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0203 	and.w	r2, r3, #3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005448:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <HAL_RCC_GetClockConfig+0x5c>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <HAL_RCC_GetClockConfig+0x5c>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005460:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <HAL_RCC_GetClockConfig+0x5c>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	08db      	lsrs	r3, r3, #3
 8005466:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <HAL_RCC_GetClockConfig+0x60>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	601a      	str	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000
 800548c:	40022000 	.word	0x40022000

08005490 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005496:	4b1e      	ldr	r3, [pc, #120]	@ (8005510 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d10c      	bne.n	80054ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b4:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	4a14      	ldr	r2, [pc, #80]	@ (8005510 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054be:	68d2      	ldr	r2, [r2, #12]
 80054c0:	0a12      	lsrs	r2, r2, #8
 80054c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	617b      	str	r3, [r7, #20]
    break;
 80054cc:	e00c      	b.n	80054e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005510 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d8:	68d2      	ldr	r2, [r2, #12]
 80054da:	0a12      	lsrs	r2, r2, #8
 80054dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054e0:	fb02 f303 	mul.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]
    break;
 80054e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054e8:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	0e5b      	lsrs	r3, r3, #25
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005502:	687b      	ldr	r3, [r7, #4]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40021000 	.word	0x40021000
 8005514:	016e3600 	.word	0x016e3600
 8005518:	00f42400 	.word	0x00f42400

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005524:	2300      	movs	r3, #0
 8005526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005528:	2300      	movs	r3, #0
 800552a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8098 	beq.w	800566a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553e:	4b43      	ldr	r3, [pc, #268]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	4b40      	ldr	r3, [pc, #256]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	4a3f      	ldr	r2, [pc, #252]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6593      	str	r3, [r2, #88]	@ 0x58
 8005556:	4b3d      	ldr	r3, [pc, #244]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005562:	2301      	movs	r3, #1
 8005564:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005566:	4b3a      	ldr	r3, [pc, #232]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a39      	ldr	r2, [pc, #228]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005570:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005572:	f7fc fc93 	bl	8001e9c <HAL_GetTick>
 8005576:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005578:	e009      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557a:	f7fc fc8f 	bl	8001e9c <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d902      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	74fb      	strb	r3, [r7, #19]
        break;
 800558c:	e005      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558e:	4b30      	ldr	r3, [pc, #192]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0ef      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800559a:	7cfb      	ldrb	r3, [r7, #19]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d159      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055a0:	4b2a      	ldr	r3, [pc, #168]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01e      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d019      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055bc:	4b23      	ldr	r3, [pc, #140]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c8:	4b20      	ldr	r3, [pc, #128]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d8:	4b1c      	ldr	r3, [pc, #112]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055de:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e8:	4a18      	ldr	r2, [pc, #96]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fc fc4f 	bl	8001e9c <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005600:	e00b      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fc fc4b 	bl	8001e9c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d902      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	74fb      	strb	r3, [r7, #19]
            break;
 8005618:	e006      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561a:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ec      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10b      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562e:	4b07      	ldr	r3, [pc, #28]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	4903      	ldr	r1, [pc, #12]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005644:	e008      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	74bb      	strb	r3, [r7, #18]
 800564a:	e005      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005658:	7c7b      	ldrb	r3, [r7, #17]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565e:	4ba6      	ldr	r3, [pc, #664]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005662:	4aa5      	ldr	r2, [pc, #660]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005668:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005676:	4ba0      	ldr	r3, [pc, #640]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	f023 0203 	bic.w	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	499c      	ldr	r1, [pc, #624]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005698:	4b97      	ldr	r3, [pc, #604]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	f023 020c 	bic.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4994      	ldr	r1, [pc, #592]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ba:	4b8f      	ldr	r3, [pc, #572]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	498b      	ldr	r1, [pc, #556]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056dc:	4b86      	ldr	r3, [pc, #536]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	4983      	ldr	r1, [pc, #524]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056fe:	4b7e      	ldr	r3, [pc, #504]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	497a      	ldr	r1, [pc, #488]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005720:	4b75      	ldr	r3, [pc, #468]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	4972      	ldr	r1, [pc, #456]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005742:	4b6d      	ldr	r3, [pc, #436]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4969      	ldr	r1, [pc, #420]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005764:	4b64      	ldr	r3, [pc, #400]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4961      	ldr	r1, [pc, #388]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005786:	4b5c      	ldr	r3, [pc, #368]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	4958      	ldr	r1, [pc, #352]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a8:	4b53      	ldr	r3, [pc, #332]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	4950      	ldr	r1, [pc, #320]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b4b      	ldr	r3, [pc, #300]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a4a      	ldr	r2, [pc, #296]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	4942      	ldr	r1, [pc, #264]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057fe:	d105      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005800:	4b3d      	ldr	r3, [pc, #244]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a3c      	ldr	r2, [pc, #240]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005818:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	4934      	ldr	r1, [pc, #208]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005838:	4b2f      	ldr	r3, [pc, #188]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a2e      	ldr	r2, [pc, #184]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005842:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d015      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005850:	4b29      	ldr	r3, [pc, #164]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	4926      	ldr	r1, [pc, #152]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005870:	4b21      	ldr	r3, [pc, #132]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d015      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005888:	4b1b      	ldr	r3, [pc, #108]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	4918      	ldr	r1, [pc, #96]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a6:	d105      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a8:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058c0:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	490a      	ldr	r1, [pc, #40]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a04      	ldr	r2, [pc, #16]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000

080058fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e049      	b.n	80059a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc f8a6 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fb40 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e04a      	b.n	8005a5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a21      	ldr	r2, [pc, #132]	@ (8005a68 <HAL_TIM_Base_Start_IT+0xbc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ee:	d013      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xc0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIM_Base_Start_IT+0x6c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d115      	bne.n	8005a44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b17      	ldr	r3, [pc, #92]	@ (8005a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d015      	beq.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a30:	d011      	beq.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	e008      	b.n	8005a56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_TIM_Base_Stop_IT+0x48>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_Base_Stop_IT+0x48>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01b      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0202 	mvn.w	r2, #2
 8005b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa2b 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b2e:	e005      	b.n	8005b3c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fa1d 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa2e 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01b      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0204 	mvn.w	r2, #4
 8005b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fa05 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b7a:	e005      	b.n	8005b88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f9f7 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa08 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01b      	beq.n	8005bda <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0208 	mvn.w	r2, #8
 8005baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9df 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005bc6:	e005      	b.n	8005bd4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f9d1 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9e2 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01b      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0210 	mvn.w	r2, #16
 8005bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f9b9 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005c12:	e005      	b.n	8005c20 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f9ab 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9bc 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00c      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f06f 0201 	mvn.w	r2, #1
 8005c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fb fdc9 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb68 	bl	8006348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb60 	bl	800635c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f976 	bl	8005fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0220 	mvn.w	r2, #32
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb28 	bl	8006334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb34 	bl	8006370 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb2c 	bl	8006384 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fb24 	bl	8006398 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fb1c 	bl	80063ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_ConfigClockSource+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0de      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x1da>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005db6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a63      	ldr	r2, [pc, #396]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f000 80a9 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005dd8:	4a61      	ldr	r2, [pc, #388]	@ (8005f60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f200 80ae 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005de0:	4a60      	ldr	r2, [pc, #384]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f000 80a1 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005de8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	f200 80a6 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005df0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	f000 8099 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005df8:	4a5b      	ldr	r2, [pc, #364]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	f200 809e 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e00:	4a5a      	ldr	r2, [pc, #360]	@ (8005f6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f000 8091 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e08:	4a58      	ldr	r2, [pc, #352]	@ (8005f6c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f200 8096 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e14:	f000 8089 	beq.w	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005e1c:	f200 808e 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e24:	d03e      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0x128>
 8005e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2a:	f200 8087 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e32:	f000 8086 	beq.w	8005f42 <HAL_TIM_ConfigClockSource+0x1c6>
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	d87f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e3c:	2b70      	cmp	r3, #112	@ 0x70
 8005e3e:	d01a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0xfa>
 8005e40:	2b70      	cmp	r3, #112	@ 0x70
 8005e42:	d87b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e44:	2b60      	cmp	r3, #96	@ 0x60
 8005e46:	d050      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x16e>
 8005e48:	2b60      	cmp	r3, #96	@ 0x60
 8005e4a:	d877      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e4c:	2b50      	cmp	r3, #80	@ 0x50
 8005e4e:	d03c      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x14e>
 8005e50:	2b50      	cmp	r3, #80	@ 0x50
 8005e52:	d873      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d058      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x18e>
 8005e58:	2b40      	cmp	r3, #64	@ 0x40
 8005e5a:	d86f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e5c:	2b30      	cmp	r3, #48	@ 0x30
 8005e5e:	d064      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e60:	2b30      	cmp	r3, #48	@ 0x30
 8005e62:	d86b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d060      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d867      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d05c      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d05a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x1ae>
 8005e74:	e062      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e86:	f000 f9b3 	bl	80061f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
      break;
 8005ea2:	e04f      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eb4:	f000 f99c 	bl	80061f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ec6:	609a      	str	r2, [r3, #8]
      break;
 8005ec8:	e03c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 f90e 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2150      	movs	r1, #80	@ 0x50
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f967 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e02c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 f92d 	bl	8006156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2160      	movs	r1, #96	@ 0x60
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f957 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f08:	e01c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 f8ee 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2140      	movs	r1, #64	@ 0x40
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f947 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f28:	e00c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f000 f93e 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	00100070 	.word	0x00100070
 8005f64:	00100040 	.word	0x00100040
 8005f68:	00100030 	.word	0x00100030
 8005f6c:	00100020 	.word	0x00100020

08005f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a42      	ldr	r2, [pc, #264]	@ (80060dc <TIM_Base_SetConfig+0x11c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d00b      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80060e0 <TIM_Base_SetConfig+0x120>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3e      	ldr	r2, [pc, #248]	@ (80060e4 <TIM_Base_SetConfig+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x38>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	@ (80060e8 <TIM_Base_SetConfig+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d108      	bne.n	800600a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a33      	ldr	r2, [pc, #204]	@ (80060dc <TIM_Base_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01b      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006018:	d017      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a30      	ldr	r2, [pc, #192]	@ (80060e0 <TIM_Base_SetConfig+0x120>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2f      	ldr	r2, [pc, #188]	@ (80060e4 <TIM_Base_SetConfig+0x124>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <TIM_Base_SetConfig+0x128>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <TIM_Base_SetConfig+0x12c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0x130>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0x134>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <TIM_Base_SetConfig+0x11c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00f      	beq.n	80060a8 <TIM_Base_SetConfig+0xe8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <TIM_Base_SetConfig+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_Base_SetConfig+0xe8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <TIM_Base_SetConfig+0x12c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_Base_SetConfig+0xe8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a15      	ldr	r2, [pc, #84]	@ (80060f0 <TIM_Base_SetConfig+0x130>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0xe8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a14      	ldr	r2, [pc, #80]	@ (80060f4 <TIM_Base_SetConfig+0x134>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]
  }
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f023 0210 	bic.w	r2, r3, #16
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e065      	b.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d018      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d013      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a18      	ldr	r2, [pc, #96]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a17      	ldr	r2, [pc, #92]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a13      	ldr	r2, [pc, #76]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d10c      	bne.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e042      	b.n	8006458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fb fae5 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2224      	movs	r2, #36	@ 0x24
 80063ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fee0 	bl	80071d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fc11 	bl	8006c38 <UART_SetConfig>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01b      	b.n	8006458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800642e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800643e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 ff5f 	bl	8007314 <UART_CheckIdleState>
 8006456:	4603      	mov	r3, r0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006460:	b480      	push	{r7}
 8006462:	b091      	sub	sp, #68	@ 0x44
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006474:	2b20      	cmp	r3, #32
 8006476:	d178      	bne.n	800656a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_Transmit_IT+0x24>
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e071      	b.n	800656c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	@ 0x21
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064bc:	d12a      	bne.n	8006514 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c6:	d107      	bne.n	80064d8 <HAL_UART_Transmit_IT+0x78>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <HAL_UART_Transmit_IT+0x118>)
 80064d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80064d6:	e002      	b.n	80064de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a28      	ldr	r2, [pc, #160]	@ (800657c <HAL_UART_Transmit_IT+0x11c>)
 80064dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800650c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e5      	bne.n	80064de <HAL_UART_Transmit_IT+0x7e>
 8006512:	e028      	b.n	8006566 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651c:	d107      	bne.n	800652e <HAL_UART_Transmit_IT+0xce>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_UART_Transmit_IT+0x120>)
 800652a:	679a      	str	r2, [r3, #120]	@ 0x78
 800652c:	e002      	b.n	8006534 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <HAL_UART_Transmit_IT+0x124>)
 8006532:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	613b      	str	r3, [r7, #16]
   return(result);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	69f9      	ldr	r1, [r7, #28]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e6      	bne.n	8006534 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3744      	adds	r7, #68	@ 0x44
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	0800788d 	.word	0x0800788d
 800657c:	080077ad 	.word	0x080077ad
 8006580:	080076eb 	.word	0x080076eb
 8006584:	08007633 	.word	0x08007633

08006588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b0ba      	sub	sp, #232	@ 0xe8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065b6:	4013      	ands	r3, r2
 80065b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11b      	bne.n	80065fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d015      	beq.n	80065fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8300 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      }
      return;
 80065fa:	e2fa      	b.n	8006bf2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8123 	beq.w	800684c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006606:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800660a:	4b8d      	ldr	r3, [pc, #564]	@ (8006840 <HAL_UART_IRQHandler+0x2b8>)
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006616:	4b8b      	ldr	r3, [pc, #556]	@ (8006844 <HAL_UART_IRQHandler+0x2bc>)
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8116 	beq.w	800684c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0xc8>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2201      	movs	r2, #1
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HAL_UART_IRQHandler+0xf8>
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2202      	movs	r2, #2
 800666e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006676:	f043 0204 	orr.w	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <HAL_UART_IRQHandler+0x128>
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2204      	movs	r2, #4
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a6:	f043 0202 	orr.w	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006840 <HAL_UART_IRQHandler+0x2b8>)
 80066ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2208      	movs	r2, #8
 80066da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e2:	f043 0208 	orr.w	r2, r3, #8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_UART_IRQHandler+0x196>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800670c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8266 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006772:	2b40      	cmp	r3, #64	@ 0x40
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800677a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d054      	beq.n	800682c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fedd 	bl	8007542 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d146      	bne.n	8006824 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1d9      	bne.n	8006796 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f2:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <HAL_UART_IRQHandler+0x2c0>)
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fd fcf7 	bl	80041f0 <HAL_DMA_Abort_IT>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d019      	beq.n	800683c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006816:	4610      	mov	r0, r2
 8006818:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	e00f      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f9f5 	bl	8006c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006822:	e00b      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f9f1 	bl	8006c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	e007      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9ed 	bl	8006c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800683a:	e1dc      	b.n	8006bf6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	bf00      	nop
    return;
 800683e:	e1da      	b.n	8006bf6 <HAL_UART_IRQHandler+0x66e>
 8006840:	10000001 	.word	0x10000001
 8006844:	04000120 	.word	0x04000120
 8006848:	0800760f 	.word	0x0800760f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 8170 	bne.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8169 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8162 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006884:	2b40      	cmp	r3, #64	@ 0x40
 8006886:	f040 80d8 	bne.w	8006a3a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80af 	beq.w	8006a00 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ac:	429a      	cmp	r2, r3
 80068ae:	f080 80a7 	bcs.w	8006a00 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 8087 	bne.w	80069de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1da      	bne.n	80068d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800692a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800697a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800697c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e3      	bne.n	8006956 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ac:	f023 0310 	bic.w	r3, r3, #16
 80069b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e4      	bne.n	800699c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fd fbb0 	bl	800413e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f911 	bl	8006c20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069fe:	e0fc      	b.n	8006bfa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	f040 80f5 	bne.w	8006bfa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	f040 80eb 	bne.w	8006bfa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8f4 	bl	8006c20 <HAL_UARTEx_RxEventCallback>
      return;
 8006a38:	e0df      	b.n	8006bfa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80d1 	beq.w	8006bfe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80cc 	beq.w	8006bfe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e4      	bne.n	8006a66 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ac4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69b9      	ldr	r1, [r7, #24]
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e4      	bne.n	8006aec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f876 	bl	8006c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b34:	e063      	b.n	8006bfe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5d8>
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 ff37 	bl	80079cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b5e:	e051      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d014      	beq.n	8006b96 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03a      	beq.n	8006c02 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
    }
    return;
 8006b94:	e035      	b.n	8006c02 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x62e>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fee1 	bl	8007976 <UART_EndTransmit_IT>
    return;
 8006bb4:	e026      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x64e>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 ff10 	bl	80079f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bd4:	e016      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <HAL_UART_IRQHandler+0x67c>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da0c      	bge.n	8006c04 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fef8 	bl	80079e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf0:	e008      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bf2:	bf00      	nop
 8006bf4:	e006      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
    return;
 8006bf6:	bf00      	nop
 8006bf8:	e004      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
    return;
 8006c02:	bf00      	nop
  }
}
 8006c04:	37e8      	adds	r7, #232	@ 0xe8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b08c      	sub	sp, #48	@ 0x30
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4bab      	ldr	r3, [pc, #684]	@ (8006f14 <UART_SetConfig+0x2dc>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4aa0      	ldr	r2, [pc, #640]	@ (8006f18 <UART_SetConfig+0x2e0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006cae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	f023 010f 	bic.w	r1, r3, #15
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a91      	ldr	r2, [pc, #580]	@ (8006f1c <UART_SetConfig+0x2e4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d125      	bne.n	8006d28 <UART_SetConfig+0xf0>
 8006cdc:	4b90      	ldr	r3, [pc, #576]	@ (8006f20 <UART_SetConfig+0x2e8>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d81a      	bhi.n	8006d20 <UART_SetConfig+0xe8>
 8006cea:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0xb8>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d11 	.word	0x08006d11
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d06:	e0d6      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0e:	e0d2      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d16:	e0ce      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1e:	e0ca      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	e0c6      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f24 <UART_SetConfig+0x2ec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d138      	bne.n	8006da4 <UART_SetConfig+0x16c>
 8006d32:	4b7b      	ldr	r3, [pc, #492]	@ (8006f20 <UART_SetConfig+0x2e8>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d82d      	bhi.n	8006d9c <UART_SetConfig+0x164>
 8006d40:	a201      	add	r2, pc, #4	@ (adr r2, 8006d48 <UART_SetConfig+0x110>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006d9d 	.word	0x08006d9d
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006d9d 	.word	0x08006d9d
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006d85 	.word	0x08006d85
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d82:	e098      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8a:	e094      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d92:	e090      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	e08c      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da2:	e088      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5f      	ldr	r2, [pc, #380]	@ (8006f28 <UART_SetConfig+0x2f0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d125      	bne.n	8006dfa <UART_SetConfig+0x1c2>
 8006dae:	4b5c      	ldr	r3, [pc, #368]	@ (8006f20 <UART_SetConfig+0x2e8>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006db8:	2b30      	cmp	r3, #48	@ 0x30
 8006dba:	d016      	beq.n	8006dea <UART_SetConfig+0x1b2>
 8006dbc:	2b30      	cmp	r3, #48	@ 0x30
 8006dbe:	d818      	bhi.n	8006df2 <UART_SetConfig+0x1ba>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d00a      	beq.n	8006dda <UART_SetConfig+0x1a2>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d814      	bhi.n	8006df2 <UART_SetConfig+0x1ba>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <UART_SetConfig+0x19a>
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d008      	beq.n	8006de2 <UART_SetConfig+0x1aa>
 8006dd0:	e00f      	b.n	8006df2 <UART_SetConfig+0x1ba>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd8:	e06d      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de0:	e069      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006de2:	2304      	movs	r3, #4
 8006de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de8:	e065      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006dea:	2308      	movs	r3, #8
 8006dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df0:	e061      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006df2:	2310      	movs	r3, #16
 8006df4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df8:	e05d      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a4b      	ldr	r2, [pc, #300]	@ (8006f2c <UART_SetConfig+0x2f4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d125      	bne.n	8006e50 <UART_SetConfig+0x218>
 8006e04:	4b46      	ldr	r3, [pc, #280]	@ (8006f20 <UART_SetConfig+0x2e8>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e10:	d016      	beq.n	8006e40 <UART_SetConfig+0x208>
 8006e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e14:	d818      	bhi.n	8006e48 <UART_SetConfig+0x210>
 8006e16:	2b80      	cmp	r3, #128	@ 0x80
 8006e18:	d00a      	beq.n	8006e30 <UART_SetConfig+0x1f8>
 8006e1a:	2b80      	cmp	r3, #128	@ 0x80
 8006e1c:	d814      	bhi.n	8006e48 <UART_SetConfig+0x210>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <UART_SetConfig+0x1f0>
 8006e22:	2b40      	cmp	r3, #64	@ 0x40
 8006e24:	d008      	beq.n	8006e38 <UART_SetConfig+0x200>
 8006e26:	e00f      	b.n	8006e48 <UART_SetConfig+0x210>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2e:	e042      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e36:	e03e      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e03a      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	e036      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4e:	e032      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a30      	ldr	r2, [pc, #192]	@ (8006f18 <UART_SetConfig+0x2e0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d12a      	bne.n	8006eb0 <UART_SetConfig+0x278>
 8006e5a:	4b31      	ldr	r3, [pc, #196]	@ (8006f20 <UART_SetConfig+0x2e8>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e68:	d01a      	beq.n	8006ea0 <UART_SetConfig+0x268>
 8006e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e6e:	d81b      	bhi.n	8006ea8 <UART_SetConfig+0x270>
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e74:	d00c      	beq.n	8006e90 <UART_SetConfig+0x258>
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7a:	d815      	bhi.n	8006ea8 <UART_SetConfig+0x270>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <UART_SetConfig+0x250>
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e84:	d008      	beq.n	8006e98 <UART_SetConfig+0x260>
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x270>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8e:	e012      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e90:	2302      	movs	r3, #2
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e96:	e00e      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9e:	e00a      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea6:	e006      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eae:	e002      	b.n	8006eb6 <UART_SetConfig+0x27e>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a17      	ldr	r2, [pc, #92]	@ (8006f18 <UART_SetConfig+0x2e0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	f040 80a8 	bne.w	8007012 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d834      	bhi.n	8006f34 <UART_SetConfig+0x2fc>
 8006eca:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed0 <UART_SetConfig+0x298>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006f35 	.word	0x08006f35
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f35 	.word	0x08006f35
 8006ee0:	08006f03 	.word	0x08006f03
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f35 	.word	0x08006f35
 8006ef0:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fe fa6e 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efa:	e021      	b.n	8006f40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <UART_SetConfig+0x2f8>)
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f00:	e01e      	b.n	8006f40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fe f9f9 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 8006f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f08:	e01a      	b.n	8006f40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f10:	e016      	b.n	8006f40 <UART_SetConfig+0x308>
 8006f12:	bf00      	nop
 8006f14:	cfff69f3 	.word	0xcfff69f3
 8006f18:	40008000 	.word	0x40008000
 8006f1c:	40013800 	.word	0x40013800
 8006f20:	40021000 	.word	0x40021000
 8006f24:	40004400 	.word	0x40004400
 8006f28:	40004800 	.word	0x40004800
 8006f2c:	40004c00 	.word	0x40004c00
 8006f30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 812a 	beq.w	800719c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	4a9e      	ldr	r2, [pc, #632]	@ (80071c8 <UART_SetConfig+0x590>)
 8006f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4413      	add	r3, r2
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d305      	bcc.n	8006f78 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d903      	bls.n	8006f80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f7e:	e10d      	b.n	800719c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	2200      	movs	r2, #0
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	60fa      	str	r2, [r7, #12]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	4a8e      	ldr	r2, [pc, #568]	@ (80071c8 <UART_SetConfig+0x590>)
 8006f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2200      	movs	r2, #0
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fa2:	f7f9 fe29 	bl	8000bf8 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4610      	mov	r0, r2
 8006fac:	4619      	mov	r1, r3
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	020b      	lsls	r3, r1, #8
 8006fb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fbc:	0202      	lsls	r2, r0, #8
 8006fbe:	6979      	ldr	r1, [r7, #20]
 8006fc0:	6849      	ldr	r1, [r1, #4]
 8006fc2:	0849      	lsrs	r1, r1, #1
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	4605      	mov	r5, r0
 8006fca:	eb12 0804 	adds.w	r8, r2, r4
 8006fce:	eb43 0905 	adc.w	r9, r3, r5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	469a      	mov	sl, r3
 8006fda:	4693      	mov	fp, r2
 8006fdc:	4652      	mov	r2, sl
 8006fde:	465b      	mov	r3, fp
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 fe08 	bl	8000bf8 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4613      	mov	r3, r2
 8006fee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ff6:	d308      	bcc.n	800700a <UART_SetConfig+0x3d2>
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ffe:	d204      	bcs.n	800700a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a3a      	ldr	r2, [r7, #32]
 8007006:	60da      	str	r2, [r3, #12]
 8007008:	e0c8      	b.n	800719c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007010:	e0c4      	b.n	800719c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701a:	d167      	bne.n	80070ec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800701c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007020:	2b08      	cmp	r3, #8
 8007022:	d828      	bhi.n	8007076 <UART_SetConfig+0x43e>
 8007024:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <UART_SetConfig+0x3f4>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	08007077 	.word	0x08007077
 800703c:	08007067 	.word	0x08007067
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
 800704c:	0800706f 	.word	0x0800706f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fe f9c0 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8007054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007056:	e014      	b.n	8007082 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fe f9d2 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 800705c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800705e:	e010      	b.n	8007082 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007060:	4b5a      	ldr	r3, [pc, #360]	@ (80071cc <UART_SetConfig+0x594>)
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007064:	e00d      	b.n	8007082 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007066:	f7fe f947 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 800706a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706c:	e009      	b.n	8007082 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007074:	e005      	b.n	8007082 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8089 	beq.w	800719c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	4a4e      	ldr	r2, [pc, #312]	@ (80071c8 <UART_SetConfig+0x590>)
 8007090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007094:	461a      	mov	r2, r3
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	fbb3 f3f2 	udiv	r3, r3, r2
 800709c:	005a      	lsls	r2, r3, #1
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	441a      	add	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	d916      	bls.n	80070e4 <UART_SetConfig+0x4ac>
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d212      	bcs.n	80070e4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f023 030f 	bic.w	r3, r3, #15
 80070c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	8bfb      	ldrh	r3, [r7, #30]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	8bfa      	ldrh	r2, [r7, #30]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e05b      	b.n	800719c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ea:	e057      	b.n	800719c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d828      	bhi.n	8007146 <UART_SetConfig+0x50e>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <UART_SetConfig+0x4c4>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	08007147 	.word	0x08007147
 800710c:	08007137 	.word	0x08007137
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
 800711c:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fe f958 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 8007124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007126:	e014      	b.n	8007152 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fe f96a 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 800712c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <UART_SetConfig+0x594>)
 8007132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fe f8df 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 800713a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007150:	bf00      	nop
    }

    if (pclk != 0U)
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d021      	beq.n	800719c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	4a1a      	ldr	r2, [pc, #104]	@ (80071c8 <UART_SetConfig+0x590>)
 800715e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007162:	461a      	mov	r2, r3
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	fbb3 f2f2 	udiv	r2, r3, r2
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	441a      	add	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d909      	bls.n	8007196 <UART_SetConfig+0x55e>
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007188:	d205      	bcs.n	8007196 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	b29a      	uxth	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e002      	b.n	800719c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2201      	movs	r2, #1
 80071a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2200      	movs	r2, #0
 80071b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2200      	movs	r2, #0
 80071b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	@ 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071c6:	bf00      	nop
 80071c8:	0800d20c 	.word	0x0800d20c
 80071cc:	00f42400 	.word	0x00f42400

080071d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072ce:	d10a      	bne.n	80072e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b098      	sub	sp, #96	@ 0x60
 8007318:	af02      	add	r7, sp, #8
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007324:	f7fa fdba 	bl	8001e9c <HAL_GetTick>
 8007328:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b08      	cmp	r3, #8
 8007336:	d12f      	bne.n	8007398 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007338:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007340:	2200      	movs	r2, #0
 8007342:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f88e 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d022      	beq.n	8007398 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007366:	653b      	str	r3, [r7, #80]	@ 0x50
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007370:	647b      	str	r3, [r7, #68]	@ 0x44
 8007372:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007376:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800737e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e063      	b.n	8007460 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d149      	bne.n	800743a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ae:	2200      	movs	r2, #0
 80073b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f857 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d03c      	beq.n	800743a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	623b      	str	r3, [r7, #32]
   return(result);
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073de:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	60fb      	str	r3, [r7, #12]
   return(result);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007412:	61fa      	str	r2, [r7, #28]
 8007414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	69b9      	ldr	r1, [r7, #24]
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	617b      	str	r3, [r7, #20]
   return(result);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e012      	b.n	8007460 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3758      	adds	r7, #88	@ 0x58
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	e04f      	b.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d04b      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007482:	f7fa fd0b 	bl	8001e9c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <UART_WaitOnFlagUntilTimeout+0x30>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e04e      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d037      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b80      	cmp	r3, #128	@ 0x80
 80074ae:	d034      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b40      	cmp	r3, #64	@ 0x40
 80074b4:	d031      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d110      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2208      	movs	r2, #8
 80074ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f838 	bl	8007542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2208      	movs	r2, #8
 80074d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e029      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f4:	d111      	bne.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f81e 	bl	8007542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e00f      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	429a      	cmp	r2, r3
 8007536:	d0a0      	beq.n	800747a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007542:	b480      	push	{r7}
 8007544:	b095      	sub	sp, #84	@ 0x54
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800755e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007568:	643b      	str	r3, [r7, #64]	@ 0x40
 800756a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800756e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e6      	bne.n	800754a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	61fb      	str	r3, [r7, #28]
   return(result);
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3308      	adds	r3, #8
 800759e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e3      	bne.n	800757c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d118      	bne.n	80075ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f023 0310 	bic.w	r3, r3, #16
 80075d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6979      	ldr	r1, [r7, #20]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	613b      	str	r3, [r7, #16]
   return(result);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e6      	bne.n	80075bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007602:	bf00      	nop
 8007604:	3754      	adds	r7, #84	@ 0x54
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7ff faf1 	bl	8006c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007632:	b480      	push	{r7}
 8007634:	b08f      	sub	sp, #60	@ 0x3c
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	2b21      	cmp	r3, #33	@ 0x21
 8007642:	d14c      	bne.n	80076de <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d132      	bne.n	80076b6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	61fb      	str	r3, [r7, #28]
   return(result);
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007670:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e6      	bne.n	8007650 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80076b4:	e013      	b.n	80076de <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80076de:	bf00      	nop
 80076e0:	373c      	adds	r7, #60	@ 0x3c
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b091      	sub	sp, #68	@ 0x44
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	2b21      	cmp	r3, #33	@ 0x21
 80076fa:	d151      	bne.n	80077a0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d132      	bne.n	800776e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	623b      	str	r3, [r7, #32]
   return(result);
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
 8007728:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800772c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60fb      	str	r3, [r7, #12]
   return(result);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	617b      	str	r3, [r7, #20]
   return(result);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800776c:	e018      	b.n	80077a0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007782:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80077a0:	bf00      	nop
 80077a2:	3744      	adds	r7, #68	@ 0x44
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b091      	sub	sp, #68	@ 0x44
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ba:	2b21      	cmp	r3, #33	@ 0x21
 80077bc:	d160      	bne.n	8007880 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80077c6:	e057      	b.n	8007878 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d133      	bne.n	800783c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	623b      	str	r3, [r7, #32]
   return(result);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80077ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e5      	bne.n	80077d4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60fb      	str	r3, [r7, #12]
   return(result);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69b9      	ldr	r1, [r7, #24]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	617b      	str	r3, [r7, #20]
   return(result);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800783a:	e021      	b.n	8007880 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d013      	beq.n	8007872 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007872:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007874:	3b01      	subs	r3, #1
 8007876:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007878:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1a4      	bne.n	80077c8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800787e:	e7ff      	b.n	8007880 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007880:	bf00      	nop
 8007882:	3744      	adds	r7, #68	@ 0x44
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b091      	sub	sp, #68	@ 0x44
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789a:	2b21      	cmp	r3, #33	@ 0x21
 800789c:	d165      	bne.n	800796a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80078a6:	e05c      	b.n	8007962 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d133      	bne.n	800791c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6979      	ldr	r1, [r7, #20]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	613b      	str	r3, [r7, #16]
   return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800791a:	e026      	b.n	800796a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007926:	2b00      	cmp	r3, #0
 8007928:	d018      	beq.n	800795c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800793e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007944:	1c9a      	adds	r2, r3, #2
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800795c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800795e:	3b01      	subs	r3, #1
 8007960:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007962:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007964:	2b00      	cmp	r3, #0
 8007966:	d19f      	bne.n	80078a8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007968:	e7ff      	b.n	800796a <UART_TxISR_16BIT_FIFOEN+0xde>
 800796a:	bf00      	nop
 800796c:	3744      	adds	r7, #68	@ 0x44
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b088      	sub	sp, #32
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	60bb      	str	r3, [r7, #8]
   return(result);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6979      	ldr	r1, [r7, #20]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	613b      	str	r3, [r7, #16]
   return(result);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7f9 fbfa 	bl	80011b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c4:	bf00      	nop
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e027      	b.n	8007a6e <HAL_UARTEx_DisableFifoMode+0x66>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2224      	movs	r2, #36	@ 0x24
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e02d      	b.n	8007aee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2224      	movs	r2, #36	@ 0x24
 8007a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f850 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e02d      	b.n	8007b6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2224      	movs	r2, #36	@ 0x24
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f812 	bl	8007b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d108      	bne.n	8007b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b94:	e031      	b.n	8007bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b96:	2308      	movs	r3, #8
 8007b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	0e5b      	lsrs	r3, r3, #25
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	0f5b      	lsrs	r3, r3, #29
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	7b3a      	ldrb	r2, [r7, #12]
 8007bc2:	4911      	ldr	r1, [pc, #68]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bca:	7b3a      	ldrb	r2, [r7, #12]
 8007bcc:	490f      	ldr	r1, [pc, #60]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	7b7a      	ldrb	r2, [r7, #13]
 8007be0:	4909      	ldr	r1, [pc, #36]	@ (8007c08 <UARTEx_SetNbDataToProcess+0x94>)
 8007be2:	5c8a      	ldrb	r2, [r1, r2]
 8007be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	4908      	ldr	r1, [pc, #32]	@ (8007c0c <UARTEx_SetNbDataToProcess+0x98>)
 8007bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	0800d224 	.word	0x0800d224
 8007c0c:	0800d22c 	.word	0x0800d22c

08007c10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c14:	f001 f99a 	bl	8008f4c <vTaskStartScheduler>
  
  return osOK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0208 	add.w	r2, r3, #8
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f04f 32ff 	mov.w	r2, #4294967295
 8007c36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f103 0208 	add.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f103 0208 	add.w	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd6:	d103      	bne.n	8007ce0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e00c      	b.n	8007cfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e002      	b.n	8007cee <vListInsert+0x2e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d2f6      	bcs.n	8007ce8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6892      	ldr	r2, [r2, #8]
 8007d48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6852      	ldr	r2, [r2, #4]
 8007d52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d103      	bne.n	8007d66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	1e5a      	subs	r2, r3, #1
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10b      	bne.n	8007db4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	e7fd      	b.n	8007db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007db4:	f002 f808 	bl	8009dc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dc4:	fb01 f303 	mul.w	r3, r1, r3
 8007dc8:	441a      	add	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	3b01      	subs	r3, #1
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	441a      	add	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	22ff      	movs	r2, #255	@ 0xff
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22ff      	movs	r2, #255	@ 0xff
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d114      	bne.n	8007e34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3310      	adds	r3, #16
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fada 	bl	80093d0 <xTaskRemoveFromEventList>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d012      	beq.n	8007e48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <xQueueGenericReset+0xd0>)
 8007e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	e009      	b.n	8007e48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3310      	adds	r3, #16
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff fef0 	bl	8007c1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3324      	adds	r3, #36	@ 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff feeb 	bl	8007c1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e48:	f001 fff0 	bl	8009e2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e4c:	2301      	movs	r3, #1
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10b      	bne.n	8007e88 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	e7fd      	b.n	8007e84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	fb02 f303 	mul.w	r3, r2, r3
 8007e90:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3348      	adds	r3, #72	@ 0x48
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 f8b8 	bl	800a00c <pvPortMalloc>
 8007e9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	3348      	adds	r3, #72	@ 0x48
 8007eac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eae:	79fa      	ldrb	r2, [r7, #7]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f805 	bl	8007eca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e002      	b.n	8007eec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ef8:	2101      	movs	r1, #1
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f7ff ff44 	bl	8007d88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f81c 	bl	8007f6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f46:	2301      	movs	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6939      	ldr	r1, [r7, #16]
 8007f54:	6978      	ldr	r0, [r7, #20]
 8007f56:	f7ff ff81 	bl	8007e5c <xQueueGenericCreate>
 8007f5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff ffd3 	bl	8007f08 <prvInitialiseMutex>

		return xNewQueue;
 8007f62:	68fb      	ldr	r3, [r7, #12]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	@ 0x38
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xQueueGenericSend+0x34>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <xQueueGenericSend+0x42>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <xQueueGenericSend+0x46>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericSend+0x48>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xQueueGenericSend+0x64>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <xQueueGenericSend+0x72>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <xQueueGenericSend+0x76>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <xQueueGenericSend+0x78>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10b      	bne.n	8008000 <xQueueGenericSend+0x94>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	623b      	str	r3, [r7, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008000:	f001 fb8c 	bl	800971c <xTaskGetSchedulerState>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xQueueGenericSend+0xa4>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <xQueueGenericSend+0xa8>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <xQueueGenericSend+0xaa>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <xQueueGenericSend+0xc6>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	61fb      	str	r3, [r7, #28]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008032:	f001 fec9 	bl	8009dc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <xQueueGenericSend+0xdc>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d129      	bne.n	800809c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800804e:	f000 fbc7 	bl	80087e0 <prvCopyDataToQueue>
 8008052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d010      	beq.n	800807e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	3324      	adds	r3, #36	@ 0x24
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f9b5 	bl	80093d0 <xTaskRemoveFromEventList>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d013      	beq.n	8008094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800806c:	4b3f      	ldr	r3, [pc, #252]	@ (800816c <xQueueGenericSend+0x200>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	e00a      	b.n	8008094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b39      	ldr	r3, [pc, #228]	@ (800816c <xQueueGenericSend+0x200>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008094:	f001 feca 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	e063      	b.n	8008164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080a2:	f001 fec3 	bl	8009e2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e05c      	b.n	8008164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 f9ef 	bl	8009498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080be:	f001 feb5 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c2:	f000 ff95 	bl	8008ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080c6:	f001 fe7f 	bl	8009dc8 <vPortEnterCritical>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d103      	bne.n	80080e0 <xQueueGenericSend+0x174>
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d103      	bne.n	80080f6 <xQueueGenericSend+0x18a>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f6:	f001 fe99 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080fa:	1d3a      	adds	r2, r7, #4
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f9de 	bl	80094c4 <xTaskCheckForTimeOut>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d124      	bne.n	8008158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800810e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008110:	f000 fc5e 	bl	80089d0 <prvIsQueueFull>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d018      	beq.n	800814c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	3310      	adds	r3, #16
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f001 f92e 	bl	8009384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812a:	f000 fbe9 	bl	8008900 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800812e:	f000 ff6d 	bl	800900c <xTaskResumeAll>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f af7c 	bne.w	8008032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800813a:	4b0c      	ldr	r3, [pc, #48]	@ (800816c <xQueueGenericSend+0x200>)
 800813c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	e772      	b.n	8008032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800814c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814e:	f000 fbd7 	bl	8008900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008152:	f000 ff5b 	bl	800900c <xTaskResumeAll>
 8008156:	e76c      	b.n	8008032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800815a:	f000 fbd1 	bl	8008900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800815e:	f000 ff55 	bl	800900c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008164:	4618      	mov	r0, r3
 8008166:	3738      	adds	r7, #56	@ 0x38
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b090      	sub	sp, #64	@ 0x40
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d103      	bne.n	80081ae <xQueueGenericSendFromISR+0x3e>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <xQueueGenericSendFromISR+0x42>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <xQueueGenericSendFromISR+0x44>
 80081b2:	2300      	movs	r3, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d103      	bne.n	80081de <xQueueGenericSendFromISR+0x6e>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <xQueueGenericSendFromISR+0x72>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <xQueueGenericSendFromISR+0x74>
 80081e2:	2300      	movs	r3, #0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	623b      	str	r3, [r7, #32]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008200:	f001 fec2 	bl	8009f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008204:	f3ef 8211 	mrs	r2, BASEPRI
 8008208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61fa      	str	r2, [r7, #28]
 800821a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800821c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <xQueueGenericSendFromISR+0xc2>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d12f      	bne.n	8008292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008248:	f000 faca 	bl	80087e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800824c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d112      	bne.n	800827c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	3324      	adds	r3, #36	@ 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f8b4 	bl	80093d0 <xTaskRemoveFromEventList>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00e      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e007      	b.n	800828c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800827c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008280:	3301      	adds	r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	b25a      	sxtb	r2, r3
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800828c:	2301      	movs	r3, #1
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008290:	e001      	b.n	8008296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3740      	adds	r7, #64	@ 0x40
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08e      	sub	sp, #56	@ 0x38
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61fb      	str	r3, [r7, #28]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <xQueueGiveFromISR+0x5c>
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <xQueueGiveFromISR+0x60>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <xQueueGiveFromISR+0x62>
 800830c:	2300      	movs	r3, #0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	61bb      	str	r3, [r7, #24]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800832a:	f001 fe2d 	bl	8009f88 <vPortValidateInterruptPriority>
	__asm volatile
 800832e:	f3ef 8211 	mrs	r2, BASEPRI
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	617a      	str	r2, [r7, #20]
 8008344:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008346:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008356:	429a      	cmp	r2, r3
 8008358:	d22b      	bcs.n	80083b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800836c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d112      	bne.n	800839c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d016      	beq.n	80083ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	3324      	adds	r3, #36	@ 0x24
 8008382:	4618      	mov	r0, r3
 8008384:	f001 f824 	bl	80093d0 <xTaskRemoveFromEventList>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00e      	beq.n	80083ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e007      	b.n	80083ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800839c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083a0:	3301      	adds	r3, #1
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	b25a      	sxtb	r2, r3
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80083ac:	2301      	movs	r3, #1
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b0:	e001      	b.n	80083b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f383 8811 	msr	BASEPRI, r3
}
 80083c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3738      	adds	r7, #56	@ 0x38
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08c      	sub	sp, #48	@ 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083d8:	2300      	movs	r3, #0
 80083da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <xQueueReceive+0x32>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	623b      	str	r3, [r7, #32]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <xQueueReceive+0x40>
 8008404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <xQueueReceive+0x44>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <xQueueReceive+0x46>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <xQueueReceive+0x62>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	61fb      	str	r3, [r7, #28]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800842e:	f001 f975 	bl	800971c <xTaskGetSchedulerState>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <xQueueReceive+0x72>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <xQueueReceive+0x76>
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <xQueueReceive+0x78>
 8008442:	2300      	movs	r3, #0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <xQueueReceive+0x94>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	61bb      	str	r3, [r7, #24]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008460:	f001 fcb2 	bl	8009dc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01f      	beq.n	80084b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008474:	f000 fa1e 	bl	80088b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	1e5a      	subs	r2, r3, #1
 800847c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00f      	beq.n	80084a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	3310      	adds	r3, #16
 800848c:	4618      	mov	r0, r3
 800848e:	f000 ff9f 	bl	80093d0 <xTaskRemoveFromEventList>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008498:	4b3c      	ldr	r3, [pc, #240]	@ (800858c <xQueueReceive+0x1c0>)
 800849a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084a8:	f001 fcc0 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e069      	b.n	8008584 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084b6:	f001 fcb9 	bl	8009e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e062      	b.n	8008584 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084c4:	f107 0310 	add.w	r3, r7, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 ffe5 	bl	8009498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ce:	2301      	movs	r3, #1
 80084d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084d2:	f001 fcab 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084d6:	f000 fd8b 	bl	8008ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084da:	f001 fc75 	bl	8009dc8 <vPortEnterCritical>
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084e4:	b25b      	sxtb	r3, r3
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d103      	bne.n	80084f4 <xQueueReceive+0x128>
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084fa:	b25b      	sxtb	r3, r3
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d103      	bne.n	800850a <xQueueReceive+0x13e>
 8008502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800850a:	f001 fc8f 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800850e:	1d3a      	adds	r2, r7, #4
 8008510:	f107 0310 	add.w	r3, r7, #16
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f000 ffd4 	bl	80094c4 <xTaskCheckForTimeOut>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d123      	bne.n	800856a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008524:	f000 fa3e 	bl	80089a4 <prvIsQueueEmpty>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d017      	beq.n	800855e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	3324      	adds	r3, #36	@ 0x24
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f000 ff24 	bl	8009384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800853c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800853e:	f000 f9df 	bl	8008900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008542:	f000 fd63 	bl	800900c <xTaskResumeAll>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d189      	bne.n	8008460 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800854c:	4b0f      	ldr	r3, [pc, #60]	@ (800858c <xQueueReceive+0x1c0>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	e780      	b.n	8008460 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800855e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008560:	f000 f9ce 	bl	8008900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008564:	f000 fd52 	bl	800900c <xTaskResumeAll>
 8008568:	e77a      	b.n	8008460 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800856a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856c:	f000 f9c8 	bl	8008900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008570:	f000 fd4c 	bl	800900c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008576:	f000 fa15 	bl	80089a4 <prvIsQueueEmpty>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	f43f af6f 	beq.w	8008460 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008582:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008584:	4618      	mov	r0, r3
 8008586:	3730      	adds	r7, #48	@ 0x30
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08e      	sub	sp, #56	@ 0x38
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	623b      	str	r3, [r7, #32]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	61fb      	str	r3, [r7, #28]
}
 80085de:	bf00      	nop
 80085e0:	bf00      	nop
 80085e2:	e7fd      	b.n	80085e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085e4:	f001 f89a 	bl	800971c <xTaskGetSchedulerState>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d102      	bne.n	80085f4 <xQueueSemaphoreTake+0x64>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <xQueueSemaphoreTake+0x68>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <xQueueSemaphoreTake+0x6a>
 80085f8:	2300      	movs	r3, #0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	61bb      	str	r3, [r7, #24]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008616:	f001 fbd7 	bl	8009dc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800861a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d024      	beq.n	8008670 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	1e5a      	subs	r2, r3, #1
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800862e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008636:	f001 fa1d 	bl	8009a74 <pvTaskIncrementMutexHeldCount>
 800863a:	4602      	mov	r2, r0
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00f      	beq.n	8008668 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	3310      	adds	r3, #16
 800864c:	4618      	mov	r0, r3
 800864e:	f000 febf 	bl	80093d0 <xTaskRemoveFromEventList>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008658:	4b54      	ldr	r3, [pc, #336]	@ (80087ac <xQueueSemaphoreTake+0x21c>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008668:	f001 fbe0 	bl	8009e2c <vPortExitCritical>
				return pdPASS;
 800866c:	2301      	movs	r3, #1
 800866e:	e098      	b.n	80087a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d112      	bne.n	800869c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	617b      	str	r3, [r7, #20]
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	e7fd      	b.n	8008690 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008694:	f001 fbca 	bl	8009e2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008698:	2300      	movs	r3, #0
 800869a:	e082      	b.n	80087a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800869c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a2:	f107 030c 	add.w	r3, r7, #12
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fef6 	bl	8009498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b0:	f001 fbbc 	bl	8009e2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b4:	f000 fc9c 	bl	8008ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b8:	f001 fb86 	bl	8009dc8 <vPortEnterCritical>
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086c2:	b25b      	sxtb	r3, r3
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d103      	bne.n	80086d2 <xQueueSemaphoreTake+0x142>
 80086ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d103      	bne.n	80086e8 <xQueueSemaphoreTake+0x158>
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086e8:	f001 fba0 	bl	8009e2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ec:	463a      	mov	r2, r7
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fee5 	bl	80094c4 <xTaskCheckForTimeOut>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d132      	bne.n	8008766 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008700:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008702:	f000 f94f 	bl	80089a4 <prvIsQueueEmpty>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d026      	beq.n	800875a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800870c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008714:	f001 fb58 	bl	8009dc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f001 f81b 	bl	8009758 <xTaskPriorityInherit>
 8008722:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008724:	f001 fb82 	bl	8009e2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872a:	3324      	adds	r3, #36	@ 0x24
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fe27 	bl	8009384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008738:	f000 f8e2 	bl	8008900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800873c:	f000 fc66 	bl	800900c <xTaskResumeAll>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	f47f af67 	bne.w	8008616 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008748:	4b18      	ldr	r3, [pc, #96]	@ (80087ac <xQueueSemaphoreTake+0x21c>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	e75d      	b.n	8008616 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800875a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800875c:	f000 f8d0 	bl	8008900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008760:	f000 fc54 	bl	800900c <xTaskResumeAll>
 8008764:	e757      	b.n	8008616 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008768:	f000 f8ca 	bl	8008900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800876c:	f000 fc4e 	bl	800900c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008770:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008772:	f000 f917 	bl	80089a4 <prvIsQueueEmpty>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	f43f af4c 	beq.w	8008616 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008784:	f001 fb20 	bl	8009dc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800878a:	f000 f811 	bl	80087b0 <prvGetDisinheritPriorityAfterTimeout>
 800878e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008796:	4618      	mov	r0, r3
 8008798:	f001 f8dc 	bl	8009954 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800879c:	f001 fb46 	bl	8009e2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3738      	adds	r7, #56	@ 0x38
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f1c3 0307 	rsb	r3, r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e001      	b.n	80087d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80087d2:	68fb      	ldr	r3, [r7, #12]
	}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d14d      	bne.n	80088a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	4618      	mov	r0, r3
 800880c:	f001 f81a 	bl	8009844 <xTaskPriorityDisinherit>
 8008810:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	e043      	b.n	80088a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d119      	bne.n	8008854 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6858      	ldr	r0, [r3, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008828:	461a      	mov	r2, r3
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	f002 fc4b 	bl	800b0c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008838:	441a      	add	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	429a      	cmp	r2, r3
 8008848:	d32b      	bcc.n	80088a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	605a      	str	r2, [r3, #4]
 8008852:	e026      	b.n	80088a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68d8      	ldr	r0, [r3, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885c:	461a      	mov	r2, r3
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	f002 fc31 	bl	800b0c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886c:	425b      	negs	r3, r3
 800886e:	441a      	add	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d207      	bcs.n	8008890 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008888:	425b      	negs	r3, r3
 800888a:	441a      	add	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d105      	bne.n	80088a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3b01      	subs	r3, #1
 80088a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80088aa:	697b      	ldr	r3, [r7, #20]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d018      	beq.n	80088f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	441a      	add	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d303      	bcc.n	80088e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68d9      	ldr	r1, [r3, #12]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f0:	461a      	mov	r2, r3
 80088f2:	6838      	ldr	r0, [r7, #0]
 80088f4:	f002 fbe7 	bl	800b0c6 <memcpy>
	}
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008908:	f001 fa5e 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008912:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008914:	e011      	b.n	800893a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	d012      	beq.n	8008944 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3324      	adds	r3, #36	@ 0x24
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fd54 	bl	80093d0 <xTaskRemoveFromEventList>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800892e:	f000 fe2d 	bl	800958c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	3b01      	subs	r3, #1
 8008936:	b2db      	uxtb	r3, r3
 8008938:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800893a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dce9      	bgt.n	8008916 <prvUnlockQueue+0x16>
 8008942:	e000      	b.n	8008946 <prvUnlockQueue+0x46>
					break;
 8008944:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	22ff      	movs	r2, #255	@ 0xff
 800894a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800894e:	f001 fa6d 	bl	8009e2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008952:	f001 fa39 	bl	8009dc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800895c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800895e:	e011      	b.n	8008984 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d012      	beq.n	800898e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3310      	adds	r3, #16
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fd2f 	bl	80093d0 <xTaskRemoveFromEventList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008978:	f000 fe08 	bl	800958c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	3b01      	subs	r3, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dce9      	bgt.n	8008960 <prvUnlockQueue+0x60>
 800898c:	e000      	b.n	8008990 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800898e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	22ff      	movs	r2, #255	@ 0xff
 8008994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008998:	f001 fa48 	bl	8009e2c <vPortExitCritical>
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089ac:	f001 fa0c 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e001      	b.n	80089c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f001 fa33 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d8:	f001 f9f6 	bl	8009dc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d102      	bne.n	80089ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089e8:	2301      	movs	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	e001      	b.n	80089f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089f2:	f001 fa1b 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	@ 0x30
 8008a04:	af04      	add	r7, sp, #16
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 faf9 	bl	800a00c <pvPortMalloc>
 8008a1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00e      	beq.n	8008a40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a22:	20a0      	movs	r0, #160	@ 0xa0
 8008a24:	f001 faf2 	bl	800a00c <pvPortMalloc>
 8008a28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a36:	e005      	b.n	8008a44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a38:	6978      	ldr	r0, [r7, #20]
 8008a3a:	f001 fbb5 	bl	800a1a8 <vPortFree>
 8008a3e:	e001      	b.n	8008a44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a4a:	88fa      	ldrh	r2, [r7, #6]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f80f 	bl	8008a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a66:	69f8      	ldr	r0, [r7, #28]
 8008a68:	f000 f8ac 	bl	8008bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e002      	b.n	8008a78 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a72:	f04f 33ff 	mov.w	r3, #4294967295
 8008a76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a78:	69bb      	ldr	r3, [r7, #24]
	}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f023 0307 	bic.w	r3, r3, #7
 8008aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	617b      	str	r3, [r7, #20]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01f      	beq.n	8008b14 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	e012      	b.n	8008b00 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	7819      	ldrb	r1, [r3, #0]
 8008ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3334      	adds	r3, #52	@ 0x34
 8008aea:	460a      	mov	r2, r1
 8008aec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d006      	beq.n	8008b08 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	3301      	adds	r3, #1
 8008afe:	61fb      	str	r3, [r7, #28]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	2b0f      	cmp	r3, #15
 8008b04:	d9e9      	bls.n	8008ada <prvInitialiseNewTask+0x56>
 8008b06:	e000      	b.n	8008b0a <prvInitialiseNewTask+0x86>
			{
				break;
 8008b08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b12:	e003      	b.n	8008b1c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d901      	bls.n	8008b26 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b22:	2306      	movs	r3, #6
 8008b24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b30:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	2200      	movs	r2, #0
 8008b36:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff f88e 	bl	8007c5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	3318      	adds	r3, #24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff f889 	bl	8007c5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b54:	f1c3 0207 	rsb	r2, r3, #7
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	334c      	adds	r3, #76	@ 0x4c
 8008b76:	224c      	movs	r2, #76	@ 0x4c
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f002 f9c5 	bl	800af0a <memset>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	4a0d      	ldr	r2, [pc, #52]	@ (8008bb8 <prvInitialiseNewTask+0x134>)
 8008b84:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <prvInitialiseNewTask+0x138>)
 8008b8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008bc0 <prvInitialiseNewTask+0x13c>)
 8008b90:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	68f9      	ldr	r1, [r7, #12]
 8008b96:	69b8      	ldr	r0, [r7, #24]
 8008b98:	f000 ffe6 	bl	8009b68 <pxPortInitialiseStack>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bae:	bf00      	nop
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000358c 	.word	0x2000358c
 8008bbc:	200035f4 	.word	0x200035f4
 8008bc0:	2000365c 	.word	0x2000365c

08008bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bcc:	f001 f8fc 	bl	8009dc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c7c <prvAddNewTaskToReadyList+0xb8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	4a29      	ldr	r2, [pc, #164]	@ (8008c7c <prvAddNewTaskToReadyList+0xb8>)
 8008bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bda:	4b29      	ldr	r3, [pc, #164]	@ (8008c80 <prvAddNewTaskToReadyList+0xbc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008be2:	4a27      	ldr	r2, [pc, #156]	@ (8008c80 <prvAddNewTaskToReadyList+0xbc>)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be8:	4b24      	ldr	r3, [pc, #144]	@ (8008c7c <prvAddNewTaskToReadyList+0xb8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d110      	bne.n	8008c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bf0:	f000 fcf0 	bl	80095d4 <prvInitialiseTaskLists>
 8008bf4:	e00d      	b.n	8008c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bf6:	4b23      	ldr	r3, [pc, #140]	@ (8008c84 <prvAddNewTaskToReadyList+0xc0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d109      	bne.n	8008c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bfe:	4b20      	ldr	r3, [pc, #128]	@ (8008c80 <prvAddNewTaskToReadyList+0xbc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d802      	bhi.n	8008c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008c80 <prvAddNewTaskToReadyList+0xbc>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c12:	4b1d      	ldr	r3, [pc, #116]	@ (8008c88 <prvAddNewTaskToReadyList+0xc4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	4a1b      	ldr	r2, [pc, #108]	@ (8008c88 <prvAddNewTaskToReadyList+0xc4>)
 8008c1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c20:	2201      	movs	r2, #1
 8008c22:	409a      	lsls	r2, r3
 8008c24:	4b19      	ldr	r3, [pc, #100]	@ (8008c8c <prvAddNewTaskToReadyList+0xc8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	4a18      	ldr	r2, [pc, #96]	@ (8008c8c <prvAddNewTaskToReadyList+0xc8>)
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4a15      	ldr	r2, [pc, #84]	@ (8008c90 <prvAddNewTaskToReadyList+0xcc>)
 8008c3c:	441a      	add	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7ff f817 	bl	8007c78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 f8ef 	bl	8009e2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <prvAddNewTaskToReadyList+0xc0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00e      	beq.n	8008c74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c56:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <prvAddNewTaskToReadyList+0xbc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d207      	bcs.n	8008c74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c64:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <prvAddNewTaskToReadyList+0xd0>)
 8008c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20001534 	.word	0x20001534
 8008c80:	20001434 	.word	0x20001434
 8008c84:	20001540 	.word	0x20001540
 8008c88:	20001550 	.word	0x20001550
 8008c8c:	2000153c 	.word	0x2000153c
 8008c90:	20001438 	.word	0x20001438
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d018      	beq.n	8008cdc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008caa:	4b14      	ldr	r3, [pc, #80]	@ (8008cfc <vTaskDelay+0x64>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <vTaskDelay+0x32>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60bb      	str	r3, [r7, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cca:	f000 f991 	bl	8008ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cce:	2100      	movs	r1, #0
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fee3 	bl	8009a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd6:	f000 f999 	bl	800900c <xTaskResumeAll>
 8008cda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d107      	bne.n	8008cf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008ce2:	4b07      	ldr	r3, [pc, #28]	@ (8008d00 <vTaskDelay+0x68>)
 8008ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cf2:	bf00      	nop
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	2000155c 	.word	0x2000155c
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008d0c:	f001 f85c 	bl	8009dc8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <vTaskSuspend+0x18>
 8008d16:	4b3d      	ldr	r3, [pc, #244]	@ (8008e0c <vTaskSuspend+0x108>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	e000      	b.n	8008d1e <vTaskSuspend+0x1a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff f804 	bl	8007d32 <uxListRemove>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d115      	bne.n	8008d5c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4936      	ldr	r1, [pc, #216]	@ (8008e10 <vTaskSuspend+0x10c>)
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <vTaskSuspend+0x58>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	43da      	mvns	r2, r3
 8008d52:	4b30      	ldr	r3, [pc, #192]	@ (8008e14 <vTaskSuspend+0x110>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4013      	ands	r3, r2
 8008d58:	4a2e      	ldr	r2, [pc, #184]	@ (8008e14 <vTaskSuspend+0x110>)
 8008d5a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3318      	adds	r3, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe ffe2 	bl	8007d32 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	4828      	ldr	r0, [pc, #160]	@ (8008e18 <vTaskSuspend+0x114>)
 8008d76:	f7fe ff7f 	bl	8007c78 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d103      	bne.n	8008d8e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008d8e:	f001 f84d 	bl	8009e2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008d92:	4b22      	ldr	r3, [pc, #136]	@ (8008e1c <vTaskSuspend+0x118>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008d9a:	f001 f815 	bl	8009dc8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008d9e:	f000 fc9d 	bl	80096dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008da2:	f001 f843 	bl	8009e2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008da6:	4b19      	ldr	r3, [pc, #100]	@ (8008e0c <vTaskSuspend+0x108>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d128      	bne.n	8008e02 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8008db0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <vTaskSuspend+0x118>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d018      	beq.n	8008dea <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008db8:	4b19      	ldr	r3, [pc, #100]	@ (8008e20 <vTaskSuspend+0x11c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <vTaskSuspend+0xd4>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60bb      	str	r3, [r7, #8]
}
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	e7fd      	b.n	8008dd4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <vTaskSuspend+0x120>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008de8:	e00b      	b.n	8008e02 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008dea:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <vTaskSuspend+0x114>)
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4b0e      	ldr	r3, [pc, #56]	@ (8008e28 <vTaskSuspend+0x124>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d103      	bne.n	8008dfe <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8008df6:	4b05      	ldr	r3, [pc, #20]	@ (8008e0c <vTaskSuspend+0x108>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
	}
 8008dfc:	e001      	b.n	8008e02 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008dfe:	f000 fa5d 	bl	80092bc <vTaskSwitchContext>
	}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20001434 	.word	0x20001434
 8008e10:	20001438 	.word	0x20001438
 8008e14:	2000153c 	.word	0x2000153c
 8008e18:	20001520 	.word	0x20001520
 8008e1c:	20001540 	.word	0x20001540
 8008e20:	2000155c 	.word	0x2000155c
 8008e24:	e000ed04 	.word	0xe000ed04
 8008e28:	20001534 	.word	0x20001534

08008e2c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60fb      	str	r3, [r7, #12]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e88 <prvTaskIsTaskSuspended+0x5c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d10a      	bne.n	8008e7a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <prvTaskIsTaskSuspended+0x60>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d005      	beq.n	8008e7a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e7a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20001520 	.word	0x20001520
 8008e8c:	200014f4 	.word	0x200014f4

08008e90 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <vTaskResume+0x2a>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008eba:	4b20      	ldr	r3, [pc, #128]	@ (8008f3c <vTaskResume+0xac>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d037      	beq.n	8008f34 <vTaskResume+0xa4>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d034      	beq.n	8008f34 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8008eca:	f000 ff7d 	bl	8009dc8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff ffac 	bl	8008e2c <prvTaskIsTaskSuspended>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d02a      	beq.n	8008f30 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe ff27 	bl	8007d32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	2201      	movs	r2, #1
 8008eea:	409a      	lsls	r2, r3
 8008eec:	4b14      	ldr	r3, [pc, #80]	@ (8008f40 <vTaskResume+0xb0>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	4a13      	ldr	r2, [pc, #76]	@ (8008f40 <vTaskResume+0xb0>)
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4a10      	ldr	r2, [pc, #64]	@ (8008f44 <vTaskResume+0xb4>)
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	f7fe feb3 	bl	8007c78 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	4b09      	ldr	r3, [pc, #36]	@ (8008f3c <vTaskResume+0xac>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d307      	bcc.n	8008f30 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008f20:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <vTaskResume+0xb8>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008f30:	f000 ff7c 	bl	8009e2c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20001434 	.word	0x20001434
 8008f40:	2000153c 	.word	0x2000153c
 8008f44:	20001438 	.word	0x20001438
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008f52:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd0 <vTaskStartScheduler+0x84>)
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	2280      	movs	r2, #128	@ 0x80
 8008f5e:	491d      	ldr	r1, [pc, #116]	@ (8008fd4 <vTaskStartScheduler+0x88>)
 8008f60:	481d      	ldr	r0, [pc, #116]	@ (8008fd8 <vTaskStartScheduler+0x8c>)
 8008f62:	f7ff fd4d 	bl	8008a00 <xTaskCreate>
 8008f66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d11b      	bne.n	8008fa6 <vTaskStartScheduler+0x5a>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60bb      	str	r3, [r7, #8]
}
 8008f80:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f82:	4b16      	ldr	r3, [pc, #88]	@ (8008fdc <vTaskStartScheduler+0x90>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	334c      	adds	r3, #76	@ 0x4c
 8008f88:	4a15      	ldr	r2, [pc, #84]	@ (8008fe0 <vTaskStartScheduler+0x94>)
 8008f8a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f8c:	4b15      	ldr	r3, [pc, #84]	@ (8008fe4 <vTaskStartScheduler+0x98>)
 8008f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f94:	4b14      	ldr	r3, [pc, #80]	@ (8008fe8 <vTaskStartScheduler+0x9c>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f9a:	4b14      	ldr	r3, [pc, #80]	@ (8008fec <vTaskStartScheduler+0xa0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fa0:	f000 fe6e 	bl	8009c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fa4:	e00f      	b.n	8008fc6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fac:	d10b      	bne.n	8008fc6 <vTaskStartScheduler+0x7a>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	607b      	str	r3, [r7, #4]
}
 8008fc0:	bf00      	nop
 8008fc2:	bf00      	nop
 8008fc4:	e7fd      	b.n	8008fc2 <vTaskStartScheduler+0x76>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20001558 	.word	0x20001558
 8008fd4:	0800d1ec 	.word	0x0800d1ec
 8008fd8:	080095a5 	.word	0x080095a5
 8008fdc:	20001434 	.word	0x20001434
 8008fe0:	2000002c 	.word	0x2000002c
 8008fe4:	20001554 	.word	0x20001554
 8008fe8:	20001540 	.word	0x20001540
 8008fec:	20001538 	.word	0x20001538

08008ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ff4:	4b04      	ldr	r3, [pc, #16]	@ (8009008 <vTaskSuspendAll+0x18>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	4a03      	ldr	r2, [pc, #12]	@ (8009008 <vTaskSuspendAll+0x18>)
 8008ffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ffe:	bf00      	nop
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	2000155c 	.word	0x2000155c

0800900c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800901a:	4b42      	ldr	r3, [pc, #264]	@ (8009124 <xTaskResumeAll+0x118>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10b      	bne.n	800903a <xTaskResumeAll+0x2e>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	603b      	str	r3, [r7, #0]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800903a:	f000 fec5 	bl	8009dc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800903e:	4b39      	ldr	r3, [pc, #228]	@ (8009124 <xTaskResumeAll+0x118>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	4a37      	ldr	r2, [pc, #220]	@ (8009124 <xTaskResumeAll+0x118>)
 8009046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009048:	4b36      	ldr	r3, [pc, #216]	@ (8009124 <xTaskResumeAll+0x118>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d161      	bne.n	8009114 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009050:	4b35      	ldr	r3, [pc, #212]	@ (8009128 <xTaskResumeAll+0x11c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d05d      	beq.n	8009114 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009058:	e02e      	b.n	80090b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905a:	4b34      	ldr	r3, [pc, #208]	@ (800912c <xTaskResumeAll+0x120>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3318      	adds	r3, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fe63 	bl	8007d32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3304      	adds	r3, #4
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fe5e 	bl	8007d32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907a:	2201      	movs	r2, #1
 800907c:	409a      	lsls	r2, r3
 800907e:	4b2c      	ldr	r3, [pc, #176]	@ (8009130 <xTaskResumeAll+0x124>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4313      	orrs	r3, r2
 8009084:	4a2a      	ldr	r2, [pc, #168]	@ (8009130 <xTaskResumeAll+0x124>)
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4a27      	ldr	r2, [pc, #156]	@ (8009134 <xTaskResumeAll+0x128>)
 8009096:	441a      	add	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3304      	adds	r3, #4
 800909c:	4619      	mov	r1, r3
 800909e:	4610      	mov	r0, r2
 80090a0:	f7fe fdea 	bl	8007c78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a8:	4b23      	ldr	r3, [pc, #140]	@ (8009138 <xTaskResumeAll+0x12c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d302      	bcc.n	80090b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090b2:	4b22      	ldr	r3, [pc, #136]	@ (800913c <xTaskResumeAll+0x130>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090b8:	4b1c      	ldr	r3, [pc, #112]	@ (800912c <xTaskResumeAll+0x120>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1cc      	bne.n	800905a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090c6:	f000 fb09 	bl	80096dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009140 <xTaskResumeAll+0x134>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d010      	beq.n	80090f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090d6:	f000 f837 	bl	8009148 <xTaskIncrementTick>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80090e0:	4b16      	ldr	r3, [pc, #88]	@ (800913c <xTaskResumeAll+0x130>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f1      	bne.n	80090d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80090f2:	4b13      	ldr	r3, [pc, #76]	@ (8009140 <xTaskResumeAll+0x134>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090f8:	4b10      	ldr	r3, [pc, #64]	@ (800913c <xTaskResumeAll+0x130>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009100:	2301      	movs	r3, #1
 8009102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009104:	4b0f      	ldr	r3, [pc, #60]	@ (8009144 <xTaskResumeAll+0x138>)
 8009106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009114:	f000 fe8a 	bl	8009e2c <vPortExitCritical>

	return xAlreadyYielded;
 8009118:	68bb      	ldr	r3, [r7, #8]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	2000155c 	.word	0x2000155c
 8009128:	20001534 	.word	0x20001534
 800912c:	200014f4 	.word	0x200014f4
 8009130:	2000153c 	.word	0x2000153c
 8009134:	20001438 	.word	0x20001438
 8009138:	20001434 	.word	0x20001434
 800913c:	20001548 	.word	0x20001548
 8009140:	20001544 	.word	0x20001544
 8009144:	e000ed04 	.word	0xe000ed04

08009148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009152:	4b4f      	ldr	r3, [pc, #316]	@ (8009290 <xTaskIncrementTick+0x148>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 808f 	bne.w	800927a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800915c:	4b4d      	ldr	r3, [pc, #308]	@ (8009294 <xTaskIncrementTick+0x14c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009164:	4a4b      	ldr	r2, [pc, #300]	@ (8009294 <xTaskIncrementTick+0x14c>)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d121      	bne.n	80091b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009170:	4b49      	ldr	r3, [pc, #292]	@ (8009298 <xTaskIncrementTick+0x150>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <xTaskIncrementTick+0x4a>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	603b      	str	r3, [r7, #0]
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	e7fd      	b.n	800918e <xTaskIncrementTick+0x46>
 8009192:	4b41      	ldr	r3, [pc, #260]	@ (8009298 <xTaskIncrementTick+0x150>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	4b40      	ldr	r3, [pc, #256]	@ (800929c <xTaskIncrementTick+0x154>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a3e      	ldr	r2, [pc, #248]	@ (8009298 <xTaskIncrementTick+0x150>)
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4a3e      	ldr	r2, [pc, #248]	@ (800929c <xTaskIncrementTick+0x154>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	4b3e      	ldr	r3, [pc, #248]	@ (80092a0 <xTaskIncrementTick+0x158>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	4a3c      	ldr	r2, [pc, #240]	@ (80092a0 <xTaskIncrementTick+0x158>)
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	f000 fa94 	bl	80096dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091b4:	4b3b      	ldr	r3, [pc, #236]	@ (80092a4 <xTaskIncrementTick+0x15c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d348      	bcc.n	8009250 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091be:	4b36      	ldr	r3, [pc, #216]	@ (8009298 <xTaskIncrementTick+0x150>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c8:	4b36      	ldr	r3, [pc, #216]	@ (80092a4 <xTaskIncrementTick+0x15c>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	601a      	str	r2, [r3, #0]
					break;
 80091d0:	e03e      	b.n	8009250 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <xTaskIncrementTick+0x150>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d203      	bcs.n	80091f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091ea:	4a2e      	ldr	r2, [pc, #184]	@ (80092a4 <xTaskIncrementTick+0x15c>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091f0:	e02e      	b.n	8009250 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fd9b 	bl	8007d32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3318      	adds	r3, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fd92 	bl	8007d32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	2201      	movs	r2, #1
 8009214:	409a      	lsls	r2, r3
 8009216:	4b24      	ldr	r3, [pc, #144]	@ (80092a8 <xTaskIncrementTick+0x160>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4313      	orrs	r3, r2
 800921c:	4a22      	ldr	r2, [pc, #136]	@ (80092a8 <xTaskIncrementTick+0x160>)
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a1f      	ldr	r2, [pc, #124]	@ (80092ac <xTaskIncrementTick+0x164>)
 800922e:	441a      	add	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3304      	adds	r3, #4
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f7fe fd1e 	bl	8007c78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4b1b      	ldr	r3, [pc, #108]	@ (80092b0 <xTaskIncrementTick+0x168>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d3b9      	bcc.n	80091be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800924e:	e7b6      	b.n	80091be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009250:	4b17      	ldr	r3, [pc, #92]	@ (80092b0 <xTaskIncrementTick+0x168>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	4915      	ldr	r1, [pc, #84]	@ (80092ac <xTaskIncrementTick+0x164>)
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d901      	bls.n	800926c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009268:	2301      	movs	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800926c:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <xTaskIncrementTick+0x16c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d007      	beq.n	8009284 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	e004      	b.n	8009284 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <xTaskIncrementTick+0x170>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	4a0d      	ldr	r2, [pc, #52]	@ (80092b8 <xTaskIncrementTick+0x170>)
 8009282:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009284:	697b      	ldr	r3, [r7, #20]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	2000155c 	.word	0x2000155c
 8009294:	20001538 	.word	0x20001538
 8009298:	200014ec 	.word	0x200014ec
 800929c:	200014f0 	.word	0x200014f0
 80092a0:	2000154c 	.word	0x2000154c
 80092a4:	20001554 	.word	0x20001554
 80092a8:	2000153c 	.word	0x2000153c
 80092ac:	20001438 	.word	0x20001438
 80092b0:	20001434 	.word	0x20001434
 80092b4:	20001548 	.word	0x20001548
 80092b8:	20001544 	.word	0x20001544

080092bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092c2:	4b2a      	ldr	r3, [pc, #168]	@ (800936c <vTaskSwitchContext+0xb0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ca:	4b29      	ldr	r3, [pc, #164]	@ (8009370 <vTaskSwitchContext+0xb4>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d0:	e045      	b.n	800935e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80092d2:	4b27      	ldr	r3, [pc, #156]	@ (8009370 <vTaskSwitchContext+0xb4>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d8:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <vTaskSwitchContext+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	fab3 f383 	clz	r3, r3
 80092e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	f1c3 031f 	rsb	r3, r3, #31
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	4922      	ldr	r1, [pc, #136]	@ (8009378 <vTaskSwitchContext+0xbc>)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	440b      	add	r3, r1
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	607b      	str	r3, [r7, #4]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <vTaskSwitchContext+0x5a>
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <vTaskSwitchContext+0xbc>)
 8009326:	4413      	add	r3, r2
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	605a      	str	r2, [r3, #4]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	3308      	adds	r3, #8
 800933c:	429a      	cmp	r2, r3
 800933e:	d104      	bne.n	800934a <vTaskSwitchContext+0x8e>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4a0a      	ldr	r2, [pc, #40]	@ (800937c <vTaskSwitchContext+0xc0>)
 8009352:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009354:	4b09      	ldr	r3, [pc, #36]	@ (800937c <vTaskSwitchContext+0xc0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	334c      	adds	r3, #76	@ 0x4c
 800935a:	4a09      	ldr	r2, [pc, #36]	@ (8009380 <vTaskSwitchContext+0xc4>)
 800935c:	6013      	str	r3, [r2, #0]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	2000155c 	.word	0x2000155c
 8009370:	20001548 	.word	0x20001548
 8009374:	2000153c 	.word	0x2000153c
 8009378:	20001438 	.word	0x20001438
 800937c:	20001434 	.word	0x20001434
 8009380:	2000002c 	.word	0x2000002c

08009384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10b      	bne.n	80093ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	e7fd      	b.n	80093a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ac:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <vTaskPlaceOnEventList+0x48>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3318      	adds	r3, #24
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fc83 	bl	8007cc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093ba:	2101      	movs	r1, #1
 80093bc:	6838      	ldr	r0, [r7, #0]
 80093be:	f000 fb6d 	bl	8009a9c <prvAddCurrentTaskToDelayedList>
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001434 	.word	0x20001434

080093d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10b      	bne.n	80093fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	3318      	adds	r3, #24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fc95 	bl	8007d32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009408:	4b1d      	ldr	r3, [pc, #116]	@ (8009480 <xTaskRemoveFromEventList+0xb0>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d11c      	bne.n	800944a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fc8c 	bl	8007d32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	2201      	movs	r2, #1
 8009420:	409a      	lsls	r2, r3
 8009422:	4b18      	ldr	r3, [pc, #96]	@ (8009484 <xTaskRemoveFromEventList+0xb4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4313      	orrs	r3, r2
 8009428:	4a16      	ldr	r2, [pc, #88]	@ (8009484 <xTaskRemoveFromEventList+0xb4>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4a13      	ldr	r2, [pc, #76]	@ (8009488 <xTaskRemoveFromEventList+0xb8>)
 800943a:	441a      	add	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe fc18 	bl	8007c78 <vListInsertEnd>
 8009448:	e005      	b.n	8009456 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	3318      	adds	r3, #24
 800944e:	4619      	mov	r1, r3
 8009450:	480e      	ldr	r0, [pc, #56]	@ (800948c <xTaskRemoveFromEventList+0xbc>)
 8009452:	f7fe fc11 	bl	8007c78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <xTaskRemoveFromEventList+0xc0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009460:	429a      	cmp	r2, r3
 8009462:	d905      	bls.n	8009470 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009468:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <xTaskRemoveFromEventList+0xc4>)
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e001      	b.n	8009474 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009474:	697b      	ldr	r3, [r7, #20]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	2000155c 	.word	0x2000155c
 8009484:	2000153c 	.word	0x2000153c
 8009488:	20001438 	.word	0x20001438
 800948c:	200014f4 	.word	0x200014f4
 8009490:	20001434 	.word	0x20001434
 8009494:	20001548 	.word	0x20001548

08009498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094a0:	4b06      	ldr	r3, [pc, #24]	@ (80094bc <vTaskInternalSetTimeOutState+0x24>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094a8:	4b05      	ldr	r3, [pc, #20]	@ (80094c0 <vTaskInternalSetTimeOutState+0x28>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	605a      	str	r2, [r3, #4]
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	2000154c 	.word	0x2000154c
 80094c0:	20001538 	.word	0x20001538

080094c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	613b      	str	r3, [r7, #16]
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	e7fd      	b.n	80094e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10b      	bne.n	800950a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	60fb      	str	r3, [r7, #12]
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	e7fd      	b.n	8009506 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800950a:	f000 fc5d 	bl	8009dc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800950e:	4b1d      	ldr	r3, [pc, #116]	@ (8009584 <xTaskCheckForTimeOut+0xc0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d102      	bne.n	800952e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009528:	2300      	movs	r3, #0
 800952a:	61fb      	str	r3, [r7, #28]
 800952c:	e023      	b.n	8009576 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b15      	ldr	r3, [pc, #84]	@ (8009588 <xTaskCheckForTimeOut+0xc4>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d007      	beq.n	800954a <xTaskCheckForTimeOut+0x86>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d302      	bcc.n	800954a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	e015      	b.n	8009576 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	429a      	cmp	r2, r3
 8009552:	d20b      	bcs.n	800956c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7ff ff99 	bl	8009498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	61fb      	str	r3, [r7, #28]
 800956a:	e004      	b.n	8009576 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009572:	2301      	movs	r3, #1
 8009574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009576:	f000 fc59 	bl	8009e2c <vPortExitCritical>

	return xReturn;
 800957a:	69fb      	ldr	r3, [r7, #28]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3720      	adds	r7, #32
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20001538 	.word	0x20001538
 8009588:	2000154c 	.word	0x2000154c

0800958c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009590:	4b03      	ldr	r3, [pc, #12]	@ (80095a0 <vTaskMissedYield+0x14>)
 8009592:	2201      	movs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]
}
 8009596:	bf00      	nop
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	20001548 	.word	0x20001548

080095a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095ac:	f000 f852 	bl	8009654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095b0:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <prvIdleTask+0x28>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d9f9      	bls.n	80095ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80095b8:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <prvIdleTask+0x2c>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095c8:	e7f0      	b.n	80095ac <prvIdleTask+0x8>
 80095ca:	bf00      	nop
 80095cc:	20001438 	.word	0x20001438
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095da:	2300      	movs	r3, #0
 80095dc:	607b      	str	r3, [r7, #4]
 80095de:	e00c      	b.n	80095fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4a12      	ldr	r2, [pc, #72]	@ (8009634 <prvInitialiseTaskLists+0x60>)
 80095ec:	4413      	add	r3, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fb15 	bl	8007c1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3301      	adds	r3, #1
 80095f8:	607b      	str	r3, [r7, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b06      	cmp	r3, #6
 80095fe:	d9ef      	bls.n	80095e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009600:	480d      	ldr	r0, [pc, #52]	@ (8009638 <prvInitialiseTaskLists+0x64>)
 8009602:	f7fe fb0c 	bl	8007c1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009606:	480d      	ldr	r0, [pc, #52]	@ (800963c <prvInitialiseTaskLists+0x68>)
 8009608:	f7fe fb09 	bl	8007c1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800960c:	480c      	ldr	r0, [pc, #48]	@ (8009640 <prvInitialiseTaskLists+0x6c>)
 800960e:	f7fe fb06 	bl	8007c1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009612:	480c      	ldr	r0, [pc, #48]	@ (8009644 <prvInitialiseTaskLists+0x70>)
 8009614:	f7fe fb03 	bl	8007c1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009618:	480b      	ldr	r0, [pc, #44]	@ (8009648 <prvInitialiseTaskLists+0x74>)
 800961a:	f7fe fb00 	bl	8007c1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800961e:	4b0b      	ldr	r3, [pc, #44]	@ (800964c <prvInitialiseTaskLists+0x78>)
 8009620:	4a05      	ldr	r2, [pc, #20]	@ (8009638 <prvInitialiseTaskLists+0x64>)
 8009622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009624:	4b0a      	ldr	r3, [pc, #40]	@ (8009650 <prvInitialiseTaskLists+0x7c>)
 8009626:	4a05      	ldr	r2, [pc, #20]	@ (800963c <prvInitialiseTaskLists+0x68>)
 8009628:	601a      	str	r2, [r3, #0]
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20001438 	.word	0x20001438
 8009638:	200014c4 	.word	0x200014c4
 800963c:	200014d8 	.word	0x200014d8
 8009640:	200014f4 	.word	0x200014f4
 8009644:	20001508 	.word	0x20001508
 8009648:	20001520 	.word	0x20001520
 800964c:	200014ec 	.word	0x200014ec
 8009650:	200014f0 	.word	0x200014f0

08009654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800965a:	e019      	b.n	8009690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800965c:	f000 fbb4 	bl	8009dc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009660:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <prvCheckTasksWaitingTermination+0x50>)
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fb60 	bl	8007d32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009672:	4b0d      	ldr	r3, [pc, #52]	@ (80096a8 <prvCheckTasksWaitingTermination+0x54>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3b01      	subs	r3, #1
 8009678:	4a0b      	ldr	r2, [pc, #44]	@ (80096a8 <prvCheckTasksWaitingTermination+0x54>)
 800967a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800967c:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <prvCheckTasksWaitingTermination+0x58>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3b01      	subs	r3, #1
 8009682:	4a0a      	ldr	r2, [pc, #40]	@ (80096ac <prvCheckTasksWaitingTermination+0x58>)
 8009684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009686:	f000 fbd1 	bl	8009e2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f810 	bl	80096b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009690:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <prvCheckTasksWaitingTermination+0x58>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e1      	bne.n	800965c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20001508 	.word	0x20001508
 80096a8:	20001534 	.word	0x20001534
 80096ac:	2000151c 	.word	0x2000151c

080096b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	334c      	adds	r3, #76	@ 0x4c
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fc41 	bl	800af44 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fd6e 	bl	800a1a8 <vPortFree>
			vPortFree( pxTCB );
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fd6b 	bl	800a1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009714 <prvResetNextTaskUnblockTime+0x38>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009718 <prvResetNextTaskUnblockTime+0x3c>)
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295
 80096f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096f4:	e008      	b.n	8009708 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f6:	4b07      	ldr	r3, [pc, #28]	@ (8009714 <prvResetNextTaskUnblockTime+0x38>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	4a04      	ldr	r2, [pc, #16]	@ (8009718 <prvResetNextTaskUnblockTime+0x3c>)
 8009706:	6013      	str	r3, [r2, #0]
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	200014ec 	.word	0x200014ec
 8009718:	20001554 	.word	0x20001554

0800971c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <xTaskGetSchedulerState+0x34>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800972a:	2301      	movs	r3, #1
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	e008      	b.n	8009742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009730:	4b08      	ldr	r3, [pc, #32]	@ (8009754 <xTaskGetSchedulerState+0x38>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009738:	2302      	movs	r3, #2
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	e001      	b.n	8009742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800973e:	2300      	movs	r3, #0
 8009740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009742:	687b      	ldr	r3, [r7, #4]
	}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20001540 	.word	0x20001540
 8009754:	2000155c 	.word	0x2000155c

08009758 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d05e      	beq.n	800982c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009772:	4b31      	ldr	r3, [pc, #196]	@ (8009838 <xTaskPriorityInherit+0xe0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009778:	429a      	cmp	r2, r3
 800977a:	d24e      	bcs.n	800981a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	db06      	blt.n	8009792 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009784:	4b2c      	ldr	r3, [pc, #176]	@ (8009838 <xTaskPriorityInherit+0xe0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	f1c3 0207 	rsb	r2, r3, #7
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6959      	ldr	r1, [r3, #20]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4a26      	ldr	r2, [pc, #152]	@ (800983c <xTaskPriorityInherit+0xe4>)
 80097a4:	4413      	add	r3, r2
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d12f      	bne.n	800980a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fabf 	bl	8007d32 <uxListRemove>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097be:	2201      	movs	r2, #1
 80097c0:	fa02 f303 	lsl.w	r3, r2, r3
 80097c4:	43da      	mvns	r2, r3
 80097c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009840 <xTaskPriorityInherit+0xe8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009840 <xTaskPriorityInherit+0xe8>)
 80097ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097d0:	4b19      	ldr	r3, [pc, #100]	@ (8009838 <xTaskPriorityInherit+0xe0>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097de:	2201      	movs	r2, #1
 80097e0:	409a      	lsls	r2, r3
 80097e2:	4b17      	ldr	r3, [pc, #92]	@ (8009840 <xTaskPriorityInherit+0xe8>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	4a15      	ldr	r2, [pc, #84]	@ (8009840 <xTaskPriorityInherit+0xe8>)
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4a10      	ldr	r2, [pc, #64]	@ (800983c <xTaskPriorityInherit+0xe4>)
 80097fa:	441a      	add	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7fe fa38 	bl	8007c78 <vListInsertEnd>
 8009808:	e004      	b.n	8009814 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800980a:	4b0b      	ldr	r3, [pc, #44]	@ (8009838 <xTaskPriorityInherit+0xe0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009814:	2301      	movs	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e008      	b.n	800982c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800981e:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <xTaskPriorityInherit+0xe0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	429a      	cmp	r2, r3
 8009826:	d201      	bcs.n	800982c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009828:	2301      	movs	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800982c:	68fb      	ldr	r3, [r7, #12]
	}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20001434 	.word	0x20001434
 800983c:	20001438 	.word	0x20001438
 8009840:	2000153c 	.word	0x2000153c

08009844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d070      	beq.n	800993c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800985a:	4b3b      	ldr	r3, [pc, #236]	@ (8009948 <xTaskPriorityDisinherit+0x104>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	429a      	cmp	r2, r3
 8009862:	d00b      	beq.n	800987c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	60fb      	str	r3, [r7, #12]
}
 8009876:	bf00      	nop
 8009878:	bf00      	nop
 800987a:	e7fd      	b.n	8009878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10b      	bne.n	800989c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60bb      	str	r3, [r7, #8]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a0:	1e5a      	subs	r2, r3, #1
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d044      	beq.n	800993c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d140      	bne.n	800993c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fa37 	bl	8007d32 <uxListRemove>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d115      	bne.n	80098f6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ce:	491f      	ldr	r1, [pc, #124]	@ (800994c <xTaskPriorityDisinherit+0x108>)
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTaskPriorityDisinherit+0xb2>
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e4:	2201      	movs	r2, #1
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	43da      	mvns	r2, r3
 80098ec:	4b18      	ldr	r3, [pc, #96]	@ (8009950 <xTaskPriorityDisinherit+0x10c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4013      	ands	r3, r2
 80098f2:	4a17      	ldr	r2, [pc, #92]	@ (8009950 <xTaskPriorityDisinherit+0x10c>)
 80098f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	f1c3 0207 	rsb	r2, r3, #7
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	2201      	movs	r2, #1
 8009910:	409a      	lsls	r2, r3
 8009912:	4b0f      	ldr	r3, [pc, #60]	@ (8009950 <xTaskPriorityDisinherit+0x10c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4313      	orrs	r3, r2
 8009918:	4a0d      	ldr	r2, [pc, #52]	@ (8009950 <xTaskPriorityDisinherit+0x10c>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a08      	ldr	r2, [pc, #32]	@ (800994c <xTaskPriorityDisinherit+0x108>)
 800992a:	441a      	add	r2, r3
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe f9a0 	bl	8007c78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800993c:	697b      	ldr	r3, [r7, #20]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20001434 	.word	0x20001434
 800994c:	20001438 	.word	0x20001438
 8009950:	2000153c 	.word	0x2000153c

08009954 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d079      	beq.n	8009a60 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10b      	bne.n	800998c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60fb      	str	r3, [r7, #12]
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d902      	bls.n	800999c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	e002      	b.n	80099a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d059      	beq.n	8009a60 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d154      	bne.n	8009a60 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099b6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d10b      	bne.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60bb      	str	r3, [r7, #8]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	db04      	blt.n	80099f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	f1c3 0207 	rsb	r2, r3, #7
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	6959      	ldr	r1, [r3, #20]
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4a19      	ldr	r2, [pc, #100]	@ (8009a6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a06:	4413      	add	r3, r2
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d129      	bne.n	8009a60 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe f98e 	bl	8007d32 <uxListRemove>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a20:	2201      	movs	r2, #1
 8009a22:	fa02 f303 	lsl.w	r3, r2, r3
 8009a26:	43da      	mvns	r2, r3
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	4a10      	ldr	r2, [pc, #64]	@ (8009a70 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a30:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a36:	2201      	movs	r2, #1
 8009a38:	409a      	lsls	r2, r3
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	4a0b      	ldr	r2, [pc, #44]	@ (8009a70 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4a06      	ldr	r2, [pc, #24]	@ (8009a6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a52:	441a      	add	r2, r3
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fe f90c 	bl	8007c78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a60:	bf00      	nop
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20001434 	.word	0x20001434
 8009a6c:	20001438 	.word	0x20001438
 8009a70:	2000153c 	.word	0x2000153c

08009a74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a74:	b480      	push	{r7}
 8009a76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a78:	4b07      	ldr	r3, [pc, #28]	@ (8009a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a86:	3201      	adds	r2, #1
 8009a88:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009a8a:	4b03      	ldr	r3, [pc, #12]	@ (8009a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
	}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	20001434 	.word	0x20001434

08009a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aa6:	4b29      	ldr	r3, [pc, #164]	@ (8009b4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe f93d 	bl	8007d32 <uxListRemove>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10b      	bne.n	8009ad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009abe:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	43da      	mvns	r2, r3
 8009acc:	4b21      	ldr	r3, [pc, #132]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	4a20      	ldr	r2, [pc, #128]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d10a      	bne.n	8009af4 <prvAddCurrentTaskToDelayedList+0x58>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	481a      	ldr	r0, [pc, #104]	@ (8009b58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009aee:	f7fe f8c3 	bl	8007c78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009af2:	e026      	b.n	8009b42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4413      	add	r3, r2
 8009afa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009afc:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d209      	bcs.n	8009b20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b0c:	4b13      	ldr	r3, [pc, #76]	@ (8009b5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	4b0f      	ldr	r3, [pc, #60]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7fe f8d1 	bl	8007cc0 <vListInsert>
}
 8009b1e:	e010      	b.n	8009b42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b20:	4b0f      	ldr	r3, [pc, #60]	@ (8009b60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	4b0a      	ldr	r3, [pc, #40]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f7fe f8c7 	bl	8007cc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b32:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d202      	bcs.n	8009b42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b3c:	4a09      	ldr	r2, [pc, #36]	@ (8009b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	6013      	str	r3, [r2, #0]
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20001538 	.word	0x20001538
 8009b50:	20001434 	.word	0x20001434
 8009b54:	2000153c 	.word	0x2000153c
 8009b58:	20001520 	.word	0x20001520
 8009b5c:	200014f0 	.word	0x200014f0
 8009b60:	200014ec 	.word	0x200014ec
 8009b64:	20001554 	.word	0x20001554

08009b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3b04      	subs	r3, #4
 8009b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f023 0201 	bic.w	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b98:	4a0c      	ldr	r2, [pc, #48]	@ (8009bcc <pxPortInitialiseStack+0x64>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3b14      	subs	r3, #20
 8009ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3b04      	subs	r3, #4
 8009bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f06f 0202 	mvn.w	r2, #2
 8009bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3b20      	subs	r3, #32
 8009bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	08009bd1 	.word	0x08009bd1

08009bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bda:	4b13      	ldr	r3, [pc, #76]	@ (8009c28 <prvTaskExitError+0x58>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d00b      	beq.n	8009bfc <prvTaskExitError+0x2c>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <prvTaskExitError+0x28>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	60bb      	str	r3, [r7, #8]
}
 8009c0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c10:	bf00      	nop
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0fc      	beq.n	8009c12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	2000001c 	.word	0x2000001c
 8009c2c:	00000000 	.word	0x00000000

08009c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c30:	4b07      	ldr	r3, [pc, #28]	@ (8009c50 <pxCurrentTCBConst2>)
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f380 8809 	msr	PSP, r0
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	4770      	bx	lr
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst2>:
 8009c50:	20001434 	.word	0x20001434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c58:	4808      	ldr	r0, [pc, #32]	@ (8009c7c <prvPortStartFirstTask+0x24>)
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f380 8808 	msr	MSP, r0
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8814 	msr	CONTROL, r0
 8009c6a:	b662      	cpsie	i
 8009c6c:	b661      	cpsie	f
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	df00      	svc	0
 8009c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed08 	.word	0xe000ed08

08009c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c86:	4b47      	ldr	r3, [pc, #284]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a47      	ldr	r2, [pc, #284]	@ (8009da8 <xPortStartScheduler+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10b      	bne.n	8009ca8 <xPortStartScheduler+0x28>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	60fb      	str	r3, [r7, #12]
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8009da4 <xPortStartScheduler+0x124>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a3f      	ldr	r2, [pc, #252]	@ (8009dac <xPortStartScheduler+0x12c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10b      	bne.n	8009cca <xPortStartScheduler+0x4a>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	613b      	str	r3, [r7, #16]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cca:	4b39      	ldr	r3, [pc, #228]	@ (8009db0 <xPortStartScheduler+0x130>)
 8009ccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	22ff      	movs	r2, #255	@ 0xff
 8009cda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	4b31      	ldr	r3, [pc, #196]	@ (8009db4 <xPortStartScheduler+0x134>)
 8009cf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cf2:	4b31      	ldr	r3, [pc, #196]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cf4:	2207      	movs	r2, #7
 8009cf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf8:	e009      	b.n	8009d0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	4a2d      	ldr	r2, [pc, #180]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d0e:	78fb      	ldrb	r3, [r7, #3]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d0ef      	beq.n	8009cfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d1a:	4b27      	ldr	r3, [pc, #156]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f1c3 0307 	rsb	r3, r3, #7
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d00b      	beq.n	8009d3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	4a1c      	ldr	r2, [pc, #112]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d48:	4b1b      	ldr	r3, [pc, #108]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d50:	4a19      	ldr	r2, [pc, #100]	@ (8009db8 <xPortStartScheduler+0x138>)
 8009d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d5c:	4b17      	ldr	r3, [pc, #92]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a16      	ldr	r2, [pc, #88]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d68:	4b14      	ldr	r3, [pc, #80]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a13      	ldr	r2, [pc, #76]	@ (8009dbc <xPortStartScheduler+0x13c>)
 8009d6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d74:	f000 f8da 	bl	8009f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d78:	4b11      	ldr	r3, [pc, #68]	@ (8009dc0 <xPortStartScheduler+0x140>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d7e:	f000 f8f9 	bl	8009f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d82:	4b10      	ldr	r3, [pc, #64]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a0f      	ldr	r2, [pc, #60]	@ (8009dc4 <xPortStartScheduler+0x144>)
 8009d88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d8e:	f7ff ff63 	bl	8009c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d92:	f7ff fa93 	bl	80092bc <vTaskSwitchContext>
	prvTaskExitError();
 8009d96:	f7ff ff1b 	bl	8009bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed00 	.word	0xe000ed00
 8009da8:	410fc271 	.word	0x410fc271
 8009dac:	410fc270 	.word	0x410fc270
 8009db0:	e000e400 	.word	0xe000e400
 8009db4:	20001560 	.word	0x20001560
 8009db8:	20001564 	.word	0x20001564
 8009dbc:	e000ed20 	.word	0xe000ed20
 8009dc0:	2000001c 	.word	0x2000001c
 8009dc4:	e000ef34 	.word	0xe000ef34

08009dc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3301      	adds	r3, #1
 8009de8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dec:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <vPortEnterCritical+0x5c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d110      	bne.n	8009e16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009df4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e28 <vPortEnterCritical+0x60>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	603b      	str	r3, [r7, #0]
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	e7fd      	b.n	8009e12 <vPortEnterCritical+0x4a>
	}
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	2000001c 	.word	0x2000001c
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e32:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <vPortExitCritical+0x26>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	607b      	str	r3, [r7, #4]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e52:	4b0a      	ldr	r3, [pc, #40]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <vPortExitCritical+0x50>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <vPortExitCritical+0x44>
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f383 8811 	msr	BASEPRI, r3
}
 8009e6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	2000001c 	.word	0x2000001c

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b15      	ldr	r3, [pc, #84]	@ (8009ee0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f01e 0f10 	tst.w	lr, #16
 8009e90:	bf08      	it	eq
 8009e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ea4:	f380 8811 	msr	BASEPRI, r0
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f7ff fa04 	bl	80092bc <vTaskSwitchContext>
 8009eb4:	f04f 0000 	mov.w	r0, #0
 8009eb8:	f380 8811 	msr	BASEPRI, r0
 8009ebc:	bc09      	pop	{r0, r3}
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f01e 0f10 	tst.w	lr, #16
 8009eca:	bf08      	it	eq
 8009ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ed0:	f380 8809 	msr	PSP, r0
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst>:
 8009ee0:	20001434 	.word	0x20001434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f02:	f7ff f921 	bl	8009148 <xTaskIncrementTick>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	@ (8009f28 <SysTick_Handler+0x40>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <vPortSetupTimerInterrupt+0x38>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <vPortSetupTimerInterrupt+0x3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	@ (8009f6c <vPortSetupTimerInterrupt+0x40>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <vPortSetupTimerInterrupt+0x44>)
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010
 8009f64:	e000e018 	.word	0xe000e018
 8009f68:	20000010 	.word	0x20000010
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f84 <vPortEnableVFP+0x10>
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f7e:	6001      	str	r1, [r0, #0]
 8009f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e000ed88 	.word	0xe000ed88

08009f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d915      	bls.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f9a:	4a18      	ldr	r2, [pc, #96]	@ (8009ffc <vPortValidateInterruptPriority+0x74>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fa4:	4b16      	ldr	r3, [pc, #88]	@ (800a000 <vPortValidateInterruptPriority+0x78>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20b      	bcs.n	8009fc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	@ (800a004 <vPortValidateInterruptPriority+0x7c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fce:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <vPortValidateInterruptPriority+0x80>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d90b      	bls.n	8009fee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	603b      	str	r3, [r7, #0]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <vPortValidateInterruptPriority+0x62>
	}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	e000e3f0 	.word	0xe000e3f0
 800a000:	20001560 	.word	0x20001560
 800a004:	e000ed0c 	.word	0xe000ed0c
 800a008:	20001564 	.word	0x20001564

0800a00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	@ 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a018:	f7fe ffea 	bl	8008ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <pvPortMalloc+0x184>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a024:	f000 f924 	bl	800a270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a028:	4b5a      	ldr	r3, [pc, #360]	@ (800a194 <pvPortMalloc+0x188>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 8095 	bne.w	800a160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01e      	beq.n	800a07a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a03c:	2208      	movs	r2, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4413      	add	r3, r2
 800a042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d015      	beq.n	800a07a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <pvPortMalloc+0x6e>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	617b      	str	r3, [r7, #20]
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d06f      	beq.n	800a160 <pvPortMalloc+0x154>
 800a080:	4b45      	ldr	r3, [pc, #276]	@ (800a198 <pvPortMalloc+0x18c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d86a      	bhi.n	800a160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a08a:	4b44      	ldr	r3, [pc, #272]	@ (800a19c <pvPortMalloc+0x190>)
 800a08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a08e:	4b43      	ldr	r3, [pc, #268]	@ (800a19c <pvPortMalloc+0x190>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a094:	e004      	b.n	800a0a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d903      	bls.n	800a0b2 <pvPortMalloc+0xa6>
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f1      	bne.n	800a096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0b2:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <pvPortMalloc+0x184>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d051      	beq.n	800a160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	4413      	add	r3, r2
 800a0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d920      	bls.n	800a120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <pvPortMalloc+0xfc>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a11a:	69b8      	ldr	r0, [r7, #24]
 800a11c:	f000 f90a 	bl	800a334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <pvPortMalloc+0x18c>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	4a1b      	ldr	r2, [pc, #108]	@ (800a198 <pvPortMalloc+0x18c>)
 800a12c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <pvPortMalloc+0x18c>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d203      	bcs.n	800a142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a13a:	4b17      	ldr	r3, [pc, #92]	@ (800a198 <pvPortMalloc+0x18c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <pvPortMalloc+0x194>)
 800a140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <pvPortMalloc+0x188>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a156:	4b13      	ldr	r3, [pc, #76]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <pvPortMalloc+0x198>)
 800a15e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a160:	f7fe ff54 	bl	800900c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <pvPortMalloc+0x17a>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <pvPortMalloc+0x176>
	return pvReturn;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3728      	adds	r7, #40	@ 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20003574 	.word	0x20003574
 800a194:	20003588 	.word	0x20003588
 800a198:	20003578 	.word	0x20003578
 800a19c:	2000356c 	.word	0x2000356c
 800a1a0:	2000357c 	.word	0x2000357c
 800a1a4:	20003580 	.word	0x20003580

0800a1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d04f      	beq.n	800a25a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	425b      	negs	r3, r3
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4b25      	ldr	r3, [pc, #148]	@ (800a264 <vPortFree+0xbc>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <vPortFree+0x46>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60fb      	str	r3, [r7, #12]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <vPortFree+0x66>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60bb      	str	r3, [r7, #8]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	4b14      	ldr	r3, [pc, #80]	@ (800a264 <vPortFree+0xbc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01e      	beq.n	800a25a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d11a      	bne.n	800a25a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <vPortFree+0xbc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	43db      	mvns	r3, r3
 800a22e:	401a      	ands	r2, r3
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a234:	f7fe fedc 	bl	8008ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <vPortFree+0xc0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4413      	add	r3, r2
 800a242:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <vPortFree+0xc0>)
 800a244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f000 f874 	bl	800a334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <vPortFree+0xc4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3301      	adds	r3, #1
 800a252:	4a06      	ldr	r2, [pc, #24]	@ (800a26c <vPortFree+0xc4>)
 800a254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a256:	f7fe fed9 	bl	800900c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a25a:	bf00      	nop
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20003588 	.word	0x20003588
 800a268:	20003578 	.word	0x20003578
 800a26c:	20003584 	.word	0x20003584

0800a270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a276:	f242 0304 	movw	r3, #8196	@ 0x2004
 800a27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a27c:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <prvHeapInit+0xac>)
 800a27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3307      	adds	r3, #7
 800a28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 0307 	bic.w	r3, r3, #7
 800a296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	4a1f      	ldr	r2, [pc, #124]	@ (800a31c <prvHeapInit+0xac>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a320 <prvHeapInit+0xb0>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a320 <prvHeapInit+0xb0>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2bc:	2208      	movs	r2, #8
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2d2:	4b14      	ldr	r3, [pc, #80]	@ (800a324 <prvHeapInit+0xb4>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2da:	4b12      	ldr	r3, [pc, #72]	@ (800a324 <prvHeapInit+0xb4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	1ad2      	subs	r2, r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <prvHeapInit+0xb4>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a328 <prvHeapInit+0xb8>)
 800a2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	4a09      	ldr	r2, [pc, #36]	@ (800a32c <prvHeapInit+0xbc>)
 800a306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a308:	4b09      	ldr	r3, [pc, #36]	@ (800a330 <prvHeapInit+0xc0>)
 800a30a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a30e:	601a      	str	r2, [r3, #0]
}
 800a310:	bf00      	nop
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	20001568 	.word	0x20001568
 800a320:	2000356c 	.word	0x2000356c
 800a324:	20003574 	.word	0x20003574
 800a328:	2000357c 	.word	0x2000357c
 800a32c:	20003578 	.word	0x20003578
 800a330:	20003588 	.word	0x20003588

0800a334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a33c:	4b28      	ldr	r3, [pc, #160]	@ (800a3e0 <prvInsertBlockIntoFreeList+0xac>)
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e002      	b.n	800a348 <prvInsertBlockIntoFreeList+0x14>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d8f7      	bhi.n	800a342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d108      	bne.n	800a376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	441a      	add	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d118      	bne.n	800a3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d00d      	beq.n	800a3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	e008      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e003      	b.n	800a3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d002      	beq.n	800a3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	2000356c 	.word	0x2000356c
 800a3e4:	20003574 	.word	0x20003574

0800a3e8 <__cvt>:
 800a3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ec:	ec57 6b10 	vmov	r6, r7, d0
 800a3f0:	2f00      	cmp	r7, #0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	bfbb      	ittet	lt
 800a3fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a3fe:	461f      	movlt	r7, r3
 800a400:	2300      	movge	r3, #0
 800a402:	232d      	movlt	r3, #45	@ 0x2d
 800a404:	700b      	strb	r3, [r1, #0]
 800a406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a408:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a40c:	4691      	mov	r9, r2
 800a40e:	f023 0820 	bic.w	r8, r3, #32
 800a412:	bfbc      	itt	lt
 800a414:	4632      	movlt	r2, r6
 800a416:	4616      	movlt	r6, r2
 800a418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a41c:	d005      	beq.n	800a42a <__cvt+0x42>
 800a41e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a422:	d100      	bne.n	800a426 <__cvt+0x3e>
 800a424:	3401      	adds	r4, #1
 800a426:	2102      	movs	r1, #2
 800a428:	e000      	b.n	800a42c <__cvt+0x44>
 800a42a:	2103      	movs	r1, #3
 800a42c:	ab03      	add	r3, sp, #12
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	ab02      	add	r3, sp, #8
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	ec47 6b10 	vmov	d0, r6, r7
 800a438:	4653      	mov	r3, sl
 800a43a:	4622      	mov	r2, r4
 800a43c:	f000 fedc 	bl	800b1f8 <_dtoa_r>
 800a440:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a444:	4605      	mov	r5, r0
 800a446:	d119      	bne.n	800a47c <__cvt+0x94>
 800a448:	f019 0f01 	tst.w	r9, #1
 800a44c:	d00e      	beq.n	800a46c <__cvt+0x84>
 800a44e:	eb00 0904 	add.w	r9, r0, r4
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f6 fb5d 	bl	8000b18 <__aeabi_dcmpeq>
 800a45e:	b108      	cbz	r0, 800a464 <__cvt+0x7c>
 800a460:	f8cd 900c 	str.w	r9, [sp, #12]
 800a464:	2230      	movs	r2, #48	@ 0x30
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	454b      	cmp	r3, r9
 800a46a:	d31e      	bcc.n	800a4aa <__cvt+0xc2>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a470:	1b5b      	subs	r3, r3, r5
 800a472:	4628      	mov	r0, r5
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	b004      	add	sp, #16
 800a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a480:	eb00 0904 	add.w	r9, r0, r4
 800a484:	d1e5      	bne.n	800a452 <__cvt+0x6a>
 800a486:	7803      	ldrb	r3, [r0, #0]
 800a488:	2b30      	cmp	r3, #48	@ 0x30
 800a48a:	d10a      	bne.n	800a4a2 <__cvt+0xba>
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 fb40 	bl	8000b18 <__aeabi_dcmpeq>
 800a498:	b918      	cbnz	r0, 800a4a2 <__cvt+0xba>
 800a49a:	f1c4 0401 	rsb	r4, r4, #1
 800a49e:	f8ca 4000 	str.w	r4, [sl]
 800a4a2:	f8da 3000 	ldr.w	r3, [sl]
 800a4a6:	4499      	add	r9, r3
 800a4a8:	e7d3      	b.n	800a452 <__cvt+0x6a>
 800a4aa:	1c59      	adds	r1, r3, #1
 800a4ac:	9103      	str	r1, [sp, #12]
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	e7d9      	b.n	800a466 <__cvt+0x7e>

0800a4b2 <__exponent>:
 800a4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b4:	2900      	cmp	r1, #0
 800a4b6:	bfba      	itte	lt
 800a4b8:	4249      	neglt	r1, r1
 800a4ba:	232d      	movlt	r3, #45	@ 0x2d
 800a4bc:	232b      	movge	r3, #43	@ 0x2b
 800a4be:	2909      	cmp	r1, #9
 800a4c0:	7002      	strb	r2, [r0, #0]
 800a4c2:	7043      	strb	r3, [r0, #1]
 800a4c4:	dd29      	ble.n	800a51a <__exponent+0x68>
 800a4c6:	f10d 0307 	add.w	r3, sp, #7
 800a4ca:	461d      	mov	r5, r3
 800a4cc:	270a      	movs	r7, #10
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a4d4:	fb07 1416 	mls	r4, r7, r6, r1
 800a4d8:	3430      	adds	r4, #48	@ 0x30
 800a4da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2c63      	cmp	r4, #99	@ 0x63
 800a4e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	dcf1      	bgt.n	800a4ce <__exponent+0x1c>
 800a4ea:	3130      	adds	r1, #48	@ 0x30
 800a4ec:	1e94      	subs	r4, r2, #2
 800a4ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4f2:	1c41      	adds	r1, r0, #1
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	42ab      	cmp	r3, r5
 800a4f8:	d30a      	bcc.n	800a510 <__exponent+0x5e>
 800a4fa:	f10d 0309 	add.w	r3, sp, #9
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	42ac      	cmp	r4, r5
 800a502:	bf88      	it	hi
 800a504:	2300      	movhi	r3, #0
 800a506:	3302      	adds	r3, #2
 800a508:	4403      	add	r3, r0
 800a50a:	1a18      	subs	r0, r3, r0
 800a50c:	b003      	add	sp, #12
 800a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a510:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a514:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a518:	e7ed      	b.n	800a4f6 <__exponent+0x44>
 800a51a:	2330      	movs	r3, #48	@ 0x30
 800a51c:	3130      	adds	r1, #48	@ 0x30
 800a51e:	7083      	strb	r3, [r0, #2]
 800a520:	70c1      	strb	r1, [r0, #3]
 800a522:	1d03      	adds	r3, r0, #4
 800a524:	e7f1      	b.n	800a50a <__exponent+0x58>
	...

0800a528 <_printf_float>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	b08d      	sub	sp, #52	@ 0x34
 800a52e:	460c      	mov	r4, r1
 800a530:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a534:	4616      	mov	r6, r2
 800a536:	461f      	mov	r7, r3
 800a538:	4605      	mov	r5, r0
 800a53a:	f000 fcef 	bl	800af1c <_localeconv_r>
 800a53e:	6803      	ldr	r3, [r0, #0]
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	4618      	mov	r0, r3
 800a544:	f7f5 febc 	bl	80002c0 <strlen>
 800a548:	2300      	movs	r3, #0
 800a54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a54c:	f8d8 3000 	ldr.w	r3, [r8]
 800a550:	9005      	str	r0, [sp, #20]
 800a552:	3307      	adds	r3, #7
 800a554:	f023 0307 	bic.w	r3, r3, #7
 800a558:	f103 0208 	add.w	r2, r3, #8
 800a55c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a560:	f8d4 b000 	ldr.w	fp, [r4]
 800a564:	f8c8 2000 	str.w	r2, [r8]
 800a568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a56c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a570:	9307      	str	r3, [sp, #28]
 800a572:	f8cd 8018 	str.w	r8, [sp, #24]
 800a576:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a57a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a57e:	4b9c      	ldr	r3, [pc, #624]	@ (800a7f0 <_printf_float+0x2c8>)
 800a580:	f04f 32ff 	mov.w	r2, #4294967295
 800a584:	f7f6 fafa 	bl	8000b7c <__aeabi_dcmpun>
 800a588:	bb70      	cbnz	r0, 800a5e8 <_printf_float+0xc0>
 800a58a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a58e:	4b98      	ldr	r3, [pc, #608]	@ (800a7f0 <_printf_float+0x2c8>)
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	f7f6 fad4 	bl	8000b40 <__aeabi_dcmple>
 800a598:	bb30      	cbnz	r0, 800a5e8 <_printf_float+0xc0>
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	f7f6 fac3 	bl	8000b2c <__aeabi_dcmplt>
 800a5a6:	b110      	cbz	r0, 800a5ae <_printf_float+0x86>
 800a5a8:	232d      	movs	r3, #45	@ 0x2d
 800a5aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5ae:	4a91      	ldr	r2, [pc, #580]	@ (800a7f4 <_printf_float+0x2cc>)
 800a5b0:	4b91      	ldr	r3, [pc, #580]	@ (800a7f8 <_printf_float+0x2d0>)
 800a5b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5b6:	bf8c      	ite	hi
 800a5b8:	4690      	movhi	r8, r2
 800a5ba:	4698      	movls	r8, r3
 800a5bc:	2303      	movs	r3, #3
 800a5be:	6123      	str	r3, [r4, #16]
 800a5c0:	f02b 0304 	bic.w	r3, fp, #4
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	9700      	str	r7, [sp, #0]
 800a5cc:	4633      	mov	r3, r6
 800a5ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f000 f9d2 	bl	800a97c <_printf_common>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	f040 808d 	bne.w	800a6f8 <_printf_float+0x1d0>
 800a5de:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e2:	b00d      	add	sp, #52	@ 0x34
 800a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	f7f6 fac4 	bl	8000b7c <__aeabi_dcmpun>
 800a5f4:	b140      	cbz	r0, 800a608 <_printf_float+0xe0>
 800a5f6:	464b      	mov	r3, r9
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bfbc      	itt	lt
 800a5fc:	232d      	movlt	r3, #45	@ 0x2d
 800a5fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a602:	4a7e      	ldr	r2, [pc, #504]	@ (800a7fc <_printf_float+0x2d4>)
 800a604:	4b7e      	ldr	r3, [pc, #504]	@ (800a800 <_printf_float+0x2d8>)
 800a606:	e7d4      	b.n	800a5b2 <_printf_float+0x8a>
 800a608:	6863      	ldr	r3, [r4, #4]
 800a60a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a60e:	9206      	str	r2, [sp, #24]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	d13b      	bne.n	800a68c <_printf_float+0x164>
 800a614:	2306      	movs	r3, #6
 800a616:	6063      	str	r3, [r4, #4]
 800a618:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a61c:	2300      	movs	r3, #0
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	ab0a      	add	r3, sp, #40	@ 0x28
 800a624:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a628:	ab09      	add	r3, sp, #36	@ 0x24
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	6861      	ldr	r1, [r4, #4]
 800a62e:	ec49 8b10 	vmov	d0, r8, r9
 800a632:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a636:	4628      	mov	r0, r5
 800a638:	f7ff fed6 	bl	800a3e8 <__cvt>
 800a63c:	9b06      	ldr	r3, [sp, #24]
 800a63e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a640:	2b47      	cmp	r3, #71	@ 0x47
 800a642:	4680      	mov	r8, r0
 800a644:	d129      	bne.n	800a69a <_printf_float+0x172>
 800a646:	1cc8      	adds	r0, r1, #3
 800a648:	db02      	blt.n	800a650 <_printf_float+0x128>
 800a64a:	6863      	ldr	r3, [r4, #4]
 800a64c:	4299      	cmp	r1, r3
 800a64e:	dd41      	ble.n	800a6d4 <_printf_float+0x1ac>
 800a650:	f1aa 0a02 	sub.w	sl, sl, #2
 800a654:	fa5f fa8a 	uxtb.w	sl, sl
 800a658:	3901      	subs	r1, #1
 800a65a:	4652      	mov	r2, sl
 800a65c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a660:	9109      	str	r1, [sp, #36]	@ 0x24
 800a662:	f7ff ff26 	bl	800a4b2 <__exponent>
 800a666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a668:	1813      	adds	r3, r2, r0
 800a66a:	2a01      	cmp	r2, #1
 800a66c:	4681      	mov	r9, r0
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	dc02      	bgt.n	800a678 <_printf_float+0x150>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	07d2      	lsls	r2, r2, #31
 800a676:	d501      	bpl.n	800a67c <_printf_float+0x154>
 800a678:	3301      	adds	r3, #1
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0a2      	beq.n	800a5ca <_printf_float+0xa2>
 800a684:	232d      	movs	r3, #45	@ 0x2d
 800a686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68a:	e79e      	b.n	800a5ca <_printf_float+0xa2>
 800a68c:	9a06      	ldr	r2, [sp, #24]
 800a68e:	2a47      	cmp	r2, #71	@ 0x47
 800a690:	d1c2      	bne.n	800a618 <_printf_float+0xf0>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1c0      	bne.n	800a618 <_printf_float+0xf0>
 800a696:	2301      	movs	r3, #1
 800a698:	e7bd      	b.n	800a616 <_printf_float+0xee>
 800a69a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a69e:	d9db      	bls.n	800a658 <_printf_float+0x130>
 800a6a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6a4:	d118      	bne.n	800a6d8 <_printf_float+0x1b0>
 800a6a6:	2900      	cmp	r1, #0
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	dd0b      	ble.n	800a6c4 <_printf_float+0x19c>
 800a6ac:	6121      	str	r1, [r4, #16]
 800a6ae:	b913      	cbnz	r3, 800a6b6 <_printf_float+0x18e>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	07d0      	lsls	r0, r2, #31
 800a6b4:	d502      	bpl.n	800a6bc <_printf_float+0x194>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	440b      	add	r3, r1
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6be:	f04f 0900 	mov.w	r9, #0
 800a6c2:	e7db      	b.n	800a67c <_printf_float+0x154>
 800a6c4:	b913      	cbnz	r3, 800a6cc <_printf_float+0x1a4>
 800a6c6:	6822      	ldr	r2, [r4, #0]
 800a6c8:	07d2      	lsls	r2, r2, #31
 800a6ca:	d501      	bpl.n	800a6d0 <_printf_float+0x1a8>
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	e7f4      	b.n	800a6ba <_printf_float+0x192>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e7f2      	b.n	800a6ba <_printf_float+0x192>
 800a6d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a6d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6da:	4299      	cmp	r1, r3
 800a6dc:	db05      	blt.n	800a6ea <_printf_float+0x1c2>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	6121      	str	r1, [r4, #16]
 800a6e2:	07d8      	lsls	r0, r3, #31
 800a6e4:	d5ea      	bpl.n	800a6bc <_printf_float+0x194>
 800a6e6:	1c4b      	adds	r3, r1, #1
 800a6e8:	e7e7      	b.n	800a6ba <_printf_float+0x192>
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	bfd4      	ite	le
 800a6ee:	f1c1 0202 	rsble	r2, r1, #2
 800a6f2:	2201      	movgt	r2, #1
 800a6f4:	4413      	add	r3, r2
 800a6f6:	e7e0      	b.n	800a6ba <_printf_float+0x192>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	055a      	lsls	r2, r3, #21
 800a6fc:	d407      	bmi.n	800a70e <_printf_float+0x1e6>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	4642      	mov	r2, r8
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	47b8      	blx	r7
 800a708:	3001      	adds	r0, #1
 800a70a:	d12b      	bne.n	800a764 <_printf_float+0x23c>
 800a70c:	e767      	b.n	800a5de <_printf_float+0xb6>
 800a70e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a712:	f240 80dd 	bls.w	800a8d0 <_printf_float+0x3a8>
 800a716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	f7f6 f9fb 	bl	8000b18 <__aeabi_dcmpeq>
 800a722:	2800      	cmp	r0, #0
 800a724:	d033      	beq.n	800a78e <_printf_float+0x266>
 800a726:	4a37      	ldr	r2, [pc, #220]	@ (800a804 <_printf_float+0x2dc>)
 800a728:	2301      	movs	r3, #1
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f af54 	beq.w	800a5de <_printf_float+0xb6>
 800a736:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a73a:	4543      	cmp	r3, r8
 800a73c:	db02      	blt.n	800a744 <_printf_float+0x21c>
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	07d8      	lsls	r0, r3, #31
 800a742:	d50f      	bpl.n	800a764 <_printf_float+0x23c>
 800a744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a748:	4631      	mov	r1, r6
 800a74a:	4628      	mov	r0, r5
 800a74c:	47b8      	blx	r7
 800a74e:	3001      	adds	r0, #1
 800a750:	f43f af45 	beq.w	800a5de <_printf_float+0xb6>
 800a754:	f04f 0900 	mov.w	r9, #0
 800a758:	f108 38ff 	add.w	r8, r8, #4294967295
 800a75c:	f104 0a1a 	add.w	sl, r4, #26
 800a760:	45c8      	cmp	r8, r9
 800a762:	dc09      	bgt.n	800a778 <_printf_float+0x250>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	079b      	lsls	r3, r3, #30
 800a768:	f100 8103 	bmi.w	800a972 <_printf_float+0x44a>
 800a76c:	68e0      	ldr	r0, [r4, #12]
 800a76e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a770:	4298      	cmp	r0, r3
 800a772:	bfb8      	it	lt
 800a774:	4618      	movlt	r0, r3
 800a776:	e734      	b.n	800a5e2 <_printf_float+0xba>
 800a778:	2301      	movs	r3, #1
 800a77a:	4652      	mov	r2, sl
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	f43f af2b 	beq.w	800a5de <_printf_float+0xb6>
 800a788:	f109 0901 	add.w	r9, r9, #1
 800a78c:	e7e8      	b.n	800a760 <_printf_float+0x238>
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc39      	bgt.n	800a808 <_printf_float+0x2e0>
 800a794:	4a1b      	ldr	r2, [pc, #108]	@ (800a804 <_printf_float+0x2dc>)
 800a796:	2301      	movs	r3, #1
 800a798:	4631      	mov	r1, r6
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b8      	blx	r7
 800a79e:	3001      	adds	r0, #1
 800a7a0:	f43f af1d 	beq.w	800a5de <_printf_float+0xb6>
 800a7a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7a8:	ea59 0303 	orrs.w	r3, r9, r3
 800a7ac:	d102      	bne.n	800a7b4 <_printf_float+0x28c>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	07d9      	lsls	r1, r3, #31
 800a7b2:	d5d7      	bpl.n	800a764 <_printf_float+0x23c>
 800a7b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	47b8      	blx	r7
 800a7be:	3001      	adds	r0, #1
 800a7c0:	f43f af0d 	beq.w	800a5de <_printf_float+0xb6>
 800a7c4:	f04f 0a00 	mov.w	sl, #0
 800a7c8:	f104 0b1a 	add.w	fp, r4, #26
 800a7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ce:	425b      	negs	r3, r3
 800a7d0:	4553      	cmp	r3, sl
 800a7d2:	dc01      	bgt.n	800a7d8 <_printf_float+0x2b0>
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	e793      	b.n	800a700 <_printf_float+0x1d8>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	465a      	mov	r2, fp
 800a7dc:	4631      	mov	r1, r6
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f aefb 	beq.w	800a5de <_printf_float+0xb6>
 800a7e8:	f10a 0a01 	add.w	sl, sl, #1
 800a7ec:	e7ee      	b.n	800a7cc <_printf_float+0x2a4>
 800a7ee:	bf00      	nop
 800a7f0:	7fefffff 	.word	0x7fefffff
 800a7f4:	0800d238 	.word	0x0800d238
 800a7f8:	0800d234 	.word	0x0800d234
 800a7fc:	0800d240 	.word	0x0800d240
 800a800:	0800d23c 	.word	0x0800d23c
 800a804:	0800d244 	.word	0x0800d244
 800a808:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a80a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a80e:	4553      	cmp	r3, sl
 800a810:	bfa8      	it	ge
 800a812:	4653      	movge	r3, sl
 800a814:	2b00      	cmp	r3, #0
 800a816:	4699      	mov	r9, r3
 800a818:	dc36      	bgt.n	800a888 <_printf_float+0x360>
 800a81a:	f04f 0b00 	mov.w	fp, #0
 800a81e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a822:	f104 021a 	add.w	r2, r4, #26
 800a826:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a828:	9306      	str	r3, [sp, #24]
 800a82a:	eba3 0309 	sub.w	r3, r3, r9
 800a82e:	455b      	cmp	r3, fp
 800a830:	dc31      	bgt.n	800a896 <_printf_float+0x36e>
 800a832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a834:	459a      	cmp	sl, r3
 800a836:	dc3a      	bgt.n	800a8ae <_printf_float+0x386>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	07da      	lsls	r2, r3, #31
 800a83c:	d437      	bmi.n	800a8ae <_printf_float+0x386>
 800a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a840:	ebaa 0903 	sub.w	r9, sl, r3
 800a844:	9b06      	ldr	r3, [sp, #24]
 800a846:	ebaa 0303 	sub.w	r3, sl, r3
 800a84a:	4599      	cmp	r9, r3
 800a84c:	bfa8      	it	ge
 800a84e:	4699      	movge	r9, r3
 800a850:	f1b9 0f00 	cmp.w	r9, #0
 800a854:	dc33      	bgt.n	800a8be <_printf_float+0x396>
 800a856:	f04f 0800 	mov.w	r8, #0
 800a85a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a85e:	f104 0b1a 	add.w	fp, r4, #26
 800a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a864:	ebaa 0303 	sub.w	r3, sl, r3
 800a868:	eba3 0309 	sub.w	r3, r3, r9
 800a86c:	4543      	cmp	r3, r8
 800a86e:	f77f af79 	ble.w	800a764 <_printf_float+0x23c>
 800a872:	2301      	movs	r3, #1
 800a874:	465a      	mov	r2, fp
 800a876:	4631      	mov	r1, r6
 800a878:	4628      	mov	r0, r5
 800a87a:	47b8      	blx	r7
 800a87c:	3001      	adds	r0, #1
 800a87e:	f43f aeae 	beq.w	800a5de <_printf_float+0xb6>
 800a882:	f108 0801 	add.w	r8, r8, #1
 800a886:	e7ec      	b.n	800a862 <_printf_float+0x33a>
 800a888:	4642      	mov	r2, r8
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	d1c2      	bne.n	800a81a <_printf_float+0x2f2>
 800a894:	e6a3      	b.n	800a5de <_printf_float+0xb6>
 800a896:	2301      	movs	r3, #1
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	9206      	str	r2, [sp, #24]
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	f43f ae9c 	beq.w	800a5de <_printf_float+0xb6>
 800a8a6:	9a06      	ldr	r2, [sp, #24]
 800a8a8:	f10b 0b01 	add.w	fp, fp, #1
 800a8ac:	e7bb      	b.n	800a826 <_printf_float+0x2fe>
 800a8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d1c0      	bne.n	800a83e <_printf_float+0x316>
 800a8bc:	e68f      	b.n	800a5de <_printf_float+0xb6>
 800a8be:	9a06      	ldr	r2, [sp, #24]
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	4442      	add	r2, r8
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d1c3      	bne.n	800a856 <_printf_float+0x32e>
 800a8ce:	e686      	b.n	800a5de <_printf_float+0xb6>
 800a8d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8d4:	f1ba 0f01 	cmp.w	sl, #1
 800a8d8:	dc01      	bgt.n	800a8de <_printf_float+0x3b6>
 800a8da:	07db      	lsls	r3, r3, #31
 800a8dc:	d536      	bpl.n	800a94c <_printf_float+0x424>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4642      	mov	r2, r8
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f43f ae78 	beq.w	800a5de <_printf_float+0xb6>
 800a8ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b8      	blx	r7
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	f43f ae70 	beq.w	800a5de <_printf_float+0xb6>
 800a8fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a90a:	f7f6 f905 	bl	8000b18 <__aeabi_dcmpeq>
 800a90e:	b9c0      	cbnz	r0, 800a942 <_printf_float+0x41a>
 800a910:	4653      	mov	r3, sl
 800a912:	f108 0201 	add.w	r2, r8, #1
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	d10c      	bne.n	800a93a <_printf_float+0x412>
 800a920:	e65d      	b.n	800a5de <_printf_float+0xb6>
 800a922:	2301      	movs	r3, #1
 800a924:	465a      	mov	r2, fp
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f ae56 	beq.w	800a5de <_printf_float+0xb6>
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	45d0      	cmp	r8, sl
 800a938:	dbf3      	blt.n	800a922 <_printf_float+0x3fa>
 800a93a:	464b      	mov	r3, r9
 800a93c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a940:	e6df      	b.n	800a702 <_printf_float+0x1da>
 800a942:	f04f 0800 	mov.w	r8, #0
 800a946:	f104 0b1a 	add.w	fp, r4, #26
 800a94a:	e7f4      	b.n	800a936 <_printf_float+0x40e>
 800a94c:	2301      	movs	r3, #1
 800a94e:	4642      	mov	r2, r8
 800a950:	e7e1      	b.n	800a916 <_printf_float+0x3ee>
 800a952:	2301      	movs	r3, #1
 800a954:	464a      	mov	r2, r9
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae3e 	beq.w	800a5de <_printf_float+0xb6>
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a96a:	1a5b      	subs	r3, r3, r1
 800a96c:	4543      	cmp	r3, r8
 800a96e:	dcf0      	bgt.n	800a952 <_printf_float+0x42a>
 800a970:	e6fc      	b.n	800a76c <_printf_float+0x244>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	f104 0919 	add.w	r9, r4, #25
 800a97a:	e7f4      	b.n	800a966 <_printf_float+0x43e>

0800a97c <_printf_common>:
 800a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a980:	4616      	mov	r6, r2
 800a982:	4698      	mov	r8, r3
 800a984:	688a      	ldr	r2, [r1, #8]
 800a986:	690b      	ldr	r3, [r1, #16]
 800a988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	bfb8      	it	lt
 800a990:	4613      	movlt	r3, r2
 800a992:	6033      	str	r3, [r6, #0]
 800a994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a998:	4607      	mov	r7, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	b10a      	cbz	r2, 800a9a2 <_printf_common+0x26>
 800a99e:	3301      	adds	r3, #1
 800a9a0:	6033      	str	r3, [r6, #0]
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	0699      	lsls	r1, r3, #26
 800a9a6:	bf42      	ittt	mi
 800a9a8:	6833      	ldrmi	r3, [r6, #0]
 800a9aa:	3302      	addmi	r3, #2
 800a9ac:	6033      	strmi	r3, [r6, #0]
 800a9ae:	6825      	ldr	r5, [r4, #0]
 800a9b0:	f015 0506 	ands.w	r5, r5, #6
 800a9b4:	d106      	bne.n	800a9c4 <_printf_common+0x48>
 800a9b6:	f104 0a19 	add.w	sl, r4, #25
 800a9ba:	68e3      	ldr	r3, [r4, #12]
 800a9bc:	6832      	ldr	r2, [r6, #0]
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	dc26      	bgt.n	800aa12 <_printf_common+0x96>
 800a9c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	3b00      	subs	r3, #0
 800a9cc:	bf18      	it	ne
 800a9ce:	2301      	movne	r3, #1
 800a9d0:	0692      	lsls	r2, r2, #26
 800a9d2:	d42b      	bmi.n	800aa2c <_printf_common+0xb0>
 800a9d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9d8:	4641      	mov	r1, r8
 800a9da:	4638      	mov	r0, r7
 800a9dc:	47c8      	blx	r9
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d01e      	beq.n	800aa20 <_printf_common+0xa4>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	6922      	ldr	r2, [r4, #16]
 800a9e6:	f003 0306 	and.w	r3, r3, #6
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	bf02      	ittt	eq
 800a9ee:	68e5      	ldreq	r5, [r4, #12]
 800a9f0:	6833      	ldreq	r3, [r6, #0]
 800a9f2:	1aed      	subeq	r5, r5, r3
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	bf0c      	ite	eq
 800a9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9fc:	2500      	movne	r5, #0
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	bfc4      	itt	gt
 800aa02:	1a9b      	subgt	r3, r3, r2
 800aa04:	18ed      	addgt	r5, r5, r3
 800aa06:	2600      	movs	r6, #0
 800aa08:	341a      	adds	r4, #26
 800aa0a:	42b5      	cmp	r5, r6
 800aa0c:	d11a      	bne.n	800aa44 <_printf_common+0xc8>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	e008      	b.n	800aa24 <_printf_common+0xa8>
 800aa12:	2301      	movs	r3, #1
 800aa14:	4652      	mov	r2, sl
 800aa16:	4641      	mov	r1, r8
 800aa18:	4638      	mov	r0, r7
 800aa1a:	47c8      	blx	r9
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d103      	bne.n	800aa28 <_printf_common+0xac>
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295
 800aa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa28:	3501      	adds	r5, #1
 800aa2a:	e7c6      	b.n	800a9ba <_printf_common+0x3e>
 800aa2c:	18e1      	adds	r1, r4, r3
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	2030      	movs	r0, #48	@ 0x30
 800aa32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa36:	4422      	add	r2, r4
 800aa38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa40:	3302      	adds	r3, #2
 800aa42:	e7c7      	b.n	800a9d4 <_printf_common+0x58>
 800aa44:	2301      	movs	r3, #1
 800aa46:	4622      	mov	r2, r4
 800aa48:	4641      	mov	r1, r8
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	47c8      	blx	r9
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d0e6      	beq.n	800aa20 <_printf_common+0xa4>
 800aa52:	3601      	adds	r6, #1
 800aa54:	e7d9      	b.n	800aa0a <_printf_common+0x8e>
	...

0800aa58 <_printf_i>:
 800aa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	7e0f      	ldrb	r7, [r1, #24]
 800aa5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa60:	2f78      	cmp	r7, #120	@ 0x78
 800aa62:	4691      	mov	r9, r2
 800aa64:	4680      	mov	r8, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	469a      	mov	sl, r3
 800aa6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa6e:	d807      	bhi.n	800aa80 <_printf_i+0x28>
 800aa70:	2f62      	cmp	r7, #98	@ 0x62
 800aa72:	d80a      	bhi.n	800aa8a <_printf_i+0x32>
 800aa74:	2f00      	cmp	r7, #0
 800aa76:	f000 80d1 	beq.w	800ac1c <_printf_i+0x1c4>
 800aa7a:	2f58      	cmp	r7, #88	@ 0x58
 800aa7c:	f000 80b8 	beq.w	800abf0 <_printf_i+0x198>
 800aa80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa88:	e03a      	b.n	800ab00 <_printf_i+0xa8>
 800aa8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa8e:	2b15      	cmp	r3, #21
 800aa90:	d8f6      	bhi.n	800aa80 <_printf_i+0x28>
 800aa92:	a101      	add	r1, pc, #4	@ (adr r1, 800aa98 <_printf_i+0x40>)
 800aa94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa98:	0800aaf1 	.word	0x0800aaf1
 800aa9c:	0800ab05 	.word	0x0800ab05
 800aaa0:	0800aa81 	.word	0x0800aa81
 800aaa4:	0800aa81 	.word	0x0800aa81
 800aaa8:	0800aa81 	.word	0x0800aa81
 800aaac:	0800aa81 	.word	0x0800aa81
 800aab0:	0800ab05 	.word	0x0800ab05
 800aab4:	0800aa81 	.word	0x0800aa81
 800aab8:	0800aa81 	.word	0x0800aa81
 800aabc:	0800aa81 	.word	0x0800aa81
 800aac0:	0800aa81 	.word	0x0800aa81
 800aac4:	0800ac03 	.word	0x0800ac03
 800aac8:	0800ab2f 	.word	0x0800ab2f
 800aacc:	0800abbd 	.word	0x0800abbd
 800aad0:	0800aa81 	.word	0x0800aa81
 800aad4:	0800aa81 	.word	0x0800aa81
 800aad8:	0800ac25 	.word	0x0800ac25
 800aadc:	0800aa81 	.word	0x0800aa81
 800aae0:	0800ab2f 	.word	0x0800ab2f
 800aae4:	0800aa81 	.word	0x0800aa81
 800aae8:	0800aa81 	.word	0x0800aa81
 800aaec:	0800abc5 	.word	0x0800abc5
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	1d1a      	adds	r2, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6032      	str	r2, [r6, #0]
 800aaf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aafc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab00:	2301      	movs	r3, #1
 800ab02:	e09c      	b.n	800ac3e <_printf_i+0x1e6>
 800ab04:	6833      	ldr	r3, [r6, #0]
 800ab06:	6820      	ldr	r0, [r4, #0]
 800ab08:	1d19      	adds	r1, r3, #4
 800ab0a:	6031      	str	r1, [r6, #0]
 800ab0c:	0606      	lsls	r6, r0, #24
 800ab0e:	d501      	bpl.n	800ab14 <_printf_i+0xbc>
 800ab10:	681d      	ldr	r5, [r3, #0]
 800ab12:	e003      	b.n	800ab1c <_printf_i+0xc4>
 800ab14:	0645      	lsls	r5, r0, #25
 800ab16:	d5fb      	bpl.n	800ab10 <_printf_i+0xb8>
 800ab18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	da03      	bge.n	800ab28 <_printf_i+0xd0>
 800ab20:	232d      	movs	r3, #45	@ 0x2d
 800ab22:	426d      	negs	r5, r5
 800ab24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab28:	4858      	ldr	r0, [pc, #352]	@ (800ac8c <_printf_i+0x234>)
 800ab2a:	230a      	movs	r3, #10
 800ab2c:	e011      	b.n	800ab52 <_printf_i+0xfa>
 800ab2e:	6821      	ldr	r1, [r4, #0]
 800ab30:	6833      	ldr	r3, [r6, #0]
 800ab32:	0608      	lsls	r0, r1, #24
 800ab34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab38:	d402      	bmi.n	800ab40 <_printf_i+0xe8>
 800ab3a:	0649      	lsls	r1, r1, #25
 800ab3c:	bf48      	it	mi
 800ab3e:	b2ad      	uxthmi	r5, r5
 800ab40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab42:	4852      	ldr	r0, [pc, #328]	@ (800ac8c <_printf_i+0x234>)
 800ab44:	6033      	str	r3, [r6, #0]
 800ab46:	bf14      	ite	ne
 800ab48:	230a      	movne	r3, #10
 800ab4a:	2308      	moveq	r3, #8
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab52:	6866      	ldr	r6, [r4, #4]
 800ab54:	60a6      	str	r6, [r4, #8]
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	db05      	blt.n	800ab66 <_printf_i+0x10e>
 800ab5a:	6821      	ldr	r1, [r4, #0]
 800ab5c:	432e      	orrs	r6, r5
 800ab5e:	f021 0104 	bic.w	r1, r1, #4
 800ab62:	6021      	str	r1, [r4, #0]
 800ab64:	d04b      	beq.n	800abfe <_printf_i+0x1a6>
 800ab66:	4616      	mov	r6, r2
 800ab68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ab70:	5dc7      	ldrb	r7, [r0, r7]
 800ab72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab76:	462f      	mov	r7, r5
 800ab78:	42bb      	cmp	r3, r7
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	d9f4      	bls.n	800ab68 <_printf_i+0x110>
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d10b      	bne.n	800ab9a <_printf_i+0x142>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	07df      	lsls	r7, r3, #31
 800ab86:	d508      	bpl.n	800ab9a <_printf_i+0x142>
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	6861      	ldr	r1, [r4, #4]
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	bfde      	ittt	le
 800ab90:	2330      	movle	r3, #48	@ 0x30
 800ab92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab9a:	1b92      	subs	r2, r2, r6
 800ab9c:	6122      	str	r2, [r4, #16]
 800ab9e:	f8cd a000 	str.w	sl, [sp]
 800aba2:	464b      	mov	r3, r9
 800aba4:	aa03      	add	r2, sp, #12
 800aba6:	4621      	mov	r1, r4
 800aba8:	4640      	mov	r0, r8
 800abaa:	f7ff fee7 	bl	800a97c <_printf_common>
 800abae:	3001      	adds	r0, #1
 800abb0:	d14a      	bne.n	800ac48 <_printf_i+0x1f0>
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	b004      	add	sp, #16
 800abb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	f043 0320 	orr.w	r3, r3, #32
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	4832      	ldr	r0, [pc, #200]	@ (800ac90 <_printf_i+0x238>)
 800abc6:	2778      	movs	r7, #120	@ 0x78
 800abc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	6831      	ldr	r1, [r6, #0]
 800abd0:	061f      	lsls	r7, r3, #24
 800abd2:	f851 5b04 	ldr.w	r5, [r1], #4
 800abd6:	d402      	bmi.n	800abde <_printf_i+0x186>
 800abd8:	065f      	lsls	r7, r3, #25
 800abda:	bf48      	it	mi
 800abdc:	b2ad      	uxthmi	r5, r5
 800abde:	6031      	str	r1, [r6, #0]
 800abe0:	07d9      	lsls	r1, r3, #31
 800abe2:	bf44      	itt	mi
 800abe4:	f043 0320 	orrmi.w	r3, r3, #32
 800abe8:	6023      	strmi	r3, [r4, #0]
 800abea:	b11d      	cbz	r5, 800abf4 <_printf_i+0x19c>
 800abec:	2310      	movs	r3, #16
 800abee:	e7ad      	b.n	800ab4c <_printf_i+0xf4>
 800abf0:	4826      	ldr	r0, [pc, #152]	@ (800ac8c <_printf_i+0x234>)
 800abf2:	e7e9      	b.n	800abc8 <_printf_i+0x170>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	f023 0320 	bic.w	r3, r3, #32
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	e7f6      	b.n	800abec <_printf_i+0x194>
 800abfe:	4616      	mov	r6, r2
 800ac00:	e7bd      	b.n	800ab7e <_printf_i+0x126>
 800ac02:	6833      	ldr	r3, [r6, #0]
 800ac04:	6825      	ldr	r5, [r4, #0]
 800ac06:	6961      	ldr	r1, [r4, #20]
 800ac08:	1d18      	adds	r0, r3, #4
 800ac0a:	6030      	str	r0, [r6, #0]
 800ac0c:	062e      	lsls	r6, r5, #24
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	d501      	bpl.n	800ac16 <_printf_i+0x1be>
 800ac12:	6019      	str	r1, [r3, #0]
 800ac14:	e002      	b.n	800ac1c <_printf_i+0x1c4>
 800ac16:	0668      	lsls	r0, r5, #25
 800ac18:	d5fb      	bpl.n	800ac12 <_printf_i+0x1ba>
 800ac1a:	8019      	strh	r1, [r3, #0]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	4616      	mov	r6, r2
 800ac22:	e7bc      	b.n	800ab9e <_printf_i+0x146>
 800ac24:	6833      	ldr	r3, [r6, #0]
 800ac26:	1d1a      	adds	r2, r3, #4
 800ac28:	6032      	str	r2, [r6, #0]
 800ac2a:	681e      	ldr	r6, [r3, #0]
 800ac2c:	6862      	ldr	r2, [r4, #4]
 800ac2e:	2100      	movs	r1, #0
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7f5 faf5 	bl	8000220 <memchr>
 800ac36:	b108      	cbz	r0, 800ac3c <_printf_i+0x1e4>
 800ac38:	1b80      	subs	r0, r0, r6
 800ac3a:	6060      	str	r0, [r4, #4]
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	6123      	str	r3, [r4, #16]
 800ac40:	2300      	movs	r3, #0
 800ac42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac46:	e7aa      	b.n	800ab9e <_printf_i+0x146>
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	4640      	mov	r0, r8
 800ac50:	47d0      	blx	sl
 800ac52:	3001      	adds	r0, #1
 800ac54:	d0ad      	beq.n	800abb2 <_printf_i+0x15a>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	079b      	lsls	r3, r3, #30
 800ac5a:	d413      	bmi.n	800ac84 <_printf_i+0x22c>
 800ac5c:	68e0      	ldr	r0, [r4, #12]
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	4298      	cmp	r0, r3
 800ac62:	bfb8      	it	lt
 800ac64:	4618      	movlt	r0, r3
 800ac66:	e7a6      	b.n	800abb6 <_printf_i+0x15e>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4632      	mov	r2, r6
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	4640      	mov	r0, r8
 800ac70:	47d0      	blx	sl
 800ac72:	3001      	adds	r0, #1
 800ac74:	d09d      	beq.n	800abb2 <_printf_i+0x15a>
 800ac76:	3501      	adds	r5, #1
 800ac78:	68e3      	ldr	r3, [r4, #12]
 800ac7a:	9903      	ldr	r1, [sp, #12]
 800ac7c:	1a5b      	subs	r3, r3, r1
 800ac7e:	42ab      	cmp	r3, r5
 800ac80:	dcf2      	bgt.n	800ac68 <_printf_i+0x210>
 800ac82:	e7eb      	b.n	800ac5c <_printf_i+0x204>
 800ac84:	2500      	movs	r5, #0
 800ac86:	f104 0619 	add.w	r6, r4, #25
 800ac8a:	e7f5      	b.n	800ac78 <_printf_i+0x220>
 800ac8c:	0800d246 	.word	0x0800d246
 800ac90:	0800d257 	.word	0x0800d257

0800ac94 <std>:
 800ac94:	2300      	movs	r3, #0
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aca8:	81c2      	strh	r2, [r0, #14]
 800acaa:	6183      	str	r3, [r0, #24]
 800acac:	4619      	mov	r1, r3
 800acae:	2208      	movs	r2, #8
 800acb0:	305c      	adds	r0, #92	@ 0x5c
 800acb2:	f000 f92a 	bl	800af0a <memset>
 800acb6:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <std+0x58>)
 800acb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <std+0x5c>)
 800acbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <std+0x60>)
 800acc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acc2:	4b0d      	ldr	r3, [pc, #52]	@ (800acf8 <std+0x64>)
 800acc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acc6:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <std+0x68>)
 800acc8:	6224      	str	r4, [r4, #32]
 800acca:	429c      	cmp	r4, r3
 800accc:	d006      	beq.n	800acdc <std+0x48>
 800acce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acd2:	4294      	cmp	r4, r2
 800acd4:	d002      	beq.n	800acdc <std+0x48>
 800acd6:	33d0      	adds	r3, #208	@ 0xd0
 800acd8:	429c      	cmp	r4, r3
 800acda:	d105      	bne.n	800ace8 <std+0x54>
 800acdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ace0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace4:	f000 b9ec 	b.w	800b0c0 <__retarget_lock_init_recursive>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	0800ae85 	.word	0x0800ae85
 800acf0:	0800aea7 	.word	0x0800aea7
 800acf4:	0800aedf 	.word	0x0800aedf
 800acf8:	0800af03 	.word	0x0800af03
 800acfc:	2000358c 	.word	0x2000358c

0800ad00 <stdio_exit_handler>:
 800ad00:	4a02      	ldr	r2, [pc, #8]	@ (800ad0c <stdio_exit_handler+0xc>)
 800ad02:	4903      	ldr	r1, [pc, #12]	@ (800ad10 <stdio_exit_handler+0x10>)
 800ad04:	4803      	ldr	r0, [pc, #12]	@ (800ad14 <stdio_exit_handler+0x14>)
 800ad06:	f000 b869 	b.w	800addc <_fwalk_sglue>
 800ad0a:	bf00      	nop
 800ad0c:	20000020 	.word	0x20000020
 800ad10:	0800ca45 	.word	0x0800ca45
 800ad14:	20000030 	.word	0x20000030

0800ad18 <cleanup_stdio>:
 800ad18:	6841      	ldr	r1, [r0, #4]
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <cleanup_stdio+0x34>)
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	4604      	mov	r4, r0
 800ad22:	d001      	beq.n	800ad28 <cleanup_stdio+0x10>
 800ad24:	f001 fe8e 	bl	800ca44 <_fflush_r>
 800ad28:	68a1      	ldr	r1, [r4, #8]
 800ad2a:	4b09      	ldr	r3, [pc, #36]	@ (800ad50 <cleanup_stdio+0x38>)
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <cleanup_stdio+0x1e>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f001 fe87 	bl	800ca44 <_fflush_r>
 800ad36:	68e1      	ldr	r1, [r4, #12]
 800ad38:	4b06      	ldr	r3, [pc, #24]	@ (800ad54 <cleanup_stdio+0x3c>)
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	d004      	beq.n	800ad48 <cleanup_stdio+0x30>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad44:	f001 be7e 	b.w	800ca44 <_fflush_r>
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	bf00      	nop
 800ad4c:	2000358c 	.word	0x2000358c
 800ad50:	200035f4 	.word	0x200035f4
 800ad54:	2000365c 	.word	0x2000365c

0800ad58 <global_stdio_init.part.0>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad88 <global_stdio_init.part.0+0x30>)
 800ad5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad8c <global_stdio_init.part.0+0x34>)
 800ad5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad90 <global_stdio_init.part.0+0x38>)
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	4620      	mov	r0, r4
 800ad64:	2200      	movs	r2, #0
 800ad66:	2104      	movs	r1, #4
 800ad68:	f7ff ff94 	bl	800ac94 <std>
 800ad6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad70:	2201      	movs	r2, #1
 800ad72:	2109      	movs	r1, #9
 800ad74:	f7ff ff8e 	bl	800ac94 <std>
 800ad78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad82:	2112      	movs	r1, #18
 800ad84:	f7ff bf86 	b.w	800ac94 <std>
 800ad88:	200036c4 	.word	0x200036c4
 800ad8c:	2000358c 	.word	0x2000358c
 800ad90:	0800ad01 	.word	0x0800ad01

0800ad94 <__sfp_lock_acquire>:
 800ad94:	4801      	ldr	r0, [pc, #4]	@ (800ad9c <__sfp_lock_acquire+0x8>)
 800ad96:	f000 b994 	b.w	800b0c2 <__retarget_lock_acquire_recursive>
 800ad9a:	bf00      	nop
 800ad9c:	200036cd 	.word	0x200036cd

0800ada0 <__sfp_lock_release>:
 800ada0:	4801      	ldr	r0, [pc, #4]	@ (800ada8 <__sfp_lock_release+0x8>)
 800ada2:	f000 b98f 	b.w	800b0c4 <__retarget_lock_release_recursive>
 800ada6:	bf00      	nop
 800ada8:	200036cd 	.word	0x200036cd

0800adac <__sinit>:
 800adac:	b510      	push	{r4, lr}
 800adae:	4604      	mov	r4, r0
 800adb0:	f7ff fff0 	bl	800ad94 <__sfp_lock_acquire>
 800adb4:	6a23      	ldr	r3, [r4, #32]
 800adb6:	b11b      	cbz	r3, 800adc0 <__sinit+0x14>
 800adb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adbc:	f7ff bff0 	b.w	800ada0 <__sfp_lock_release>
 800adc0:	4b04      	ldr	r3, [pc, #16]	@ (800add4 <__sinit+0x28>)
 800adc2:	6223      	str	r3, [r4, #32]
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <__sinit+0x2c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1f5      	bne.n	800adb8 <__sinit+0xc>
 800adcc:	f7ff ffc4 	bl	800ad58 <global_stdio_init.part.0>
 800add0:	e7f2      	b.n	800adb8 <__sinit+0xc>
 800add2:	bf00      	nop
 800add4:	0800ad19 	.word	0x0800ad19
 800add8:	200036c4 	.word	0x200036c4

0800addc <_fwalk_sglue>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	4607      	mov	r7, r0
 800ade2:	4688      	mov	r8, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	2600      	movs	r6, #0
 800ade8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adec:	f1b9 0901 	subs.w	r9, r9, #1
 800adf0:	d505      	bpl.n	800adfe <_fwalk_sglue+0x22>
 800adf2:	6824      	ldr	r4, [r4, #0]
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	d1f7      	bne.n	800ade8 <_fwalk_sglue+0xc>
 800adf8:	4630      	mov	r0, r6
 800adfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfe:	89ab      	ldrh	r3, [r5, #12]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d907      	bls.n	800ae14 <_fwalk_sglue+0x38>
 800ae04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	d003      	beq.n	800ae14 <_fwalk_sglue+0x38>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4638      	mov	r0, r7
 800ae10:	47c0      	blx	r8
 800ae12:	4306      	orrs	r6, r0
 800ae14:	3568      	adds	r5, #104	@ 0x68
 800ae16:	e7e9      	b.n	800adec <_fwalk_sglue+0x10>

0800ae18 <sniprintf>:
 800ae18:	b40c      	push	{r2, r3}
 800ae1a:	b530      	push	{r4, r5, lr}
 800ae1c:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <sniprintf+0x68>)
 800ae1e:	1e0c      	subs	r4, r1, #0
 800ae20:	681d      	ldr	r5, [r3, #0]
 800ae22:	b09d      	sub	sp, #116	@ 0x74
 800ae24:	da08      	bge.n	800ae38 <sniprintf+0x20>
 800ae26:	238b      	movs	r3, #139	@ 0x8b
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	b01d      	add	sp, #116	@ 0x74
 800ae30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae34:	b002      	add	sp, #8
 800ae36:	4770      	bx	lr
 800ae38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ae46:	bf14      	ite	ne
 800ae48:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae4c:	4623      	moveq	r3, r4
 800ae4e:	9304      	str	r3, [sp, #16]
 800ae50:	9307      	str	r3, [sp, #28]
 800ae52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae56:	9002      	str	r0, [sp, #8]
 800ae58:	9006      	str	r0, [sp, #24]
 800ae5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae60:	ab21      	add	r3, sp, #132	@ 0x84
 800ae62:	a902      	add	r1, sp, #8
 800ae64:	4628      	mov	r0, r5
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	f001 fc6c 	bl	800c744 <_svfiprintf_r>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	bfbc      	itt	lt
 800ae70:	238b      	movlt	r3, #139	@ 0x8b
 800ae72:	602b      	strlt	r3, [r5, #0]
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d0da      	beq.n	800ae2e <sniprintf+0x16>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	e7d6      	b.n	800ae2e <sniprintf+0x16>
 800ae80:	2000002c 	.word	0x2000002c

0800ae84 <__sread>:
 800ae84:	b510      	push	{r4, lr}
 800ae86:	460c      	mov	r4, r1
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	f000 f8ca 	bl	800b024 <_read_r>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	bfab      	itete	ge
 800ae94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae96:	89a3      	ldrhlt	r3, [r4, #12]
 800ae98:	181b      	addge	r3, r3, r0
 800ae9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae9e:	bfac      	ite	ge
 800aea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aea2:	81a3      	strhlt	r3, [r4, #12]
 800aea4:	bd10      	pop	{r4, pc}

0800aea6 <__swrite>:
 800aea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeaa:	461f      	mov	r7, r3
 800aeac:	898b      	ldrh	r3, [r1, #12]
 800aeae:	05db      	lsls	r3, r3, #23
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4616      	mov	r6, r2
 800aeb6:	d505      	bpl.n	800aec4 <__swrite+0x1e>
 800aeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aebc:	2302      	movs	r3, #2
 800aebe:	2200      	movs	r2, #0
 800aec0:	f000 f89e 	bl	800b000 <_lseek_r>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	4632      	mov	r2, r6
 800aed2:	463b      	mov	r3, r7
 800aed4:	4628      	mov	r0, r5
 800aed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeda:	f000 b8b5 	b.w	800b048 <_write_r>

0800aede <__sseek>:
 800aede:	b510      	push	{r4, lr}
 800aee0:	460c      	mov	r4, r1
 800aee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee6:	f000 f88b 	bl	800b000 <_lseek_r>
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	bf15      	itete	ne
 800aef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aefa:	81a3      	strheq	r3, [r4, #12]
 800aefc:	bf18      	it	ne
 800aefe:	81a3      	strhne	r3, [r4, #12]
 800af00:	bd10      	pop	{r4, pc}

0800af02 <__sclose>:
 800af02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af06:	f000 b80d 	b.w	800af24 <_close_r>

0800af0a <memset>:
 800af0a:	4402      	add	r2, r0
 800af0c:	4603      	mov	r3, r0
 800af0e:	4293      	cmp	r3, r2
 800af10:	d100      	bne.n	800af14 <memset+0xa>
 800af12:	4770      	bx	lr
 800af14:	f803 1b01 	strb.w	r1, [r3], #1
 800af18:	e7f9      	b.n	800af0e <memset+0x4>
	...

0800af1c <_localeconv_r>:
 800af1c:	4800      	ldr	r0, [pc, #0]	@ (800af20 <_localeconv_r+0x4>)
 800af1e:	4770      	bx	lr
 800af20:	2000016c 	.word	0x2000016c

0800af24 <_close_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d06      	ldr	r5, [pc, #24]	@ (800af40 <_close_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f6 fee4 	bl	8001cfc <_close>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_close_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_close_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	200036c8 	.word	0x200036c8

0800af44 <_reclaim_reent>:
 800af44:	4b2d      	ldr	r3, [pc, #180]	@ (800affc <_reclaim_reent+0xb8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4283      	cmp	r3, r0
 800af4a:	b570      	push	{r4, r5, r6, lr}
 800af4c:	4604      	mov	r4, r0
 800af4e:	d053      	beq.n	800aff8 <_reclaim_reent+0xb4>
 800af50:	69c3      	ldr	r3, [r0, #28]
 800af52:	b31b      	cbz	r3, 800af9c <_reclaim_reent+0x58>
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	b163      	cbz	r3, 800af72 <_reclaim_reent+0x2e>
 800af58:	2500      	movs	r5, #0
 800af5a:	69e3      	ldr	r3, [r4, #28]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	5959      	ldr	r1, [r3, r5]
 800af60:	b9b1      	cbnz	r1, 800af90 <_reclaim_reent+0x4c>
 800af62:	3504      	adds	r5, #4
 800af64:	2d80      	cmp	r5, #128	@ 0x80
 800af66:	d1f8      	bne.n	800af5a <_reclaim_reent+0x16>
 800af68:	69e3      	ldr	r3, [r4, #28]
 800af6a:	4620      	mov	r0, r4
 800af6c:	68d9      	ldr	r1, [r3, #12]
 800af6e:	f000 ff13 	bl	800bd98 <_free_r>
 800af72:	69e3      	ldr	r3, [r4, #28]
 800af74:	6819      	ldr	r1, [r3, #0]
 800af76:	b111      	cbz	r1, 800af7e <_reclaim_reent+0x3a>
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 ff0d 	bl	800bd98 <_free_r>
 800af7e:	69e3      	ldr	r3, [r4, #28]
 800af80:	689d      	ldr	r5, [r3, #8]
 800af82:	b15d      	cbz	r5, 800af9c <_reclaim_reent+0x58>
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	682d      	ldr	r5, [r5, #0]
 800af8a:	f000 ff05 	bl	800bd98 <_free_r>
 800af8e:	e7f8      	b.n	800af82 <_reclaim_reent+0x3e>
 800af90:	680e      	ldr	r6, [r1, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	f000 ff00 	bl	800bd98 <_free_r>
 800af98:	4631      	mov	r1, r6
 800af9a:	e7e1      	b.n	800af60 <_reclaim_reent+0x1c>
 800af9c:	6961      	ldr	r1, [r4, #20]
 800af9e:	b111      	cbz	r1, 800afa6 <_reclaim_reent+0x62>
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fef9 	bl	800bd98 <_free_r>
 800afa6:	69e1      	ldr	r1, [r4, #28]
 800afa8:	b111      	cbz	r1, 800afb0 <_reclaim_reent+0x6c>
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 fef4 	bl	800bd98 <_free_r>
 800afb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800afb2:	b111      	cbz	r1, 800afba <_reclaim_reent+0x76>
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 feef 	bl	800bd98 <_free_r>
 800afba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afbc:	b111      	cbz	r1, 800afc4 <_reclaim_reent+0x80>
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 feea 	bl	800bd98 <_free_r>
 800afc4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800afc6:	b111      	cbz	r1, 800afce <_reclaim_reent+0x8a>
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fee5 	bl	800bd98 <_free_r>
 800afce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800afd0:	b111      	cbz	r1, 800afd8 <_reclaim_reent+0x94>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fee0 	bl	800bd98 <_free_r>
 800afd8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800afda:	b111      	cbz	r1, 800afe2 <_reclaim_reent+0x9e>
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 fedb 	bl	800bd98 <_free_r>
 800afe2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800afe4:	b111      	cbz	r1, 800afec <_reclaim_reent+0xa8>
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 fed6 	bl	800bd98 <_free_r>
 800afec:	6a23      	ldr	r3, [r4, #32]
 800afee:	b11b      	cbz	r3, 800aff8 <_reclaim_reent+0xb4>
 800aff0:	4620      	mov	r0, r4
 800aff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aff6:	4718      	bx	r3
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	bf00      	nop
 800affc:	2000002c 	.word	0x2000002c

0800b000 <_lseek_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d07      	ldr	r5, [pc, #28]	@ (800b020 <_lseek_r+0x20>)
 800b004:	4604      	mov	r4, r0
 800b006:	4608      	mov	r0, r1
 800b008:	4611      	mov	r1, r2
 800b00a:	2200      	movs	r2, #0
 800b00c:	602a      	str	r2, [r5, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	f7f6 fe9b 	bl	8001d4a <_lseek>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_lseek_r+0x1e>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_lseek_r+0x1e>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	200036c8 	.word	0x200036c8

0800b024 <_read_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4d07      	ldr	r5, [pc, #28]	@ (800b044 <_read_r+0x20>)
 800b028:	4604      	mov	r4, r0
 800b02a:	4608      	mov	r0, r1
 800b02c:	4611      	mov	r1, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	602a      	str	r2, [r5, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	f7f6 fe29 	bl	8001c8a <_read>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_read_r+0x1e>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_read_r+0x1e>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	200036c8 	.word	0x200036c8

0800b048 <_write_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	@ (800b068 <_write_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f6 fe34 	bl	8001cc4 <_write>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_write_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_write_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	200036c8 	.word	0x200036c8

0800b06c <__errno>:
 800b06c:	4b01      	ldr	r3, [pc, #4]	@ (800b074 <__errno+0x8>)
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	2000002c 	.word	0x2000002c

0800b078 <__libc_init_array>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	4d0d      	ldr	r5, [pc, #52]	@ (800b0b0 <__libc_init_array+0x38>)
 800b07c:	4c0d      	ldr	r4, [pc, #52]	@ (800b0b4 <__libc_init_array+0x3c>)
 800b07e:	1b64      	subs	r4, r4, r5
 800b080:	10a4      	asrs	r4, r4, #2
 800b082:	2600      	movs	r6, #0
 800b084:	42a6      	cmp	r6, r4
 800b086:	d109      	bne.n	800b09c <__libc_init_array+0x24>
 800b088:	4d0b      	ldr	r5, [pc, #44]	@ (800b0b8 <__libc_init_array+0x40>)
 800b08a:	4c0c      	ldr	r4, [pc, #48]	@ (800b0bc <__libc_init_array+0x44>)
 800b08c:	f002 f86a 	bl	800d164 <_init>
 800b090:	1b64      	subs	r4, r4, r5
 800b092:	10a4      	asrs	r4, r4, #2
 800b094:	2600      	movs	r6, #0
 800b096:	42a6      	cmp	r6, r4
 800b098:	d105      	bne.n	800b0a6 <__libc_init_array+0x2e>
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a0:	4798      	blx	r3
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	e7ee      	b.n	800b084 <__libc_init_array+0xc>
 800b0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0aa:	4798      	blx	r3
 800b0ac:	3601      	adds	r6, #1
 800b0ae:	e7f2      	b.n	800b096 <__libc_init_array+0x1e>
 800b0b0:	0800d5b4 	.word	0x0800d5b4
 800b0b4:	0800d5b4 	.word	0x0800d5b4
 800b0b8:	0800d5b4 	.word	0x0800d5b4
 800b0bc:	0800d5b8 	.word	0x0800d5b8

0800b0c0 <__retarget_lock_init_recursive>:
 800b0c0:	4770      	bx	lr

0800b0c2 <__retarget_lock_acquire_recursive>:
 800b0c2:	4770      	bx	lr

0800b0c4 <__retarget_lock_release_recursive>:
 800b0c4:	4770      	bx	lr

0800b0c6 <memcpy>:
 800b0c6:	440a      	add	r2, r1
 800b0c8:	4291      	cmp	r1, r2
 800b0ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0ce:	d100      	bne.n	800b0d2 <memcpy+0xc>
 800b0d0:	4770      	bx	lr
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0dc:	4291      	cmp	r1, r2
 800b0de:	d1f9      	bne.n	800b0d4 <memcpy+0xe>
 800b0e0:	bd10      	pop	{r4, pc}

0800b0e2 <quorem>:
 800b0e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e6:	6903      	ldr	r3, [r0, #16]
 800b0e8:	690c      	ldr	r4, [r1, #16]
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	db7e      	blt.n	800b1ee <quorem+0x10c>
 800b0f0:	3c01      	subs	r4, #1
 800b0f2:	f101 0814 	add.w	r8, r1, #20
 800b0f6:	00a3      	lsls	r3, r4, #2
 800b0f8:	f100 0514 	add.w	r5, r0, #20
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b10c:	3301      	adds	r3, #1
 800b10e:	429a      	cmp	r2, r3
 800b110:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b114:	fbb2 f6f3 	udiv	r6, r2, r3
 800b118:	d32e      	bcc.n	800b178 <quorem+0x96>
 800b11a:	f04f 0a00 	mov.w	sl, #0
 800b11e:	46c4      	mov	ip, r8
 800b120:	46ae      	mov	lr, r5
 800b122:	46d3      	mov	fp, sl
 800b124:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b128:	b298      	uxth	r0, r3
 800b12a:	fb06 a000 	mla	r0, r6, r0, sl
 800b12e:	0c02      	lsrs	r2, r0, #16
 800b130:	0c1b      	lsrs	r3, r3, #16
 800b132:	fb06 2303 	mla	r3, r6, r3, r2
 800b136:	f8de 2000 	ldr.w	r2, [lr]
 800b13a:	b280      	uxth	r0, r0
 800b13c:	b292      	uxth	r2, r2
 800b13e:	1a12      	subs	r2, r2, r0
 800b140:	445a      	add	r2, fp
 800b142:	f8de 0000 	ldr.w	r0, [lr]
 800b146:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b150:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b154:	b292      	uxth	r2, r2
 800b156:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b15a:	45e1      	cmp	r9, ip
 800b15c:	f84e 2b04 	str.w	r2, [lr], #4
 800b160:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b164:	d2de      	bcs.n	800b124 <quorem+0x42>
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	58eb      	ldr	r3, [r5, r3]
 800b16a:	b92b      	cbnz	r3, 800b178 <quorem+0x96>
 800b16c:	9b01      	ldr	r3, [sp, #4]
 800b16e:	3b04      	subs	r3, #4
 800b170:	429d      	cmp	r5, r3
 800b172:	461a      	mov	r2, r3
 800b174:	d32f      	bcc.n	800b1d6 <quorem+0xf4>
 800b176:	613c      	str	r4, [r7, #16]
 800b178:	4638      	mov	r0, r7
 800b17a:	f001 f97f 	bl	800c47c <__mcmp>
 800b17e:	2800      	cmp	r0, #0
 800b180:	db25      	blt.n	800b1ce <quorem+0xec>
 800b182:	4629      	mov	r1, r5
 800b184:	2000      	movs	r0, #0
 800b186:	f858 2b04 	ldr.w	r2, [r8], #4
 800b18a:	f8d1 c000 	ldr.w	ip, [r1]
 800b18e:	fa1f fe82 	uxth.w	lr, r2
 800b192:	fa1f f38c 	uxth.w	r3, ip
 800b196:	eba3 030e 	sub.w	r3, r3, lr
 800b19a:	4403      	add	r3, r0
 800b19c:	0c12      	lsrs	r2, r2, #16
 800b19e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ac:	45c1      	cmp	r9, r8
 800b1ae:	f841 3b04 	str.w	r3, [r1], #4
 800b1b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1b6:	d2e6      	bcs.n	800b186 <quorem+0xa4>
 800b1b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c0:	b922      	cbnz	r2, 800b1cc <quorem+0xea>
 800b1c2:	3b04      	subs	r3, #4
 800b1c4:	429d      	cmp	r5, r3
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	d30b      	bcc.n	800b1e2 <quorem+0x100>
 800b1ca:	613c      	str	r4, [r7, #16]
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	b003      	add	sp, #12
 800b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d6:	6812      	ldr	r2, [r2, #0]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	d1cb      	bne.n	800b176 <quorem+0x94>
 800b1de:	3c01      	subs	r4, #1
 800b1e0:	e7c6      	b.n	800b170 <quorem+0x8e>
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	d1ef      	bne.n	800b1ca <quorem+0xe8>
 800b1ea:	3c01      	subs	r4, #1
 800b1ec:	e7ea      	b.n	800b1c4 <quorem+0xe2>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e7ee      	b.n	800b1d0 <quorem+0xee>
 800b1f2:	0000      	movs	r0, r0
 800b1f4:	0000      	movs	r0, r0
	...

0800b1f8 <_dtoa_r>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	69c7      	ldr	r7, [r0, #28]
 800b1fe:	b097      	sub	sp, #92	@ 0x5c
 800b200:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b204:	ec55 4b10 	vmov	r4, r5, d0
 800b208:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b20a:	9107      	str	r1, [sp, #28]
 800b20c:	4681      	mov	r9, r0
 800b20e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b210:	9311      	str	r3, [sp, #68]	@ 0x44
 800b212:	b97f      	cbnz	r7, 800b234 <_dtoa_r+0x3c>
 800b214:	2010      	movs	r0, #16
 800b216:	f000 fe09 	bl	800be2c <malloc>
 800b21a:	4602      	mov	r2, r0
 800b21c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b220:	b920      	cbnz	r0, 800b22c <_dtoa_r+0x34>
 800b222:	4ba9      	ldr	r3, [pc, #676]	@ (800b4c8 <_dtoa_r+0x2d0>)
 800b224:	21ef      	movs	r1, #239	@ 0xef
 800b226:	48a9      	ldr	r0, [pc, #676]	@ (800b4cc <_dtoa_r+0x2d4>)
 800b228:	f001 fc5e 	bl	800cae8 <__assert_func>
 800b22c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b230:	6007      	str	r7, [r0, #0]
 800b232:	60c7      	str	r7, [r0, #12]
 800b234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b238:	6819      	ldr	r1, [r3, #0]
 800b23a:	b159      	cbz	r1, 800b254 <_dtoa_r+0x5c>
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	604a      	str	r2, [r1, #4]
 800b240:	2301      	movs	r3, #1
 800b242:	4093      	lsls	r3, r2
 800b244:	608b      	str	r3, [r1, #8]
 800b246:	4648      	mov	r0, r9
 800b248:	f000 fee6 	bl	800c018 <_Bfree>
 800b24c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	1e2b      	subs	r3, r5, #0
 800b256:	bfb9      	ittee	lt
 800b258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b25c:	9305      	strlt	r3, [sp, #20]
 800b25e:	2300      	movge	r3, #0
 800b260:	6033      	strge	r3, [r6, #0]
 800b262:	9f05      	ldr	r7, [sp, #20]
 800b264:	4b9a      	ldr	r3, [pc, #616]	@ (800b4d0 <_dtoa_r+0x2d8>)
 800b266:	bfbc      	itt	lt
 800b268:	2201      	movlt	r2, #1
 800b26a:	6032      	strlt	r2, [r6, #0]
 800b26c:	43bb      	bics	r3, r7
 800b26e:	d112      	bne.n	800b296 <_dtoa_r+0x9e>
 800b270:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b272:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b27c:	4323      	orrs	r3, r4
 800b27e:	f000 855a 	beq.w	800bd36 <_dtoa_r+0xb3e>
 800b282:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b284:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b4e4 <_dtoa_r+0x2ec>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 855c 	beq.w	800bd46 <_dtoa_r+0xb4e>
 800b28e:	f10a 0303 	add.w	r3, sl, #3
 800b292:	f000 bd56 	b.w	800bd42 <_dtoa_r+0xb4a>
 800b296:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b29a:	2200      	movs	r2, #0
 800b29c:	ec51 0b17 	vmov	r0, r1, d7
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b2a6:	f7f5 fc37 	bl	8000b18 <__aeabi_dcmpeq>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	b158      	cbz	r0, 800b2c6 <_dtoa_r+0xce>
 800b2ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2b6:	b113      	cbz	r3, 800b2be <_dtoa_r+0xc6>
 800b2b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2ba:	4b86      	ldr	r3, [pc, #536]	@ (800b4d4 <_dtoa_r+0x2dc>)
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b4e8 <_dtoa_r+0x2f0>
 800b2c2:	f000 bd40 	b.w	800bd46 <_dtoa_r+0xb4e>
 800b2c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b2ca:	aa14      	add	r2, sp, #80	@ 0x50
 800b2cc:	a915      	add	r1, sp, #84	@ 0x54
 800b2ce:	4648      	mov	r0, r9
 800b2d0:	f001 f984 	bl	800c5dc <__d2b>
 800b2d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2d8:	9002      	str	r0, [sp, #8]
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d078      	beq.n	800b3d0 <_dtoa_r+0x1d8>
 800b2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4b76      	ldr	r3, [pc, #472]	@ (800b4d8 <_dtoa_r+0x2e0>)
 800b2fe:	f7f4 ffeb 	bl	80002d8 <__aeabi_dsub>
 800b302:	a36b      	add	r3, pc, #428	@ (adr r3, 800b4b0 <_dtoa_r+0x2b8>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f7f5 f99e 	bl	8000648 <__aeabi_dmul>
 800b30c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b4b8 <_dtoa_r+0x2c0>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f4 ffe3 	bl	80002dc <__adddf3>
 800b316:	4604      	mov	r4, r0
 800b318:	4630      	mov	r0, r6
 800b31a:	460d      	mov	r5, r1
 800b31c:	f7f5 f92a 	bl	8000574 <__aeabi_i2d>
 800b320:	a367      	add	r3, pc, #412	@ (adr r3, 800b4c0 <_dtoa_r+0x2c8>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f7f5 f98f 	bl	8000648 <__aeabi_dmul>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f4 ffd3 	bl	80002dc <__adddf3>
 800b336:	4604      	mov	r4, r0
 800b338:	460d      	mov	r5, r1
 800b33a:	f7f5 fc35 	bl	8000ba8 <__aeabi_d2iz>
 800b33e:	2200      	movs	r2, #0
 800b340:	4607      	mov	r7, r0
 800b342:	2300      	movs	r3, #0
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f5 fbf0 	bl	8000b2c <__aeabi_dcmplt>
 800b34c:	b140      	cbz	r0, 800b360 <_dtoa_r+0x168>
 800b34e:	4638      	mov	r0, r7
 800b350:	f7f5 f910 	bl	8000574 <__aeabi_i2d>
 800b354:	4622      	mov	r2, r4
 800b356:	462b      	mov	r3, r5
 800b358:	f7f5 fbde 	bl	8000b18 <__aeabi_dcmpeq>
 800b35c:	b900      	cbnz	r0, 800b360 <_dtoa_r+0x168>
 800b35e:	3f01      	subs	r7, #1
 800b360:	2f16      	cmp	r7, #22
 800b362:	d852      	bhi.n	800b40a <_dtoa_r+0x212>
 800b364:	4b5d      	ldr	r3, [pc, #372]	@ (800b4dc <_dtoa_r+0x2e4>)
 800b366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b372:	f7f5 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 800b376:	2800      	cmp	r0, #0
 800b378:	d049      	beq.n	800b40e <_dtoa_r+0x216>
 800b37a:	3f01      	subs	r7, #1
 800b37c:	2300      	movs	r3, #0
 800b37e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b380:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b382:	1b9b      	subs	r3, r3, r6
 800b384:	1e5a      	subs	r2, r3, #1
 800b386:	bf45      	ittet	mi
 800b388:	f1c3 0301 	rsbmi	r3, r3, #1
 800b38c:	9300      	strmi	r3, [sp, #0]
 800b38e:	2300      	movpl	r3, #0
 800b390:	2300      	movmi	r3, #0
 800b392:	9206      	str	r2, [sp, #24]
 800b394:	bf54      	ite	pl
 800b396:	9300      	strpl	r3, [sp, #0]
 800b398:	9306      	strmi	r3, [sp, #24]
 800b39a:	2f00      	cmp	r7, #0
 800b39c:	db39      	blt.n	800b412 <_dtoa_r+0x21a>
 800b39e:	9b06      	ldr	r3, [sp, #24]
 800b3a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b3a2:	443b      	add	r3, r7
 800b3a4:	9306      	str	r3, [sp, #24]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	9308      	str	r3, [sp, #32]
 800b3aa:	9b07      	ldr	r3, [sp, #28]
 800b3ac:	2b09      	cmp	r3, #9
 800b3ae:	d863      	bhi.n	800b478 <_dtoa_r+0x280>
 800b3b0:	2b05      	cmp	r3, #5
 800b3b2:	bfc4      	itt	gt
 800b3b4:	3b04      	subgt	r3, #4
 800b3b6:	9307      	strgt	r3, [sp, #28]
 800b3b8:	9b07      	ldr	r3, [sp, #28]
 800b3ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b3be:	bfcc      	ite	gt
 800b3c0:	2400      	movgt	r4, #0
 800b3c2:	2401      	movle	r4, #1
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d863      	bhi.n	800b490 <_dtoa_r+0x298>
 800b3c8:	e8df f003 	tbb	[pc, r3]
 800b3cc:	2b375452 	.word	0x2b375452
 800b3d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b3d4:	441e      	add	r6, r3
 800b3d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	bfc1      	itttt	gt
 800b3de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3e2:	409f      	lslgt	r7, r3
 800b3e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3ec:	bfd6      	itet	le
 800b3ee:	f1c3 0320 	rsble	r3, r3, #32
 800b3f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3f6:	fa04 f003 	lslle.w	r0, r4, r3
 800b3fa:	f7f5 f8ab 	bl	8000554 <__aeabi_ui2d>
 800b3fe:	2201      	movs	r2, #1
 800b400:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b404:	3e01      	subs	r6, #1
 800b406:	9212      	str	r2, [sp, #72]	@ 0x48
 800b408:	e776      	b.n	800b2f8 <_dtoa_r+0x100>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e7b7      	b.n	800b37e <_dtoa_r+0x186>
 800b40e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b410:	e7b6      	b.n	800b380 <_dtoa_r+0x188>
 800b412:	9b00      	ldr	r3, [sp, #0]
 800b414:	1bdb      	subs	r3, r3, r7
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	427b      	negs	r3, r7
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	2300      	movs	r3, #0
 800b41e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b420:	e7c3      	b.n	800b3aa <_dtoa_r+0x1b2>
 800b422:	2301      	movs	r3, #1
 800b424:	9309      	str	r3, [sp, #36]	@ 0x24
 800b426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b428:	eb07 0b03 	add.w	fp, r7, r3
 800b42c:	f10b 0301 	add.w	r3, fp, #1
 800b430:	2b01      	cmp	r3, #1
 800b432:	9303      	str	r3, [sp, #12]
 800b434:	bfb8      	it	lt
 800b436:	2301      	movlt	r3, #1
 800b438:	e006      	b.n	800b448 <_dtoa_r+0x250>
 800b43a:	2301      	movs	r3, #1
 800b43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b43e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b440:	2b00      	cmp	r3, #0
 800b442:	dd28      	ble.n	800b496 <_dtoa_r+0x29e>
 800b444:	469b      	mov	fp, r3
 800b446:	9303      	str	r3, [sp, #12]
 800b448:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b44c:	2100      	movs	r1, #0
 800b44e:	2204      	movs	r2, #4
 800b450:	f102 0514 	add.w	r5, r2, #20
 800b454:	429d      	cmp	r5, r3
 800b456:	d926      	bls.n	800b4a6 <_dtoa_r+0x2ae>
 800b458:	6041      	str	r1, [r0, #4]
 800b45a:	4648      	mov	r0, r9
 800b45c:	f000 fd9c 	bl	800bf98 <_Balloc>
 800b460:	4682      	mov	sl, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	d142      	bne.n	800b4ec <_dtoa_r+0x2f4>
 800b466:	4b1e      	ldr	r3, [pc, #120]	@ (800b4e0 <_dtoa_r+0x2e8>)
 800b468:	4602      	mov	r2, r0
 800b46a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b46e:	e6da      	b.n	800b226 <_dtoa_r+0x2e>
 800b470:	2300      	movs	r3, #0
 800b472:	e7e3      	b.n	800b43c <_dtoa_r+0x244>
 800b474:	2300      	movs	r3, #0
 800b476:	e7d5      	b.n	800b424 <_dtoa_r+0x22c>
 800b478:	2401      	movs	r4, #1
 800b47a:	2300      	movs	r3, #0
 800b47c:	9307      	str	r3, [sp, #28]
 800b47e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b480:	f04f 3bff 	mov.w	fp, #4294967295
 800b484:	2200      	movs	r2, #0
 800b486:	f8cd b00c 	str.w	fp, [sp, #12]
 800b48a:	2312      	movs	r3, #18
 800b48c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b48e:	e7db      	b.n	800b448 <_dtoa_r+0x250>
 800b490:	2301      	movs	r3, #1
 800b492:	9309      	str	r3, [sp, #36]	@ 0x24
 800b494:	e7f4      	b.n	800b480 <_dtoa_r+0x288>
 800b496:	f04f 0b01 	mov.w	fp, #1
 800b49a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b49e:	465b      	mov	r3, fp
 800b4a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b4a4:	e7d0      	b.n	800b448 <_dtoa_r+0x250>
 800b4a6:	3101      	adds	r1, #1
 800b4a8:	0052      	lsls	r2, r2, #1
 800b4aa:	e7d1      	b.n	800b450 <_dtoa_r+0x258>
 800b4ac:	f3af 8000 	nop.w
 800b4b0:	636f4361 	.word	0x636f4361
 800b4b4:	3fd287a7 	.word	0x3fd287a7
 800b4b8:	8b60c8b3 	.word	0x8b60c8b3
 800b4bc:	3fc68a28 	.word	0x3fc68a28
 800b4c0:	509f79fb 	.word	0x509f79fb
 800b4c4:	3fd34413 	.word	0x3fd34413
 800b4c8:	0800d275 	.word	0x0800d275
 800b4cc:	0800d28c 	.word	0x0800d28c
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	0800d245 	.word	0x0800d245
 800b4d8:	3ff80000 	.word	0x3ff80000
 800b4dc:	0800d3e0 	.word	0x0800d3e0
 800b4e0:	0800d2e4 	.word	0x0800d2e4
 800b4e4:	0800d271 	.word	0x0800d271
 800b4e8:	0800d244 	.word	0x0800d244
 800b4ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4f0:	6018      	str	r0, [r3, #0]
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	2b0e      	cmp	r3, #14
 800b4f6:	f200 80a1 	bhi.w	800b63c <_dtoa_r+0x444>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	f000 809e 	beq.w	800b63c <_dtoa_r+0x444>
 800b500:	2f00      	cmp	r7, #0
 800b502:	dd33      	ble.n	800b56c <_dtoa_r+0x374>
 800b504:	4b9c      	ldr	r3, [pc, #624]	@ (800b778 <_dtoa_r+0x580>)
 800b506:	f007 020f 	and.w	r2, r7, #15
 800b50a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b50e:	ed93 7b00 	vldr	d7, [r3]
 800b512:	05f8      	lsls	r0, r7, #23
 800b514:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b51c:	d516      	bpl.n	800b54c <_dtoa_r+0x354>
 800b51e:	4b97      	ldr	r3, [pc, #604]	@ (800b77c <_dtoa_r+0x584>)
 800b520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b528:	f7f5 f9b8 	bl	800089c <__aeabi_ddiv>
 800b52c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b530:	f004 040f 	and.w	r4, r4, #15
 800b534:	2603      	movs	r6, #3
 800b536:	4d91      	ldr	r5, [pc, #580]	@ (800b77c <_dtoa_r+0x584>)
 800b538:	b954      	cbnz	r4, 800b550 <_dtoa_r+0x358>
 800b53a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b542:	f7f5 f9ab 	bl	800089c <__aeabi_ddiv>
 800b546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b54a:	e028      	b.n	800b59e <_dtoa_r+0x3a6>
 800b54c:	2602      	movs	r6, #2
 800b54e:	e7f2      	b.n	800b536 <_dtoa_r+0x33e>
 800b550:	07e1      	lsls	r1, r4, #31
 800b552:	d508      	bpl.n	800b566 <_dtoa_r+0x36e>
 800b554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b55c:	f7f5 f874 	bl	8000648 <__aeabi_dmul>
 800b560:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b564:	3601      	adds	r6, #1
 800b566:	1064      	asrs	r4, r4, #1
 800b568:	3508      	adds	r5, #8
 800b56a:	e7e5      	b.n	800b538 <_dtoa_r+0x340>
 800b56c:	f000 80af 	beq.w	800b6ce <_dtoa_r+0x4d6>
 800b570:	427c      	negs	r4, r7
 800b572:	4b81      	ldr	r3, [pc, #516]	@ (800b778 <_dtoa_r+0x580>)
 800b574:	4d81      	ldr	r5, [pc, #516]	@ (800b77c <_dtoa_r+0x584>)
 800b576:	f004 020f 	and.w	r2, r4, #15
 800b57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b586:	f7f5 f85f 	bl	8000648 <__aeabi_dmul>
 800b58a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b58e:	1124      	asrs	r4, r4, #4
 800b590:	2300      	movs	r3, #0
 800b592:	2602      	movs	r6, #2
 800b594:	2c00      	cmp	r4, #0
 800b596:	f040 808f 	bne.w	800b6b8 <_dtoa_r+0x4c0>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1d3      	bne.n	800b546 <_dtoa_r+0x34e>
 800b59e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 8094 	beq.w	800b6d2 <_dtoa_r+0x4da>
 800b5aa:	4b75      	ldr	r3, [pc, #468]	@ (800b780 <_dtoa_r+0x588>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	f7f5 fabb 	bl	8000b2c <__aeabi_dcmplt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f000 808b 	beq.w	800b6d2 <_dtoa_r+0x4da>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 8087 	beq.w	800b6d2 <_dtoa_r+0x4da>
 800b5c4:	f1bb 0f00 	cmp.w	fp, #0
 800b5c8:	dd34      	ble.n	800b634 <_dtoa_r+0x43c>
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4b6d      	ldr	r3, [pc, #436]	@ (800b784 <_dtoa_r+0x58c>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f5 f839 	bl	8000648 <__aeabi_dmul>
 800b5d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5da:	f107 38ff 	add.w	r8, r7, #4294967295
 800b5de:	3601      	adds	r6, #1
 800b5e0:	465c      	mov	r4, fp
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7f4 ffc6 	bl	8000574 <__aeabi_i2d>
 800b5e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ec:	f7f5 f82c 	bl	8000648 <__aeabi_dmul>
 800b5f0:	4b65      	ldr	r3, [pc, #404]	@ (800b788 <_dtoa_r+0x590>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f7f4 fe72 	bl	80002dc <__adddf3>
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d16a      	bne.n	800b6d8 <_dtoa_r+0x4e0>
 800b602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b606:	4b61      	ldr	r3, [pc, #388]	@ (800b78c <_dtoa_r+0x594>)
 800b608:	2200      	movs	r2, #0
 800b60a:	f7f4 fe65 	bl	80002d8 <__aeabi_dsub>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b616:	462a      	mov	r2, r5
 800b618:	4633      	mov	r3, r6
 800b61a:	f7f5 faa5 	bl	8000b68 <__aeabi_dcmpgt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f040 8298 	bne.w	800bb54 <_dtoa_r+0x95c>
 800b624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b628:	462a      	mov	r2, r5
 800b62a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b62e:	f7f5 fa7d 	bl	8000b2c <__aeabi_dcmplt>
 800b632:	bb38      	cbnz	r0, 800b684 <_dtoa_r+0x48c>
 800b634:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b638:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b63c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f2c0 8157 	blt.w	800b8f2 <_dtoa_r+0x6fa>
 800b644:	2f0e      	cmp	r7, #14
 800b646:	f300 8154 	bgt.w	800b8f2 <_dtoa_r+0x6fa>
 800b64a:	4b4b      	ldr	r3, [pc, #300]	@ (800b778 <_dtoa_r+0x580>)
 800b64c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b650:	ed93 7b00 	vldr	d7, [r3]
 800b654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b656:	2b00      	cmp	r3, #0
 800b658:	ed8d 7b00 	vstr	d7, [sp]
 800b65c:	f280 80e5 	bge.w	800b82a <_dtoa_r+0x632>
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f300 80e1 	bgt.w	800b82a <_dtoa_r+0x632>
 800b668:	d10c      	bne.n	800b684 <_dtoa_r+0x48c>
 800b66a:	4b48      	ldr	r3, [pc, #288]	@ (800b78c <_dtoa_r+0x594>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	ec51 0b17 	vmov	r0, r1, d7
 800b672:	f7f4 ffe9 	bl	8000648 <__aeabi_dmul>
 800b676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b67a:	f7f5 fa6b 	bl	8000b54 <__aeabi_dcmpge>
 800b67e:	2800      	cmp	r0, #0
 800b680:	f000 8266 	beq.w	800bb50 <_dtoa_r+0x958>
 800b684:	2400      	movs	r4, #0
 800b686:	4625      	mov	r5, r4
 800b688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b68a:	4656      	mov	r6, sl
 800b68c:	ea6f 0803 	mvn.w	r8, r3
 800b690:	2700      	movs	r7, #0
 800b692:	4621      	mov	r1, r4
 800b694:	4648      	mov	r0, r9
 800b696:	f000 fcbf 	bl	800c018 <_Bfree>
 800b69a:	2d00      	cmp	r5, #0
 800b69c:	f000 80bd 	beq.w	800b81a <_dtoa_r+0x622>
 800b6a0:	b12f      	cbz	r7, 800b6ae <_dtoa_r+0x4b6>
 800b6a2:	42af      	cmp	r7, r5
 800b6a4:	d003      	beq.n	800b6ae <_dtoa_r+0x4b6>
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f000 fcb5 	bl	800c018 <_Bfree>
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4648      	mov	r0, r9
 800b6b2:	f000 fcb1 	bl	800c018 <_Bfree>
 800b6b6:	e0b0      	b.n	800b81a <_dtoa_r+0x622>
 800b6b8:	07e2      	lsls	r2, r4, #31
 800b6ba:	d505      	bpl.n	800b6c8 <_dtoa_r+0x4d0>
 800b6bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6c0:	f7f4 ffc2 	bl	8000648 <__aeabi_dmul>
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	1064      	asrs	r4, r4, #1
 800b6ca:	3508      	adds	r5, #8
 800b6cc:	e762      	b.n	800b594 <_dtoa_r+0x39c>
 800b6ce:	2602      	movs	r6, #2
 800b6d0:	e765      	b.n	800b59e <_dtoa_r+0x3a6>
 800b6d2:	9c03      	ldr	r4, [sp, #12]
 800b6d4:	46b8      	mov	r8, r7
 800b6d6:	e784      	b.n	800b5e2 <_dtoa_r+0x3ea>
 800b6d8:	4b27      	ldr	r3, [pc, #156]	@ (800b778 <_dtoa_r+0x580>)
 800b6da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6e4:	4454      	add	r4, sl
 800b6e6:	2900      	cmp	r1, #0
 800b6e8:	d054      	beq.n	800b794 <_dtoa_r+0x59c>
 800b6ea:	4929      	ldr	r1, [pc, #164]	@ (800b790 <_dtoa_r+0x598>)
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f7f5 f8d5 	bl	800089c <__aeabi_ddiv>
 800b6f2:	4633      	mov	r3, r6
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	f7f4 fdef 	bl	80002d8 <__aeabi_dsub>
 800b6fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b6fe:	4656      	mov	r6, sl
 800b700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b704:	f7f5 fa50 	bl	8000ba8 <__aeabi_d2iz>
 800b708:	4605      	mov	r5, r0
 800b70a:	f7f4 ff33 	bl	8000574 <__aeabi_i2d>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b716:	f7f4 fddf 	bl	80002d8 <__aeabi_dsub>
 800b71a:	3530      	adds	r5, #48	@ 0x30
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b724:	f806 5b01 	strb.w	r5, [r6], #1
 800b728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b72c:	f7f5 f9fe 	bl	8000b2c <__aeabi_dcmplt>
 800b730:	2800      	cmp	r0, #0
 800b732:	d172      	bne.n	800b81a <_dtoa_r+0x622>
 800b734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b738:	4911      	ldr	r1, [pc, #68]	@ (800b780 <_dtoa_r+0x588>)
 800b73a:	2000      	movs	r0, #0
 800b73c:	f7f4 fdcc 	bl	80002d8 <__aeabi_dsub>
 800b740:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b744:	f7f5 f9f2 	bl	8000b2c <__aeabi_dcmplt>
 800b748:	2800      	cmp	r0, #0
 800b74a:	f040 80b4 	bne.w	800b8b6 <_dtoa_r+0x6be>
 800b74e:	42a6      	cmp	r6, r4
 800b750:	f43f af70 	beq.w	800b634 <_dtoa_r+0x43c>
 800b754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b758:	4b0a      	ldr	r3, [pc, #40]	@ (800b784 <_dtoa_r+0x58c>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	f7f4 ff74 	bl	8000648 <__aeabi_dmul>
 800b760:	4b08      	ldr	r3, [pc, #32]	@ (800b784 <_dtoa_r+0x58c>)
 800b762:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b766:	2200      	movs	r2, #0
 800b768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b76c:	f7f4 ff6c 	bl	8000648 <__aeabi_dmul>
 800b770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b774:	e7c4      	b.n	800b700 <_dtoa_r+0x508>
 800b776:	bf00      	nop
 800b778:	0800d3e0 	.word	0x0800d3e0
 800b77c:	0800d3b8 	.word	0x0800d3b8
 800b780:	3ff00000 	.word	0x3ff00000
 800b784:	40240000 	.word	0x40240000
 800b788:	401c0000 	.word	0x401c0000
 800b78c:	40140000 	.word	0x40140000
 800b790:	3fe00000 	.word	0x3fe00000
 800b794:	4631      	mov	r1, r6
 800b796:	4628      	mov	r0, r5
 800b798:	f7f4 ff56 	bl	8000648 <__aeabi_dmul>
 800b79c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b7a2:	4656      	mov	r6, sl
 800b7a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7a8:	f7f5 f9fe 	bl	8000ba8 <__aeabi_d2iz>
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	f7f4 fee1 	bl	8000574 <__aeabi_i2d>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ba:	f7f4 fd8d 	bl	80002d8 <__aeabi_dsub>
 800b7be:	3530      	adds	r5, #48	@ 0x30
 800b7c0:	f806 5b01 	strb.w	r5, [r6], #1
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	42a6      	cmp	r6, r4
 800b7ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7ce:	f04f 0200 	mov.w	r2, #0
 800b7d2:	d124      	bne.n	800b81e <_dtoa_r+0x626>
 800b7d4:	4baf      	ldr	r3, [pc, #700]	@ (800ba94 <_dtoa_r+0x89c>)
 800b7d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7da:	f7f4 fd7f 	bl	80002dc <__adddf3>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7e6:	f7f5 f9bf 	bl	8000b68 <__aeabi_dcmpgt>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d163      	bne.n	800b8b6 <_dtoa_r+0x6be>
 800b7ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7f2:	49a8      	ldr	r1, [pc, #672]	@ (800ba94 <_dtoa_r+0x89c>)
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f7f4 fd6f 	bl	80002d8 <__aeabi_dsub>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b802:	f7f5 f993 	bl	8000b2c <__aeabi_dcmplt>
 800b806:	2800      	cmp	r0, #0
 800b808:	f43f af14 	beq.w	800b634 <_dtoa_r+0x43c>
 800b80c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b80e:	1e73      	subs	r3, r6, #1
 800b810:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b812:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b816:	2b30      	cmp	r3, #48	@ 0x30
 800b818:	d0f8      	beq.n	800b80c <_dtoa_r+0x614>
 800b81a:	4647      	mov	r7, r8
 800b81c:	e03b      	b.n	800b896 <_dtoa_r+0x69e>
 800b81e:	4b9e      	ldr	r3, [pc, #632]	@ (800ba98 <_dtoa_r+0x8a0>)
 800b820:	f7f4 ff12 	bl	8000648 <__aeabi_dmul>
 800b824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b828:	e7bc      	b.n	800b7a4 <_dtoa_r+0x5ac>
 800b82a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b82e:	4656      	mov	r6, sl
 800b830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f5 f830 	bl	800089c <__aeabi_ddiv>
 800b83c:	f7f5 f9b4 	bl	8000ba8 <__aeabi_d2iz>
 800b840:	4680      	mov	r8, r0
 800b842:	f7f4 fe97 	bl	8000574 <__aeabi_i2d>
 800b846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b84a:	f7f4 fefd 	bl	8000648 <__aeabi_dmul>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4620      	mov	r0, r4
 800b854:	4629      	mov	r1, r5
 800b856:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b85a:	f7f4 fd3d 	bl	80002d8 <__aeabi_dsub>
 800b85e:	f806 4b01 	strb.w	r4, [r6], #1
 800b862:	9d03      	ldr	r5, [sp, #12]
 800b864:	eba6 040a 	sub.w	r4, r6, sl
 800b868:	42a5      	cmp	r5, r4
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	d133      	bne.n	800b8d8 <_dtoa_r+0x6e0>
 800b870:	f7f4 fd34 	bl	80002dc <__adddf3>
 800b874:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b878:	4604      	mov	r4, r0
 800b87a:	460d      	mov	r5, r1
 800b87c:	f7f5 f974 	bl	8000b68 <__aeabi_dcmpgt>
 800b880:	b9c0      	cbnz	r0, 800b8b4 <_dtoa_r+0x6bc>
 800b882:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f5 f945 	bl	8000b18 <__aeabi_dcmpeq>
 800b88e:	b110      	cbz	r0, 800b896 <_dtoa_r+0x69e>
 800b890:	f018 0f01 	tst.w	r8, #1
 800b894:	d10e      	bne.n	800b8b4 <_dtoa_r+0x6bc>
 800b896:	9902      	ldr	r1, [sp, #8]
 800b898:	4648      	mov	r0, r9
 800b89a:	f000 fbbd 	bl	800c018 <_Bfree>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	7033      	strb	r3, [r6, #0]
 800b8a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8a4:	3701      	adds	r7, #1
 800b8a6:	601f      	str	r7, [r3, #0]
 800b8a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 824b 	beq.w	800bd46 <_dtoa_r+0xb4e>
 800b8b0:	601e      	str	r6, [r3, #0]
 800b8b2:	e248      	b.n	800bd46 <_dtoa_r+0xb4e>
 800b8b4:	46b8      	mov	r8, r7
 800b8b6:	4633      	mov	r3, r6
 800b8b8:	461e      	mov	r6, r3
 800b8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8be:	2a39      	cmp	r2, #57	@ 0x39
 800b8c0:	d106      	bne.n	800b8d0 <_dtoa_r+0x6d8>
 800b8c2:	459a      	cmp	sl, r3
 800b8c4:	d1f8      	bne.n	800b8b8 <_dtoa_r+0x6c0>
 800b8c6:	2230      	movs	r2, #48	@ 0x30
 800b8c8:	f108 0801 	add.w	r8, r8, #1
 800b8cc:	f88a 2000 	strb.w	r2, [sl]
 800b8d0:	781a      	ldrb	r2, [r3, #0]
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	e7a0      	b.n	800b81a <_dtoa_r+0x622>
 800b8d8:	4b6f      	ldr	r3, [pc, #444]	@ (800ba98 <_dtoa_r+0x8a0>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f7f4 feb4 	bl	8000648 <__aeabi_dmul>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	f7f5 f916 	bl	8000b18 <__aeabi_dcmpeq>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d09f      	beq.n	800b830 <_dtoa_r+0x638>
 800b8f0:	e7d1      	b.n	800b896 <_dtoa_r+0x69e>
 800b8f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8f4:	2a00      	cmp	r2, #0
 800b8f6:	f000 80ea 	beq.w	800bace <_dtoa_r+0x8d6>
 800b8fa:	9a07      	ldr	r2, [sp, #28]
 800b8fc:	2a01      	cmp	r2, #1
 800b8fe:	f300 80cd 	bgt.w	800ba9c <_dtoa_r+0x8a4>
 800b902:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b904:	2a00      	cmp	r2, #0
 800b906:	f000 80c1 	beq.w	800ba8c <_dtoa_r+0x894>
 800b90a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b90e:	9c08      	ldr	r4, [sp, #32]
 800b910:	9e00      	ldr	r6, [sp, #0]
 800b912:	9a00      	ldr	r2, [sp, #0]
 800b914:	441a      	add	r2, r3
 800b916:	9200      	str	r2, [sp, #0]
 800b918:	9a06      	ldr	r2, [sp, #24]
 800b91a:	2101      	movs	r1, #1
 800b91c:	441a      	add	r2, r3
 800b91e:	4648      	mov	r0, r9
 800b920:	9206      	str	r2, [sp, #24]
 800b922:	f000 fc2d 	bl	800c180 <__i2b>
 800b926:	4605      	mov	r5, r0
 800b928:	b166      	cbz	r6, 800b944 <_dtoa_r+0x74c>
 800b92a:	9b06      	ldr	r3, [sp, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd09      	ble.n	800b944 <_dtoa_r+0x74c>
 800b930:	42b3      	cmp	r3, r6
 800b932:	9a00      	ldr	r2, [sp, #0]
 800b934:	bfa8      	it	ge
 800b936:	4633      	movge	r3, r6
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	9200      	str	r2, [sp, #0]
 800b93c:	9a06      	ldr	r2, [sp, #24]
 800b93e:	1af6      	subs	r6, r6, r3
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	9306      	str	r3, [sp, #24]
 800b944:	9b08      	ldr	r3, [sp, #32]
 800b946:	b30b      	cbz	r3, 800b98c <_dtoa_r+0x794>
 800b948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f000 80c6 	beq.w	800badc <_dtoa_r+0x8e4>
 800b950:	2c00      	cmp	r4, #0
 800b952:	f000 80c0 	beq.w	800bad6 <_dtoa_r+0x8de>
 800b956:	4629      	mov	r1, r5
 800b958:	4622      	mov	r2, r4
 800b95a:	4648      	mov	r0, r9
 800b95c:	f000 fcc8 	bl	800c2f0 <__pow5mult>
 800b960:	9a02      	ldr	r2, [sp, #8]
 800b962:	4601      	mov	r1, r0
 800b964:	4605      	mov	r5, r0
 800b966:	4648      	mov	r0, r9
 800b968:	f000 fc20 	bl	800c1ac <__multiply>
 800b96c:	9902      	ldr	r1, [sp, #8]
 800b96e:	4680      	mov	r8, r0
 800b970:	4648      	mov	r0, r9
 800b972:	f000 fb51 	bl	800c018 <_Bfree>
 800b976:	9b08      	ldr	r3, [sp, #32]
 800b978:	1b1b      	subs	r3, r3, r4
 800b97a:	9308      	str	r3, [sp, #32]
 800b97c:	f000 80b1 	beq.w	800bae2 <_dtoa_r+0x8ea>
 800b980:	9a08      	ldr	r2, [sp, #32]
 800b982:	4641      	mov	r1, r8
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fcb3 	bl	800c2f0 <__pow5mult>
 800b98a:	9002      	str	r0, [sp, #8]
 800b98c:	2101      	movs	r1, #1
 800b98e:	4648      	mov	r0, r9
 800b990:	f000 fbf6 	bl	800c180 <__i2b>
 800b994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b996:	4604      	mov	r4, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 81d8 	beq.w	800bd4e <_dtoa_r+0xb56>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	4648      	mov	r0, r9
 800b9a4:	f000 fca4 	bl	800c2f0 <__pow5mult>
 800b9a8:	9b07      	ldr	r3, [sp, #28]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f300 809f 	bgt.w	800baf0 <_dtoa_r+0x8f8>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f040 8097 	bne.w	800bae8 <_dtoa_r+0x8f0>
 800b9ba:	9b05      	ldr	r3, [sp, #20]
 800b9bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 8093 	bne.w	800baec <_dtoa_r+0x8f4>
 800b9c6:	9b05      	ldr	r3, [sp, #20]
 800b9c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9cc:	0d1b      	lsrs	r3, r3, #20
 800b9ce:	051b      	lsls	r3, r3, #20
 800b9d0:	b133      	cbz	r3, 800b9e0 <_dtoa_r+0x7e8>
 800b9d2:	9b00      	ldr	r3, [sp, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	9306      	str	r3, [sp, #24]
 800b9de:	2301      	movs	r3, #1
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 81b8 	beq.w	800bd5a <_dtoa_r+0xb62>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9f0:	6918      	ldr	r0, [r3, #16]
 800b9f2:	f000 fb79 	bl	800c0e8 <__hi0bits>
 800b9f6:	f1c0 0020 	rsb	r0, r0, #32
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	4418      	add	r0, r3
 800b9fe:	f010 001f 	ands.w	r0, r0, #31
 800ba02:	f000 8082 	beq.w	800bb0a <_dtoa_r+0x912>
 800ba06:	f1c0 0320 	rsb	r3, r0, #32
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	dd73      	ble.n	800baf6 <_dtoa_r+0x8fe>
 800ba0e:	9b00      	ldr	r3, [sp, #0]
 800ba10:	f1c0 001c 	rsb	r0, r0, #28
 800ba14:	4403      	add	r3, r0
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	9b06      	ldr	r3, [sp, #24]
 800ba1a:	4403      	add	r3, r0
 800ba1c:	4406      	add	r6, r0
 800ba1e:	9306      	str	r3, [sp, #24]
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd05      	ble.n	800ba32 <_dtoa_r+0x83a>
 800ba26:	9902      	ldr	r1, [sp, #8]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4648      	mov	r0, r9
 800ba2c:	f000 fcba 	bl	800c3a4 <__lshift>
 800ba30:	9002      	str	r0, [sp, #8]
 800ba32:	9b06      	ldr	r3, [sp, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd05      	ble.n	800ba44 <_dtoa_r+0x84c>
 800ba38:	4621      	mov	r1, r4
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	f000 fcb1 	bl	800c3a4 <__lshift>
 800ba42:	4604      	mov	r4, r0
 800ba44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d061      	beq.n	800bb0e <_dtoa_r+0x916>
 800ba4a:	9802      	ldr	r0, [sp, #8]
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	f000 fd15 	bl	800c47c <__mcmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	da5b      	bge.n	800bb0e <_dtoa_r+0x916>
 800ba56:	2300      	movs	r3, #0
 800ba58:	9902      	ldr	r1, [sp, #8]
 800ba5a:	220a      	movs	r2, #10
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 fafd 	bl	800c05c <__multadd>
 800ba62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 8177 	beq.w	800bd5e <_dtoa_r+0xb66>
 800ba70:	4629      	mov	r1, r5
 800ba72:	2300      	movs	r3, #0
 800ba74:	220a      	movs	r2, #10
 800ba76:	4648      	mov	r0, r9
 800ba78:	f000 faf0 	bl	800c05c <__multadd>
 800ba7c:	f1bb 0f00 	cmp.w	fp, #0
 800ba80:	4605      	mov	r5, r0
 800ba82:	dc6f      	bgt.n	800bb64 <_dtoa_r+0x96c>
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	dc49      	bgt.n	800bb1e <_dtoa_r+0x926>
 800ba8a:	e06b      	b.n	800bb64 <_dtoa_r+0x96c>
 800ba8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba92:	e73c      	b.n	800b90e <_dtoa_r+0x716>
 800ba94:	3fe00000 	.word	0x3fe00000
 800ba98:	40240000 	.word	0x40240000
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1e5c      	subs	r4, r3, #1
 800baa0:	9b08      	ldr	r3, [sp, #32]
 800baa2:	42a3      	cmp	r3, r4
 800baa4:	db09      	blt.n	800baba <_dtoa_r+0x8c2>
 800baa6:	1b1c      	subs	r4, r3, r4
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f6bf af30 	bge.w	800b910 <_dtoa_r+0x718>
 800bab0:	9b00      	ldr	r3, [sp, #0]
 800bab2:	9a03      	ldr	r2, [sp, #12]
 800bab4:	1a9e      	subs	r6, r3, r2
 800bab6:	2300      	movs	r3, #0
 800bab8:	e72b      	b.n	800b912 <_dtoa_r+0x71a>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800babe:	9408      	str	r4, [sp, #32]
 800bac0:	1ae3      	subs	r3, r4, r3
 800bac2:	441a      	add	r2, r3
 800bac4:	9e00      	ldr	r6, [sp, #0]
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	920d      	str	r2, [sp, #52]	@ 0x34
 800baca:	2400      	movs	r4, #0
 800bacc:	e721      	b.n	800b912 <_dtoa_r+0x71a>
 800bace:	9c08      	ldr	r4, [sp, #32]
 800bad0:	9e00      	ldr	r6, [sp, #0]
 800bad2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bad4:	e728      	b.n	800b928 <_dtoa_r+0x730>
 800bad6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bada:	e751      	b.n	800b980 <_dtoa_r+0x788>
 800badc:	9a08      	ldr	r2, [sp, #32]
 800bade:	9902      	ldr	r1, [sp, #8]
 800bae0:	e750      	b.n	800b984 <_dtoa_r+0x78c>
 800bae2:	f8cd 8008 	str.w	r8, [sp, #8]
 800bae6:	e751      	b.n	800b98c <_dtoa_r+0x794>
 800bae8:	2300      	movs	r3, #0
 800baea:	e779      	b.n	800b9e0 <_dtoa_r+0x7e8>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	e777      	b.n	800b9e0 <_dtoa_r+0x7e8>
 800baf0:	2300      	movs	r3, #0
 800baf2:	9308      	str	r3, [sp, #32]
 800baf4:	e779      	b.n	800b9ea <_dtoa_r+0x7f2>
 800baf6:	d093      	beq.n	800ba20 <_dtoa_r+0x828>
 800baf8:	9a00      	ldr	r2, [sp, #0]
 800bafa:	331c      	adds	r3, #28
 800bafc:	441a      	add	r2, r3
 800bafe:	9200      	str	r2, [sp, #0]
 800bb00:	9a06      	ldr	r2, [sp, #24]
 800bb02:	441a      	add	r2, r3
 800bb04:	441e      	add	r6, r3
 800bb06:	9206      	str	r2, [sp, #24]
 800bb08:	e78a      	b.n	800ba20 <_dtoa_r+0x828>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	e7f4      	b.n	800baf8 <_dtoa_r+0x900>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	46b8      	mov	r8, r7
 800bb14:	dc20      	bgt.n	800bb58 <_dtoa_r+0x960>
 800bb16:	469b      	mov	fp, r3
 800bb18:	9b07      	ldr	r3, [sp, #28]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	dd1e      	ble.n	800bb5c <_dtoa_r+0x964>
 800bb1e:	f1bb 0f00 	cmp.w	fp, #0
 800bb22:	f47f adb1 	bne.w	800b688 <_dtoa_r+0x490>
 800bb26:	4621      	mov	r1, r4
 800bb28:	465b      	mov	r3, fp
 800bb2a:	2205      	movs	r2, #5
 800bb2c:	4648      	mov	r0, r9
 800bb2e:	f000 fa95 	bl	800c05c <__multadd>
 800bb32:	4601      	mov	r1, r0
 800bb34:	4604      	mov	r4, r0
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	f000 fca0 	bl	800c47c <__mcmp>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f77f ada3 	ble.w	800b688 <_dtoa_r+0x490>
 800bb42:	4656      	mov	r6, sl
 800bb44:	2331      	movs	r3, #49	@ 0x31
 800bb46:	f806 3b01 	strb.w	r3, [r6], #1
 800bb4a:	f108 0801 	add.w	r8, r8, #1
 800bb4e:	e59f      	b.n	800b690 <_dtoa_r+0x498>
 800bb50:	9c03      	ldr	r4, [sp, #12]
 800bb52:	46b8      	mov	r8, r7
 800bb54:	4625      	mov	r5, r4
 800bb56:	e7f4      	b.n	800bb42 <_dtoa_r+0x94a>
 800bb58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 8101 	beq.w	800bd66 <_dtoa_r+0xb6e>
 800bb64:	2e00      	cmp	r6, #0
 800bb66:	dd05      	ble.n	800bb74 <_dtoa_r+0x97c>
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4632      	mov	r2, r6
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	f000 fc19 	bl	800c3a4 <__lshift>
 800bb72:	4605      	mov	r5, r0
 800bb74:	9b08      	ldr	r3, [sp, #32]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d05c      	beq.n	800bc34 <_dtoa_r+0xa3c>
 800bb7a:	6869      	ldr	r1, [r5, #4]
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f000 fa0b 	bl	800bf98 <_Balloc>
 800bb82:	4606      	mov	r6, r0
 800bb84:	b928      	cbnz	r0, 800bb92 <_dtoa_r+0x99a>
 800bb86:	4b82      	ldr	r3, [pc, #520]	@ (800bd90 <_dtoa_r+0xb98>)
 800bb88:	4602      	mov	r2, r0
 800bb8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb8e:	f7ff bb4a 	b.w	800b226 <_dtoa_r+0x2e>
 800bb92:	692a      	ldr	r2, [r5, #16]
 800bb94:	3202      	adds	r2, #2
 800bb96:	0092      	lsls	r2, r2, #2
 800bb98:	f105 010c 	add.w	r1, r5, #12
 800bb9c:	300c      	adds	r0, #12
 800bb9e:	f7ff fa92 	bl	800b0c6 <memcpy>
 800bba2:	2201      	movs	r2, #1
 800bba4:	4631      	mov	r1, r6
 800bba6:	4648      	mov	r0, r9
 800bba8:	f000 fbfc 	bl	800c3a4 <__lshift>
 800bbac:	f10a 0301 	add.w	r3, sl, #1
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	eb0a 030b 	add.w	r3, sl, fp
 800bbb6:	9308      	str	r3, [sp, #32]
 800bbb8:	9b04      	ldr	r3, [sp, #16]
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	462f      	mov	r7, r5
 800bbc0:	9306      	str	r3, [sp, #24]
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	9b00      	ldr	r3, [sp, #0]
 800bbc6:	9802      	ldr	r0, [sp, #8]
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f103 3bff 	add.w	fp, r3, #4294967295
 800bbce:	f7ff fa88 	bl	800b0e2 <quorem>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	3330      	adds	r3, #48	@ 0x30
 800bbd6:	9003      	str	r0, [sp, #12]
 800bbd8:	4639      	mov	r1, r7
 800bbda:	9802      	ldr	r0, [sp, #8]
 800bbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbde:	f000 fc4d 	bl	800c47c <__mcmp>
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	9004      	str	r0, [sp, #16]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4648      	mov	r0, r9
 800bbea:	f000 fc63 	bl	800c4b4 <__mdiff>
 800bbee:	68c2      	ldr	r2, [r0, #12]
 800bbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	bb02      	cbnz	r2, 800bc38 <_dtoa_r+0xa40>
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	9802      	ldr	r0, [sp, #8]
 800bbfa:	f000 fc3f 	bl	800c47c <__mcmp>
 800bbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc00:	4602      	mov	r2, r0
 800bc02:	4631      	mov	r1, r6
 800bc04:	4648      	mov	r0, r9
 800bc06:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc08:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0a:	f000 fa05 	bl	800c018 <_Bfree>
 800bc0e:	9b07      	ldr	r3, [sp, #28]
 800bc10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc12:	9e00      	ldr	r6, [sp, #0]
 800bc14:	ea42 0103 	orr.w	r1, r2, r3
 800bc18:	9b06      	ldr	r3, [sp, #24]
 800bc1a:	4319      	orrs	r1, r3
 800bc1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc1e:	d10d      	bne.n	800bc3c <_dtoa_r+0xa44>
 800bc20:	2b39      	cmp	r3, #57	@ 0x39
 800bc22:	d027      	beq.n	800bc74 <_dtoa_r+0xa7c>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	dd01      	ble.n	800bc2e <_dtoa_r+0xa36>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	3331      	adds	r3, #49	@ 0x31
 800bc2e:	f88b 3000 	strb.w	r3, [fp]
 800bc32:	e52e      	b.n	800b692 <_dtoa_r+0x49a>
 800bc34:	4628      	mov	r0, r5
 800bc36:	e7b9      	b.n	800bbac <_dtoa_r+0x9b4>
 800bc38:	2201      	movs	r2, #1
 800bc3a:	e7e2      	b.n	800bc02 <_dtoa_r+0xa0a>
 800bc3c:	9904      	ldr	r1, [sp, #16]
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	db04      	blt.n	800bc4c <_dtoa_r+0xa54>
 800bc42:	9807      	ldr	r0, [sp, #28]
 800bc44:	4301      	orrs	r1, r0
 800bc46:	9806      	ldr	r0, [sp, #24]
 800bc48:	4301      	orrs	r1, r0
 800bc4a:	d120      	bne.n	800bc8e <_dtoa_r+0xa96>
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	ddee      	ble.n	800bc2e <_dtoa_r+0xa36>
 800bc50:	9902      	ldr	r1, [sp, #8]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	2201      	movs	r2, #1
 800bc56:	4648      	mov	r0, r9
 800bc58:	f000 fba4 	bl	800c3a4 <__lshift>
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	9002      	str	r0, [sp, #8]
 800bc60:	f000 fc0c 	bl	800c47c <__mcmp>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	9b00      	ldr	r3, [sp, #0]
 800bc68:	dc02      	bgt.n	800bc70 <_dtoa_r+0xa78>
 800bc6a:	d1e0      	bne.n	800bc2e <_dtoa_r+0xa36>
 800bc6c:	07da      	lsls	r2, r3, #31
 800bc6e:	d5de      	bpl.n	800bc2e <_dtoa_r+0xa36>
 800bc70:	2b39      	cmp	r3, #57	@ 0x39
 800bc72:	d1da      	bne.n	800bc2a <_dtoa_r+0xa32>
 800bc74:	2339      	movs	r3, #57	@ 0x39
 800bc76:	f88b 3000 	strb.w	r3, [fp]
 800bc7a:	4633      	mov	r3, r6
 800bc7c:	461e      	mov	r6, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc84:	2a39      	cmp	r2, #57	@ 0x39
 800bc86:	d04e      	beq.n	800bd26 <_dtoa_r+0xb2e>
 800bc88:	3201      	adds	r2, #1
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	e501      	b.n	800b692 <_dtoa_r+0x49a>
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	dd03      	ble.n	800bc9a <_dtoa_r+0xaa2>
 800bc92:	2b39      	cmp	r3, #57	@ 0x39
 800bc94:	d0ee      	beq.n	800bc74 <_dtoa_r+0xa7c>
 800bc96:	3301      	adds	r3, #1
 800bc98:	e7c9      	b.n	800bc2e <_dtoa_r+0xa36>
 800bc9a:	9a00      	ldr	r2, [sp, #0]
 800bc9c:	9908      	ldr	r1, [sp, #32]
 800bc9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bca2:	428a      	cmp	r2, r1
 800bca4:	d028      	beq.n	800bcf8 <_dtoa_r+0xb00>
 800bca6:	9902      	ldr	r1, [sp, #8]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	220a      	movs	r2, #10
 800bcac:	4648      	mov	r0, r9
 800bcae:	f000 f9d5 	bl	800c05c <__multadd>
 800bcb2:	42af      	cmp	r7, r5
 800bcb4:	9002      	str	r0, [sp, #8]
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	f04f 020a 	mov.w	r2, #10
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	4648      	mov	r0, r9
 800bcc2:	d107      	bne.n	800bcd4 <_dtoa_r+0xadc>
 800bcc4:	f000 f9ca 	bl	800c05c <__multadd>
 800bcc8:	4607      	mov	r7, r0
 800bcca:	4605      	mov	r5, r0
 800bccc:	9b00      	ldr	r3, [sp, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	e777      	b.n	800bbc4 <_dtoa_r+0x9cc>
 800bcd4:	f000 f9c2 	bl	800c05c <__multadd>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4607      	mov	r7, r0
 800bcdc:	2300      	movs	r3, #0
 800bcde:	220a      	movs	r2, #10
 800bce0:	4648      	mov	r0, r9
 800bce2:	f000 f9bb 	bl	800c05c <__multadd>
 800bce6:	4605      	mov	r5, r0
 800bce8:	e7f0      	b.n	800bccc <_dtoa_r+0xad4>
 800bcea:	f1bb 0f00 	cmp.w	fp, #0
 800bcee:	bfcc      	ite	gt
 800bcf0:	465e      	movgt	r6, fp
 800bcf2:	2601      	movle	r6, #1
 800bcf4:	4456      	add	r6, sl
 800bcf6:	2700      	movs	r7, #0
 800bcf8:	9902      	ldr	r1, [sp, #8]
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	4648      	mov	r0, r9
 800bd00:	f000 fb50 	bl	800c3a4 <__lshift>
 800bd04:	4621      	mov	r1, r4
 800bd06:	9002      	str	r0, [sp, #8]
 800bd08:	f000 fbb8 	bl	800c47c <__mcmp>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	dcb4      	bgt.n	800bc7a <_dtoa_r+0xa82>
 800bd10:	d102      	bne.n	800bd18 <_dtoa_r+0xb20>
 800bd12:	9b00      	ldr	r3, [sp, #0]
 800bd14:	07db      	lsls	r3, r3, #31
 800bd16:	d4b0      	bmi.n	800bc7a <_dtoa_r+0xa82>
 800bd18:	4633      	mov	r3, r6
 800bd1a:	461e      	mov	r6, r3
 800bd1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd20:	2a30      	cmp	r2, #48	@ 0x30
 800bd22:	d0fa      	beq.n	800bd1a <_dtoa_r+0xb22>
 800bd24:	e4b5      	b.n	800b692 <_dtoa_r+0x49a>
 800bd26:	459a      	cmp	sl, r3
 800bd28:	d1a8      	bne.n	800bc7c <_dtoa_r+0xa84>
 800bd2a:	2331      	movs	r3, #49	@ 0x31
 800bd2c:	f108 0801 	add.w	r8, r8, #1
 800bd30:	f88a 3000 	strb.w	r3, [sl]
 800bd34:	e4ad      	b.n	800b692 <_dtoa_r+0x49a>
 800bd36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bd94 <_dtoa_r+0xb9c>
 800bd3c:	b11b      	cbz	r3, 800bd46 <_dtoa_r+0xb4e>
 800bd3e:	f10a 0308 	add.w	r3, sl, #8
 800bd42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	4650      	mov	r0, sl
 800bd48:	b017      	add	sp, #92	@ 0x5c
 800bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	9b07      	ldr	r3, [sp, #28]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	f77f ae2e 	ble.w	800b9b2 <_dtoa_r+0x7ba>
 800bd56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd58:	9308      	str	r3, [sp, #32]
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	e64d      	b.n	800b9fa <_dtoa_r+0x802>
 800bd5e:	f1bb 0f00 	cmp.w	fp, #0
 800bd62:	f77f aed9 	ble.w	800bb18 <_dtoa_r+0x920>
 800bd66:	4656      	mov	r6, sl
 800bd68:	9802      	ldr	r0, [sp, #8]
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f7ff f9b9 	bl	800b0e2 <quorem>
 800bd70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bd74:	f806 3b01 	strb.w	r3, [r6], #1
 800bd78:	eba6 020a 	sub.w	r2, r6, sl
 800bd7c:	4593      	cmp	fp, r2
 800bd7e:	ddb4      	ble.n	800bcea <_dtoa_r+0xaf2>
 800bd80:	9902      	ldr	r1, [sp, #8]
 800bd82:	2300      	movs	r3, #0
 800bd84:	220a      	movs	r2, #10
 800bd86:	4648      	mov	r0, r9
 800bd88:	f000 f968 	bl	800c05c <__multadd>
 800bd8c:	9002      	str	r0, [sp, #8]
 800bd8e:	e7eb      	b.n	800bd68 <_dtoa_r+0xb70>
 800bd90:	0800d2e4 	.word	0x0800d2e4
 800bd94:	0800d268 	.word	0x0800d268

0800bd98 <_free_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	d041      	beq.n	800be24 <_free_r+0x8c>
 800bda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda4:	1f0c      	subs	r4, r1, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	bfb8      	it	lt
 800bdaa:	18e4      	addlt	r4, r4, r3
 800bdac:	f000 f8e8 	bl	800bf80 <__malloc_lock>
 800bdb0:	4a1d      	ldr	r2, [pc, #116]	@ (800be28 <_free_r+0x90>)
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	b933      	cbnz	r3, 800bdc4 <_free_r+0x2c>
 800bdb6:	6063      	str	r3, [r4, #4]
 800bdb8:	6014      	str	r4, [r2, #0]
 800bdba:	4628      	mov	r0, r5
 800bdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc0:	f000 b8e4 	b.w	800bf8c <__malloc_unlock>
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	d908      	bls.n	800bdda <_free_r+0x42>
 800bdc8:	6820      	ldr	r0, [r4, #0]
 800bdca:	1821      	adds	r1, r4, r0
 800bdcc:	428b      	cmp	r3, r1
 800bdce:	bf01      	itttt	eq
 800bdd0:	6819      	ldreq	r1, [r3, #0]
 800bdd2:	685b      	ldreq	r3, [r3, #4]
 800bdd4:	1809      	addeq	r1, r1, r0
 800bdd6:	6021      	streq	r1, [r4, #0]
 800bdd8:	e7ed      	b.n	800bdb6 <_free_r+0x1e>
 800bdda:	461a      	mov	r2, r3
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	b10b      	cbz	r3, 800bde4 <_free_r+0x4c>
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	d9fa      	bls.n	800bdda <_free_r+0x42>
 800bde4:	6811      	ldr	r1, [r2, #0]
 800bde6:	1850      	adds	r0, r2, r1
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d10b      	bne.n	800be04 <_free_r+0x6c>
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	4401      	add	r1, r0
 800bdf0:	1850      	adds	r0, r2, r1
 800bdf2:	4283      	cmp	r3, r0
 800bdf4:	6011      	str	r1, [r2, #0]
 800bdf6:	d1e0      	bne.n	800bdba <_free_r+0x22>
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	6053      	str	r3, [r2, #4]
 800bdfe:	4408      	add	r0, r1
 800be00:	6010      	str	r0, [r2, #0]
 800be02:	e7da      	b.n	800bdba <_free_r+0x22>
 800be04:	d902      	bls.n	800be0c <_free_r+0x74>
 800be06:	230c      	movs	r3, #12
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	e7d6      	b.n	800bdba <_free_r+0x22>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	1821      	adds	r1, r4, r0
 800be10:	428b      	cmp	r3, r1
 800be12:	bf04      	itt	eq
 800be14:	6819      	ldreq	r1, [r3, #0]
 800be16:	685b      	ldreq	r3, [r3, #4]
 800be18:	6063      	str	r3, [r4, #4]
 800be1a:	bf04      	itt	eq
 800be1c:	1809      	addeq	r1, r1, r0
 800be1e:	6021      	streq	r1, [r4, #0]
 800be20:	6054      	str	r4, [r2, #4]
 800be22:	e7ca      	b.n	800bdba <_free_r+0x22>
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	200036d4 	.word	0x200036d4

0800be2c <malloc>:
 800be2c:	4b02      	ldr	r3, [pc, #8]	@ (800be38 <malloc+0xc>)
 800be2e:	4601      	mov	r1, r0
 800be30:	6818      	ldr	r0, [r3, #0]
 800be32:	f000 b825 	b.w	800be80 <_malloc_r>
 800be36:	bf00      	nop
 800be38:	2000002c 	.word	0x2000002c

0800be3c <sbrk_aligned>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	4e0f      	ldr	r6, [pc, #60]	@ (800be7c <sbrk_aligned+0x40>)
 800be40:	460c      	mov	r4, r1
 800be42:	6831      	ldr	r1, [r6, #0]
 800be44:	4605      	mov	r5, r0
 800be46:	b911      	cbnz	r1, 800be4e <sbrk_aligned+0x12>
 800be48:	f000 fe3e 	bl	800cac8 <_sbrk_r>
 800be4c:	6030      	str	r0, [r6, #0]
 800be4e:	4621      	mov	r1, r4
 800be50:	4628      	mov	r0, r5
 800be52:	f000 fe39 	bl	800cac8 <_sbrk_r>
 800be56:	1c43      	adds	r3, r0, #1
 800be58:	d103      	bne.n	800be62 <sbrk_aligned+0x26>
 800be5a:	f04f 34ff 	mov.w	r4, #4294967295
 800be5e:	4620      	mov	r0, r4
 800be60:	bd70      	pop	{r4, r5, r6, pc}
 800be62:	1cc4      	adds	r4, r0, #3
 800be64:	f024 0403 	bic.w	r4, r4, #3
 800be68:	42a0      	cmp	r0, r4
 800be6a:	d0f8      	beq.n	800be5e <sbrk_aligned+0x22>
 800be6c:	1a21      	subs	r1, r4, r0
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 fe2a 	bl	800cac8 <_sbrk_r>
 800be74:	3001      	adds	r0, #1
 800be76:	d1f2      	bne.n	800be5e <sbrk_aligned+0x22>
 800be78:	e7ef      	b.n	800be5a <sbrk_aligned+0x1e>
 800be7a:	bf00      	nop
 800be7c:	200036d0 	.word	0x200036d0

0800be80 <_malloc_r>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	1ccd      	adds	r5, r1, #3
 800be86:	f025 0503 	bic.w	r5, r5, #3
 800be8a:	3508      	adds	r5, #8
 800be8c:	2d0c      	cmp	r5, #12
 800be8e:	bf38      	it	cc
 800be90:	250c      	movcc	r5, #12
 800be92:	2d00      	cmp	r5, #0
 800be94:	4606      	mov	r6, r0
 800be96:	db01      	blt.n	800be9c <_malloc_r+0x1c>
 800be98:	42a9      	cmp	r1, r5
 800be9a:	d904      	bls.n	800bea6 <_malloc_r+0x26>
 800be9c:	230c      	movs	r3, #12
 800be9e:	6033      	str	r3, [r6, #0]
 800bea0:	2000      	movs	r0, #0
 800bea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf7c <_malloc_r+0xfc>
 800beaa:	f000 f869 	bl	800bf80 <__malloc_lock>
 800beae:	f8d8 3000 	ldr.w	r3, [r8]
 800beb2:	461c      	mov	r4, r3
 800beb4:	bb44      	cbnz	r4, 800bf08 <_malloc_r+0x88>
 800beb6:	4629      	mov	r1, r5
 800beb8:	4630      	mov	r0, r6
 800beba:	f7ff ffbf 	bl	800be3c <sbrk_aligned>
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	4604      	mov	r4, r0
 800bec2:	d158      	bne.n	800bf76 <_malloc_r+0xf6>
 800bec4:	f8d8 4000 	ldr.w	r4, [r8]
 800bec8:	4627      	mov	r7, r4
 800beca:	2f00      	cmp	r7, #0
 800becc:	d143      	bne.n	800bf56 <_malloc_r+0xd6>
 800bece:	2c00      	cmp	r4, #0
 800bed0:	d04b      	beq.n	800bf6a <_malloc_r+0xea>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	4639      	mov	r1, r7
 800bed6:	4630      	mov	r0, r6
 800bed8:	eb04 0903 	add.w	r9, r4, r3
 800bedc:	f000 fdf4 	bl	800cac8 <_sbrk_r>
 800bee0:	4581      	cmp	r9, r0
 800bee2:	d142      	bne.n	800bf6a <_malloc_r+0xea>
 800bee4:	6821      	ldr	r1, [r4, #0]
 800bee6:	1a6d      	subs	r5, r5, r1
 800bee8:	4629      	mov	r1, r5
 800beea:	4630      	mov	r0, r6
 800beec:	f7ff ffa6 	bl	800be3c <sbrk_aligned>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d03a      	beq.n	800bf6a <_malloc_r+0xea>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	442b      	add	r3, r5
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	f8d8 3000 	ldr.w	r3, [r8]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	bb62      	cbnz	r2, 800bf5c <_malloc_r+0xdc>
 800bf02:	f8c8 7000 	str.w	r7, [r8]
 800bf06:	e00f      	b.n	800bf28 <_malloc_r+0xa8>
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	1b52      	subs	r2, r2, r5
 800bf0c:	d420      	bmi.n	800bf50 <_malloc_r+0xd0>
 800bf0e:	2a0b      	cmp	r2, #11
 800bf10:	d917      	bls.n	800bf42 <_malloc_r+0xc2>
 800bf12:	1961      	adds	r1, r4, r5
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	6025      	str	r5, [r4, #0]
 800bf18:	bf18      	it	ne
 800bf1a:	6059      	strne	r1, [r3, #4]
 800bf1c:	6863      	ldr	r3, [r4, #4]
 800bf1e:	bf08      	it	eq
 800bf20:	f8c8 1000 	streq.w	r1, [r8]
 800bf24:	5162      	str	r2, [r4, r5]
 800bf26:	604b      	str	r3, [r1, #4]
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f000 f82f 	bl	800bf8c <__malloc_unlock>
 800bf2e:	f104 000b 	add.w	r0, r4, #11
 800bf32:	1d23      	adds	r3, r4, #4
 800bf34:	f020 0007 	bic.w	r0, r0, #7
 800bf38:	1ac2      	subs	r2, r0, r3
 800bf3a:	bf1c      	itt	ne
 800bf3c:	1a1b      	subne	r3, r3, r0
 800bf3e:	50a3      	strne	r3, [r4, r2]
 800bf40:	e7af      	b.n	800bea2 <_malloc_r+0x22>
 800bf42:	6862      	ldr	r2, [r4, #4]
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	bf0c      	ite	eq
 800bf48:	f8c8 2000 	streq.w	r2, [r8]
 800bf4c:	605a      	strne	r2, [r3, #4]
 800bf4e:	e7eb      	b.n	800bf28 <_malloc_r+0xa8>
 800bf50:	4623      	mov	r3, r4
 800bf52:	6864      	ldr	r4, [r4, #4]
 800bf54:	e7ae      	b.n	800beb4 <_malloc_r+0x34>
 800bf56:	463c      	mov	r4, r7
 800bf58:	687f      	ldr	r7, [r7, #4]
 800bf5a:	e7b6      	b.n	800beca <_malloc_r+0x4a>
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	d1fb      	bne.n	800bf5c <_malloc_r+0xdc>
 800bf64:	2300      	movs	r3, #0
 800bf66:	6053      	str	r3, [r2, #4]
 800bf68:	e7de      	b.n	800bf28 <_malloc_r+0xa8>
 800bf6a:	230c      	movs	r3, #12
 800bf6c:	6033      	str	r3, [r6, #0]
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f000 f80c 	bl	800bf8c <__malloc_unlock>
 800bf74:	e794      	b.n	800bea0 <_malloc_r+0x20>
 800bf76:	6005      	str	r5, [r0, #0]
 800bf78:	e7d6      	b.n	800bf28 <_malloc_r+0xa8>
 800bf7a:	bf00      	nop
 800bf7c:	200036d4 	.word	0x200036d4

0800bf80 <__malloc_lock>:
 800bf80:	4801      	ldr	r0, [pc, #4]	@ (800bf88 <__malloc_lock+0x8>)
 800bf82:	f7ff b89e 	b.w	800b0c2 <__retarget_lock_acquire_recursive>
 800bf86:	bf00      	nop
 800bf88:	200036cc 	.word	0x200036cc

0800bf8c <__malloc_unlock>:
 800bf8c:	4801      	ldr	r0, [pc, #4]	@ (800bf94 <__malloc_unlock+0x8>)
 800bf8e:	f7ff b899 	b.w	800b0c4 <__retarget_lock_release_recursive>
 800bf92:	bf00      	nop
 800bf94:	200036cc 	.word	0x200036cc

0800bf98 <_Balloc>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	69c6      	ldr	r6, [r0, #28]
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	b976      	cbnz	r6, 800bfc0 <_Balloc+0x28>
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff ff42 	bl	800be2c <malloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	61e0      	str	r0, [r4, #28]
 800bfac:	b920      	cbnz	r0, 800bfb8 <_Balloc+0x20>
 800bfae:	4b18      	ldr	r3, [pc, #96]	@ (800c010 <_Balloc+0x78>)
 800bfb0:	4818      	ldr	r0, [pc, #96]	@ (800c014 <_Balloc+0x7c>)
 800bfb2:	216b      	movs	r1, #107	@ 0x6b
 800bfb4:	f000 fd98 	bl	800cae8 <__assert_func>
 800bfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfbc:	6006      	str	r6, [r0, #0]
 800bfbe:	60c6      	str	r6, [r0, #12]
 800bfc0:	69e6      	ldr	r6, [r4, #28]
 800bfc2:	68f3      	ldr	r3, [r6, #12]
 800bfc4:	b183      	cbz	r3, 800bfe8 <_Balloc+0x50>
 800bfc6:	69e3      	ldr	r3, [r4, #28]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfce:	b9b8      	cbnz	r0, 800c000 <_Balloc+0x68>
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	fa01 f605 	lsl.w	r6, r1, r5
 800bfd6:	1d72      	adds	r2, r6, #5
 800bfd8:	0092      	lsls	r2, r2, #2
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 fda2 	bl	800cb24 <_calloc_r>
 800bfe0:	b160      	cbz	r0, 800bffc <_Balloc+0x64>
 800bfe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfe6:	e00e      	b.n	800c006 <_Balloc+0x6e>
 800bfe8:	2221      	movs	r2, #33	@ 0x21
 800bfea:	2104      	movs	r1, #4
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 fd99 	bl	800cb24 <_calloc_r>
 800bff2:	69e3      	ldr	r3, [r4, #28]
 800bff4:	60f0      	str	r0, [r6, #12]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e4      	bne.n	800bfc6 <_Balloc+0x2e>
 800bffc:	2000      	movs	r0, #0
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	6802      	ldr	r2, [r0, #0]
 800c002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c006:	2300      	movs	r3, #0
 800c008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c00c:	e7f7      	b.n	800bffe <_Balloc+0x66>
 800c00e:	bf00      	nop
 800c010:	0800d275 	.word	0x0800d275
 800c014:	0800d2f5 	.word	0x0800d2f5

0800c018 <_Bfree>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	69c6      	ldr	r6, [r0, #28]
 800c01c:	4605      	mov	r5, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	b976      	cbnz	r6, 800c040 <_Bfree+0x28>
 800c022:	2010      	movs	r0, #16
 800c024:	f7ff ff02 	bl	800be2c <malloc>
 800c028:	4602      	mov	r2, r0
 800c02a:	61e8      	str	r0, [r5, #28]
 800c02c:	b920      	cbnz	r0, 800c038 <_Bfree+0x20>
 800c02e:	4b09      	ldr	r3, [pc, #36]	@ (800c054 <_Bfree+0x3c>)
 800c030:	4809      	ldr	r0, [pc, #36]	@ (800c058 <_Bfree+0x40>)
 800c032:	218f      	movs	r1, #143	@ 0x8f
 800c034:	f000 fd58 	bl	800cae8 <__assert_func>
 800c038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c03c:	6006      	str	r6, [r0, #0]
 800c03e:	60c6      	str	r6, [r0, #12]
 800c040:	b13c      	cbz	r4, 800c052 <_Bfree+0x3a>
 800c042:	69eb      	ldr	r3, [r5, #28]
 800c044:	6862      	ldr	r2, [r4, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c04c:	6021      	str	r1, [r4, #0]
 800c04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	0800d275 	.word	0x0800d275
 800c058:	0800d2f5 	.word	0x0800d2f5

0800c05c <__multadd>:
 800c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c060:	690d      	ldr	r5, [r1, #16]
 800c062:	4607      	mov	r7, r0
 800c064:	460c      	mov	r4, r1
 800c066:	461e      	mov	r6, r3
 800c068:	f101 0c14 	add.w	ip, r1, #20
 800c06c:	2000      	movs	r0, #0
 800c06e:	f8dc 3000 	ldr.w	r3, [ip]
 800c072:	b299      	uxth	r1, r3
 800c074:	fb02 6101 	mla	r1, r2, r1, r6
 800c078:	0c1e      	lsrs	r6, r3, #16
 800c07a:	0c0b      	lsrs	r3, r1, #16
 800c07c:	fb02 3306 	mla	r3, r2, r6, r3
 800c080:	b289      	uxth	r1, r1
 800c082:	3001      	adds	r0, #1
 800c084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c088:	4285      	cmp	r5, r0
 800c08a:	f84c 1b04 	str.w	r1, [ip], #4
 800c08e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c092:	dcec      	bgt.n	800c06e <__multadd+0x12>
 800c094:	b30e      	cbz	r6, 800c0da <__multadd+0x7e>
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	42ab      	cmp	r3, r5
 800c09a:	dc19      	bgt.n	800c0d0 <__multadd+0x74>
 800c09c:	6861      	ldr	r1, [r4, #4]
 800c09e:	4638      	mov	r0, r7
 800c0a0:	3101      	adds	r1, #1
 800c0a2:	f7ff ff79 	bl	800bf98 <_Balloc>
 800c0a6:	4680      	mov	r8, r0
 800c0a8:	b928      	cbnz	r0, 800c0b6 <__multadd+0x5a>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c0e0 <__multadd+0x84>)
 800c0ae:	480d      	ldr	r0, [pc, #52]	@ (800c0e4 <__multadd+0x88>)
 800c0b0:	21ba      	movs	r1, #186	@ 0xba
 800c0b2:	f000 fd19 	bl	800cae8 <__assert_func>
 800c0b6:	6922      	ldr	r2, [r4, #16]
 800c0b8:	3202      	adds	r2, #2
 800c0ba:	f104 010c 	add.w	r1, r4, #12
 800c0be:	0092      	lsls	r2, r2, #2
 800c0c0:	300c      	adds	r0, #12
 800c0c2:	f7ff f800 	bl	800b0c6 <memcpy>
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff ffa5 	bl	800c018 <_Bfree>
 800c0ce:	4644      	mov	r4, r8
 800c0d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	615e      	str	r6, [r3, #20]
 800c0d8:	6125      	str	r5, [r4, #16]
 800c0da:	4620      	mov	r0, r4
 800c0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e0:	0800d2e4 	.word	0x0800d2e4
 800c0e4:	0800d2f5 	.word	0x0800d2f5

0800c0e8 <__hi0bits>:
 800c0e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	bf36      	itet	cc
 800c0f0:	0403      	lslcc	r3, r0, #16
 800c0f2:	2000      	movcs	r0, #0
 800c0f4:	2010      	movcc	r0, #16
 800c0f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0fa:	bf3c      	itt	cc
 800c0fc:	021b      	lslcc	r3, r3, #8
 800c0fe:	3008      	addcc	r0, #8
 800c100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c104:	bf3c      	itt	cc
 800c106:	011b      	lslcc	r3, r3, #4
 800c108:	3004      	addcc	r0, #4
 800c10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c10e:	bf3c      	itt	cc
 800c110:	009b      	lslcc	r3, r3, #2
 800c112:	3002      	addcc	r0, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	db05      	blt.n	800c124 <__hi0bits+0x3c>
 800c118:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c11c:	f100 0001 	add.w	r0, r0, #1
 800c120:	bf08      	it	eq
 800c122:	2020      	moveq	r0, #32
 800c124:	4770      	bx	lr

0800c126 <__lo0bits>:
 800c126:	6803      	ldr	r3, [r0, #0]
 800c128:	4602      	mov	r2, r0
 800c12a:	f013 0007 	ands.w	r0, r3, #7
 800c12e:	d00b      	beq.n	800c148 <__lo0bits+0x22>
 800c130:	07d9      	lsls	r1, r3, #31
 800c132:	d421      	bmi.n	800c178 <__lo0bits+0x52>
 800c134:	0798      	lsls	r0, r3, #30
 800c136:	bf49      	itett	mi
 800c138:	085b      	lsrmi	r3, r3, #1
 800c13a:	089b      	lsrpl	r3, r3, #2
 800c13c:	2001      	movmi	r0, #1
 800c13e:	6013      	strmi	r3, [r2, #0]
 800c140:	bf5c      	itt	pl
 800c142:	6013      	strpl	r3, [r2, #0]
 800c144:	2002      	movpl	r0, #2
 800c146:	4770      	bx	lr
 800c148:	b299      	uxth	r1, r3
 800c14a:	b909      	cbnz	r1, 800c150 <__lo0bits+0x2a>
 800c14c:	0c1b      	lsrs	r3, r3, #16
 800c14e:	2010      	movs	r0, #16
 800c150:	b2d9      	uxtb	r1, r3
 800c152:	b909      	cbnz	r1, 800c158 <__lo0bits+0x32>
 800c154:	3008      	adds	r0, #8
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	0719      	lsls	r1, r3, #28
 800c15a:	bf04      	itt	eq
 800c15c:	091b      	lsreq	r3, r3, #4
 800c15e:	3004      	addeq	r0, #4
 800c160:	0799      	lsls	r1, r3, #30
 800c162:	bf04      	itt	eq
 800c164:	089b      	lsreq	r3, r3, #2
 800c166:	3002      	addeq	r0, #2
 800c168:	07d9      	lsls	r1, r3, #31
 800c16a:	d403      	bmi.n	800c174 <__lo0bits+0x4e>
 800c16c:	085b      	lsrs	r3, r3, #1
 800c16e:	f100 0001 	add.w	r0, r0, #1
 800c172:	d003      	beq.n	800c17c <__lo0bits+0x56>
 800c174:	6013      	str	r3, [r2, #0]
 800c176:	4770      	bx	lr
 800c178:	2000      	movs	r0, #0
 800c17a:	4770      	bx	lr
 800c17c:	2020      	movs	r0, #32
 800c17e:	4770      	bx	lr

0800c180 <__i2b>:
 800c180:	b510      	push	{r4, lr}
 800c182:	460c      	mov	r4, r1
 800c184:	2101      	movs	r1, #1
 800c186:	f7ff ff07 	bl	800bf98 <_Balloc>
 800c18a:	4602      	mov	r2, r0
 800c18c:	b928      	cbnz	r0, 800c19a <__i2b+0x1a>
 800c18e:	4b05      	ldr	r3, [pc, #20]	@ (800c1a4 <__i2b+0x24>)
 800c190:	4805      	ldr	r0, [pc, #20]	@ (800c1a8 <__i2b+0x28>)
 800c192:	f240 1145 	movw	r1, #325	@ 0x145
 800c196:	f000 fca7 	bl	800cae8 <__assert_func>
 800c19a:	2301      	movs	r3, #1
 800c19c:	6144      	str	r4, [r0, #20]
 800c19e:	6103      	str	r3, [r0, #16]
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800d2e4 	.word	0x0800d2e4
 800c1a8:	0800d2f5 	.word	0x0800d2f5

0800c1ac <__multiply>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	4617      	mov	r7, r2
 800c1b2:	690a      	ldr	r2, [r1, #16]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	bfa8      	it	ge
 800c1ba:	463b      	movge	r3, r7
 800c1bc:	4689      	mov	r9, r1
 800c1be:	bfa4      	itt	ge
 800c1c0:	460f      	movge	r7, r1
 800c1c2:	4699      	movge	r9, r3
 800c1c4:	693d      	ldr	r5, [r7, #16]
 800c1c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	eb05 060a 	add.w	r6, r5, sl
 800c1d2:	42b3      	cmp	r3, r6
 800c1d4:	b085      	sub	sp, #20
 800c1d6:	bfb8      	it	lt
 800c1d8:	3101      	addlt	r1, #1
 800c1da:	f7ff fedd 	bl	800bf98 <_Balloc>
 800c1de:	b930      	cbnz	r0, 800c1ee <__multiply+0x42>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	4b41      	ldr	r3, [pc, #260]	@ (800c2e8 <__multiply+0x13c>)
 800c1e4:	4841      	ldr	r0, [pc, #260]	@ (800c2ec <__multiply+0x140>)
 800c1e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1ea:	f000 fc7d 	bl	800cae8 <__assert_func>
 800c1ee:	f100 0414 	add.w	r4, r0, #20
 800c1f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c1f6:	4623      	mov	r3, r4
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4573      	cmp	r3, lr
 800c1fc:	d320      	bcc.n	800c240 <__multiply+0x94>
 800c1fe:	f107 0814 	add.w	r8, r7, #20
 800c202:	f109 0114 	add.w	r1, r9, #20
 800c206:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c20a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c20e:	9302      	str	r3, [sp, #8]
 800c210:	1beb      	subs	r3, r5, r7
 800c212:	3b15      	subs	r3, #21
 800c214:	f023 0303 	bic.w	r3, r3, #3
 800c218:	3304      	adds	r3, #4
 800c21a:	3715      	adds	r7, #21
 800c21c:	42bd      	cmp	r5, r7
 800c21e:	bf38      	it	cc
 800c220:	2304      	movcc	r3, #4
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	9103      	str	r1, [sp, #12]
 800c228:	428b      	cmp	r3, r1
 800c22a:	d80c      	bhi.n	800c246 <__multiply+0x9a>
 800c22c:	2e00      	cmp	r6, #0
 800c22e:	dd03      	ble.n	800c238 <__multiply+0x8c>
 800c230:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c234:	2b00      	cmp	r3, #0
 800c236:	d055      	beq.n	800c2e4 <__multiply+0x138>
 800c238:	6106      	str	r6, [r0, #16]
 800c23a:	b005      	add	sp, #20
 800c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c240:	f843 2b04 	str.w	r2, [r3], #4
 800c244:	e7d9      	b.n	800c1fa <__multiply+0x4e>
 800c246:	f8b1 a000 	ldrh.w	sl, [r1]
 800c24a:	f1ba 0f00 	cmp.w	sl, #0
 800c24e:	d01f      	beq.n	800c290 <__multiply+0xe4>
 800c250:	46c4      	mov	ip, r8
 800c252:	46a1      	mov	r9, r4
 800c254:	2700      	movs	r7, #0
 800c256:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c25a:	f8d9 3000 	ldr.w	r3, [r9]
 800c25e:	fa1f fb82 	uxth.w	fp, r2
 800c262:	b29b      	uxth	r3, r3
 800c264:	fb0a 330b 	mla	r3, sl, fp, r3
 800c268:	443b      	add	r3, r7
 800c26a:	f8d9 7000 	ldr.w	r7, [r9]
 800c26e:	0c12      	lsrs	r2, r2, #16
 800c270:	0c3f      	lsrs	r7, r7, #16
 800c272:	fb0a 7202 	mla	r2, sl, r2, r7
 800c276:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c280:	4565      	cmp	r5, ip
 800c282:	f849 3b04 	str.w	r3, [r9], #4
 800c286:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c28a:	d8e4      	bhi.n	800c256 <__multiply+0xaa>
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	50e7      	str	r7, [r4, r3]
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c296:	3104      	adds	r1, #4
 800c298:	f1b9 0f00 	cmp.w	r9, #0
 800c29c:	d020      	beq.n	800c2e0 <__multiply+0x134>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	4647      	mov	r7, r8
 800c2a2:	46a4      	mov	ip, r4
 800c2a4:	f04f 0a00 	mov.w	sl, #0
 800c2a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800c2ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c2b0:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b4:	4452      	add	r2, sl
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2bc:	f84c 3b04 	str.w	r3, [ip], #4
 800c2c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800c2c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800c2cc:	fb09 330a 	mla	r3, r9, sl, r3
 800c2d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c2d4:	42bd      	cmp	r5, r7
 800c2d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2da:	d8e5      	bhi.n	800c2a8 <__multiply+0xfc>
 800c2dc:	9a01      	ldr	r2, [sp, #4]
 800c2de:	50a3      	str	r3, [r4, r2]
 800c2e0:	3404      	adds	r4, #4
 800c2e2:	e79f      	b.n	800c224 <__multiply+0x78>
 800c2e4:	3e01      	subs	r6, #1
 800c2e6:	e7a1      	b.n	800c22c <__multiply+0x80>
 800c2e8:	0800d2e4 	.word	0x0800d2e4
 800c2ec:	0800d2f5 	.word	0x0800d2f5

0800c2f0 <__pow5mult>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	4615      	mov	r5, r2
 800c2f6:	f012 0203 	ands.w	r2, r2, #3
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	460e      	mov	r6, r1
 800c2fe:	d007      	beq.n	800c310 <__pow5mult+0x20>
 800c300:	4c25      	ldr	r4, [pc, #148]	@ (800c398 <__pow5mult+0xa8>)
 800c302:	3a01      	subs	r2, #1
 800c304:	2300      	movs	r3, #0
 800c306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c30a:	f7ff fea7 	bl	800c05c <__multadd>
 800c30e:	4606      	mov	r6, r0
 800c310:	10ad      	asrs	r5, r5, #2
 800c312:	d03d      	beq.n	800c390 <__pow5mult+0xa0>
 800c314:	69fc      	ldr	r4, [r7, #28]
 800c316:	b97c      	cbnz	r4, 800c338 <__pow5mult+0x48>
 800c318:	2010      	movs	r0, #16
 800c31a:	f7ff fd87 	bl	800be2c <malloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	61f8      	str	r0, [r7, #28]
 800c322:	b928      	cbnz	r0, 800c330 <__pow5mult+0x40>
 800c324:	4b1d      	ldr	r3, [pc, #116]	@ (800c39c <__pow5mult+0xac>)
 800c326:	481e      	ldr	r0, [pc, #120]	@ (800c3a0 <__pow5mult+0xb0>)
 800c328:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c32c:	f000 fbdc 	bl	800cae8 <__assert_func>
 800c330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	60c4      	str	r4, [r0, #12]
 800c338:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c340:	b94c      	cbnz	r4, 800c356 <__pow5mult+0x66>
 800c342:	f240 2171 	movw	r1, #625	@ 0x271
 800c346:	4638      	mov	r0, r7
 800c348:	f7ff ff1a 	bl	800c180 <__i2b>
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c352:	4604      	mov	r4, r0
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	f04f 0900 	mov.w	r9, #0
 800c35a:	07eb      	lsls	r3, r5, #31
 800c35c:	d50a      	bpl.n	800c374 <__pow5mult+0x84>
 800c35e:	4631      	mov	r1, r6
 800c360:	4622      	mov	r2, r4
 800c362:	4638      	mov	r0, r7
 800c364:	f7ff ff22 	bl	800c1ac <__multiply>
 800c368:	4631      	mov	r1, r6
 800c36a:	4680      	mov	r8, r0
 800c36c:	4638      	mov	r0, r7
 800c36e:	f7ff fe53 	bl	800c018 <_Bfree>
 800c372:	4646      	mov	r6, r8
 800c374:	106d      	asrs	r5, r5, #1
 800c376:	d00b      	beq.n	800c390 <__pow5mult+0xa0>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	b938      	cbnz	r0, 800c38c <__pow5mult+0x9c>
 800c37c:	4622      	mov	r2, r4
 800c37e:	4621      	mov	r1, r4
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff ff13 	bl	800c1ac <__multiply>
 800c386:	6020      	str	r0, [r4, #0]
 800c388:	f8c0 9000 	str.w	r9, [r0]
 800c38c:	4604      	mov	r4, r0
 800c38e:	e7e4      	b.n	800c35a <__pow5mult+0x6a>
 800c390:	4630      	mov	r0, r6
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	bf00      	nop
 800c398:	0800d3a8 	.word	0x0800d3a8
 800c39c:	0800d275 	.word	0x0800d275
 800c3a0:	0800d2f5 	.word	0x0800d2f5

0800c3a4 <__lshift>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6849      	ldr	r1, [r1, #4]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3bc:	f108 0601 	add.w	r6, r8, #1
 800c3c0:	42b3      	cmp	r3, r6
 800c3c2:	db0b      	blt.n	800c3dc <__lshift+0x38>
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff fde7 	bl	800bf98 <_Balloc>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	b948      	cbnz	r0, 800c3e2 <__lshift+0x3e>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b28      	ldr	r3, [pc, #160]	@ (800c474 <__lshift+0xd0>)
 800c3d2:	4829      	ldr	r0, [pc, #164]	@ (800c478 <__lshift+0xd4>)
 800c3d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3d8:	f000 fb86 	bl	800cae8 <__assert_func>
 800c3dc:	3101      	adds	r1, #1
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__lshift+0x1c>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f100 0114 	add.w	r1, r0, #20
 800c3e8:	f100 0210 	add.w	r2, r0, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4553      	cmp	r3, sl
 800c3f0:	db33      	blt.n	800c45a <__lshift+0xb6>
 800c3f2:	6920      	ldr	r0, [r4, #16]
 800c3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f8:	f104 0314 	add.w	r3, r4, #20
 800c3fc:	f019 091f 	ands.w	r9, r9, #31
 800c400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c404:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c408:	d02b      	beq.n	800c462 <__lshift+0xbe>
 800c40a:	f1c9 0e20 	rsb	lr, r9, #32
 800c40e:	468a      	mov	sl, r1
 800c410:	2200      	movs	r2, #0
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	fa00 f009 	lsl.w	r0, r0, r9
 800c418:	4310      	orrs	r0, r2
 800c41a:	f84a 0b04 	str.w	r0, [sl], #4
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	459c      	cmp	ip, r3
 800c424:	fa22 f20e 	lsr.w	r2, r2, lr
 800c428:	d8f3      	bhi.n	800c412 <__lshift+0x6e>
 800c42a:	ebac 0304 	sub.w	r3, ip, r4
 800c42e:	3b15      	subs	r3, #21
 800c430:	f023 0303 	bic.w	r3, r3, #3
 800c434:	3304      	adds	r3, #4
 800c436:	f104 0015 	add.w	r0, r4, #21
 800c43a:	4560      	cmp	r0, ip
 800c43c:	bf88      	it	hi
 800c43e:	2304      	movhi	r3, #4
 800c440:	50ca      	str	r2, [r1, r3]
 800c442:	b10a      	cbz	r2, 800c448 <__lshift+0xa4>
 800c444:	f108 0602 	add.w	r6, r8, #2
 800c448:	3e01      	subs	r6, #1
 800c44a:	4638      	mov	r0, r7
 800c44c:	612e      	str	r6, [r5, #16]
 800c44e:	4621      	mov	r1, r4
 800c450:	f7ff fde2 	bl	800c018 <_Bfree>
 800c454:	4628      	mov	r0, r5
 800c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c45e:	3301      	adds	r3, #1
 800c460:	e7c5      	b.n	800c3ee <__lshift+0x4a>
 800c462:	3904      	subs	r1, #4
 800c464:	f853 2b04 	ldr.w	r2, [r3], #4
 800c468:	f841 2f04 	str.w	r2, [r1, #4]!
 800c46c:	459c      	cmp	ip, r3
 800c46e:	d8f9      	bhi.n	800c464 <__lshift+0xc0>
 800c470:	e7ea      	b.n	800c448 <__lshift+0xa4>
 800c472:	bf00      	nop
 800c474:	0800d2e4 	.word	0x0800d2e4
 800c478:	0800d2f5 	.word	0x0800d2f5

0800c47c <__mcmp>:
 800c47c:	690a      	ldr	r2, [r1, #16]
 800c47e:	4603      	mov	r3, r0
 800c480:	6900      	ldr	r0, [r0, #16]
 800c482:	1a80      	subs	r0, r0, r2
 800c484:	b530      	push	{r4, r5, lr}
 800c486:	d10e      	bne.n	800c4a6 <__mcmp+0x2a>
 800c488:	3314      	adds	r3, #20
 800c48a:	3114      	adds	r1, #20
 800c48c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c490:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c494:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c498:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c49c:	4295      	cmp	r5, r2
 800c49e:	d003      	beq.n	800c4a8 <__mcmp+0x2c>
 800c4a0:	d205      	bcs.n	800c4ae <__mcmp+0x32>
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d3f3      	bcc.n	800c494 <__mcmp+0x18>
 800c4ac:	e7fb      	b.n	800c4a6 <__mcmp+0x2a>
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	e7f9      	b.n	800c4a6 <__mcmp+0x2a>
	...

0800c4b4 <__mdiff>:
 800c4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	4689      	mov	r9, r1
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4648      	mov	r0, r9
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	f7ff ffdb 	bl	800c47c <__mcmp>
 800c4c6:	1e05      	subs	r5, r0, #0
 800c4c8:	d112      	bne.n	800c4f0 <__mdiff+0x3c>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff fd63 	bl	800bf98 <_Balloc>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	b928      	cbnz	r0, 800c4e2 <__mdiff+0x2e>
 800c4d6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5d4 <__mdiff+0x120>)
 800c4d8:	f240 2137 	movw	r1, #567	@ 0x237
 800c4dc:	483e      	ldr	r0, [pc, #248]	@ (800c5d8 <__mdiff+0x124>)
 800c4de:	f000 fb03 	bl	800cae8 <__assert_func>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	b003      	add	sp, #12
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	bfbc      	itt	lt
 800c4f2:	464b      	movlt	r3, r9
 800c4f4:	46a1      	movlt	r9, r4
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4fc:	bfba      	itte	lt
 800c4fe:	461c      	movlt	r4, r3
 800c500:	2501      	movlt	r5, #1
 800c502:	2500      	movge	r5, #0
 800c504:	f7ff fd48 	bl	800bf98 <_Balloc>
 800c508:	4602      	mov	r2, r0
 800c50a:	b918      	cbnz	r0, 800c514 <__mdiff+0x60>
 800c50c:	4b31      	ldr	r3, [pc, #196]	@ (800c5d4 <__mdiff+0x120>)
 800c50e:	f240 2145 	movw	r1, #581	@ 0x245
 800c512:	e7e3      	b.n	800c4dc <__mdiff+0x28>
 800c514:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c518:	6926      	ldr	r6, [r4, #16]
 800c51a:	60c5      	str	r5, [r0, #12]
 800c51c:	f109 0310 	add.w	r3, r9, #16
 800c520:	f109 0514 	add.w	r5, r9, #20
 800c524:	f104 0e14 	add.w	lr, r4, #20
 800c528:	f100 0b14 	add.w	fp, r0, #20
 800c52c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c530:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	46d9      	mov	r9, fp
 800c538:	f04f 0c00 	mov.w	ip, #0
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c542:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	fa1f f38a 	uxth.w	r3, sl
 800c54c:	4619      	mov	r1, r3
 800c54e:	b283      	uxth	r3, r0
 800c550:	1acb      	subs	r3, r1, r3
 800c552:	0c00      	lsrs	r0, r0, #16
 800c554:	4463      	add	r3, ip
 800c556:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c55a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c55e:	b29b      	uxth	r3, r3
 800c560:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c564:	4576      	cmp	r6, lr
 800c566:	f849 3b04 	str.w	r3, [r9], #4
 800c56a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c56e:	d8e5      	bhi.n	800c53c <__mdiff+0x88>
 800c570:	1b33      	subs	r3, r6, r4
 800c572:	3b15      	subs	r3, #21
 800c574:	f023 0303 	bic.w	r3, r3, #3
 800c578:	3415      	adds	r4, #21
 800c57a:	3304      	adds	r3, #4
 800c57c:	42a6      	cmp	r6, r4
 800c57e:	bf38      	it	cc
 800c580:	2304      	movcc	r3, #4
 800c582:	441d      	add	r5, r3
 800c584:	445b      	add	r3, fp
 800c586:	461e      	mov	r6, r3
 800c588:	462c      	mov	r4, r5
 800c58a:	4544      	cmp	r4, r8
 800c58c:	d30e      	bcc.n	800c5ac <__mdiff+0xf8>
 800c58e:	f108 0103 	add.w	r1, r8, #3
 800c592:	1b49      	subs	r1, r1, r5
 800c594:	f021 0103 	bic.w	r1, r1, #3
 800c598:	3d03      	subs	r5, #3
 800c59a:	45a8      	cmp	r8, r5
 800c59c:	bf38      	it	cc
 800c59e:	2100      	movcc	r1, #0
 800c5a0:	440b      	add	r3, r1
 800c5a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5a6:	b191      	cbz	r1, 800c5ce <__mdiff+0x11a>
 800c5a8:	6117      	str	r7, [r2, #16]
 800c5aa:	e79d      	b.n	800c4e8 <__mdiff+0x34>
 800c5ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5b0:	46e6      	mov	lr, ip
 800c5b2:	0c08      	lsrs	r0, r1, #16
 800c5b4:	fa1c fc81 	uxtah	ip, ip, r1
 800c5b8:	4471      	add	r1, lr
 800c5ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5be:	b289      	uxth	r1, r1
 800c5c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5c4:	f846 1b04 	str.w	r1, [r6], #4
 800c5c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5cc:	e7dd      	b.n	800c58a <__mdiff+0xd6>
 800c5ce:	3f01      	subs	r7, #1
 800c5d0:	e7e7      	b.n	800c5a2 <__mdiff+0xee>
 800c5d2:	bf00      	nop
 800c5d4:	0800d2e4 	.word	0x0800d2e4
 800c5d8:	0800d2f5 	.word	0x0800d2f5

0800c5dc <__d2b>:
 800c5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	460f      	mov	r7, r1
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	ec59 8b10 	vmov	r8, r9, d0
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	f7ff fcd5 	bl	800bf98 <_Balloc>
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	b930      	cbnz	r0, 800c600 <__d2b+0x24>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4b23      	ldr	r3, [pc, #140]	@ (800c684 <__d2b+0xa8>)
 800c5f6:	4824      	ldr	r0, [pc, #144]	@ (800c688 <__d2b+0xac>)
 800c5f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5fc:	f000 fa74 	bl	800cae8 <__assert_func>
 800c600:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c604:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c608:	b10d      	cbz	r5, 800c60e <__d2b+0x32>
 800c60a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	f1b8 0300 	subs.w	r3, r8, #0
 800c614:	d023      	beq.n	800c65e <__d2b+0x82>
 800c616:	4668      	mov	r0, sp
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	f7ff fd84 	bl	800c126 <__lo0bits>
 800c61e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c622:	b1d0      	cbz	r0, 800c65a <__d2b+0x7e>
 800c624:	f1c0 0320 	rsb	r3, r0, #32
 800c628:	fa02 f303 	lsl.w	r3, r2, r3
 800c62c:	430b      	orrs	r3, r1
 800c62e:	40c2      	lsrs	r2, r0
 800c630:	6163      	str	r3, [r4, #20]
 800c632:	9201      	str	r2, [sp, #4]
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	61a3      	str	r3, [r4, #24]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	bf0c      	ite	eq
 800c63c:	2201      	moveq	r2, #1
 800c63e:	2202      	movne	r2, #2
 800c640:	6122      	str	r2, [r4, #16]
 800c642:	b1a5      	cbz	r5, 800c66e <__d2b+0x92>
 800c644:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c648:	4405      	add	r5, r0
 800c64a:	603d      	str	r5, [r7, #0]
 800c64c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c650:	6030      	str	r0, [r6, #0]
 800c652:	4620      	mov	r0, r4
 800c654:	b003      	add	sp, #12
 800c656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c65a:	6161      	str	r1, [r4, #20]
 800c65c:	e7ea      	b.n	800c634 <__d2b+0x58>
 800c65e:	a801      	add	r0, sp, #4
 800c660:	f7ff fd61 	bl	800c126 <__lo0bits>
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	6163      	str	r3, [r4, #20]
 800c668:	3020      	adds	r0, #32
 800c66a:	2201      	movs	r2, #1
 800c66c:	e7e8      	b.n	800c640 <__d2b+0x64>
 800c66e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c672:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c676:	6038      	str	r0, [r7, #0]
 800c678:	6918      	ldr	r0, [r3, #16]
 800c67a:	f7ff fd35 	bl	800c0e8 <__hi0bits>
 800c67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c682:	e7e5      	b.n	800c650 <__d2b+0x74>
 800c684:	0800d2e4 	.word	0x0800d2e4
 800c688:	0800d2f5 	.word	0x0800d2f5

0800c68c <__ssputs_r>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	688e      	ldr	r6, [r1, #8]
 800c692:	461f      	mov	r7, r3
 800c694:	42be      	cmp	r6, r7
 800c696:	680b      	ldr	r3, [r1, #0]
 800c698:	4682      	mov	sl, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4690      	mov	r8, r2
 800c69e:	d82d      	bhi.n	800c6fc <__ssputs_r+0x70>
 800c6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6a8:	d026      	beq.n	800c6f8 <__ssputs_r+0x6c>
 800c6aa:	6965      	ldr	r5, [r4, #20]
 800c6ac:	6909      	ldr	r1, [r1, #16]
 800c6ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6b2:	eba3 0901 	sub.w	r9, r3, r1
 800c6b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6ba:	1c7b      	adds	r3, r7, #1
 800c6bc:	444b      	add	r3, r9
 800c6be:	106d      	asrs	r5, r5, #1
 800c6c0:	429d      	cmp	r5, r3
 800c6c2:	bf38      	it	cc
 800c6c4:	461d      	movcc	r5, r3
 800c6c6:	0553      	lsls	r3, r2, #21
 800c6c8:	d527      	bpl.n	800c71a <__ssputs_r+0x8e>
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7ff fbd8 	bl	800be80 <_malloc_r>
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	b360      	cbz	r0, 800c72e <__ssputs_r+0xa2>
 800c6d4:	6921      	ldr	r1, [r4, #16]
 800c6d6:	464a      	mov	r2, r9
 800c6d8:	f7fe fcf5 	bl	800b0c6 <memcpy>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	6126      	str	r6, [r4, #16]
 800c6ea:	6165      	str	r5, [r4, #20]
 800c6ec:	444e      	add	r6, r9
 800c6ee:	eba5 0509 	sub.w	r5, r5, r9
 800c6f2:	6026      	str	r6, [r4, #0]
 800c6f4:	60a5      	str	r5, [r4, #8]
 800c6f6:	463e      	mov	r6, r7
 800c6f8:	42be      	cmp	r6, r7
 800c6fa:	d900      	bls.n	800c6fe <__ssputs_r+0x72>
 800c6fc:	463e      	mov	r6, r7
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	4632      	mov	r2, r6
 800c702:	4641      	mov	r1, r8
 800c704:	f000 f9c6 	bl	800ca94 <memmove>
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	1b9b      	subs	r3, r3, r6
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	4433      	add	r3, r6
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	2000      	movs	r0, #0
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	462a      	mov	r2, r5
 800c71c:	f000 fa28 	bl	800cb70 <_realloc_r>
 800c720:	4606      	mov	r6, r0
 800c722:	2800      	cmp	r0, #0
 800c724:	d1e0      	bne.n	800c6e8 <__ssputs_r+0x5c>
 800c726:	6921      	ldr	r1, [r4, #16]
 800c728:	4650      	mov	r0, sl
 800c72a:	f7ff fb35 	bl	800bd98 <_free_r>
 800c72e:	230c      	movs	r3, #12
 800c730:	f8ca 3000 	str.w	r3, [sl]
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	e7e9      	b.n	800c716 <__ssputs_r+0x8a>
	...

0800c744 <_svfiprintf_r>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	4698      	mov	r8, r3
 800c74a:	898b      	ldrh	r3, [r1, #12]
 800c74c:	061b      	lsls	r3, r3, #24
 800c74e:	b09d      	sub	sp, #116	@ 0x74
 800c750:	4607      	mov	r7, r0
 800c752:	460d      	mov	r5, r1
 800c754:	4614      	mov	r4, r2
 800c756:	d510      	bpl.n	800c77a <_svfiprintf_r+0x36>
 800c758:	690b      	ldr	r3, [r1, #16]
 800c75a:	b973      	cbnz	r3, 800c77a <_svfiprintf_r+0x36>
 800c75c:	2140      	movs	r1, #64	@ 0x40
 800c75e:	f7ff fb8f 	bl	800be80 <_malloc_r>
 800c762:	6028      	str	r0, [r5, #0]
 800c764:	6128      	str	r0, [r5, #16]
 800c766:	b930      	cbnz	r0, 800c776 <_svfiprintf_r+0x32>
 800c768:	230c      	movs	r3, #12
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295
 800c770:	b01d      	add	sp, #116	@ 0x74
 800c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c776:	2340      	movs	r3, #64	@ 0x40
 800c778:	616b      	str	r3, [r5, #20]
 800c77a:	2300      	movs	r3, #0
 800c77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c77e:	2320      	movs	r3, #32
 800c780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c784:	f8cd 800c 	str.w	r8, [sp, #12]
 800c788:	2330      	movs	r3, #48	@ 0x30
 800c78a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c928 <_svfiprintf_r+0x1e4>
 800c78e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c792:	f04f 0901 	mov.w	r9, #1
 800c796:	4623      	mov	r3, r4
 800c798:	469a      	mov	sl, r3
 800c79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c79e:	b10a      	cbz	r2, 800c7a4 <_svfiprintf_r+0x60>
 800c7a0:	2a25      	cmp	r2, #37	@ 0x25
 800c7a2:	d1f9      	bne.n	800c798 <_svfiprintf_r+0x54>
 800c7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a8:	d00b      	beq.n	800c7c2 <_svfiprintf_r+0x7e>
 800c7aa:	465b      	mov	r3, fp
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff ff6b 	bl	800c68c <__ssputs_r>
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f000 80a7 	beq.w	800c90a <_svfiprintf_r+0x1c6>
 800c7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7be:	445a      	add	r2, fp
 800c7c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 809f 	beq.w	800c90a <_svfiprintf_r+0x1c6>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d6:	f10a 0a01 	add.w	sl, sl, #1
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7e4:	4654      	mov	r4, sl
 800c7e6:	2205      	movs	r2, #5
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	484e      	ldr	r0, [pc, #312]	@ (800c928 <_svfiprintf_r+0x1e4>)
 800c7ee:	f7f3 fd17 	bl	8000220 <memchr>
 800c7f2:	9a04      	ldr	r2, [sp, #16]
 800c7f4:	b9d8      	cbnz	r0, 800c82e <_svfiprintf_r+0xea>
 800c7f6:	06d0      	lsls	r0, r2, #27
 800c7f8:	bf44      	itt	mi
 800c7fa:	2320      	movmi	r3, #32
 800c7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c800:	0711      	lsls	r1, r2, #28
 800c802:	bf44      	itt	mi
 800c804:	232b      	movmi	r3, #43	@ 0x2b
 800c806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c80a:	f89a 3000 	ldrb.w	r3, [sl]
 800c80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c810:	d015      	beq.n	800c83e <_svfiprintf_r+0xfa>
 800c812:	9a07      	ldr	r2, [sp, #28]
 800c814:	4654      	mov	r4, sl
 800c816:	2000      	movs	r0, #0
 800c818:	f04f 0c0a 	mov.w	ip, #10
 800c81c:	4621      	mov	r1, r4
 800c81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c822:	3b30      	subs	r3, #48	@ 0x30
 800c824:	2b09      	cmp	r3, #9
 800c826:	d94b      	bls.n	800c8c0 <_svfiprintf_r+0x17c>
 800c828:	b1b0      	cbz	r0, 800c858 <_svfiprintf_r+0x114>
 800c82a:	9207      	str	r2, [sp, #28]
 800c82c:	e014      	b.n	800c858 <_svfiprintf_r+0x114>
 800c82e:	eba0 0308 	sub.w	r3, r0, r8
 800c832:	fa09 f303 	lsl.w	r3, r9, r3
 800c836:	4313      	orrs	r3, r2
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	46a2      	mov	sl, r4
 800c83c:	e7d2      	b.n	800c7e4 <_svfiprintf_r+0xa0>
 800c83e:	9b03      	ldr	r3, [sp, #12]
 800c840:	1d19      	adds	r1, r3, #4
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	9103      	str	r1, [sp, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	bfbb      	ittet	lt
 800c84a:	425b      	neglt	r3, r3
 800c84c:	f042 0202 	orrlt.w	r2, r2, #2
 800c850:	9307      	strge	r3, [sp, #28]
 800c852:	9307      	strlt	r3, [sp, #28]
 800c854:	bfb8      	it	lt
 800c856:	9204      	strlt	r2, [sp, #16]
 800c858:	7823      	ldrb	r3, [r4, #0]
 800c85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c85c:	d10a      	bne.n	800c874 <_svfiprintf_r+0x130>
 800c85e:	7863      	ldrb	r3, [r4, #1]
 800c860:	2b2a      	cmp	r3, #42	@ 0x2a
 800c862:	d132      	bne.n	800c8ca <_svfiprintf_r+0x186>
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	1d1a      	adds	r2, r3, #4
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	9203      	str	r2, [sp, #12]
 800c86c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c870:	3402      	adds	r4, #2
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c938 <_svfiprintf_r+0x1f4>
 800c878:	7821      	ldrb	r1, [r4, #0]
 800c87a:	2203      	movs	r2, #3
 800c87c:	4650      	mov	r0, sl
 800c87e:	f7f3 fccf 	bl	8000220 <memchr>
 800c882:	b138      	cbz	r0, 800c894 <_svfiprintf_r+0x150>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	eba0 000a 	sub.w	r0, r0, sl
 800c88a:	2240      	movs	r2, #64	@ 0x40
 800c88c:	4082      	lsls	r2, r0
 800c88e:	4313      	orrs	r3, r2
 800c890:	3401      	adds	r4, #1
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c898:	4824      	ldr	r0, [pc, #144]	@ (800c92c <_svfiprintf_r+0x1e8>)
 800c89a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c89e:	2206      	movs	r2, #6
 800c8a0:	f7f3 fcbe 	bl	8000220 <memchr>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d036      	beq.n	800c916 <_svfiprintf_r+0x1d2>
 800c8a8:	4b21      	ldr	r3, [pc, #132]	@ (800c930 <_svfiprintf_r+0x1ec>)
 800c8aa:	bb1b      	cbnz	r3, 800c8f4 <_svfiprintf_r+0x1b0>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	3307      	adds	r3, #7
 800c8b0:	f023 0307 	bic.w	r3, r3, #7
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ba:	4433      	add	r3, r6
 800c8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8be:	e76a      	b.n	800c796 <_svfiprintf_r+0x52>
 800c8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	e7a8      	b.n	800c81c <_svfiprintf_r+0xd8>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	3401      	adds	r4, #1
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f04f 0c0a 	mov.w	ip, #10
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8dc:	3a30      	subs	r2, #48	@ 0x30
 800c8de:	2a09      	cmp	r2, #9
 800c8e0:	d903      	bls.n	800c8ea <_svfiprintf_r+0x1a6>
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c6      	beq.n	800c874 <_svfiprintf_r+0x130>
 800c8e6:	9105      	str	r1, [sp, #20]
 800c8e8:	e7c4      	b.n	800c874 <_svfiprintf_r+0x130>
 800c8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e7f0      	b.n	800c8d6 <_svfiprintf_r+0x192>
 800c8f4:	ab03      	add	r3, sp, #12
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c934 <_svfiprintf_r+0x1f0>)
 800c8fc:	a904      	add	r1, sp, #16
 800c8fe:	4638      	mov	r0, r7
 800c900:	f7fd fe12 	bl	800a528 <_printf_float>
 800c904:	1c42      	adds	r2, r0, #1
 800c906:	4606      	mov	r6, r0
 800c908:	d1d6      	bne.n	800c8b8 <_svfiprintf_r+0x174>
 800c90a:	89ab      	ldrh	r3, [r5, #12]
 800c90c:	065b      	lsls	r3, r3, #25
 800c90e:	f53f af2d 	bmi.w	800c76c <_svfiprintf_r+0x28>
 800c912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c914:	e72c      	b.n	800c770 <_svfiprintf_r+0x2c>
 800c916:	ab03      	add	r3, sp, #12
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	462a      	mov	r2, r5
 800c91c:	4b05      	ldr	r3, [pc, #20]	@ (800c934 <_svfiprintf_r+0x1f0>)
 800c91e:	a904      	add	r1, sp, #16
 800c920:	4638      	mov	r0, r7
 800c922:	f7fe f899 	bl	800aa58 <_printf_i>
 800c926:	e7ed      	b.n	800c904 <_svfiprintf_r+0x1c0>
 800c928:	0800d34e 	.word	0x0800d34e
 800c92c:	0800d358 	.word	0x0800d358
 800c930:	0800a529 	.word	0x0800a529
 800c934:	0800c68d 	.word	0x0800c68d
 800c938:	0800d354 	.word	0x0800d354

0800c93c <__sflush_r>:
 800c93c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	0716      	lsls	r6, r2, #28
 800c946:	4605      	mov	r5, r0
 800c948:	460c      	mov	r4, r1
 800c94a:	d454      	bmi.n	800c9f6 <__sflush_r+0xba>
 800c94c:	684b      	ldr	r3, [r1, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc02      	bgt.n	800c958 <__sflush_r+0x1c>
 800c952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	dd48      	ble.n	800c9ea <__sflush_r+0xae>
 800c958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	d045      	beq.n	800c9ea <__sflush_r+0xae>
 800c95e:	2300      	movs	r3, #0
 800c960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c964:	682f      	ldr	r7, [r5, #0]
 800c966:	6a21      	ldr	r1, [r4, #32]
 800c968:	602b      	str	r3, [r5, #0]
 800c96a:	d030      	beq.n	800c9ce <__sflush_r+0x92>
 800c96c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	0759      	lsls	r1, r3, #29
 800c972:	d505      	bpl.n	800c980 <__sflush_r+0x44>
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	1ad2      	subs	r2, r2, r3
 800c978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c97a:	b10b      	cbz	r3, 800c980 <__sflush_r+0x44>
 800c97c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	d106      	bne.n	800c99e <__sflush_r+0x62>
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	291d      	cmp	r1, #29
 800c994:	d82b      	bhi.n	800c9ee <__sflush_r+0xb2>
 800c996:	4a2a      	ldr	r2, [pc, #168]	@ (800ca40 <__sflush_r+0x104>)
 800c998:	40ca      	lsrs	r2, r1
 800c99a:	07d6      	lsls	r6, r2, #31
 800c99c:	d527      	bpl.n	800c9ee <__sflush_r+0xb2>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	d504      	bpl.n	800c9b4 <__sflush_r+0x78>
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	d101      	bne.n	800c9b2 <__sflush_r+0x76>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b903      	cbnz	r3, 800c9b4 <__sflush_r+0x78>
 800c9b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9b6:	602f      	str	r7, [r5, #0]
 800c9b8:	b1b9      	cbz	r1, 800c9ea <__sflush_r+0xae>
 800c9ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	d002      	beq.n	800c9c8 <__sflush_r+0x8c>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f7ff f9e8 	bl	800bd98 <_free_r>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9cc:	e00d      	b.n	800c9ea <__sflush_r+0xae>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	47b0      	blx	r6
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	1c50      	adds	r0, r2, #1
 800c9d8:	d1c9      	bne.n	800c96e <__sflush_r+0x32>
 800c9da:	682b      	ldr	r3, [r5, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d0c6      	beq.n	800c96e <__sflush_r+0x32>
 800c9e0:	2b1d      	cmp	r3, #29
 800c9e2:	d001      	beq.n	800c9e8 <__sflush_r+0xac>
 800c9e4:	2b16      	cmp	r3, #22
 800c9e6:	d11e      	bne.n	800ca26 <__sflush_r+0xea>
 800c9e8:	602f      	str	r7, [r5, #0]
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	e022      	b.n	800ca34 <__sflush_r+0xf8>
 800c9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	e01b      	b.n	800ca2e <__sflush_r+0xf2>
 800c9f6:	690f      	ldr	r7, [r1, #16]
 800c9f8:	2f00      	cmp	r7, #0
 800c9fa:	d0f6      	beq.n	800c9ea <__sflush_r+0xae>
 800c9fc:	0793      	lsls	r3, r2, #30
 800c9fe:	680e      	ldr	r6, [r1, #0]
 800ca00:	bf08      	it	eq
 800ca02:	694b      	ldreq	r3, [r1, #20]
 800ca04:	600f      	str	r7, [r1, #0]
 800ca06:	bf18      	it	ne
 800ca08:	2300      	movne	r3, #0
 800ca0a:	eba6 0807 	sub.w	r8, r6, r7
 800ca0e:	608b      	str	r3, [r1, #8]
 800ca10:	f1b8 0f00 	cmp.w	r8, #0
 800ca14:	dde9      	ble.n	800c9ea <__sflush_r+0xae>
 800ca16:	6a21      	ldr	r1, [r4, #32]
 800ca18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca1a:	4643      	mov	r3, r8
 800ca1c:	463a      	mov	r2, r7
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b0      	blx	r6
 800ca22:	2800      	cmp	r0, #0
 800ca24:	dc08      	bgt.n	800ca38 <__sflush_r+0xfc>
 800ca26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca38:	4407      	add	r7, r0
 800ca3a:	eba8 0800 	sub.w	r8, r8, r0
 800ca3e:	e7e7      	b.n	800ca10 <__sflush_r+0xd4>
 800ca40:	20400001 	.word	0x20400001

0800ca44 <_fflush_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b913      	cbnz	r3, 800ca54 <_fflush_r+0x10>
 800ca4e:	2500      	movs	r5, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	b118      	cbz	r0, 800ca5e <_fflush_r+0x1a>
 800ca56:	6a03      	ldr	r3, [r0, #32]
 800ca58:	b90b      	cbnz	r3, 800ca5e <_fflush_r+0x1a>
 800ca5a:	f7fe f9a7 	bl	800adac <__sinit>
 800ca5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0f3      	beq.n	800ca4e <_fflush_r+0xa>
 800ca66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca68:	07d0      	lsls	r0, r2, #31
 800ca6a:	d404      	bmi.n	800ca76 <_fflush_r+0x32>
 800ca6c:	0599      	lsls	r1, r3, #22
 800ca6e:	d402      	bmi.n	800ca76 <_fflush_r+0x32>
 800ca70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca72:	f7fe fb26 	bl	800b0c2 <__retarget_lock_acquire_recursive>
 800ca76:	4628      	mov	r0, r5
 800ca78:	4621      	mov	r1, r4
 800ca7a:	f7ff ff5f 	bl	800c93c <__sflush_r>
 800ca7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca80:	07da      	lsls	r2, r3, #31
 800ca82:	4605      	mov	r5, r0
 800ca84:	d4e4      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	059b      	lsls	r3, r3, #22
 800ca8a:	d4e1      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca8e:	f7fe fb19 	bl	800b0c4 <__retarget_lock_release_recursive>
 800ca92:	e7dd      	b.n	800ca50 <_fflush_r+0xc>

0800ca94 <memmove>:
 800ca94:	4288      	cmp	r0, r1
 800ca96:	b510      	push	{r4, lr}
 800ca98:	eb01 0402 	add.w	r4, r1, r2
 800ca9c:	d902      	bls.n	800caa4 <memmove+0x10>
 800ca9e:	4284      	cmp	r4, r0
 800caa0:	4623      	mov	r3, r4
 800caa2:	d807      	bhi.n	800cab4 <memmove+0x20>
 800caa4:	1e43      	subs	r3, r0, #1
 800caa6:	42a1      	cmp	r1, r4
 800caa8:	d008      	beq.n	800cabc <memmove+0x28>
 800caaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cab2:	e7f8      	b.n	800caa6 <memmove+0x12>
 800cab4:	4402      	add	r2, r0
 800cab6:	4601      	mov	r1, r0
 800cab8:	428a      	cmp	r2, r1
 800caba:	d100      	bne.n	800cabe <memmove+0x2a>
 800cabc:	bd10      	pop	{r4, pc}
 800cabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cac6:	e7f7      	b.n	800cab8 <memmove+0x24>

0800cac8 <_sbrk_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	@ (800cae4 <_sbrk_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f5 f946 	bl	8001d64 <_sbrk>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_sbrk_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_sbrk_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	200036c8 	.word	0x200036c8

0800cae8 <__assert_func>:
 800cae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caea:	4614      	mov	r4, r2
 800caec:	461a      	mov	r2, r3
 800caee:	4b09      	ldr	r3, [pc, #36]	@ (800cb14 <__assert_func+0x2c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4605      	mov	r5, r0
 800caf4:	68d8      	ldr	r0, [r3, #12]
 800caf6:	b14c      	cbz	r4, 800cb0c <__assert_func+0x24>
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <__assert_func+0x30>)
 800cafa:	9100      	str	r1, [sp, #0]
 800cafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb00:	4906      	ldr	r1, [pc, #24]	@ (800cb1c <__assert_func+0x34>)
 800cb02:	462b      	mov	r3, r5
 800cb04:	f000 f870 	bl	800cbe8 <fiprintf>
 800cb08:	f000 f880 	bl	800cc0c <abort>
 800cb0c:	4b04      	ldr	r3, [pc, #16]	@ (800cb20 <__assert_func+0x38>)
 800cb0e:	461c      	mov	r4, r3
 800cb10:	e7f3      	b.n	800cafa <__assert_func+0x12>
 800cb12:	bf00      	nop
 800cb14:	2000002c 	.word	0x2000002c
 800cb18:	0800d369 	.word	0x0800d369
 800cb1c:	0800d376 	.word	0x0800d376
 800cb20:	0800d3a4 	.word	0x0800d3a4

0800cb24 <_calloc_r>:
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	fba1 5402 	umull	r5, r4, r1, r2
 800cb2a:	b934      	cbnz	r4, 800cb3a <_calloc_r+0x16>
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f7ff f9a7 	bl	800be80 <_malloc_r>
 800cb32:	4606      	mov	r6, r0
 800cb34:	b928      	cbnz	r0, 800cb42 <_calloc_r+0x1e>
 800cb36:	4630      	mov	r0, r6
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	220c      	movs	r2, #12
 800cb3c:	6002      	str	r2, [r0, #0]
 800cb3e:	2600      	movs	r6, #0
 800cb40:	e7f9      	b.n	800cb36 <_calloc_r+0x12>
 800cb42:	462a      	mov	r2, r5
 800cb44:	4621      	mov	r1, r4
 800cb46:	f7fe f9e0 	bl	800af0a <memset>
 800cb4a:	e7f4      	b.n	800cb36 <_calloc_r+0x12>

0800cb4c <__ascii_mbtowc>:
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	b901      	cbnz	r1, 800cb52 <__ascii_mbtowc+0x6>
 800cb50:	a901      	add	r1, sp, #4
 800cb52:	b142      	cbz	r2, 800cb66 <__ascii_mbtowc+0x1a>
 800cb54:	b14b      	cbz	r3, 800cb6a <__ascii_mbtowc+0x1e>
 800cb56:	7813      	ldrb	r3, [r2, #0]
 800cb58:	600b      	str	r3, [r1, #0]
 800cb5a:	7812      	ldrb	r2, [r2, #0]
 800cb5c:	1e10      	subs	r0, r2, #0
 800cb5e:	bf18      	it	ne
 800cb60:	2001      	movne	r0, #1
 800cb62:	b002      	add	sp, #8
 800cb64:	4770      	bx	lr
 800cb66:	4610      	mov	r0, r2
 800cb68:	e7fb      	b.n	800cb62 <__ascii_mbtowc+0x16>
 800cb6a:	f06f 0001 	mvn.w	r0, #1
 800cb6e:	e7f8      	b.n	800cb62 <__ascii_mbtowc+0x16>

0800cb70 <_realloc_r>:
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	4607      	mov	r7, r0
 800cb76:	4614      	mov	r4, r2
 800cb78:	460d      	mov	r5, r1
 800cb7a:	b921      	cbnz	r1, 800cb86 <_realloc_r+0x16>
 800cb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	4611      	mov	r1, r2
 800cb82:	f7ff b97d 	b.w	800be80 <_malloc_r>
 800cb86:	b92a      	cbnz	r2, 800cb94 <_realloc_r+0x24>
 800cb88:	f7ff f906 	bl	800bd98 <_free_r>
 800cb8c:	4625      	mov	r5, r4
 800cb8e:	4628      	mov	r0, r5
 800cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb94:	f000 f841 	bl	800cc1a <_malloc_usable_size_r>
 800cb98:	4284      	cmp	r4, r0
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	d802      	bhi.n	800cba4 <_realloc_r+0x34>
 800cb9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cba2:	d8f4      	bhi.n	800cb8e <_realloc_r+0x1e>
 800cba4:	4621      	mov	r1, r4
 800cba6:	4638      	mov	r0, r7
 800cba8:	f7ff f96a 	bl	800be80 <_malloc_r>
 800cbac:	4680      	mov	r8, r0
 800cbae:	b908      	cbnz	r0, 800cbb4 <_realloc_r+0x44>
 800cbb0:	4645      	mov	r5, r8
 800cbb2:	e7ec      	b.n	800cb8e <_realloc_r+0x1e>
 800cbb4:	42b4      	cmp	r4, r6
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4629      	mov	r1, r5
 800cbba:	bf28      	it	cs
 800cbbc:	4632      	movcs	r2, r6
 800cbbe:	f7fe fa82 	bl	800b0c6 <memcpy>
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	f7ff f8e7 	bl	800bd98 <_free_r>
 800cbca:	e7f1      	b.n	800cbb0 <_realloc_r+0x40>

0800cbcc <__ascii_wctomb>:
 800cbcc:	4603      	mov	r3, r0
 800cbce:	4608      	mov	r0, r1
 800cbd0:	b141      	cbz	r1, 800cbe4 <__ascii_wctomb+0x18>
 800cbd2:	2aff      	cmp	r2, #255	@ 0xff
 800cbd4:	d904      	bls.n	800cbe0 <__ascii_wctomb+0x14>
 800cbd6:	228a      	movs	r2, #138	@ 0x8a
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295
 800cbde:	4770      	bx	lr
 800cbe0:	700a      	strb	r2, [r1, #0]
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <fiprintf>:
 800cbe8:	b40e      	push	{r1, r2, r3}
 800cbea:	b503      	push	{r0, r1, lr}
 800cbec:	4601      	mov	r1, r0
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	4805      	ldr	r0, [pc, #20]	@ (800cc08 <fiprintf+0x20>)
 800cbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf6:	6800      	ldr	r0, [r0, #0]
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	f000 f83f 	bl	800cc7c <_vfiprintf_r>
 800cbfe:	b002      	add	sp, #8
 800cc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc04:	b003      	add	sp, #12
 800cc06:	4770      	bx	lr
 800cc08:	2000002c 	.word	0x2000002c

0800cc0c <abort>:
 800cc0c:	b508      	push	{r3, lr}
 800cc0e:	2006      	movs	r0, #6
 800cc10:	f000 fa08 	bl	800d024 <raise>
 800cc14:	2001      	movs	r0, #1
 800cc16:	f7f5 f82d 	bl	8001c74 <_exit>

0800cc1a <_malloc_usable_size_r>:
 800cc1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1e:	1f18      	subs	r0, r3, #4
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfbc      	itt	lt
 800cc24:	580b      	ldrlt	r3, [r1, r0]
 800cc26:	18c0      	addlt	r0, r0, r3
 800cc28:	4770      	bx	lr

0800cc2a <__sfputc_r>:
 800cc2a:	6893      	ldr	r3, [r2, #8]
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	b410      	push	{r4}
 800cc32:	6093      	str	r3, [r2, #8]
 800cc34:	da08      	bge.n	800cc48 <__sfputc_r+0x1e>
 800cc36:	6994      	ldr	r4, [r2, #24]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	db01      	blt.n	800cc40 <__sfputc_r+0x16>
 800cc3c:	290a      	cmp	r1, #10
 800cc3e:	d103      	bne.n	800cc48 <__sfputc_r+0x1e>
 800cc40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc44:	f000 b932 	b.w	800ceac <__swbuf_r>
 800cc48:	6813      	ldr	r3, [r2, #0]
 800cc4a:	1c58      	adds	r0, r3, #1
 800cc4c:	6010      	str	r0, [r2, #0]
 800cc4e:	7019      	strb	r1, [r3, #0]
 800cc50:	4608      	mov	r0, r1
 800cc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <__sfputs_r>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	4614      	mov	r4, r2
 800cc60:	18d5      	adds	r5, r2, r3
 800cc62:	42ac      	cmp	r4, r5
 800cc64:	d101      	bne.n	800cc6a <__sfputs_r+0x12>
 800cc66:	2000      	movs	r0, #0
 800cc68:	e007      	b.n	800cc7a <__sfputs_r+0x22>
 800cc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6e:	463a      	mov	r2, r7
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff ffda 	bl	800cc2a <__sfputc_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d1f3      	bne.n	800cc62 <__sfputs_r+0xa>
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc7c <_vfiprintf_r>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	b09d      	sub	sp, #116	@ 0x74
 800cc84:	4614      	mov	r4, r2
 800cc86:	4698      	mov	r8, r3
 800cc88:	4606      	mov	r6, r0
 800cc8a:	b118      	cbz	r0, 800cc94 <_vfiprintf_r+0x18>
 800cc8c:	6a03      	ldr	r3, [r0, #32]
 800cc8e:	b90b      	cbnz	r3, 800cc94 <_vfiprintf_r+0x18>
 800cc90:	f7fe f88c 	bl	800adac <__sinit>
 800cc94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc96:	07d9      	lsls	r1, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	059a      	lsls	r2, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_vfiprintf_r+0x2a>
 800cca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cca2:	f7fe fa0e 	bl	800b0c2 <__retarget_lock_acquire_recursive>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d501      	bpl.n	800ccb0 <_vfiprintf_r+0x34>
 800ccac:	692b      	ldr	r3, [r5, #16]
 800ccae:	b99b      	cbnz	r3, 800ccd8 <_vfiprintf_r+0x5c>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f000 f938 	bl	800cf28 <__swsetup_r>
 800ccb8:	b170      	cbz	r0, 800ccd8 <_vfiprintf_r+0x5c>
 800ccba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccbc:	07dc      	lsls	r4, r3, #31
 800ccbe:	d504      	bpl.n	800ccca <_vfiprintf_r+0x4e>
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	b01d      	add	sp, #116	@ 0x74
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	89ab      	ldrh	r3, [r5, #12]
 800cccc:	0598      	lsls	r0, r3, #22
 800ccce:	d4f7      	bmi.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccd2:	f7fe f9f7 	bl	800b0c4 <__retarget_lock_release_recursive>
 800ccd6:	e7f3      	b.n	800ccc0 <_vfiprintf_r+0x44>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cce2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cce6:	2330      	movs	r3, #48	@ 0x30
 800cce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce98 <_vfiprintf_r+0x21c>
 800ccec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccf0:	f04f 0901 	mov.w	r9, #1
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	469a      	mov	sl, r3
 800ccf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfc:	b10a      	cbz	r2, 800cd02 <_vfiprintf_r+0x86>
 800ccfe:	2a25      	cmp	r2, #37	@ 0x25
 800cd00:	d1f9      	bne.n	800ccf6 <_vfiprintf_r+0x7a>
 800cd02:	ebba 0b04 	subs.w	fp, sl, r4
 800cd06:	d00b      	beq.n	800cd20 <_vfiprintf_r+0xa4>
 800cd08:	465b      	mov	r3, fp
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ffa2 	bl	800cc58 <__sfputs_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f000 80a7 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd1c:	445a      	add	r2, fp
 800cd1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd20:	f89a 3000 	ldrb.w	r3, [sl]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 809f 	beq.w	800ce68 <_vfiprintf_r+0x1ec>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd34:	f10a 0a01 	add.w	sl, sl, #1
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd40:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd42:	4654      	mov	r4, sl
 800cd44:	2205      	movs	r2, #5
 800cd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4a:	4853      	ldr	r0, [pc, #332]	@ (800ce98 <_vfiprintf_r+0x21c>)
 800cd4c:	f7f3 fa68 	bl	8000220 <memchr>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	b9d8      	cbnz	r0, 800cd8c <_vfiprintf_r+0x110>
 800cd54:	06d1      	lsls	r1, r2, #27
 800cd56:	bf44      	itt	mi
 800cd58:	2320      	movmi	r3, #32
 800cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd5e:	0713      	lsls	r3, r2, #28
 800cd60:	bf44      	itt	mi
 800cd62:	232b      	movmi	r3, #43	@ 0x2b
 800cd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd6e:	d015      	beq.n	800cd9c <_vfiprintf_r+0x120>
 800cd70:	9a07      	ldr	r2, [sp, #28]
 800cd72:	4654      	mov	r4, sl
 800cd74:	2000      	movs	r0, #0
 800cd76:	f04f 0c0a 	mov.w	ip, #10
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd80:	3b30      	subs	r3, #48	@ 0x30
 800cd82:	2b09      	cmp	r3, #9
 800cd84:	d94b      	bls.n	800ce1e <_vfiprintf_r+0x1a2>
 800cd86:	b1b0      	cbz	r0, 800cdb6 <_vfiprintf_r+0x13a>
 800cd88:	9207      	str	r2, [sp, #28]
 800cd8a:	e014      	b.n	800cdb6 <_vfiprintf_r+0x13a>
 800cd8c:	eba0 0308 	sub.w	r3, r0, r8
 800cd90:	fa09 f303 	lsl.w	r3, r9, r3
 800cd94:	4313      	orrs	r3, r2
 800cd96:	9304      	str	r3, [sp, #16]
 800cd98:	46a2      	mov	sl, r4
 800cd9a:	e7d2      	b.n	800cd42 <_vfiprintf_r+0xc6>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	1d19      	adds	r1, r3, #4
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	9103      	str	r1, [sp, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfbb      	ittet	lt
 800cda8:	425b      	neglt	r3, r3
 800cdaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdae:	9307      	strge	r3, [sp, #28]
 800cdb0:	9307      	strlt	r3, [sp, #28]
 800cdb2:	bfb8      	it	lt
 800cdb4:	9204      	strlt	r2, [sp, #16]
 800cdb6:	7823      	ldrb	r3, [r4, #0]
 800cdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdba:	d10a      	bne.n	800cdd2 <_vfiprintf_r+0x156>
 800cdbc:	7863      	ldrb	r3, [r4, #1]
 800cdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc0:	d132      	bne.n	800ce28 <_vfiprintf_r+0x1ac>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	1d1a      	adds	r2, r3, #4
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	9203      	str	r2, [sp, #12]
 800cdca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdce:	3402      	adds	r4, #2
 800cdd0:	9305      	str	r3, [sp, #20]
 800cdd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cea8 <_vfiprintf_r+0x22c>
 800cdd6:	7821      	ldrb	r1, [r4, #0]
 800cdd8:	2203      	movs	r2, #3
 800cdda:	4650      	mov	r0, sl
 800cddc:	f7f3 fa20 	bl	8000220 <memchr>
 800cde0:	b138      	cbz	r0, 800cdf2 <_vfiprintf_r+0x176>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	eba0 000a 	sub.w	r0, r0, sl
 800cde8:	2240      	movs	r2, #64	@ 0x40
 800cdea:	4082      	lsls	r2, r0
 800cdec:	4313      	orrs	r3, r2
 800cdee:	3401      	adds	r4, #1
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf6:	4829      	ldr	r0, [pc, #164]	@ (800ce9c <_vfiprintf_r+0x220>)
 800cdf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdfc:	2206      	movs	r2, #6
 800cdfe:	f7f3 fa0f 	bl	8000220 <memchr>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d03f      	beq.n	800ce86 <_vfiprintf_r+0x20a>
 800ce06:	4b26      	ldr	r3, [pc, #152]	@ (800cea0 <_vfiprintf_r+0x224>)
 800ce08:	bb1b      	cbnz	r3, 800ce52 <_vfiprintf_r+0x1d6>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	3307      	adds	r3, #7
 800ce0e:	f023 0307 	bic.w	r3, r3, #7
 800ce12:	3308      	adds	r3, #8
 800ce14:	9303      	str	r3, [sp, #12]
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	443b      	add	r3, r7
 800ce1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce1c:	e76a      	b.n	800ccf4 <_vfiprintf_r+0x78>
 800ce1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce22:	460c      	mov	r4, r1
 800ce24:	2001      	movs	r0, #1
 800ce26:	e7a8      	b.n	800cd7a <_vfiprintf_r+0xfe>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	3401      	adds	r4, #1
 800ce2c:	9305      	str	r3, [sp, #20]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f04f 0c0a 	mov.w	ip, #10
 800ce34:	4620      	mov	r0, r4
 800ce36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce3a:	3a30      	subs	r2, #48	@ 0x30
 800ce3c:	2a09      	cmp	r2, #9
 800ce3e:	d903      	bls.n	800ce48 <_vfiprintf_r+0x1cc>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0c6      	beq.n	800cdd2 <_vfiprintf_r+0x156>
 800ce44:	9105      	str	r1, [sp, #20]
 800ce46:	e7c4      	b.n	800cdd2 <_vfiprintf_r+0x156>
 800ce48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e7f0      	b.n	800ce34 <_vfiprintf_r+0x1b8>
 800ce52:	ab03      	add	r3, sp, #12
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	462a      	mov	r2, r5
 800ce58:	4b12      	ldr	r3, [pc, #72]	@ (800cea4 <_vfiprintf_r+0x228>)
 800ce5a:	a904      	add	r1, sp, #16
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7fd fb63 	bl	800a528 <_printf_float>
 800ce62:	4607      	mov	r7, r0
 800ce64:	1c78      	adds	r0, r7, #1
 800ce66:	d1d6      	bne.n	800ce16 <_vfiprintf_r+0x19a>
 800ce68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce6a:	07d9      	lsls	r1, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_vfiprintf_r+0x1fe>
 800ce74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce76:	f7fe f925 	bl	800b0c4 <__retarget_lock_release_recursive>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	065b      	lsls	r3, r3, #25
 800ce7e:	f53f af1f 	bmi.w	800ccc0 <_vfiprintf_r+0x44>
 800ce82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce84:	e71e      	b.n	800ccc4 <_vfiprintf_r+0x48>
 800ce86:	ab03      	add	r3, sp, #12
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <_vfiprintf_r+0x228>)
 800ce8e:	a904      	add	r1, sp, #16
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7fd fde1 	bl	800aa58 <_printf_i>
 800ce96:	e7e4      	b.n	800ce62 <_vfiprintf_r+0x1e6>
 800ce98:	0800d34e 	.word	0x0800d34e
 800ce9c:	0800d358 	.word	0x0800d358
 800cea0:	0800a529 	.word	0x0800a529
 800cea4:	0800cc59 	.word	0x0800cc59
 800cea8:	0800d354 	.word	0x0800d354

0800ceac <__swbuf_r>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	460e      	mov	r6, r1
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	b118      	cbz	r0, 800cebe <__swbuf_r+0x12>
 800ceb6:	6a03      	ldr	r3, [r0, #32]
 800ceb8:	b90b      	cbnz	r3, 800cebe <__swbuf_r+0x12>
 800ceba:	f7fd ff77 	bl	800adac <__sinit>
 800cebe:	69a3      	ldr	r3, [r4, #24]
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	071a      	lsls	r2, r3, #28
 800cec6:	d501      	bpl.n	800cecc <__swbuf_r+0x20>
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b943      	cbnz	r3, 800cede <__swbuf_r+0x32>
 800cecc:	4621      	mov	r1, r4
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 f82a 	bl	800cf28 <__swsetup_r>
 800ced4:	b118      	cbz	r0, 800cede <__swbuf_r+0x32>
 800ced6:	f04f 37ff 	mov.w	r7, #4294967295
 800ceda:	4638      	mov	r0, r7
 800cedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	6922      	ldr	r2, [r4, #16]
 800cee2:	1a98      	subs	r0, r3, r2
 800cee4:	6963      	ldr	r3, [r4, #20]
 800cee6:	b2f6      	uxtb	r6, r6
 800cee8:	4283      	cmp	r3, r0
 800ceea:	4637      	mov	r7, r6
 800ceec:	dc05      	bgt.n	800cefa <__swbuf_r+0x4e>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7ff fda7 	bl	800ca44 <_fflush_r>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d1ed      	bne.n	800ced6 <__swbuf_r+0x2a>
 800cefa:	68a3      	ldr	r3, [r4, #8]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	60a3      	str	r3, [r4, #8]
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	6022      	str	r2, [r4, #0]
 800cf06:	701e      	strb	r6, [r3, #0]
 800cf08:	6962      	ldr	r2, [r4, #20]
 800cf0a:	1c43      	adds	r3, r0, #1
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d004      	beq.n	800cf1a <__swbuf_r+0x6e>
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	07db      	lsls	r3, r3, #31
 800cf14:	d5e1      	bpl.n	800ceda <__swbuf_r+0x2e>
 800cf16:	2e0a      	cmp	r6, #10
 800cf18:	d1df      	bne.n	800ceda <__swbuf_r+0x2e>
 800cf1a:	4621      	mov	r1, r4
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f7ff fd91 	bl	800ca44 <_fflush_r>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0d9      	beq.n	800ceda <__swbuf_r+0x2e>
 800cf26:	e7d6      	b.n	800ced6 <__swbuf_r+0x2a>

0800cf28 <__swsetup_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4b29      	ldr	r3, [pc, #164]	@ (800cfd0 <__swsetup_r+0xa8>)
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	460c      	mov	r4, r1
 800cf32:	b118      	cbz	r0, 800cf3c <__swsetup_r+0x14>
 800cf34:	6a03      	ldr	r3, [r0, #32]
 800cf36:	b90b      	cbnz	r3, 800cf3c <__swsetup_r+0x14>
 800cf38:	f7fd ff38 	bl	800adac <__sinit>
 800cf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf40:	0719      	lsls	r1, r3, #28
 800cf42:	d422      	bmi.n	800cf8a <__swsetup_r+0x62>
 800cf44:	06da      	lsls	r2, r3, #27
 800cf46:	d407      	bmi.n	800cf58 <__swsetup_r+0x30>
 800cf48:	2209      	movs	r2, #9
 800cf4a:	602a      	str	r2, [r5, #0]
 800cf4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	f04f 30ff 	mov.w	r0, #4294967295
 800cf56:	e033      	b.n	800cfc0 <__swsetup_r+0x98>
 800cf58:	0758      	lsls	r0, r3, #29
 800cf5a:	d512      	bpl.n	800cf82 <__swsetup_r+0x5a>
 800cf5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf5e:	b141      	cbz	r1, 800cf72 <__swsetup_r+0x4a>
 800cf60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf64:	4299      	cmp	r1, r3
 800cf66:	d002      	beq.n	800cf6e <__swsetup_r+0x46>
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f7fe ff15 	bl	800bd98 <_free_r>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	6063      	str	r3, [r4, #4]
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	f043 0308 	orr.w	r3, r3, #8
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	b94b      	cbnz	r3, 800cfa2 <__swsetup_r+0x7a>
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf98:	d003      	beq.n	800cfa2 <__swsetup_r+0x7a>
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 f883 	bl	800d0a8 <__smakebuf_r>
 800cfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa6:	f013 0201 	ands.w	r2, r3, #1
 800cfaa:	d00a      	beq.n	800cfc2 <__swsetup_r+0x9a>
 800cfac:	2200      	movs	r2, #0
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	6962      	ldr	r2, [r4, #20]
 800cfb2:	4252      	negs	r2, r2
 800cfb4:	61a2      	str	r2, [r4, #24]
 800cfb6:	6922      	ldr	r2, [r4, #16]
 800cfb8:	b942      	cbnz	r2, 800cfcc <__swsetup_r+0xa4>
 800cfba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfbe:	d1c5      	bne.n	800cf4c <__swsetup_r+0x24>
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	0799      	lsls	r1, r3, #30
 800cfc4:	bf58      	it	pl
 800cfc6:	6962      	ldrpl	r2, [r4, #20]
 800cfc8:	60a2      	str	r2, [r4, #8]
 800cfca:	e7f4      	b.n	800cfb6 <__swsetup_r+0x8e>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	e7f7      	b.n	800cfc0 <__swsetup_r+0x98>
 800cfd0:	2000002c 	.word	0x2000002c

0800cfd4 <_raise_r>:
 800cfd4:	291f      	cmp	r1, #31
 800cfd6:	b538      	push	{r3, r4, r5, lr}
 800cfd8:	4605      	mov	r5, r0
 800cfda:	460c      	mov	r4, r1
 800cfdc:	d904      	bls.n	800cfe8 <_raise_r+0x14>
 800cfde:	2316      	movs	r3, #22
 800cfe0:	6003      	str	r3, [r0, #0]
 800cfe2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfea:	b112      	cbz	r2, 800cff2 <_raise_r+0x1e>
 800cfec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cff0:	b94b      	cbnz	r3, 800d006 <_raise_r+0x32>
 800cff2:	4628      	mov	r0, r5
 800cff4:	f000 f830 	bl	800d058 <_getpid_r>
 800cff8:	4622      	mov	r2, r4
 800cffa:	4601      	mov	r1, r0
 800cffc:	4628      	mov	r0, r5
 800cffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d002:	f000 b817 	b.w	800d034 <_kill_r>
 800d006:	2b01      	cmp	r3, #1
 800d008:	d00a      	beq.n	800d020 <_raise_r+0x4c>
 800d00a:	1c59      	adds	r1, r3, #1
 800d00c:	d103      	bne.n	800d016 <_raise_r+0x42>
 800d00e:	2316      	movs	r3, #22
 800d010:	6003      	str	r3, [r0, #0]
 800d012:	2001      	movs	r0, #1
 800d014:	e7e7      	b.n	800cfe6 <_raise_r+0x12>
 800d016:	2100      	movs	r1, #0
 800d018:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d01c:	4620      	mov	r0, r4
 800d01e:	4798      	blx	r3
 800d020:	2000      	movs	r0, #0
 800d022:	e7e0      	b.n	800cfe6 <_raise_r+0x12>

0800d024 <raise>:
 800d024:	4b02      	ldr	r3, [pc, #8]	@ (800d030 <raise+0xc>)
 800d026:	4601      	mov	r1, r0
 800d028:	6818      	ldr	r0, [r3, #0]
 800d02a:	f7ff bfd3 	b.w	800cfd4 <_raise_r>
 800d02e:	bf00      	nop
 800d030:	2000002c 	.word	0x2000002c

0800d034 <_kill_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d07      	ldr	r5, [pc, #28]	@ (800d054 <_kill_r+0x20>)
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	4608      	mov	r0, r1
 800d03e:	4611      	mov	r1, r2
 800d040:	602b      	str	r3, [r5, #0]
 800d042:	f7f4 fe07 	bl	8001c54 <_kill>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	d102      	bne.n	800d050 <_kill_r+0x1c>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	b103      	cbz	r3, 800d050 <_kill_r+0x1c>
 800d04e:	6023      	str	r3, [r4, #0]
 800d050:	bd38      	pop	{r3, r4, r5, pc}
 800d052:	bf00      	nop
 800d054:	200036c8 	.word	0x200036c8

0800d058 <_getpid_r>:
 800d058:	f7f4 bdf4 	b.w	8001c44 <_getpid>

0800d05c <__swhatbuf_r>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	460c      	mov	r4, r1
 800d060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d064:	2900      	cmp	r1, #0
 800d066:	b096      	sub	sp, #88	@ 0x58
 800d068:	4615      	mov	r5, r2
 800d06a:	461e      	mov	r6, r3
 800d06c:	da0d      	bge.n	800d08a <__swhatbuf_r+0x2e>
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d074:	f04f 0100 	mov.w	r1, #0
 800d078:	bf14      	ite	ne
 800d07a:	2340      	movne	r3, #64	@ 0x40
 800d07c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d080:	2000      	movs	r0, #0
 800d082:	6031      	str	r1, [r6, #0]
 800d084:	602b      	str	r3, [r5, #0]
 800d086:	b016      	add	sp, #88	@ 0x58
 800d088:	bd70      	pop	{r4, r5, r6, pc}
 800d08a:	466a      	mov	r2, sp
 800d08c:	f000 f848 	bl	800d120 <_fstat_r>
 800d090:	2800      	cmp	r0, #0
 800d092:	dbec      	blt.n	800d06e <__swhatbuf_r+0x12>
 800d094:	9901      	ldr	r1, [sp, #4]
 800d096:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d09a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d09e:	4259      	negs	r1, r3
 800d0a0:	4159      	adcs	r1, r3
 800d0a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0a6:	e7eb      	b.n	800d080 <__swhatbuf_r+0x24>

0800d0a8 <__smakebuf_r>:
 800d0a8:	898b      	ldrh	r3, [r1, #12]
 800d0aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ac:	079d      	lsls	r5, r3, #30
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	d507      	bpl.n	800d0c4 <__smakebuf_r+0x1c>
 800d0b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	6123      	str	r3, [r4, #16]
 800d0bc:	2301      	movs	r3, #1
 800d0be:	6163      	str	r3, [r4, #20]
 800d0c0:	b003      	add	sp, #12
 800d0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0c4:	ab01      	add	r3, sp, #4
 800d0c6:	466a      	mov	r2, sp
 800d0c8:	f7ff ffc8 	bl	800d05c <__swhatbuf_r>
 800d0cc:	9f00      	ldr	r7, [sp, #0]
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7fe fed4 	bl	800be80 <_malloc_r>
 800d0d8:	b948      	cbnz	r0, 800d0ee <__smakebuf_r+0x46>
 800d0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0de:	059a      	lsls	r2, r3, #22
 800d0e0:	d4ee      	bmi.n	800d0c0 <__smakebuf_r+0x18>
 800d0e2:	f023 0303 	bic.w	r3, r3, #3
 800d0e6:	f043 0302 	orr.w	r3, r3, #2
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	e7e2      	b.n	800d0b4 <__smakebuf_r+0xc>
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	6020      	str	r0, [r4, #0]
 800d0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0f6:	81a3      	strh	r3, [r4, #12]
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0fe:	b15b      	cbz	r3, 800d118 <__smakebuf_r+0x70>
 800d100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d104:	4630      	mov	r0, r6
 800d106:	f000 f81d 	bl	800d144 <_isatty_r>
 800d10a:	b128      	cbz	r0, 800d118 <__smakebuf_r+0x70>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f023 0303 	bic.w	r3, r3, #3
 800d112:	f043 0301 	orr.w	r3, r3, #1
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	431d      	orrs	r5, r3
 800d11c:	81a5      	strh	r5, [r4, #12]
 800d11e:	e7cf      	b.n	800d0c0 <__smakebuf_r+0x18>

0800d120 <_fstat_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	@ (800d140 <_fstat_r+0x20>)
 800d124:	2300      	movs	r3, #0
 800d126:	4604      	mov	r4, r0
 800d128:	4608      	mov	r0, r1
 800d12a:	4611      	mov	r1, r2
 800d12c:	602b      	str	r3, [r5, #0]
 800d12e:	f7f4 fdf1 	bl	8001d14 <_fstat>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	d102      	bne.n	800d13c <_fstat_r+0x1c>
 800d136:	682b      	ldr	r3, [r5, #0]
 800d138:	b103      	cbz	r3, 800d13c <_fstat_r+0x1c>
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	bd38      	pop	{r3, r4, r5, pc}
 800d13e:	bf00      	nop
 800d140:	200036c8 	.word	0x200036c8

0800d144 <_isatty_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d06      	ldr	r5, [pc, #24]	@ (800d160 <_isatty_r+0x1c>)
 800d148:	2300      	movs	r3, #0
 800d14a:	4604      	mov	r4, r0
 800d14c:	4608      	mov	r0, r1
 800d14e:	602b      	str	r3, [r5, #0]
 800d150:	f7f4 fdf0 	bl	8001d34 <_isatty>
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	d102      	bne.n	800d15e <_isatty_r+0x1a>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b103      	cbz	r3, 800d15e <_isatty_r+0x1a>
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
 800d160:	200036c8 	.word	0x200036c8

0800d164 <_init>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	bf00      	nop
 800d168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16a:	bc08      	pop	{r3}
 800d16c:	469e      	mov	lr, r3
 800d16e:	4770      	bx	lr

0800d170 <_fini>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	bf00      	nop
 800d174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d176:	bc08      	pop	{r3}
 800d178:	469e      	mov	lr, r3
 800d17a:	4770      	bx	lr
