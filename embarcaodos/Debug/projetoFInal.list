
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00006800  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a74  08006a74  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a74  08006a74  00007a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a7c  08006a7c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a7c  08006a7c  00007a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a80  08006a80  00007a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006a84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ac  20000070  08006af4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000441c  08006af4  0000841c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bce  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  00020c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112a  00000000  00000000  000258b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003196  00000000  00000000  000269e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001882d  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce379  00000000  00000000  000423a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011071e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd0  00000000  00000000  00110764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00116734  2**0
=======
  1 .text         00008660  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080088e8  080088e8  000098e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f0  080088f0  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f0  080088f0  000098f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088f4  080088f4  000098f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080088f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d4  20000064  0800895c  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002538  0800895c  0000a538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc8d  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb3  00000000  00000000  00027d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001489  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037d1  00000000  00000000  0002e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8cc  00000000  00000000  0003209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ad0  00000000  00000000  0004e966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000743c  00000000  00000000  0013247c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001398b8  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000200:	080069c8 	.word	0x080069c8
=======
 8000200:	08008828 	.word	0x08008828
>>>>>>> Stashed changes

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000218:	20000074 	.word	0x20000074
 800021c:	080069c8 	.word	0x080069c8
=======
 8000218:	20000068 	.word	0x20000068
 800021c:	08008828 	.word	0x08008828
>>>>>>> Stashed changes

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

<<<<<<< Updated upstream
0800054c <led_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <led_task+0x34>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f004 fa37 	bl	80049d4 <xQueueSemaphoreTake>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1f5      	bne.n	8000558 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f000 ff68 	bl	800144c <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 800057c:	e7ec      	b.n	8000558 <led_task+0xc>
 800057e:	bf00      	nop
 8000580:	20000124 	.word	0x20000124

08000584 <button_task>:
=======
0800054c <button_task>:
			HAL_GPIO_TogglePin(led->port, led->pin);
>>>>>>> Stashed changes
		}
	}
}

void button_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

	while(1){

		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
<<<<<<< Updated upstream
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <button_task+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fa1d 	bl	80049d4 <xQueueSemaphoreTake>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f5      	bne.n	800058c <button_task+0x8>
			vTaskDelay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f004 fd75 	bl	8005090 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <button_task+0x68>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f004 f87e 	bl	80046b0 <xQueueGenericSend>
=======
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <button_task+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f04f 31ff 	mov.w	r1, #4294967295
 800055c:	4618      	mov	r0, r3
 800055e:	f006 f969 	bl	8006834 <xQueueSemaphoreTake>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d1f5      	bne.n	8000554 <button_task+0x8>
			vTaskDelay(50);
 8000568:	2032      	movs	r0, #50	@ 0x32
 800056a:	f006 fcc1 	bl	8006ef0 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 800056e:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <button_task+0x68>)
 8000570:	6818      	ldr	r0, [r3, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	f005 ffca 	bl	8006510 <xQueueGenericSend>
>>>>>>> Stashed changes
			if(sinal==1){
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <button_task+0x6c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d106      	bne.n	8000592 <button_task+0x46>
				sinal=0;
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <button_task+0x6c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor desligado!\n\r";
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <button_task+0x70>)
 800058c:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <button_task+0x74>)
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e00a      	b.n	80005a8 <button_task+0x5c>
				//HAL_DMA_STOP(&hadc1);

			}else{
				sinal=1;
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <button_task+0x6c>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor ligado!\n\r";
 8000598:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <button_task+0x70>)
 800059a:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <button_task+0x78>)
 800059c:	601a      	str	r2, [r3, #0]
				//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) resultado_adcex_dma, 1);
				vTaskResume(xuart_task);
<<<<<<< Updated upstream
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <button_task+0x7c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fe54 	bl	8005288 <vTaskResume>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e0:	2028      	movs	r0, #40	@ 0x28
 80005e2:	f000 fcbd 	bl	8000f60 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 80005e6:	e7d1      	b.n	800058c <button_task+0x8>
 80005e8:	20000120 	.word	0x20000120
 80005ec:	20000124 	.word	0x20000124
 80005f0:	20000134 	.word	0x20000134
 80005f4:	20000000 	.word	0x20000000
 80005f8:	080069e0 	.word	0x080069e0
 80005fc:	080069f4 	.word	0x080069f4
 8000600:	20000130 	.word	0x20000130
=======
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <button_task+0x7c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 fda0 	bl	80070e8 <vTaskResume>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a8:	2028      	movs	r0, #40	@ 0x28
 80005aa:	f001 ffbb 	bl	8002524 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 80005ae:	e7d1      	b.n	8000554 <button_task+0x8>
 80005b0:	20000234 	.word	0x20000234
 80005b4:	20000238 	.word	0x20000238
 80005b8:	2000024c 	.word	0x2000024c
 80005bc:	20000000 	.word	0x20000000
 80005c0:	08008840 	.word	0x08008840
 80005c4:	08008854 	.word	0x08008854
 80005c8:	20000244 	.word	0x20000244
>>>>>>> Stashed changes

080005cc <uart_task>:
		}
	}
}

void uart_task(void *argument){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	while(1){

		if(sinal==0){
 80005d4:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <uart_task+0x9c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d124      	bne.n	8000626 <uart_task+0x5a>
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
<<<<<<< Updated upstream
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <uart_task+0xa0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f9d9 	bl	80049d4 <xQueueSemaphoreTake>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1f1      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <uart_task+0xa4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2213      	movs	r2, #19
 800062e:	4619      	mov	r1, r3
 8000630:	481e      	ldr	r0, [pc, #120]	@ (80006ac <uart_task+0xa8>)
 8000632:	f002 fab7 	bl	8002ba4 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <uart_task+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f9c8 	bl	80049d4 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <uart_task+0xa0>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	f004 f82f 	bl	80046b0 <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <uart_task+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fd50 	bl	80050fc <vTaskSuspend>
 800065c:	e7d6      	b.n	800060c <uart_task+0x8>
			}
		}else{
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <uart_task+0xa0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 31ff 	mov.w	r1, #4294967295
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f9b4 	bl	80049d4 <xQueueSemaphoreTake>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1cc      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 16);
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <uart_task+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2210      	movs	r2, #16
 8000678:	4619      	mov	r1, r3
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <uart_task+0xa8>)
 800067c:	f002 fa92 	bl	8002ba4 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <uart_task+0xac>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f04f 31ff 	mov.w	r1, #4294967295
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f9a3 	bl	80049d4 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 800068e:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <uart_task+0xa0>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f004 f80a 	bl	80046b0 <xQueueGenericSend>
		if(sinal==0){
 800069c:	e7b6      	b.n	800060c <uart_task+0x8>
 800069e:	bf00      	nop
 80006a0:	20000134 	.word	0x20000134
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	20000000 	.word	0x20000000
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	20000128 	.word	0x20000128
 80006b4:	20000130 	.word	0x20000130
=======
 80005dc:	4b23      	ldr	r3, [pc, #140]	@ (800066c <uart_task+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 f925 	bl	8006834 <xQueueSemaphoreTake>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1f1      	bne.n	80005d4 <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <uart_task+0xa4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2213      	movs	r2, #19
 80005f6:	4619      	mov	r1, r3
 80005f8:	481e      	ldr	r0, [pc, #120]	@ (8000674 <uart_task+0xa8>)
 80005fa:	f004 f9c5 	bl	8004988 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <uart_task+0xac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4618      	mov	r0, r3
 8000608:	f006 f914 	bl	8006834 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <uart_task+0xa0>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	f005 ff7b 	bl	8006510 <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <uart_task+0xb0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fc9c 	bl	8006f5c <vTaskSuspend>
 8000624:	e7d6      	b.n	80005d4 <uart_task+0x8>
			}
		}else{
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <uart_task+0xa0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f04f 31ff 	mov.w	r1, #4294967295
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f900 	bl	8006834 <xQueueSemaphoreTake>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1cc      	bne.n	80005d4 <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 16);
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <uart_task+0xa4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2210      	movs	r2, #16
 8000640:	4619      	mov	r1, r3
 8000642:	480c      	ldr	r0, [pc, #48]	@ (8000674 <uart_task+0xa8>)
 8000644:	f004 f9a0 	bl	8004988 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <uart_task+0xac>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f04f 31ff 	mov.w	r1, #4294967295
 8000650:	4618      	mov	r0, r3
 8000652:	f006 f8ef 	bl	8006834 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <uart_task+0xa0>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	f005 ff56 	bl	8006510 <xQueueGenericSend>
		if(sinal==0){
 8000664:	e7b6      	b.n	80005d4 <uart_task+0x8>
 8000666:	bf00      	nop
 8000668:	2000024c 	.word	0x2000024c
 800066c:	20000240 	.word	0x20000240
 8000670:	20000000 	.word	0x20000000
 8000674:	2000014c 	.word	0x2000014c
 8000678:	2000023c 	.word	0x2000023c
 800067c:	20000244 	.word	0x20000244
>>>>>>> Stashed changes

08000680 <HAL_UART_TxCpltCallback>:
			}
		}
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
<<<<<<< Updated upstream
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_UART_TxCpltCallback+0x3c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f107 020c 	add.w	r2, r7, #12
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f8f0 	bl	80048b4 <xQueueGiveFromISR>
=======
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <HAL_UART_TxCpltCallback+0x3c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f107 020c 	add.w	r2, r7, #12
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f006 f83c 	bl	8006714 <xQueueGiveFromISR>
>>>>>>> Stashed changes

	if (pxHigherPriorityTaskWokenTX == pdTRUE)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d107      	bne.n	80006b2 <HAL_UART_TxCpltCallback+0x32>
	{
		portYIELD();
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <HAL_UART_TxCpltCallback+0x40>)
 80006a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	f3bf 8f6f 	isb	sy
	}
}
<<<<<<< Updated upstream
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000128 	.word	0x20000128
 80006f8:	e000ed04 	.word	0xe000ed04
=======
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000023c 	.word	0x2000023c
 80006c0:	e000ed04 	.word	0xe000ed04
>>>>>>> Stashed changes

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af02      	add	r7, sp, #8
=======
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000702:	f000 fb00 	bl	8000d06 <HAL_Init>
=======
 80006ca:	f000 fcd6 	bl	800107a <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000706:	f000 f85d 	bl	80007c4 <SystemClock_Config>
=======
 80006ce:	f000 f87d 	bl	80007cc <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 800070a:	f000 f8ef 	bl	80008ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800070e:	f000 f8a3 	bl	8000858 <MX_LPUART1_UART_Init>
=======
 80006d2:	f000 fa01 	bl	8000ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d6:	f000 f9d5 	bl	8000a84 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80006da:	f000 f93b 	bl	8000954 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80006de:	f000 f8bf 	bl	8000860 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006e2:	f000 f981 	bl	80009e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80006e6:	217f      	movs	r1, #127	@ 0x7f
 80006e8:	4829      	ldr	r0, [pc, #164]	@ (8000790 <main+0xcc>)
 80006ea:	f001 fd1f 	bl	800212c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 80006ee:	4829      	ldr	r0, [pc, #164]	@ (8000794 <main+0xd0>)
 80006f0:	f003 fbbc 	bl	8003e6c <HAL_TIM_Base_Start>
>>>>>>> Stashed changes
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
<<<<<<< Updated upstream
  bSemaphore = xSemaphoreCreateBinary();
 8000712:	2203      	movs	r2, #3
 8000714:	2100      	movs	r1, #0
 8000716:	2001      	movs	r0, #1
 8000718:	f003 ff42 	bl	80045a0 <xQueueGenericCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a1d      	ldr	r2, [pc, #116]	@ (8000794 <main+0x98>)
 8000720:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 8000722:	2203      	movs	r2, #3
 8000724:	2100      	movs	r1, #0
 8000726:	2001      	movs	r0, #1
 8000728:	f003 ff3a 	bl	80045a0 <xQueueGenericCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <main+0x9c>)
 8000730:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000732:	2203      	movs	r2, #3
 8000734:	2100      	movs	r1, #0
 8000736:	2001      	movs	r0, #1
 8000738:	f003 ff32 	bl	80045a0 <xQueueGenericCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <main+0xa0>)
 8000740:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 8000742:	2001      	movs	r0, #1
 8000744:	f003 ff9c 	bl	8004680 <xQueueCreateMutex>
 8000748:	4603      	mov	r3, r0
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <main+0xa4>)
 800074c:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 128, &led, 2, NULL);
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2302      	movs	r3, #2
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <main+0xa8>)
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	4913      	ldr	r1, [pc, #76]	@ (80007a8 <main+0xac>)
 800075c:	4813      	ldr	r0, [pc, #76]	@ (80007ac <main+0xb0>)
 800075e:	f004 fb4b 	bl	8004df8 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, &xuart_task);
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <main+0xb4>)
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	4911      	ldr	r1, [pc, #68]	@ (80007b4 <main+0xb8>)
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <main+0xbc>)
 8000772:	f004 fb41 	bl	8004df8 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, NULL);
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2303      	movs	r3, #3
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	490e      	ldr	r1, [pc, #56]	@ (80007bc <main+0xc0>)
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <main+0xc4>)
 8000786:	f004 fb37 	bl	8004df8 <xTaskCreate>
=======
  adcSemaphore = xSemaphoreCreateBinary();
 80006f4:	2203      	movs	r2, #3
 80006f6:	2100      	movs	r1, #0
 80006f8:	2001      	movs	r0, #1
 80006fa:	f005 fe81 	bl	8006400 <xQueueGenericCreate>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <main+0xd4>)
 8000702:	6013      	str	r3, [r2, #0]
  bSemaphore = xSemaphoreCreateBinary();
 8000704:	2203      	movs	r2, #3
 8000706:	2100      	movs	r1, #0
 8000708:	2001      	movs	r0, #1
 800070a:	f005 fe79 	bl	8006400 <xQueueGenericCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a22      	ldr	r2, [pc, #136]	@ (800079c <main+0xd8>)
 8000712:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 8000714:	2203      	movs	r2, #3
 8000716:	2100      	movs	r1, #0
 8000718:	2001      	movs	r0, #1
 800071a:	f005 fe71 	bl	8006400 <xQueueGenericCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <main+0xdc>)
 8000722:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000724:	2203      	movs	r2, #3
 8000726:	2100      	movs	r1, #0
 8000728:	2001      	movs	r0, #1
 800072a:	f005 fe69 	bl	8006400 <xQueueGenericCreate>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <main+0xe0>)
 8000732:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 8000734:	2001      	movs	r0, #1
 8000736:	f005 fed3 	bl	80064e0 <xQueueCreateMutex>
 800073a:	4603      	mov	r3, r0
 800073c:	4a1a      	ldr	r2, [pc, #104]	@ (80007a8 <main+0xe4>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <main+0xe8>)
 8000742:	1d3c      	adds	r4, r7, #4
 8000744:	461d      	mov	r5, r3
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fd0f 	bl	8006176 <osThreadCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <main+0xec>)
 800075c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	//(void)xTaskCreate(led_task, "led_task", 128, &led, 2, NULL);
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, &xuart_task);
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <main+0xf0>)
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2301      	movs	r3, #1
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	4913      	ldr	r1, [pc, #76]	@ (80007b8 <main+0xf4>)
 800076c:	4813      	ldr	r0, [pc, #76]	@ (80007bc <main+0xf8>)
 800076e:	f006 fa73 	bl	8006c58 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, &xbutton_task);
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <main+0xfc>)
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2303      	movs	r3, #3
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2300      	movs	r3, #0
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	4911      	ldr	r1, [pc, #68]	@ (80007c4 <main+0x100>)
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <main+0x104>)
 8000782:	f006 fa69 	bl	8006c58 <xTaskCreate>
>>>>>>> Stashed changes
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< Updated upstream
 800078a:	f003 fde3 	bl	8004354 <osKernelStart>
=======
 8000786:	f005 fcef 	bl	8006168 <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< Updated upstream
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <main+0x92>
 8000792:	bf00      	nop
 8000794:	20000120 	.word	0x20000120
 8000798:	20000124 	.word	0x20000124
 800079c:	20000128 	.word	0x20000128
 80007a0:	2000012c 	.word	0x2000012c
 80007a4:	20000004 	.word	0x20000004
 80007a8:	08006a08 	.word	0x08006a08
 80007ac:	0800054d 	.word	0x0800054d
 80007b0:	20000130 	.word	0x20000130
 80007b4:	08006a14 	.word	0x08006a14
 80007b8:	08000605 	.word	0x08000605
 80007bc:	08006a20 	.word	0x08006a20
 80007c0:	08000585 	.word	0x08000585

080007c4 <SystemClock_Config>:
=======
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0xc6>
 800078e:	bf00      	nop
 8000790:	20000080 	.word	0x20000080
 8000794:	200001e0 	.word	0x200001e0
 8000798:	20000230 	.word	0x20000230
 800079c:	20000234 	.word	0x20000234
 80007a0:	20000238 	.word	0x20000238
 80007a4:	2000023c 	.word	0x2000023c
 80007a8:	20000240 	.word	0x20000240
 80007ac:	0800888c 	.word	0x0800888c
 80007b0:	2000022c 	.word	0x2000022c
 80007b4:	20000244 	.word	0x20000244
 80007b8:	08008868 	.word	0x08008868
 80007bc:	080005cd 	.word	0x080005cd
 80007c0:	20000248 	.word	0x20000248
 80007c4:	08008874 	.word	0x08008874
 80007c8:	0800054d 	.word	0x0800054d

080007cc <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	@ 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2238      	movs	r2, #56	@ 0x38
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 f808 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
=======
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	2238      	movs	r2, #56	@ 0x38
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f007 ff34 	bl	8008648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
<<<<<<< Updated upstream
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 fe62 	bl	80014b0 <HAL_PWREx_ControlVoltageScaling>
=======
 80007ee:	2000      	movs	r0, #0
 80007f0:	f002 fae0 	bl	8002db4 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< Updated upstream
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2303      	movs	r3, #3
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007fe:	2306      	movs	r3, #6
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000802:	2355      	movs	r3, #85	@ 0x55
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fefe 	bl	8001618 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000822:	f000 f901 	bl	8000a28 <Error_Handler>
=======
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2303      	movs	r3, #3
 8000804:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000806:	2306      	movs	r3, #6
 8000808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800080a:	2355      	movs	r3, #85	@ 0x55
 800080c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fb7c 	bl	8002f1c <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800082a:	f000 f9fd 	bl	8000c28 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000826:	230f      	movs	r3, #15
 8000828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2104      	movs	r1, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f9fc 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800084a:	f000 f8ed 	bl	8000a28 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	@ 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_LPUART1_UART_Init>:
=======
 800082e:	230f      	movs	r3, #15
 8000830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fe7a 	bl	8003540 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000852:	f000 f9e9 	bl	8000c28 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	@ 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2220      	movs	r2, #32
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f007 fee5 	bl	8008648 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <MX_ADC1_Init+0xec>)
 8000880:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000884:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000886:	4b31      	ldr	r3, [pc, #196]	@ (800094c <MX_ADC1_Init+0xec>)
 8000888:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800088c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b2f      	ldr	r3, [pc, #188]	@ (800094c <MX_ADC1_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000894:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_ADC1_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800089a:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <MX_ADC1_Init+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_ADC1_Init+0xec>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b29      	ldr	r3, [pc, #164]	@ (800094c <MX_ADC1_Init+0xec>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_ADC1_Init+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MX_ADC1_Init+0xec>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_ADC1_Init+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_ADC1_Init+0xec>)
 80008c8:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 80008cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_ADC1_Init+0xec>)
 80008d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_ADC1_Init+0xec>)
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_ADC1_Init+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_ADC1_Init+0xec>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ec:	4817      	ldr	r0, [pc, #92]	@ (800094c <MX_ADC1_Init+0xec>)
 80008ee:	f000 fdf7 	bl	80014e0 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80008f8:	f000 f996 	bl	8000c28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4811      	ldr	r0, [pc, #68]	@ (800094c <MX_ADC1_Init+0xec>)
 8000908:	f001 fc72 	bl	80021f0 <HAL_ADCEx_MultiModeConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000912:	f000 f989 	bl	8000c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_ADC1_Init+0xf0>)
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	237f      	movs	r3, #127	@ 0x7f
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000926:	2304      	movs	r3, #4
 8000928:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <MX_ADC1_Init+0xec>)
 8000934:	f000 ff58 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800093e:	f000 f973 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	@ 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000080 	.word	0x20000080
 8000950:	08600004 	.word	0x08600004

08000954 <MX_LPUART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
=======
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
<<<<<<< Updated upstream
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800085e:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <MX_LPUART1_UART_Init+0x90>)
 8000860:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800089c:	f002 f932 	bl	8002b04 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f8bf 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008ae:	f003 fc86 	bl	80041be <HAL_UARTEx_SetTxFifoThreshold>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008b8:	f000 f8b6 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	f003 fcbb 	bl	800423a <HAL_UARTEx_SetRxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008ca:	f000 f8ad 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	f003 fc3c 	bl	800414c <HAL_UARTEx_DisableFifoMode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008da:	f000 f8a5 	bl	8000a28 <Error_Handler>
=======
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800095a:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <MX_LPUART1_UART_Init+0x90>)
 800095c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000996:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000998:	f003 ffa6 	bl	80048e8 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f941 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009aa:	f005 fafa 	bl	8005fa2 <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009b4:	f000 f938 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009bc:	f005 fb2f 	bl	800601e <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009c6:	f000 f92f 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f005 fab0 	bl	8005f30 <HAL_UARTEx_DisableFifoMode>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009d6:	f000 f927 	bl	8000c28 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
<<<<<<< Updated upstream
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	40008000 	.word	0x40008000

080008ec <MX_GPIO_Init>:
=======
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000014c 	.word	0x2000014c
 80009e4:	40008000 	.word	0x40008000

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a10:	22a9      	movs	r2, #169	@ 0xa9
 8000a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2e:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a30:	f003 f9c4 	bl	8003dbc <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 f8f5 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a4c:	f003 fc2a 	bl	80042a4 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a56:	f000 f8e7 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_TIM2_Init+0x98>)
 8000a68:	f003 fe76 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a72:	f000 f8d9 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001e0 	.word	0x200001e0

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_DMA_Init+0x50>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2105      	movs	r1, #5
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f001 fd16 	bl	80024f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f001 fd2d 	bl	8002524 <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
=======
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 8000902:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f000 fd63 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	480f      	ldr	r0, [pc, #60]	@ (80009ac <MX_GPIO_Init+0xc0>)
 800096e:	f000 fbd3 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000972:	2320      	movs	r3, #32
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f000 fbc4 	bl	8001118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2105      	movs	r1, #5
 8000994:	2028      	movs	r0, #40	@ 0x28
 8000996:	f000 fac9 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099a:	2028      	movs	r0, #40	@ 0x28
 800099c:	f000 fae0 	bl	8000f60 <HAL_NVIC_EnableIRQ>
=======
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a28      	ldr	r2, [pc, #160]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a22      	ldr	r2, [pc, #136]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_GPIO_Init+0xbc>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f002 f909 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000b5a:	f001 ff79 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f001 ff6a 	bl	8002a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2105      	movs	r1, #5
 8000b80:	2028      	movs	r0, #40	@ 0x28
 8000b82:	f001 fcb5 	bl	80024f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b86:	2028      	movs	r0, #40	@ 0x28
 8000b88:	f001 fccc 	bl	8002524 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800

080009b0 <HAL_GPIO_EXTI_Callback>:
=======
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000800 	.word	0x48000800

08000b9c <HAL_GPIO_EXTI_Callback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009c4:	d115      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f000 fad8 	bl	8000f7c <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f107 020c 	add.w	r2, r7, #12
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 ff6c 	bl	80048b4 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <HAL_GPIO_EXTI_Callback+0x42>
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x50>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
	}
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000120 	.word	0x20000120
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bb0:	d115      	bne.n	8000bde <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f001 fcc4 	bl	8002540 <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f107 020c 	add.w	r2, r7, #12
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fda6 	bl	8006714 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_EXTI_Callback+0x42>
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x50>)
 8000bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	f3bf 8f6f 	isb	sy
	}
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000234 	.word	0x20000234
 8000bec:	e000ed04 	.word	0xe000ed04

08000bf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END 5 */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
=======
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
<<<<<<< Updated upstream
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a16:	f000 f98f 	bl	8000d38 <HAL_IncTick>
=======
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c16:	f000 fa49 	bl	80010ac <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <Error_Handler>:
=======
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40012c00 	.word	0x40012c00

08000c28 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
=======
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
=======
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
=======
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
=======
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
=======
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3e:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_MspInit+0x50>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	f06f 0001 	mvn.w	r0, #1
 8000a72:	f000 fa5b 	bl	8000f2c <HAL_NVIC_SetPriority>
=======
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	f06f 0001 	mvn.w	r0, #1
 8000c72:	f001 fc3d 	bl	80024f0 <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< Updated upstream
 8000a76:	f000 fdbf 	bl	80015f8 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 8000c76:	f002 f941 	bl	8002efc <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_UART_MspInit>:
=======
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09a      	sub	sp, #104	@ 0x68
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2244      	movs	r2, #68	@ 0x44
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fccd 	bl	8008648 <memset>
  if(hadc->Instance==ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cb6:	d15f      	bne.n	8000d78 <HAL_ADC_MspInit+0xf0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fe87 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f7ff ffa8 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	4a28      	ldr	r2, [pc, #160]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000cde:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce4:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfc:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_ADC_MspInit+0xf8>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f001 fe97 	bl	8002a50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d24:	4a18      	ldr	r2, [pc, #96]	@ (8000d88 <HAL_ADC_MspInit+0x100>)
 8000d26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d52:	2220      	movs	r2, #32
 8000d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d5c:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d5e:	f001 fbfd 	bl	800255c <HAL_DMA_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000d68:	f7ff ff5e 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d70:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_ADC_MspInit+0xfc>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d78:	bf00      	nop
 8000d7a:	3768      	adds	r7, #104	@ 0x68
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	200000ec 	.word	0x200000ec
 8000d88:	40020008 	.word	0x40020008

08000d8c <HAL_UART_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	@ 0x68
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2244      	movs	r2, #68	@ 0x44
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fe9d 	bl	80067e8 <memset>
  if(huart->Instance==LPUART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a23      	ldr	r2, [pc, #140]	@ (8000b40 <HAL_UART_MspInit+0xb8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d13e      	bne.n	8000b36 <HAL_UART_MspInit+0xae>
=======
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	@ 0x68
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2244      	movs	r2, #68	@ 0x44
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f007 fc4b 	bl	8008648 <memset>
  if(huart->Instance==LPUART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a23      	ldr	r2, [pc, #140]	@ (8000e44 <HAL_UART_MspInit+0xb8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d13e      	bne.n	8000e3a <HAL_UART_MspInit+0xae>
>>>>>>> Stashed changes

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
<<<<<<< Updated upstream
 8000ab8:	2320      	movs	r3, #32
 8000aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fb07 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff ffaa 	bl	8000a28 <Error_Handler>
=======
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fe07 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ff28 	bl	8000c28 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
=======
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_UART_MspInit+0xbc>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 8000b04:	230c      	movs	r3, #12
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f000 faf9 	bl	8001118 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	205b      	movs	r0, #91	@ 0x5b
 8000b2c:	f000 f9fe 	bl	8000f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b30:	205b      	movs	r0, #91	@ 0x5b
 8000b32:	f000 fa15 	bl	8000f60 <HAL_NVIC_EnableIRQ>
=======
 8000e08:	230c      	movs	r3, #12
 8000e0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e26:	f001 fe13 	bl	8002a50 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	205b      	movs	r0, #91	@ 0x5b
 8000e30:	f001 fb5e 	bl	80024f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e34:	205b      	movs	r0, #91	@ 0x5b
 8000e36:	f001 fb75 	bl	8002524 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8000b36:	bf00      	nop
 8000b38:	3768      	adds	r7, #104	@ 0x68
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40008000 	.word	0x40008000
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
=======
 8000e3a:	bf00      	nop
 8000e3c:	3768      	adds	r7, #104	@ 0x68
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40008000 	.word	0x40008000
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e5c:	d113      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2105      	movs	r1, #5
 8000e7a:	201c      	movs	r0, #28
 8000e7c:	f001 fb38 	bl	80024f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e80:	201c      	movs	r0, #28
 8000e82:	f001 fb4f 	bl	8002524 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 020c 	add.w	r2, r7, #12
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fa34 	bl	8001fe8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b80:	f001 fa1c 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8000b84:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	3b01      	subs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b96:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b98:	601a      	str	r2, [r3, #0]
=======
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_InitTick+0xc4>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <HAL_InitTick+0xc4>)
 8000eaa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eae:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <HAL_InitTick+0xc4>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebc:	f107 020c 	add.w	r2, r7, #12
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fd10 	bl	80038ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ecc:	f002 fcf8 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8000ed0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_InitTick+0xc8>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	3b01      	subs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000ee2:	4a20      	ldr	r2, [pc, #128]	@ (8000f64 <HAL_InitTick+0xd0>)
 8000ee4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000bb4:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb6:	f001 fc7f 	bl	80024b8 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11b      	bne.n	8000c00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bca:	f001 fcd7 	bl	800257c <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bdc:	2019      	movs	r0, #25
 8000bde:	f000 f9bf 	bl	8000f60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d808      	bhi.n	8000bfa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2019      	movs	r0, #25
 8000bee:	f000 f99d 	bl	8000f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <HAL_InitTick+0xb8>
=======
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000ee8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eee:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000f00:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000f02:	f002 ff5b 	bl	8003dbc <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11b      	bne.n	8000f4c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f14:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <HAL_InitTick+0xcc>)
 8000f16:	f003 f80b 	bl	8003f30 <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d111      	bne.n	8000f4c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f28:	2019      	movs	r0, #25
 8000f2a:	f001 fafb 	bl	8002524 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d808      	bhi.n	8000f46 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	2019      	movs	r0, #25
 8000f3a:	f001 fad9 	bl	80024f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_InitTick+0xd4>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e002      	b.n	8000f4c <HAL_InitTick+0xb8>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 8000f46:	2301      	movs	r3, #1
 8000f48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	@ 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20000138 	.word	0x20000138
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	20000014 	.word	0x20000014

08000c20 <NMI_Handler>:
=======
 8000f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3730      	adds	r7, #48	@ 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	431bde83 	.word	0x431bde83
 8000f60:	20000250 	.word	0x20000250
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	20000008 	.word	0x20000008

08000f6c <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
=======
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:
=======
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
=======
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:
=======
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
=======
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:
=======
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
=======
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:
=======
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
=======
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <DebugMon_Handler>:
=======
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
=======
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <TIM1_UP_TIM16_IRQHandler>:
=======
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f001 fc3f 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000ec 	.word	0x200000ec

08000fb8 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
=======
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c5e:	f001 fcf7 	bl	8002650 <HAL_TIM_IRQHandler>
=======
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fbe:	f003 f821 	bl	8004004 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000138 	.word	0x20000138

08000c6c <EXTI15_10_IRQHandler>:
=======
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000250 	.word	0x20000250

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f003 f817 	bl	8004004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001e0 	.word	0x200001e0

08000fe0 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
=======
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
<<<<<<< Updated upstream
 8000c70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c74:	f000 fc04 	bl	8001480 <HAL_GPIO_EXTI_IRQHandler>
=======
 8000fe4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe8:	f001 fecc 	bl	8002d84 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LPUART1_IRQHandler>:
=======
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LPUART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
=======
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
<<<<<<< Updated upstream
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <LPUART1_IRQHandler+0x10>)
 8000c82:	f002 f823 	bl	8002ccc <HAL_UART_IRQHandler>
=======
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <LPUART1_IRQHandler+0x10>)
 8000ff6:	f003 fd5b 	bl	8004ab0 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000008c 	.word	0x2000008c

08000c90 <SystemInit>:
=======
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000014c 	.word	0x2000014c

08001004 <SystemInit>:
>>>>>>> Stashed changes
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:
=======
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f005 fde7 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fd09 	bl	80006fc <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf8:	08006a84 	.word	0x08006a84
  ldr r2, =_sbss
 8000cfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d00:	2000441c 	.word	0x2000441c

08000d04 <ADC1_2_IRQHandler>:
=======
 8001028:	480d      	ldr	r0, [pc, #52]	@ (8001060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f007 fb5d 	bl	8008714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105a:	f7ff fb33 	bl	80006c4 <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   r0, =_estack
 8001060:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800106c:	080088f8 	.word	0x080088f8
  ldr r2, =_sbss
 8001070:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001074:	20002538 	.word	0x20002538

08001078 <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
=======
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>

0800107a <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
=======
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f900 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff ff16 	bl	8000b48 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
=======
 8001084:	2003      	movs	r0, #3
 8001086:	f001 fa28 	bl	80024da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108a:	200f      	movs	r0, #15
 800108c:	f7ff ff02 	bl	8000e94 <HAL_InitTick>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e001      	b.n	80010a0 <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 8000d28:	f7ff fe84 	bl	8000a34 <HAL_MspInit>
=======
 800109c:	f7ff fdca 	bl	8000c34 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000d2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_IncTick>:
=======
 80010a0:	79fb      	ldrb	r3, [r7, #7]

}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20000184 	.word	0x20000184
 8000d58:	20000018 	.word	0x20000018

08000d5c <HAL_GetTick>:
=======
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x20>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a03      	ldr	r2, [pc, #12]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	2000029c 	.word	0x2000029c
 80010cc:	2000000c 	.word	0x2000000c

080010d0 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000184 	.word	0x20000184

08000d74 <__NVIC_SetPriorityGrouping>:
=======
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000029c 	.word	0x2000029c

080010e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	609a      	str	r2, [r3, #8]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3360      	adds	r3, #96	@ 0x60
 8001162:	461a      	mov	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <LL_ADC_SetOffset+0x44>)
 8001172:	4013      	ands	r3, r2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	4313      	orrs	r3, r2
 8001180:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	03fff000 	.word	0x03fff000

08001198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3360      	adds	r3, #96	@ 0x60
 80011a6:	461a      	mov	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3360      	adds	r3, #96	@ 0x60
 80011d4:	461a      	mov	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ee:	bf00      	nop
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b087      	sub	sp, #28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3360      	adds	r3, #96	@ 0x60
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	431a      	orrs	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3360      	adds	r3, #96	@ 0x60
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3330      	adds	r3, #48	@ 0x30
 800129c:	461a      	mov	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	211f      	movs	r1, #31
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	0e9b      	lsrs	r3, r3, #26
 80012c4:	f003 011f 	and.w	r1, r3, #31
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	431a      	orrs	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3314      	adds	r3, #20
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	0e5b      	lsrs	r3, r3, #25
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	0d1b      	lsrs	r3, r3, #20
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	2107      	movs	r1, #7
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	401a      	ands	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0d1b      	lsrs	r3, r3, #20
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001354:	43db      	mvns	r3, r3
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0318 	and.w	r3, r3, #24
 800135e:	4908      	ldr	r1, [pc, #32]	@ (8001380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001360:	40d9      	lsrs	r1, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	400b      	ands	r3, r1
 8001366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	0007ffff 	.word	0x0007ffff

08001384 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6093      	str	r3, [r2, #8]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013bc:	d101      	bne.n	80013c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800140c:	d101      	bne.n	8001412 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001434:	f043 0202 	orr.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <LL_ADC_IsEnabled+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_IsEnabled+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d101      	bne.n	8001486 <LL_ADC_IsDisableOngoing+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_IsDisableOngoing+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d101      	bne.n	80014ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d101      	bne.n	80014d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e167      	b.n	80017ca <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fbbd 	bl	8000c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff41 	bl	80013a8 <LL_ADC_IsDeepPowerDownEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff27 	bl	8001384 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff5c 	bl	80013f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff40 	bl	80013d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001550:	4ba0      	ldr	r3, [pc, #640]	@ (80017d4 <HAL_ADC_Init+0x2f4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	4aa0      	ldr	r2, [pc, #640]	@ (80017d8 <HAL_ADC_Init+0x2f8>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001564:	e002      	b.n	800156c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3e 	bl	80013f8 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff76 	bl	8001494 <LL_ADC_REG_IsConversionOngoing>
 80015a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8100 	bne.w	80017b8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 80fc 	bne.w	80017b8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff37 	bl	8001448 <LL_ADC_IsEnabled>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80015e4:	f7ff ff30 	bl	8001448 <LL_ADC_IsEnabled>
 80015e8:	4604      	mov	r4, r0
 80015ea:	487c      	ldr	r0, [pc, #496]	@ (80017dc <HAL_ADC_Init+0x2fc>)
 80015ec:	f7ff ff2c 	bl	8001448 <LL_ADC_IsEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4878      	ldr	r0, [pc, #480]	@ (80017e0 <HAL_ADC_Init+0x300>)
 8001600:	f7ff fd72 	bl	80010e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f5b      	ldrb	r3, [r3, #29]
 8001608:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001614:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800161a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001622:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	045b      	lsls	r3, r3, #17
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <HAL_ADC_Init+0x304>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	430b      	orrs	r3, r1
 800166e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff15 	bl	80014ba <LL_ADC_INJ_IsConversionOngoing>
 8001690:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d16d      	bne.n	8001774 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d16a      	bne.n	8001774 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016ba:	f023 0302 	bic.w	r3, r3, #2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6911      	ldr	r1, [r2, #16]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80016fe:	e013      	b.n	8001728 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800170e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001724:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800172e:	2b01      	cmp	r3, #1
 8001730:	d118      	bne.n	8001764 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001754:	430a      	orrs	r2, r1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	e007      	b.n	8001774 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10c      	bne.n	8001796 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f023 010f 	bic.w	r1, r3, #15
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	1e5a      	subs	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
 8001794:	e007      	b.n	80017a6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 020f 	bic.w	r2, r2, #15
 80017a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017b6:	e007      	b.n	80017c8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	f043 0210 	orr.w	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000004 	.word	0x20000004
 80017d8:	053e2d63 	.word	0x053e2d63
 80017dc:	50000100 	.word	0x50000100
 80017e0:	50000300 	.word	0x50000300
 80017e4:	fff04007 	.word	0xfff04007

080017e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b6      	sub	sp, #216	@ 0xd8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADC_ConfigChannel+0x22>
 8001806:	2302      	movs	r3, #2
 8001808:	e3c8      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x7b4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fe3c 	bl	8001494 <LL_ADC_REG_IsConversionOngoing>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 83ad 	bne.w	8001f7e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	f7ff fd2b 	bl	800128c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe2a 	bl	8001494 <LL_ADC_REG_IsConversionOngoing>
 8001840:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe36 	bl	80014ba <LL_ADC_INJ_IsConversionOngoing>
 800184e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001852:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 81d9 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800185c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 81d4 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800186e:	d10f      	bne.n	8001890 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff fd32 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fcec 	bl	8001266 <LL_ADC_SetSamplingTimeCommonConfig>
 800188e:	e00e      	b.n	80018ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	461a      	mov	r2, r3
 800189e:	f7ff fd21 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fcdc 	bl	8001266 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d022      	beq.n	8001916 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6919      	ldr	r1, [r3, #16]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018e0:	f7ff fc36 	bl	8001150 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff fc82 	bl	80011fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_ADC_ConfigChannel+0x124>
 8001906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800190a:	e000      	b.n	800190e <HAL_ADC_ConfigChannel+0x126>
 800190c:	2300      	movs	r3, #0
 800190e:	461a      	mov	r2, r3
 8001910:	f7ff fc8e 	bl	8001230 <LL_ADC_SetOffsetSaturation>
 8001914:	e17b      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fc3b 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x15a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fc30 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	e01e      	b.n	8001980 <HAL_ADC_ConfigChannel+0x198>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fc25 	bl	8001198 <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e004      	b.n	800197e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1b0>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	e018      	b.n	80019ca <HAL_ADC_ConfigChannel+0x1e2>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80019ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80019b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80019c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbf4 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fbd8 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x220>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fbcd 	bl	8001198 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	e01e      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x25e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fbc2 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e004      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x276>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	e018      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x2a8>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e004      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb91 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb75 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x2e6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fb6a 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	e01e      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x324>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fb5f 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e004      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x33c>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	e016      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x36a>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001b36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b44:	2320      	movs	r3, #32
 8001b46:	e004      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb30 	bl	80011c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2103      	movs	r1, #3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fb14 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x3a8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2103      	movs	r1, #3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb09 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	e017      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x3d8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2103      	movs	r1, #3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fafe 	bl	8001198 <LL_ADC_GetOffsetChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ba8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001baa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	e003      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x3f0>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	e011      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x414>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	e003      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d106      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fadb 	bl	80011c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc18 	bl	8001448 <LL_ADC_IsEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 8140 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f7ff fb85 	bl	800133c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	4a8f      	ldr	r2, [pc, #572]	@ (8001e74 <HAL_ADC_ConfigChannel+0x68c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	f040 8131 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10b      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x47e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	bf94      	ite	ls
 8001c5e:	2301      	movls	r3, #1
 8001c60:	2300      	movhi	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e019      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x4b2>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c76:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2b09      	cmp	r3, #9
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d079      	beq.n	8001d92 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d107      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x4d2>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	069b      	lsls	r3, r3, #26
 8001cb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb8:	e015      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x4fe>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	e003      	b.n	8001cde <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	069b      	lsls	r3, r3, #26
 8001ce2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x51e>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0e9b      	lsrs	r3, r3, #26
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	e017      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x54e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	ea42 0103 	orr.w	r1, r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x574>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0e9b      	lsrs	r3, r3, #26
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 021f 	and.w	r2, r3, #31
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	e018      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x5a6>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 021f 	and.w	r2, r3, #31
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	e081      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x5c6>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	3301      	adds	r3, #1
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dac:	e015      	b.n	8001dda <HAL_ADC_ConfigChannel+0x5f2>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x612>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	e017      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x642>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	61fb      	str	r3, [r7, #28]
  return result;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	ea42 0103 	orr.w	r1, r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x66e>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 021f 	and.w	r2, r3, #31
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b1e      	subs	r3, #30
 8001e4e:	051b      	lsls	r3, r3, #20
 8001e50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e54:	e01e      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x6ac>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	613b      	str	r3, [r7, #16]
  return result;
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e006      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x698>
 8001e72:	bf00      	nop
 8001e74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	f003 021f 	and.w	r2, r3, #31
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b1e      	subs	r3, #30
 8001e8e:	051b      	lsls	r3, r3, #20
 8001e90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e94:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff fa22 	bl	80012e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d071      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eac:	483e      	ldr	r0, [pc, #248]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eae:	f7ff f941 	bl	8001134 <LL_ADC_GetCommonPathInternalCh>
 8001eb2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3c      	ldr	r2, [pc, #240]	@ (8001fac <HAL_ADC_ConfigChannel+0x7c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d004      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x6e2>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d127      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d121      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ede:	d157      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ee4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ee8:	4619      	mov	r1, r3
 8001eea:	482f      	ldr	r0, [pc, #188]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eec:	f7ff f90f 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef0:	4b30      	ldr	r3, [pc, #192]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	4a30      	ldr	r2, [pc, #192]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f0a:	e002      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f18:	e03a      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <HAL_ADC_ConfigChannel+0x7d4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d113      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d02a      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	4619      	mov	r1, r3
 8001f44:	4818      	ldr	r0, [pc, #96]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f46:	f7ff f8e2 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4a:	e021      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d11c      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a16      	ldr	r2, [pc, #88]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d011      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f74:	4619      	mov	r1, r3
 8001f76:	480c      	ldr	r0, [pc, #48]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f78:	f7ff f8c9 	bl	800110e <LL_ADC_SetCommonPathInternalCh>
 8001f7c:	e008      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f98:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	37d8      	adds	r7, #216	@ 0xd8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	80080000 	.word	0x80080000
 8001fa8:	50000300 	.word	0x50000300
 8001fac:	c3210000 	.word	0xc3210000
 8001fb0:	90c00010 	.word	0x90c00010
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	053e2d63 	.word	0x053e2d63
 8001fbc:	c7520000 	.word	0xc7520000
 8001fc0:	50000100 	.word	0x50000100
 8001fc4:	cb840000 	.word	0xcb840000

08001fc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fa4a 	bl	800146e <LL_ADC_IsDisableOngoing>
 8001fda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fa31 	bl	8001448 <LL_ADC_IsEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d047      	beq.n	800207c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d144      	bne.n	800207c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030d 	and.w	r3, r3, #13
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10c      	bne.n	800201a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fa0b 	bl	8001420 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2203      	movs	r2, #3
 8002010:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002012:	f7ff f85d 	bl	80010d0 <HAL_GetTick>
 8002016:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002018:	e029      	b.n	800206e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e023      	b.n	800207e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002036:	f7ff f84b 	bl	80010d0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d914      	bls.n	800206e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e007      	b.n	800207e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1dc      	bne.n	8002036 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <LL_ADC_IsEnabled>:
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <LL_ADC_IsEnabled+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsEnabled+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_StartCalibration>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80020be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_IsCalibrationOnGoing>:
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_ADC_REG_IsConversionOngoing>:
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d101      	bne.n	800211e <LL_ADC_REG_IsConversionOngoing+0x18>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADCEx_Calibration_Start+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e04d      	b.n	80021e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff39 	bl	8001fc8 <ADC_Disable>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d136      	bne.n	80021ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff96 	bl	80020ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002180:	e014      	b.n	80021ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_ADCEx_Calibration_Start+0xc0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d90d      	bls.n	80021ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f023 0312 	bic.w	r3, r3, #18
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e01b      	b.n	80021e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff94 	bl	80020de <LL_ADC_IsCalibrationOnGoing>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e2      	bne.n	8002182 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021cc:	e005      	b.n	80021da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	0004de01 	.word	0x0004de01

080021f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b0a1      	sub	sp, #132	@ 0x84
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800220a:	2302      	movs	r3, #2
 800220c:	e08b      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002216:	2300      	movs	r3, #0
 8002218:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800221a:	2300      	movs	r3, #0
 800221c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002226:	d102      	bne.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	e001      	b.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e06a      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff57 	bl	8002106 <LL_ADC_REG_IsConversionOngoing>
 8002258:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff51 	bl	8002106 <LL_ADC_REG_IsConversionOngoing>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d14c      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800226a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226c:	2b00      	cmp	r3, #0
 800226e:	d149      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002272:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d028      	beq.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800227c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800228e:	035b      	lsls	r3, r3, #13
 8002290:	430b      	orrs	r3, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002296:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002298:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800229c:	f7ff fef3 	bl	8002086 <LL_ADC_IsEnabled>
 80022a0:	4604      	mov	r4, r0
 80022a2:	4823      	ldr	r0, [pc, #140]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022a4:	f7ff feef 	bl	8002086 <LL_ADC_IsEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4323      	orrs	r3, r4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d133      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022b8:	f023 030f 	bic.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6811      	ldr	r1, [r2, #0]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	6892      	ldr	r2, [r2, #8]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022cc:	e024      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022da:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022de:	f7ff fed2 	bl	8002086 <LL_ADC_IsEnabled>
 80022e2:	4604      	mov	r4, r0
 80022e4:	4812      	ldr	r0, [pc, #72]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022e6:	f7ff fece 	bl	8002086 <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4323      	orrs	r3, r4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022fa:	f023 030f 	bic.w	r3, r3, #15
 80022fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002300:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002302:	e009      	b.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002316:	e000      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002322:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002326:	4618      	mov	r0, r3
 8002328:	3784      	adds	r7, #132	@ 0x84
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	50000100 	.word	0x50000100
 8002334:	50000300 	.word	0x50000300

08002338 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
=======
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
=======
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_DisableIRQ>:
=======
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db12      	blt.n	8000e4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	490a      	ldr	r1, [pc, #40]	@ (8000e58 <__NVIC_DisableIRQ+0x44>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	3320      	adds	r3, #32
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e40:	f3bf 8f4f 	dsb	sy
}
 8000e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e46:	f3bf 8f6f 	isb	sy
}
 8000e4a:	bf00      	nop
=======
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db12      	blt.n	8002410 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	490a      	ldr	r1, [pc, #40]	@ (800241c <__NVIC_DisableIRQ+0x44>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	3320      	adds	r3, #32
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002404:	f3bf 8f4f 	dsb	sy
}
 8002408:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800240a:	f3bf 8f6f 	isb	sy
}
 800240e:	bf00      	nop
>>>>>>> Stashed changes
    __DSB();
    __ISB();
  }
}
<<<<<<< Updated upstream
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
=======
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	@ (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
=======
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
=======
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
=======
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff28 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
=======
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff28 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
=======
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8000f3a:	f7ff ff3f 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f7ff ffb3 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff82 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_EnableIRQ>:
=======
 80024fe:	f7ff ff3f 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002502:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6978      	ldr	r0, [r7, #20]
 800250a:	f7ff ffb3 	bl	8002474 <NVIC_EncodePriority>
 800250e:	4602      	mov	r2, r0
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff82 	bl	8002420 <__NVIC_SetPriority>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
=======
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff32 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_DisableIRQ>:
=======
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff32 	bl	800239c <__NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
=======
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
<<<<<<< Updated upstream
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff42 	bl	8000e14 <__NVIC_DisableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort>:
=======
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff42 	bl	80023d8 <__NVIC_DisableIRQ>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e08d      	b.n	800268a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_DMA_Init+0x138>)
 8002576:	429a      	cmp	r2, r3
 8002578:	d80f      	bhi.n	800259a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b45      	ldr	r3, [pc, #276]	@ (8002698 <HAL_DMA_Init+0x13c>)
 8002582:	4413      	add	r3, r2
 8002584:	4a45      	ldr	r2, [pc, #276]	@ (800269c <HAL_DMA_Init+0x140>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a42      	ldr	r2, [pc, #264]	@ (80026a0 <HAL_DMA_Init+0x144>)
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
 8002598:	e00e      	b.n	80025b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <HAL_DMA_Init+0x148>)
 80025a2:	4413      	add	r3, r2
 80025a4:	4a3d      	ldr	r2, [pc, #244]	@ (800269c <HAL_DMA_Init+0x140>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a3c      	ldr	r2, [pc, #240]	@ (80026a8 <HAL_DMA_Init+0x14c>)
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f9be 	bl	800298c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002618:	d102      	bne.n	8002620 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002634:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_DMA_Init+0x104>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d80c      	bhi.n	8002660 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9de 	bl	8002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	e008      	b.n	8002672 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020407 	.word	0x40020407
 8002698:	bffdfff8 	.word	0xbffdfff8
 800269c:	cccccccd 	.word	0xcccccccd
 80026a0:	40020000 	.word	0x40020000
 80026a4:	bffdfbf8 	.word	0xbffdfbf8
 80026a8:	40020400 	.word	0x40020400

080026ac <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e037      	b.n	800102c <HAL_DMA_Abort+0x94>
=======
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2204      	movs	r2, #4
 80026c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e037      	b.n	8002740 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fda:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001008:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <HAL_DMA_Abort+0x94>
=======
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ee:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800271c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001020:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800102a:	605a      	str	r2, [r3, #4]
=======
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800273e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_DMA_Abort_IT>:
=======
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d00d      	beq.n	800107e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e047      	b.n	800110e <HAL_DMA_Abort_IT+0xc4>
=======
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d00d      	beq.n	8002792 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2204      	movs	r2, #4
 800277a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e047      	b.n	8002822 <HAL_DMA_Abort_IT+0xc4>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020e 	bic.w	r2, r2, #14
 800108c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f003 021f 	and.w	r2, r3, #31
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_DMA_Abort_IT+0xa4>
=======
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 020e 	bic.w	r2, r2, #14
 80027a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00c      	beq.n	8002802 <HAL_DMA_Abort_IT+0xa4>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010ec:	605a      	str	r2, [r3, #4]
=======
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002800:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
    }
  }
  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_Init>:
=======
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
    }
  }
  return status;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2204      	movs	r2, #4
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d026      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x7a>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d021      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2104      	movs	r1, #4
 800288e:	fa01 f202 	lsl.w	r2, r1, r2
 8002892:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	2b00      	cmp	r3, #0
 800289a:	d071      	beq.n	8002980 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028a4:	e06c      	b.n	8002980 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2202      	movs	r2, #2
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02e      	beq.n	8002918 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d029      	beq.n	8002918 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 020a 	bic.w	r2, r2, #10
 80028e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2102      	movs	r1, #2
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d038      	beq.n	8002980 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002916:	e033      	b.n	8002980 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2208      	movs	r2, #8
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02a      	beq.n	8002982 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d025      	beq.n	8002982 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002980:	bf00      	nop
 8002982:	bf00      	nop
}
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800299c:	429a      	cmp	r2, r3
 800299e:	d802      	bhi.n	80029a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80029a0:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e001      	b.n	80029aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3b08      	subs	r3, #8
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	009a      	lsls	r2, r3, #2
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40020407 	.word	0x40020407
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020820 	.word	0x40020820
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020880 	.word	0x40020880

08002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a2a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2201      	movs	r2, #1
 8002a36:	409a      	lsls	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	1000823f 	.word	0x1000823f
 8002a4c:	40020940 	.word	0x40020940

08002a50 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
=======
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< Updated upstream
 8001126:	e15a      	b.n	80013de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2101      	movs	r1, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 814c 	beq.w	80013d8 <HAL_GPIO_Init+0x2c0>
=======
 8002a5e:	e15a      	b.n	8002d16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 814c 	beq.w	8002d10 <HAL_GPIO_Init+0x2c0>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< Updated upstream
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d005      	beq.n	8001158 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	2b02      	cmp	r3, #2
 8001156:	d130      	bne.n	80011ba <HAL_GPIO_Init+0xa2>
=======
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d005      	beq.n	8002a90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d130      	bne.n	8002af2 <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118e:	2201      	movs	r2, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 0201 	and.w	r2, r3, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d017      	beq.n	80011f6 <HAL_GPIO_Init+0xde>
=======
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0201 	and.w	r2, r3, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d017      	beq.n	8002b2e <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
=======
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d123      	bne.n	800124a <HAL_GPIO_Init+0x132>
=======
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d123      	bne.n	8002b82 <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	6939      	ldr	r1, [r7, #16]
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0203 	and.w	r2, r3, #3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]
=======
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80a6 	beq.w	80013d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	4b5b      	ldr	r3, [pc, #364]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001290:	4a5a      	ldr	r2, [pc, #360]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6613      	str	r3, [r2, #96]	@ 0x60
 8001298:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a4:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <HAL_GPIO_Init+0x2e8>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ce:	d01f      	beq.n	8001310 <HAL_GPIO_Init+0x1f8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x2ec>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <HAL_GPIO_Init+0x1f4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_GPIO_Init+0x2f0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <HAL_GPIO_Init+0x1f0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <HAL_GPIO_Init+0x2f4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <HAL_GPIO_Init+0x2f8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a48      	ldr	r2, [pc, #288]	@ (8001414 <HAL_GPIO_Init+0x2fc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_Init+0x1e4>
 80012f8:	2305      	movs	r3, #5
 80012fa:	e00a      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 80012fc:	2306      	movs	r3, #6
 80012fe:	e008      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001300:	2304      	movs	r3, #4
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001304:	2303      	movs	r3, #3
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001310:	2300      	movs	r3, #0
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001322:	4937      	ldr	r1, [pc, #220]	@ (8001400 <HAL_GPIO_Init+0x2e8>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001354:	4a30      	ldr	r2, [pc, #192]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <HAL_GPIO_Init+0x300>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137e:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001384:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d2:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6013      	str	r3, [r2, #0]
=======
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80a6 	beq.w	8002d10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d34 <HAL_GPIO_Init+0x2e4>)
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d34 <HAL_GPIO_Init+0x2e4>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd0:	4b58      	ldr	r3, [pc, #352]	@ (8002d34 <HAL_GPIO_Init+0x2e4>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bdc:	4a56      	ldr	r2, [pc, #344]	@ (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c06:	d01f      	beq.n	8002c48 <HAL_GPIO_Init+0x1f8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d019      	beq.n	8002c44 <HAL_GPIO_Init+0x1f4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a4b      	ldr	r2, [pc, #300]	@ (8002d40 <HAL_GPIO_Init+0x2f0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_GPIO_Init+0x1f0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d44 <HAL_GPIO_Init+0x2f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00d      	beq.n	8002c3c <HAL_GPIO_Init+0x1ec>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a49      	ldr	r2, [pc, #292]	@ (8002d48 <HAL_GPIO_Init+0x2f8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <HAL_GPIO_Init+0x1e8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a48      	ldr	r2, [pc, #288]	@ (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_GPIO_Init+0x1e4>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e00a      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c34:	2306      	movs	r3, #6
 8002c36:	e008      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e004      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	4093      	lsls	r3, r2
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c5a:	4937      	ldr	r1, [pc, #220]	@ (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c68:	4b39      	ldr	r3, [pc, #228]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c8c:	4a30      	ldr	r2, [pc, #192]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c92:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb6:	4a26      	ldr	r2, [pc, #152]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cbc:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0a:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f47f ae9d 	bne.w	8001128 <HAL_GPIO_Init+0x10>
  }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	48000800 	.word	0x48000800
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48001000 	.word	0x48001000
 8001414:	48001400 	.word	0x48001400
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
=======
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f ae9d 	bne.w	8002a60 <HAL_GPIO_Init+0x10>
  }
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000c00 	.word	0x48000c00
 8002d48:	48001000 	.word	0x48001000
 8002d4c:	48001400 	.word	0x48001400
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
=======
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
=======
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8001438:	e002      	b.n	8001440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43d9      	mvns	r1, r3
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa86 	bl	80009b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_PWREx_ControlVoltageScaling>:
=======
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fefa 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
=======
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d141      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014be:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ca:	d131      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014cc:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d2:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	4b43      	ldr	r3, [pc, #268]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e4:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ec:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2232      	movs	r2, #50	@ 0x32
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a3f      	ldr	r2, [pc, #252]	@ (80015f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9b      	lsrs	r3, r3, #18
 80014fe:	3301      	adds	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001502:	e002      	b.n	800150a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3b01      	subs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001516:	d102      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f2      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151e:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d158      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e057      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d141      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dce:	d131      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd0:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd6:	4a46      	ldr	r2, [pc, #280]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de8:	4a41      	ldr	r2, [pc, #260]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df0:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2232      	movs	r2, #50	@ 0x32
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e06:	e002      	b.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1a:	d102      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e22:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2e:	d158      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e057      	b.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001536:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800153c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001540:	e04d      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001548:	d141      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001556:	d131      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001570:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2232      	movs	r2, #50	@ 0x32
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158e:	e002      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a2:	d102      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f2      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d112      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e011      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8002e34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e44:	e04d      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e4c:	d141      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d131      	bne.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e62:	4a23      	ldr	r2, [pc, #140]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e74:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2232      	movs	r2, #50	@ 0x32
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e92:	e002      	b.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea6:	d102      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f2      	bne.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eba:	d112      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e011      	b.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015cc:	e007      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ed0:	e007      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015dc:	6013      	str	r3, [r2, #0]
=======
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002edc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee0:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40007000 	.word	0x40007000
 80015f0:	20000010 	.word	0x20000010
 80015f4:	431bde83 	.word	0x431bde83

080015f8 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	431bde83 	.word	0x431bde83

08002efc <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> Stashed changes
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< Updated upstream
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001606:	6093      	str	r3, [r2, #8]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000

08001618 <HAL_RCC_OscConfig>:
=======
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a04      	ldr	r2, [pc, #16]	@ (8002f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f0a:	6093      	str	r3, [r2, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000

08002f1c <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
=======
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e2fe      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2fe      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d075      	beq.n	8001722 <HAL_RCC_OscConfig+0x10a>
=======
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d075      	beq.n	8003026 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8001636:	4b97      	ldr	r3, [pc, #604]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001640:	4b94      	ldr	r3, [pc, #592]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x3e>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d002      	beq.n	800165c <HAL_RCC_OscConfig+0x44>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d10b      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4b8d      	ldr	r3, [pc, #564]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d05b      	beq.n	8001720 <HAL_RCC_OscConfig+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d157      	bne.n	8001720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e2d9      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8002f3a:	4b97      	ldr	r3, [pc, #604]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f44:	4b94      	ldr	r3, [pc, #592]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3e>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_OscConfig+0x44>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05b      	beq.n	8003024 <HAL_RCC_OscConfig+0x108>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d157      	bne.n	8003024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e2d9      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x74>
 800167e:	4b85      	ldr	r3, [pc, #532]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a84      	ldr	r2, [pc, #528]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 80016b0:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a74      	ldr	r2, [pc, #464]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb44 	bl	8000d5c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb40 	bl	8000d5c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e29e      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xc0>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
=======
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x74>
 8002f82:	4b85      	ldr	r3, [pc, #532]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a84      	ldr	r2, [pc, #528]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x98>
 8002f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002fb4:	4b78      	ldr	r3, [pc, #480]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a77      	ldr	r2, [pc, #476]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b75      	ldr	r3, [pc, #468]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a74      	ldr	r2, [pc, #464]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f87c 	bl	80010d0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe f878 	bl	80010d0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e29e      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xc0>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80016f8:	f7ff fb30 	bl	8000d5c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fb2c 	bl	8000d5c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	@ 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e28a      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001712:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0xe8>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
=======
 8002ffc:	f7fe f868 	bl	80010d0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe f864 	bl	80010d0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e28a      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003016:	4b60      	ldr	r3, [pc, #384]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0xe8>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d075      	beq.n	800181a <HAL_RCC_OscConfig+0x202>
=======
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d075      	beq.n	800311e <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 800172e:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b0c      	cmp	r3, #12
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x136>
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d002      	beq.n	8001754 <HAL_RCC_OscConfig+0x13c>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d11f      	bne.n	8001794 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x154>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e25d      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8003032:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303c:	4b56      	ldr	r3, [pc, #344]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d102      	bne.n	8003052 <HAL_RCC_OscConfig+0x136>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d002      	beq.n	8003058 <HAL_RCC_OscConfig+0x13c>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11f      	bne.n	8003098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003058:	4b4f      	ldr	r3, [pc, #316]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x154>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e25d      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800176c:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	4946      	ldr	r1, [pc, #280]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001780:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <HAL_RCC_OscConfig+0x280>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9df 	bl	8000b48 <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d043      	beq.n	8001818 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e249      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8003070:	4b49      	ldr	r3, [pc, #292]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	4946      	ldr	r1, [pc, #280]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003084:	4b45      	ldr	r3, [pc, #276]	@ (800319c <HAL_RCC_OscConfig+0x280>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd ff03 	bl	8000e94 <HAL_InitTick>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d043      	beq.n	800311c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e249      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fad8 	bl	8000d5c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fad4 	bl	8000d5c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e232      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x198>
=======
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f810 	bl	80010d0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe f80c 	bl	80010d0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e232      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x198>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	492d      	ldr	r1, [pc, #180]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x202>
=======
 80030d2:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	492d      	ldr	r1, [pc, #180]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e01a      	b.n	800311e <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fab4 	bl	8000d5c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fab0 	bl	8000d5c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e20e      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1e0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	bf00      	nop
=======
 80030e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd ffec 	bl	80010d0 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fc:	f7fd ffe8 	bl	80010d0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e20e      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310e:	4b22      	ldr	r3, [pc, #136]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1e0>
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d041      	beq.n	80018aa <HAL_RCC_OscConfig+0x292>
=======
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d041      	beq.n	80031ae <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01c      	beq.n	8001868 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001834:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa8d 	bl	8000d5c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fa89 	bl	8000d5c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1e7      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ef      	beq.n	8001846 <HAL_RCC_OscConfig+0x22e>
 8001866:	e020      	b.n	80018aa <HAL_RCC_OscConfig+0x292>
=======
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003132:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003138:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fd ffc5 	bl	80010d0 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7fd ffc1 	bl	80010d0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1e7      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 800315e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0ef      	beq.n	800314a <HAL_RCC_OscConfig+0x22e>
 800316a:	e020      	b.n	80031ae <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa70 	bl	8000d5c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187e:	e00d      	b.n	800189c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fa6c 	bl	8000d5c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d906      	bls.n	800189c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1ca      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ea      	bne.n	8001880 <HAL_RCC_OscConfig+0x268>
=======
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	4a09      	ldr	r2, [pc, #36]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fd ffa8 	bl	80010d0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003182:	e00d      	b.n	80031a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7fd ffa4 	bl	80010d0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d906      	bls.n	80031a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1ca      	b.n	800352c <HAL_RCC_OscConfig+0x610>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	4b8c      	ldr	r3, [pc, #560]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ea      	bne.n	8003184 <HAL_RCC_OscConfig+0x268>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80a6 	beq.w	8001a04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
=======
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a6 	beq.w	8003308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 80018bc:	4b84      	ldr	r3, [pc, #528]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x2b4>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x2b6>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018de:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	4b79      	ldr	r3, [pc, #484]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018fa:	4b76      	ldr	r3, [pc, #472]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a75      	ldr	r2, [pc, #468]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fa29 	bl	8000d5c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fa25 	bl	8000d5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e183      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x2f6>
=======
 80031c0:	4b84      	ldr	r3, [pc, #528]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2b4>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x2b6>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00d      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b7f      	ldr	r3, [pc, #508]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	4a7e      	ldr	r2, [pc, #504]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031e2:	4b7c      	ldr	r3, [pc, #496]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f2:	4b79      	ldr	r3, [pc, #484]	@ (80033d8 <HAL_RCC_OscConfig+0x4bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fe:	4b76      	ldr	r3, [pc, #472]	@ (80033d8 <HAL_RCC_OscConfig+0x4bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a75      	ldr	r2, [pc, #468]	@ (80033d8 <HAL_RCC_OscConfig+0x4bc>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fd ff61 	bl	80010d0 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fd ff5d 	bl	80010d0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e183      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	4b6c      	ldr	r3, [pc, #432]	@ (80033d8 <HAL_RCC_OscConfig+0x4bc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0x32e>
 8001934:	4b66      	ldr	r3, [pc, #408]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193a:	4a65      	ldr	r2, [pc, #404]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001944:	e024      	b.n	8001990 <HAL_RCC_OscConfig+0x378>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d110      	bne.n	8001970 <HAL_RCC_OscConfig+0x358>
 800194e:	4b60      	ldr	r3, [pc, #384]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001954:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001964:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x378>
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001980:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001986:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d016      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9e0 	bl	8000d5c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9dc 	bl	8000d5c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e138      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b6:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ed      	beq.n	80019a0 <HAL_RCC_OscConfig+0x388>
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x3da>
=======
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d108      	bne.n	800324a <HAL_RCC_OscConfig+0x32e>
 8003238:	4b66      	ldr	r3, [pc, #408]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	4a65      	ldr	r2, [pc, #404]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003248:	e024      	b.n	8003294 <HAL_RCC_OscConfig+0x378>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b05      	cmp	r3, #5
 8003250:	d110      	bne.n	8003274 <HAL_RCC_OscConfig+0x358>
 8003252:	4b60      	ldr	r3, [pc, #384]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	4a5e      	ldr	r2, [pc, #376]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003262:	4b5c      	ldr	r3, [pc, #368]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003268:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003272:	e00f      	b.n	8003294 <HAL_RCC_OscConfig+0x378>
 8003274:	4b57      	ldr	r3, [pc, #348]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	4a56      	ldr	r2, [pc, #344]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003284:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	4a52      	ldr	r2, [pc, #328]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fd ff18 	bl	80010d0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd ff14 	bl	80010d0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e138      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	4b46      	ldr	r3, [pc, #280]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ed      	beq.n	80032a4 <HAL_RCC_OscConfig+0x388>
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x3da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80019c6:	f7ff f9c9 	bl	8000d5c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff f9c5 	bl	8000d5c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e121      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ed      	bne.n	80019ce <HAL_RCC_OscConfig+0x3b6>
=======
 80032ca:	f7fd ff01 	bl	80010d0 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fefd 	bl	80010d0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e121      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e8:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ed      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	4a34      	ldr	r2, [pc, #208]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fc:	4b35      	ldr	r3, [pc, #212]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a34      	ldr	r2, [pc, #208]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x472>
=======
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03c      	beq.n	800338e <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f998 	bl	8000d5c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a30:	f7ff f994 	bl	8000d5c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0f2      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ef      	beq.n	8001a30 <HAL_RCC_OscConfig+0x418>
 8001a50:	e01b      	b.n	8001a8a <HAL_RCC_OscConfig+0x472>
=======
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331c:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003322:	4a2c      	ldr	r2, [pc, #176]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd fed0 	bl	80010d0 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003334:	f7fd fecc 	bl	80010d0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0f2      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003346:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <HAL_RCC_OscConfig+0x418>
 8003354:	e01b      	b.n	800338e <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f97b 	bl	8000d5c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7ff f977 	bl	8000d5c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0d5      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ef      	bne.n	8001a6a <HAL_RCC_OscConfig+0x452>
=======
 8003356:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800335c:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fd feb3 	bl	80010d0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336e:	f7fd feaf 	bl	80010d0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0d5      	b.n	800352c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 8003382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ef      	bne.n	800336e <HAL_RCC_OscConfig+0x452>
>>>>>>> Stashed changes

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80c9 	beq.w	8001c26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	f000 8083 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d15e      	bne.n	8001b68 <HAL_RCC_OscConfig+0x550>
=======
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80c9 	beq.w	800352a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003398:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	f000 8083 	beq.w	80034ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d15e      	bne.n	800346c <HAL_RCC_OscConfig+0x550>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f951 	bl	8000d5c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	e00c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f94d 	bl	8000d5c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d905      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0ab      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ec      	bne.n	8001abe <HAL_RCC_OscConfig+0x4a6>
=======
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <HAL_RCC_OscConfig+0x4b8>)
 80033b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fd fe89 	bl	80010d0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c0:	e00c      	b.n	80033dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fd fe85 	bl	80010d0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d905      	bls.n	80033dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0ab      	b.n	800352c <HAL_RCC_OscConfig+0x610>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	4b55      	ldr	r3, [pc, #340]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ec      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4a6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8001ae4:	4b52      	ldr	r3, [pc, #328]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <HAL_RCC_OscConfig+0x61c>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a11      	ldr	r1, [r2, #32]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001afe:	0212      	lsls	r2, r2, #8
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b06:	0852      	lsrs	r2, r2, #1
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	0552      	lsls	r2, r2, #21
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b12:	0852      	lsrs	r2, r2, #1
 8001b14:	3a01      	subs	r2, #1
 8001b16:	0652      	lsls	r2, r2, #25
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b1e:	06d2      	lsls	r2, r2, #27
 8001b20:	430a      	orrs	r2, r1
 8001b22:	4943      	ldr	r1, [pc, #268]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
=======
 80033e8:	4b52      	ldr	r3, [pc, #328]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4b52      	ldr	r3, [pc, #328]	@ (8003538 <HAL_RCC_OscConfig+0x61c>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a11      	ldr	r1, [r2, #32]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003402:	0212      	lsls	r2, r2, #8
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800340a:	0852      	lsrs	r2, r2, #1
 800340c:	3a01      	subs	r2, #1
 800340e:	0552      	lsls	r2, r2, #21
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003416:	0852      	lsrs	r2, r2, #1
 8003418:	3a01      	subs	r2, #1
 800341a:	0652      	lsls	r2, r2, #25
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003422:	06d2      	lsls	r2, r2, #27
 8003424:	430a      	orrs	r2, r1
 8003426:	4943      	ldr	r1, [pc, #268]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8001b28:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b34:	4b3e      	ldr	r3, [pc, #248]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a3d      	ldr	r2, [pc, #244]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f90c 	bl	8000d5c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f908 	bl	8000d5c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e066      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x530>
 8001b66:	e05e      	b.n	8001c26 <HAL_RCC_OscConfig+0x60e>
=======
 800342c:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a40      	ldr	r2, [pc, #256]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003438:	4b3e      	ldr	r3, [pc, #248]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a3d      	ldr	r2, [pc, #244]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd fe44 	bl	80010d0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd fe40 	bl	80010d0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e066      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b35      	ldr	r3, [pc, #212]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x530>
 800346a:	e05e      	b.n	800352a <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f8f2 	bl	8000d5c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff f8ee 	bl	8000d5c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04c      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x564>
=======
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a30      	ldr	r2, [pc, #192]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 8003472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fd fe2a 	bl	80010d0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fd fe26 	bl	80010d0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e04c      	b.n	800352c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x564>
>>>>>>> Stashed changes
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
<<<<<<< Updated upstream
 8001b9a:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4924      	ldr	r1, [pc, #144]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ba0:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
 8001ba6:	e03e      	b.n	8001c26 <HAL_RCC_OscConfig+0x60e>
=======
 800349e:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4924      	ldr	r1, [pc, #144]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 80034a4:	4b25      	ldr	r3, [pc, #148]	@ (800353c <HAL_RCC_OscConfig+0x620>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
 80034aa:	e03e      	b.n	800352a <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e039      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e039      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d12c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d123      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d113      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 80034b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCC_OscConfig+0x618>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d12c      	bne.n	8003526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	3b01      	subs	r3, #1
 80034d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d123      	bne.n	8003526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11b      	bne.n	8003526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d113      	bne.n	8003526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d109      	bne.n	8003526 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	019f800c 	.word	0x019f800c
 8001c38:	feeefffc 	.word	0xfeeefffc

08001c3c <HAL_RCC_ClockConfig>:
=======
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	019f800c 	.word	0x019f800c
 800353c:	feeefffc 	.word	0xfeeefffc

08003540 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e11e      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e11e      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001c54:	4b91      	ldr	r3, [pc, #580]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b8e      	ldr	r3, [pc, #568]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	498c      	ldr	r1, [pc, #560]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
=======
 8003558:	4b91      	ldr	r3, [pc, #580]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b8e      	ldr	r3, [pc, #568]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 020f 	bic.w	r2, r3, #15
 800356e:	498c      	ldr	r1, [pc, #560]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8001c72:	4b8a      	ldr	r3, [pc, #552]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e106      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8003576:	4b8a      	ldr	r3, [pc, #552]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e106      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d073      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x13c>
=======
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d073      	beq.n	800367c <HAL_RCC_ClockConfig+0x13c>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d129      	bne.n	8001cec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c98:	4b81      	ldr	r3, [pc, #516]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0f4      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d129      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359c:	4b81      	ldr	r3, [pc, #516]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0f4      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< Updated upstream
 8001ca8:	f000 f9d0 	bl	800204c <RCC_GetSysClockFreqFromPLLSource>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea4 <HAL_RCC_ClockConfig+0x268>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d93f      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d033      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d12f      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cd6:	4b72      	ldr	r3, [pc, #456]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cde:	4a70      	ldr	r2, [pc, #448]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e024      	b.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
=======
 80035ac:	f000 f9d0 	bl	8003950 <RCC_GetSysClockFreqFromPLLSource>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4a7c      	ldr	r2, [pc, #496]	@ (80037a8 <HAL_RCC_ClockConfig+0x268>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d93f      	bls.n	800363a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ba:	4b7a      	ldr	r3, [pc, #488]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d033      	beq.n	800363a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d12f      	bne.n	800363a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035da:	4b72      	ldr	r3, [pc, #456]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e2:	4a70      	ldr	r2, [pc, #448]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80035e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e024      	b.n	800363a <HAL_RCC_ClockConfig+0xfa>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0c6      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f8:	4b6a      	ldr	r3, [pc, #424]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0c6      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8001d04:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0be      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8003608:	4b66      	ldr	r3, [pc, #408]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0be      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< Updated upstream
 8001d14:	f000 f8ce 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4a61      	ldr	r2, [pc, #388]	@ (8001ea4 <HAL_RCC_ClockConfig+0x268>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d909      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	617b      	str	r3, [r7, #20]
=======
 8003618:	f000 f8ce 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800361c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4a61      	ldr	r2, [pc, #388]	@ (80037a8 <HAL_RCC_ClockConfig+0x268>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d909      	bls.n	800363a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003626:	4b5f      	ldr	r3, [pc, #380]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800362e:	4a5d      	ldr	r2, [pc, #372]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003634:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4957      	ldr	r1, [pc, #348]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7ff f808 	bl	8000d5c <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f804 	bl	8000d5c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e095      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x114>
=======
 800363a:	4b5a      	ldr	r3, [pc, #360]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4957      	ldr	r1, [pc, #348]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fd fd40 	bl	80010d0 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fd fd3c 	bl	80010d0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e095      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b4e      	ldr	r3, [pc, #312]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0x114>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x190>
=======
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d023      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x190>
>>>>>>> Stashed changes
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a42      	ldr	r2, [pc, #264]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001db0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001db6:	6093      	str	r3, [r2, #8]
=======
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b43      	ldr	r3, [pc, #268]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a42      	ldr	r2, [pc, #264]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800369a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800369e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036ac:	4b3d      	ldr	r3, [pc, #244]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036b4:	4a3b      	ldr	r2, [pc, #236]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036ba:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8001db8:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4936      	ldr	r1, [pc, #216]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
 8001dca:	e008      	b.n	8001dde <HAL_RCC_ClockConfig+0x1a2>
=======
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4936      	ldr	r1, [pc, #216]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b80      	cmp	r3, #128	@ 0x80
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ddc:	6093      	str	r3, [r2, #8]
=======
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036d6:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4a32      	ldr	r2, [pc, #200]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80036dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036e0:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001dde:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d21d      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 020f 	bic.w	r2, r3, #15
 8001df4:	4929      	ldr	r1, [pc, #164]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
=======
 80036e2:	4b2f      	ldr	r3, [pc, #188]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d21d      	bcs.n	800372c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f0:	4b2b      	ldr	r3, [pc, #172]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	4929      	ldr	r1, [pc, #164]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8001dfc:	f7fe ffae 	bl	8000d5c <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe ffaa 	bl	8000d5c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e03b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ed      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1c8>
=======
 8003700:	f7fd fce6 	bl	80010d0 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fd fce2 	bl	80010d0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e03b      	b.n	8003796 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d1ed      	bne.n	8003708 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4917      	ldr	r1, [pc, #92]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
=======
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4917      	ldr	r1, [pc, #92]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490f      	ldr	r1, [pc, #60]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
=======
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003756:	4b13      	ldr	r3, [pc, #76]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490f      	ldr	r1, [pc, #60]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8001e66:	f000 f825 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <HAL_RCC_ClockConfig+0x26c>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe5c 	bl	8000b48 <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	04c4b400 	.word	0x04c4b400
 8001ea8:	08006a34 	.word	0x08006a34
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000014 	.word	0x20000014

08001eb4 <HAL_RCC_GetSysClockFreq>:
=======
 800376a:	f000 f825 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800376e:	4602      	mov	r2, r0
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	490c      	ldr	r1, [pc, #48]	@ (80037ac <HAL_RCC_ClockConfig+0x26c>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x270>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x274>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fb80 	bl	8000e94 <HAL_InitTick>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	04c4b400 	.word	0x04c4b400
 80037ac:	080088a8 	.word	0x080088a8
 80037b0:	20000004 	.word	0x20000004
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
=======
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< Updated upstream
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e047      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e03e      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d136      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 80037be:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e047      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d102      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037dc:	4b26      	ldr	r3, [pc, #152]	@ (8003878 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e03e      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d136      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3301      	adds	r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f12:	68d2      	ldr	r2, [r2, #12]
 8001f14:	0a12      	lsrs	r2, r2, #8
 8001f16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
      break;
 8001f20:	e00c      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
=======
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3301      	adds	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d10c      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800380c:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <HAL_RCC_GetSysClockFreq+0xc0>)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	4a16      	ldr	r2, [pc, #88]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003816:	68d2      	ldr	r2, [r2, #12]
 8003818:	0a12      	lsrs	r2, r2, #8
 800381a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
      break;
 8003824:	e00c      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	0a12      	lsrs	r2, r2, #8
 8001f30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0e5b      	lsrs	r3, r3, #25
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e001      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
=======
 8003826:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	0a12      	lsrs	r2, r2, #8
 8003834:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]
      break;
 800383e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0e5b      	lsrs	r3, r3, #25
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	3301      	adds	r3, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e001      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< Updated upstream
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f5c:	693b      	ldr	r3, [r7, #16]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	016e3600 	.word	0x016e3600

08001f78 <HAL_RCC_GetHCLKFreq>:
=======
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003860:	693b      	ldr	r3, [r7, #16]
}
 8003862:	4618      	mov	r0, r3
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	00f42400 	.word	0x00f42400
 8003878:	016e3600 	.word	0x016e3600

0800387c <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000010 	.word	0x20000010

08001f90 <HAL_RCC_GetPCLK1Freq>:
=======
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08006a44 	.word	0x08006a44

08001fbc <HAL_RCC_GetPCLK2Freq>:
=======
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003898:	f7ff fff0 	bl	800387c <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4904      	ldr	r1, [pc, #16]	@ (80038bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	080088b8 	.word	0x080088b8

080038c0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc0:	f7ff ffda 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4904      	ldr	r1, [pc, #16]	@ (8001fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08006a44 	.word	0x08006a44

08001fe8 <HAL_RCC_GetClockConfig>:
=======
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038c4:	f7ff ffda 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0adb      	lsrs	r3, r3, #11
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4904      	ldr	r1, [pc, #16]	@ (80038e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	080088b8 	.word	0x080088b8

080038ec <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
=======
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_RCC_GetClockConfig+0x60>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <RCC_GetSysClockFreqFromPLLSource>:
=======
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	220f      	movs	r2, #15
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_RCC_GetClockConfig+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40022000 	.word	0x40022000

08003950 <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
=======
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d10c      	bne.n	800208a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207a:	68d2      	ldr	r2, [r2, #12]
 800207c:	0a12      	lsrs	r2, r2, #8
 800207e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
    break;
 8002088:	e00c      	b.n	80020a4 <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 8003956:	4b1e      	ldr	r3, [pc, #120]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d10c      	bne.n	800398e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003974:	4a17      	ldr	r2, [pc, #92]	@ (80039d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	0a12      	lsrs	r2, r2, #8
 8003982:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
    break;
 800398c:	e00c      	b.n	80039a8 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	0a12      	lsrs	r2, r2, #8
 8002098:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    break;
 80020a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0e5b      	lsrs	r3, r3, #25
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	016e3600 	.word	0x016e3600
 80020d4:	00f42400 	.word	0x00f42400

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
=======
 800398e:	4a12      	ldr	r2, [pc, #72]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	4a0e      	ldr	r2, [pc, #56]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	0a12      	lsrs	r2, r2, #8
 800399c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    break;
 80039a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0e5b      	lsrs	r3, r3, #25
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039c2:	687b      	ldr	r3, [r7, #4]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000
 80039d4:	016e3600 	.word	0x016e3600
 80039d8:	00f42400 	.word	0x00f42400

080039dc <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74bb      	strb	r3, [r7, #18]
=======
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e4:	2300      	movs	r3, #0
 80039e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e8:	2300      	movs	r3, #0
 80039ea:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8098 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	747b      	strb	r3, [r7, #17]
=======
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8098 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	747b      	strb	r3, [r7, #17]
=======
 80039fe:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a16:	4b3d      	ldr	r3, [pc, #244]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a39      	ldr	r2, [pc, #228]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212e:	f7fe fe15 	bl	8000d5c <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002134:	e009      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fe11 	bl	8000d5c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d902      	bls.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	74fb      	strb	r3, [r7, #19]
        break;
 8002148:	e005      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214a:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ef      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8003a26:	4b3a      	ldr	r3, [pc, #232]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a39      	ldr	r2, [pc, #228]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a32:	f7fd fb4d 	bl	80010d0 <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a38:	e009      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fd fb49 	bl	80010d0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d902      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a4c:	e005      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4e:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ef      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d159      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01e      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d159      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01e      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a7c:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a88:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aa8:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fdd1 	bl	8000d5c <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fdcd 	bl	8000d5c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fb09 	bl	80010d0 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac0:	e00b      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fb05 	bl	80010d0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d902      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ec      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> Stashed changes
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< Updated upstream
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4903      	ldr	r1, [pc, #12]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002200:	e008      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aee:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b04:	e008      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	74bb      	strb	r3, [r7, #18]
 8002206:	e005      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
=======
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
=======
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002214:	7c7b      	ldrb	r3, [r7, #17]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4ba6      	ldr	r3, [pc, #664]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4aa5      	ldr	r2, [pc, #660]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8003b18:	7c7b      	ldrb	r3, [r7, #17]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4ba6      	ldr	r3, [pc, #664]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4aa5      	ldr	r2, [pc, #660]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8002232:	4ba0      	ldr	r3, [pc, #640]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	499c      	ldr	r1, [pc, #624]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003b36:	4ba0      	ldr	r3, [pc, #640]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3c:	f023 0203 	bic.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	499c      	ldr	r1, [pc, #624]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8002254:	4b97      	ldr	r3, [pc, #604]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 020c 	bic.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4994      	ldr	r1, [pc, #592]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003b58:	4b97      	ldr	r3, [pc, #604]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 020c 	bic.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4994      	ldr	r1, [pc, #592]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8002276:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	498b      	ldr	r1, [pc, #556]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	498b      	ldr	r1, [pc, #556]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 8002298:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	4983      	ldr	r1, [pc, #524]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003b9c:	4b86      	ldr	r3, [pc, #536]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4983      	ldr	r1, [pc, #524]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 80022ba:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	497a      	ldr	r1, [pc, #488]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003bbe:	4b7e      	ldr	r3, [pc, #504]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	497a      	ldr	r1, [pc, #488]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4972      	ldr	r1, [pc, #456]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003be0:	4b75      	ldr	r3, [pc, #468]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4972      	ldr	r1, [pc, #456]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80022fe:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4969      	ldr	r1, [pc, #420]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003c02:	4b6d      	ldr	r3, [pc, #436]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4969      	ldr	r1, [pc, #420]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 8002320:	4b64      	ldr	r3, [pc, #400]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4961      	ldr	r1, [pc, #388]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003c24:	4b64      	ldr	r3, [pc, #400]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4961      	ldr	r1, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 8002342:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	4958      	ldr	r1, [pc, #352]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8003c46:	4b5c      	ldr	r3, [pc, #368]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	4958      	ldr	r1, [pc, #352]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< Updated upstream
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
=======
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	4950      	ldr	r1, [pc, #320]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
=======
 8003c68:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	4950      	ldr	r1, [pc, #320]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< Updated upstream
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
=======
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 800239c:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	4942      	ldr	r1, [pc, #264]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
=======
 8003ca0:	4b45      	ldr	r3, [pc, #276]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	4942      	ldr	r1, [pc, #264]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cca:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< Updated upstream
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< Updated upstream
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4934      	ldr	r1, [pc, #208]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
=======
 8003cd8:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4934      	ldr	r1, [pc, #208]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	4926      	ldr	r1, [pc, #152]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
=======
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d10:	4b29      	ldr	r3, [pc, #164]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1e:	4926      	ldr	r1, [pc, #152]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	4918      	ldr	r1, [pc, #96]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
=======
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d015      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d48:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	4918      	ldr	r1, [pc, #96]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d68:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a12      	ldr	r2, [pc, #72]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d72:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< Updated upstream
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
=======
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< Updated upstream
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	490a      	ldr	r1, [pc, #40]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
=======
 8003d80:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8e:	490a      	ldr	r1, [pc, #40]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d9e:	d105      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003daa:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< Updated upstream
 80024a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_Init>:
=======
 8003dac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
=======
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e049      	b.n	8003e62 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f841 	bl	8002566 <HAL_TIM_Base_MspInit>
=======
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f832 	bl	8000e4c <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fa22 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_TIM_Base_Start_IT>:
=======
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 fb74 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e042      	b.n	8003f0a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <HAL_TIM_Base_Start+0xac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x5c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9e:	d013      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x5c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f1c <HAL_TIM_Base_Start+0xb0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x5c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <HAL_TIM_Base_Start+0xb4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x5c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_TIM_Base_Start+0xb8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x5c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <HAL_TIM_Base_Start+0xbc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d115      	bne.n	8003ef4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <HAL_TIM_Base_Start+0xc0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d015      	beq.n	8003f06 <HAL_TIM_Base_Start+0x9a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee0:	d011      	beq.n	8003f06 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e000      	b.n	8003f08 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	00010007 	.word	0x00010007

08003f30 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
=======
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e04a      	b.n	800262a <HAL_TIM_Base_Start_IT+0xae>
=======
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d001      	beq.n	8003f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e04a      	b.n	8003fde <HAL_TIM_Base_Start_IT+0xae>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_TIM_Base_Start_IT+0xbc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d013      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <HAL_TIM_Base_Start_IT+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <HAL_TIM_Base_Start_IT+0xc4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_TIM_Base_Start_IT+0xc8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_TIM_Base_Start_IT+0xcc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d115      	bne.n	8002614 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_TIM_Base_Start_IT+0xd0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d015      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d011      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002612:	e008      	b.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
=======
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_TIM_Base_Start_IT+0xbc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d018      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x6c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f72:	d013      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x6c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00e      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x6c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d009      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x6c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x6c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d115      	bne.n	8003fc8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d015      	beq.n	8003fda <HAL_TIM_Base_Start_IT+0xaa>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb4:	d011      	beq.n	8003fda <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	e008      	b.n	8003fda <HAL_TIM_Base_Start_IT+0xaa>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e000      	b.n	8002628 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	bf00      	nop
=======
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e000      	b.n	8003fdc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fda:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800
 8002644:	40013400 	.word	0x40013400
 8002648:	40014000 	.word	0x40014000
 800264c:	00010007 	.word	0x00010007

08002650 <HAL_TIM_IRQHandler>:
=======
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40013400 	.word	0x40013400
 8003ffc:	40014000 	.word	0x40014000
 8004000:	00010007 	.word	0x00010007

08004004 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0202 	mvn.w	r2, #2
 8002684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x52>
=======
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0202 	mvn.w	r2, #2
 8004038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f931 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x5e>
=======
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa2c 	bl	80044ac <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f923 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f934 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
=======
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa1e 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa2f 	bl	80044c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0204 	mvn.w	r2, #4
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x9e>
=======
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0204 	mvn.w	r2, #4
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f90b 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xaa>
=======
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fa06 	bl	80044ac <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8fd 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f90e 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
=======
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9f8 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fa09 	bl	80044c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d020      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xea>
=======
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d020      	beq.n	8004100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0208 	mvn.w	r2, #8
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8e5 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xf6>
=======
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9e0 	bl	80044ac <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8d7 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8e8 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
=======
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9d2 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9e3 	bl	80044c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x136>
=======
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d020      	beq.n	800414c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0210 	mvn.w	r2, #16
 800411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2208      	movs	r2, #8
 8004122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8bf 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x142>
=======
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9ba 	bl	80044ac <HAL_TIM_IC_CaptureCallback>
 8004138:	e005      	b.n	8004146 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8b1 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8c2 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
=======
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9ac 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f9bd 	bl	80044c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0201 	mvn.w	r2, #1
 80027b4:	611a      	str	r2, [r3, #16]
=======
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0201 	mvn.w	r2, #1
 8004168:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f924 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
=======
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fd4a 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80027e2:	611a      	str	r2, [r3, #16]
=======
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004196:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f951 	bl	8002a8c <HAL_TIMEx_BreakCallback>
=======
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fb69 	bl	8004870 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002806:	611a      	str	r2, [r3, #16]
=======
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041ba:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f949 	bl	8002aa0 <HAL_TIMEx_Break2Callback>
=======
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb61 	bl	8004884 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00c      	beq.n	8002832 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800282a:	611a      	str	r2, [r3, #16]
=======
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041de:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f87c 	bl	800292a <HAL_TIM_TriggerCallback>
=======
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f977 	bl	80044d4 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0220 	mvn.w	r2, #32
 800284e:	611a      	str	r2, [r3, #16]
=======
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0220 	mvn.w	r2, #32
 8004202:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f911 	bl	8002a78 <HAL_TIMEx_CommutCallback>
=======
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb29 	bl	800485c <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
<<<<<<< Updated upstream
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002872:	611a      	str	r2, [r3, #16]
=======
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004226:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
<<<<<<< Updated upstream
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f91d 	bl	8002ab4 <HAL_TIMEx_EncoderIndexCallback>
=======
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb35 	bl	8004898 <HAL_TIMEx_EncoderIndexCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
<<<<<<< Updated upstream
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00c      	beq.n	800289e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002896:	611a      	str	r2, [r3, #16]
=======
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800424a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
<<<<<<< Updated upstream
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f915 	bl	8002ac8 <HAL_TIMEx_DirectionChangeCallback>
=======
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb2d 	bl	80048ac <HAL_TIMEx_DirectionChangeCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
<<<<<<< Updated upstream
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80028ba:	611a      	str	r2, [r3, #16]
=======
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800426e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
<<<<<<< Updated upstream
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f90d 	bl	8002adc <HAL_TIMEx_IndexErrorCallback>
=======
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb25 	bl	80048c0 <HAL_TIMEx_IndexErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
<<<<<<< Updated upstream
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80028de:	611a      	str	r2, [r3, #16]
=======
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004292:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
<<<<<<< Updated upstream
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f905 	bl	8002af0 <HAL_TIMEx_TransitionErrorCallback>
=======
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fb1d 	bl	80048d4 <HAL_TIMEx_TransitionErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_ConfigClockSource+0x1c>
 80042bc:	2302      	movs	r3, #2
 80042be:	e0de      	b.n	800447e <HAL_TIM_ConfigClockSource+0x1da>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80042de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <HAL_TIM_ConfigClockSource+0x1e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	f000 80a9 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004300:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f200 80ae 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004308:	4a60      	ldr	r2, [pc, #384]	@ (800448c <HAL_TIM_ConfigClockSource+0x1e8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f000 80a1 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004310:	4a5e      	ldr	r2, [pc, #376]	@ (800448c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	f200 80a6 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004318:	4a5d      	ldr	r2, [pc, #372]	@ (8004490 <HAL_TIM_ConfigClockSource+0x1ec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	f000 8099 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004320:	4a5b      	ldr	r2, [pc, #364]	@ (8004490 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	f200 809e 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004328:	4a5a      	ldr	r2, [pc, #360]	@ (8004494 <HAL_TIM_ConfigClockSource+0x1f0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f000 8091 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004330:	4a58      	ldr	r2, [pc, #352]	@ (8004494 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f200 8096 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004338:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800433c:	f000 8089 	beq.w	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004340:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004344:	f200 808e 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434c:	d03e      	beq.n	80043cc <HAL_TIM_ConfigClockSource+0x128>
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004352:	f200 8087 	bhi.w	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435a:	f000 8086 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x1c6>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004362:	d87f      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004364:	2b70      	cmp	r3, #112	@ 0x70
 8004366:	d01a      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xfa>
 8004368:	2b70      	cmp	r3, #112	@ 0x70
 800436a:	d87b      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 800436c:	2b60      	cmp	r3, #96	@ 0x60
 800436e:	d050      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
 8004370:	2b60      	cmp	r3, #96	@ 0x60
 8004372:	d877      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004374:	2b50      	cmp	r3, #80	@ 0x50
 8004376:	d03c      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x14e>
 8004378:	2b50      	cmp	r3, #80	@ 0x50
 800437a:	d873      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 800437c:	2b40      	cmp	r3, #64	@ 0x40
 800437e:	d058      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x18e>
 8004380:	2b40      	cmp	r3, #64	@ 0x40
 8004382:	d86f      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004384:	2b30      	cmp	r3, #48	@ 0x30
 8004386:	d064      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d86b      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d060      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d867      	bhi.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05c      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 8004398:	2b10      	cmp	r3, #16
 800439a:	d05a      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x1ae>
 800439c:	e062      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	f000 f9b3 	bl	8004718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
      break;
 80043ca:	e04f      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043dc:	f000 f99c 	bl	8004718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ee:	609a      	str	r2, [r3, #8]
      break;
 80043f0:	e03c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 f90e 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2150      	movs	r1, #80	@ 0x50
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f967 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004410:	e02c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f92d 	bl	800467e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2160      	movs	r1, #96	@ 0x60
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f957 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004430:	e01c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 f8ee 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2140      	movs	r1, #64	@ 0x40
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f947 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004450:	e00c      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f000 f93e 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004462:	e003      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e000      	b.n	800446c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800446a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	00100070 	.word	0x00100070
 800448c:	00100040 	.word	0x00100040
 8004490:	00100030 	.word	0x00100030
 8004494:	00100020 	.word	0x00100020

08004498 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
=======
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_IC_CaptureCallback>:
=======
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
=======
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
=======
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_TriggerCallback>:
=======
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
=======
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
=======
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00f      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295e:	d00b      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3f      	ldr	r2, [pc, #252]	@ (8002a60 <TIM_Base_SetConfig+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a64 <TIM_Base_SetConfig+0x124>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3d      	ldr	r2, [pc, #244]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a33      	ldr	r2, [pc, #204]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01b      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002998:	d017      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <TIM_Base_SetConfig+0x120>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <TIM_Base_SetConfig+0x124>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00f      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
=======
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a42      	ldr	r2, [pc, #264]	@ (8004604 <TIM_Base_SetConfig+0x11c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3f      	ldr	r2, [pc, #252]	@ (8004608 <TIM_Base_SetConfig+0x120>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3e      	ldr	r2, [pc, #248]	@ (800460c <TIM_Base_SetConfig+0x124>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3d      	ldr	r2, [pc, #244]	@ (8004610 <TIM_Base_SetConfig+0x128>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a33      	ldr	r2, [pc, #204]	@ (8004604 <TIM_Base_SetConfig+0x11c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01b      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004540:	d017      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a30      	ldr	r2, [pc, #192]	@ (8004608 <TIM_Base_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2f      	ldr	r2, [pc, #188]	@ (800460c <TIM_Base_SetConfig+0x124>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2e      	ldr	r2, [pc, #184]	@ (8004610 <TIM_Base_SetConfig+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2d      	ldr	r2, [pc, #180]	@ (8004614 <TIM_Base_SetConfig+0x12c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2c      	ldr	r2, [pc, #176]	@ (8004618 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2b      	ldr	r2, [pc, #172]	@ (800461c <TIM_Base_SetConfig+0x134>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00f      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a16      	ldr	r2, [pc, #88]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d103      	bne.n	8002a30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <TIM_Base_SetConfig+0x11c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <TIM_Base_SetConfig+0xe8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <TIM_Base_SetConfig+0x128>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <TIM_Base_SetConfig+0xe8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <TIM_Base_SetConfig+0x12c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_Base_SetConfig+0xe8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <TIM_Base_SetConfig+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_Base_SetConfig+0xe8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a14      	ldr	r2, [pc, #80]	@ (800461c <TIM_Base_SetConfig+0x134>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d103      	bne.n	80045d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	40014400 	.word	0x40014400
 8002a74:	40014800 	.word	0x40014800

08002a78 <HAL_TIMEx_CommutCallback>:
=======
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f023 0201 	bic.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]
  }
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	40013400 	.word	0x40013400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0201 	bic.w	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800464a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 030a 	bic.w	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f023 0210 	bic.w	r2, r3, #16
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	f043 0307 	orr.w	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e065      	b.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2c      	ldr	r2, [pc, #176]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2b      	ldr	r2, [pc, #172]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e6:	d013      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	@ (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a12      	ldr	r2, [pc, #72]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a13      	ldr	r2, [pc, #76]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10c      	bne.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	4313      	orrs	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40014000 	.word	0x40014000

0800485c <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
=======
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_BreakCallback>:
=======
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
=======
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIMEx_Break2Callback>:
=======
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
=======
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIMEx_EncoderIndexCallback>:
=======
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> Stashed changes
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
=======
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_DirectionChangeCallback>:
=======
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> Stashed changes
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
=======
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIMEx_IndexErrorCallback>:
=======
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
=======
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_TransitionErrorCallback>:
=======
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
=======
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_UART_Init>:
=======
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e042      	b.n	8002b9c <HAL_UART_Init+0x98>
=======
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e042      	b.n	8004980 <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7fd ffad 	bl	8000a88 <HAL_UART_MspInit>
=======
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fa3d 	bl	8000d8c <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
=======
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2224      	movs	r2, #36	@ 0x24
 8004916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fee0 	bl	8003914 <UART_AdvFeatureConfig>
=======
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fee0 	bl	80056f8 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fc11 	bl	800337c <UART_SetConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e01b      	b.n	8002b9c <HAL_UART_Init+0x98>
=======
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fc11 	bl	8005160 <UART_SetConfig>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e01b      	b.n	8004980 <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 ff5f 	bl	8003a58 <UART_CheckIdleState>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Transmit_IT>:
=======
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 ff5f 	bl	800583c <UART_CheckIdleState>
 800497e:	4603      	mov	r3, r0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8002ba4:	b480      	push	{r7}
 8002ba6:	b091      	sub	sp, #68	@ 0x44
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d178      	bne.n	8002cae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Transmit_IT+0x24>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e071      	b.n	8002cb0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	@ 0x21
 8002bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c00:	d12a      	bne.n	8002c58 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0a:	d107      	bne.n	8002c1c <HAL_UART_Transmit_IT+0x78>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a29      	ldr	r2, [pc, #164]	@ (8002cbc <HAL_UART_Transmit_IT+0x118>)
 8002c18:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c1a:	e002      	b.n	8002c22 <HAL_UART_Transmit_IT+0x7e>
=======
 8004988:	b480      	push	{r7}
 800498a:	b091      	sub	sp, #68	@ 0x44
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	2b20      	cmp	r3, #32
 800499e:	d178      	bne.n	8004a92 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Transmit_IT+0x24>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e071      	b.n	8004a94 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	88fa      	ldrh	r2, [r7, #6]
 80049ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	@ 0x21
 80049d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e4:	d12a      	bne.n	8004a3c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ee:	d107      	bne.n	8004a00 <HAL_UART_Transmit_IT+0x78>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a29      	ldr	r2, [pc, #164]	@ (8004aa0 <HAL_UART_Transmit_IT+0x118>)
 80049fc:	679a      	str	r2, [r3, #120]	@ 0x78
 80049fe:	e002      	b.n	8004a06 <HAL_UART_Transmit_IT+0x7e>
>>>>>>> Stashed changes
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
<<<<<<< Updated upstream
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <HAL_UART_Transmit_IT+0x11c>)
 8002c20:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a28      	ldr	r2, [pc, #160]	@ (8004aa4 <HAL_UART_Transmit_IT+0x11c>)
 8004a04:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
<<<<<<< Updated upstream
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c42:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a26:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a28:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 8002c46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <HAL_UART_Transmit_IT+0x7e>
 8002c56:	e028      	b.n	8002caa <HAL_UART_Transmit_IT+0x106>
=======
 8004a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <HAL_UART_Transmit_IT+0x7e>
 8004a3a:	e028      	b.n	8004a8e <HAL_UART_Transmit_IT+0x106>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< Updated upstream
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c60:	d107      	bne.n	8002c72 <HAL_UART_Transmit_IT+0xce>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_UART_Transmit_IT+0x120>)
 8002c6e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c70:	e002      	b.n	8002c78 <HAL_UART_Transmit_IT+0xd4>
=======
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a44:	d107      	bne.n	8004a56 <HAL_UART_Transmit_IT+0xce>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HAL_UART_Transmit_IT+0x120>)
 8004a52:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a54:	e002      	b.n	8004a5c <HAL_UART_Transmit_IT+0xd4>
>>>>>>> Stashed changes
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
<<<<<<< Updated upstream
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_UART_Transmit_IT+0x124>)
 8002c76:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a14      	ldr	r2, [pc, #80]	@ (8004aac <HAL_UART_Transmit_IT+0x124>)
 8004a5a:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
<<<<<<< Updated upstream
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e6      	bne.n	8002c78 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit_IT+0x10c>
=======
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <HAL_UART_Transmit_IT+0x10c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3744      	adds	r7, #68	@ 0x44
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	08003fd1 	.word	0x08003fd1
 8002cc0:	08003ef1 	.word	0x08003ef1
 8002cc4:	08003e2f 	.word	0x08003e2f
 8002cc8:	08003d77 	.word	0x08003d77

08002ccc <HAL_UART_IRQHandler>:
=======
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3744      	adds	r7, #68	@ 0x44
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	08005db5 	.word	0x08005db5
 8004aa4:	08005cd5 	.word	0x08005cd5
 8004aa8:	08005c13 	.word	0x08005c13
 8004aac:	08005b5b 	.word	0x08005b5b

08004ab0 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	@ 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 8002cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002cf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11b      	bne.n	8002d40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8300 	beq.w	8003336 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
      }
      return;
 8002d3e:	e2fa      	b.n	8003336 <HAL_UART_IRQHandler+0x66a>
=======
 8004ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ada:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ade:	4013      	ands	r3, r2
 8004ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11b      	bne.n	8004b24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8300 	beq.w	800511a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
      }
      return;
 8004b22:	e2fa      	b.n	800511a <HAL_UART_IRQHandler+0x66a>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 8002d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8123 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <HAL_UART_IRQHandler+0x2bc>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8116 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8004b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8123 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b32:	4b8d      	ldr	r3, [pc, #564]	@ (8004d68 <HAL_UART_IRQHandler+0x2b8>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d6c <HAL_UART_IRQHandler+0x2bc>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8116 	beq.w	8004d74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <HAL_UART_IRQHandler+0xc8>
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2201      	movs	r2, #1
 8004b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d011      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xf8>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2202      	movs	r2, #2
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
 8002dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2204      	movs	r2, #4
 8002de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d011      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x128>
 8004bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f043 0202 	orr.w	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 8002df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002e10:	4b5c      	ldr	r3, [pc, #368]	@ (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002e12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f043 0208 	orr.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8004d68 <HAL_UART_IRQHandler+0x2b8>)
 8004bf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <HAL_UART_IRQHandler+0x196>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8266 	beq.w	800333a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
=======
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8266 	beq.w	800511e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d013      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d054      	beq.n	8002f70 <HAL_UART_IRQHandler+0x2a4>
=======
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d054      	beq.n	8004d54 <HAL_UART_IRQHandler+0x2a4>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fedd 	bl	8003c86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d146      	bne.n	8002f68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_UART_IRQHandler+0x294>
=======
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fedd 	bl	8005a6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d146      	bne.n	8004d4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d9      	bne.n	8004cbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d017      	beq.n	8004d44 <HAL_UART_IRQHandler+0x294>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_UART_IRQHandler+0x2c0>)
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f882 	bl	800104a <HAL_DMA_Abort_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d019      	beq.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5e:	e00f      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1a:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <HAL_UART_IRQHandler+0x2c0>)
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fd1a 	bl	800275e <HAL_DMA_Abort_IT>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d019      	beq.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d42:	e00f      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9f5 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f66:	e00b      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9f5 	bl	8005134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4a:	e00b      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9f1 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6e:	e007      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9f1 	bl	8005134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d52:	e007      	b.n	8004d64 <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9ed 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002f7e:	e1dc      	b.n	800333a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	bf00      	nop
    return;
 8002f82:	e1da      	b.n	800333a <HAL_UART_IRQHandler+0x66e>
 8002f84:	10000001 	.word	0x10000001
 8002f88:	04000120 	.word	0x04000120
 8002f8c:	08003d53 	.word	0x08003d53
=======
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9ed 	bl	8005134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004d62:	e1dc      	b.n	800511e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	bf00      	nop
    return;
 8004d66:	e1da      	b.n	800511e <HAL_UART_IRQHandler+0x66e>
 8004d68:	10000001 	.word	0x10000001
 8004d6c:	04000120 	.word	0x04000120
 8004d70:	08005b37 	.word	0x08005b37
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8170 	bne.w	800327a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8169 	beq.w	800327a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8162 	beq.w	800327a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	f040 80d8 	bne.w	800317e <HAL_UART_IRQHandler+0x4b2>
=======
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 8170 	bne.w	800505e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8169 	beq.w	800505e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8162 	beq.w	800505e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	f040 80d8 	bne.w	8004f62 <HAL_UART_IRQHandler+0x4b2>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80af 	beq.w	8003144 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002fec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f080 80a7 	bcs.w	8003144 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 8087 	bne.w	8003122 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003028:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800302c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800303e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003042:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800304a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1da      	bne.n	8003014 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800306e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3308      	adds	r3, #8
 800307e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003082:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003086:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800308a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e1      	bne.n	800305e <HAL_UART_IRQHandler+0x392>
=======
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80af 	beq.w	8004f28 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f080 80a7 	bcs.w	8004f28 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004de0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 8087 	bne.w	8004f06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1da      	bne.n	8004df8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e1      	bne.n	8004e42 <HAL_UART_IRQHandler+0x392>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3308      	adds	r3, #8
 80030ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e3      	bne.n	800309a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003102:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003104:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd ff3b 	bl	8000f98 <HAL_DMA_Abort>
=======
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e3      	bne.n	8004e7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	f023 0310 	bic.w	r3, r3, #16
 8004ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ee8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004eec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e4      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fd fbd3 	bl	80026ac <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003134:	b29b      	uxth	r3, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f911 	bl	8003364 <HAL_UARTEx_RxEventCallback>
=======
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f911 	bl	8005148 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
<<<<<<< Updated upstream
 8003142:	e0fc      	b.n	800333e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800314a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800314e:	429a      	cmp	r2, r3
 8003150:	f040 80f5 	bne.w	800333e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80eb 	bne.w	800333e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8f4 	bl	8003364 <HAL_UARTEx_RxEventCallback>
      return;
 800317c:	e0df      	b.n	800333e <HAL_UART_IRQHandler+0x672>
=======
 8004f26:	e0fc      	b.n	8005122 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f040 80f5 	bne.w	8005122 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	f040 80eb 	bne.w	8005122 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8f4 	bl	8005148 <HAL_UARTEx_RxEventCallback>
      return;
 8004f60:	e0df      	b.n	8005122 <HAL_UART_IRQHandler+0x672>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800318a:	b29b      	uxth	r3, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80d1 	beq.w	8003342 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80031a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80cc 	beq.w	8003342 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e4      	bne.n	80031aa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	623b      	str	r3, [r7, #32]
   return(result);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003208:	633a      	str	r2, [r7, #48]	@ 0x30
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800320e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e1      	bne.n	80031e0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	60fb      	str	r3, [r7, #12]
   return(result);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	617b      	str	r3, [r7, #20]
   return(result);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e4      	bne.n	8003230 <HAL_UART_IRQHandler+0x564>
=======
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80d1 	beq.w	8005126 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80cc 	beq.w	8005126 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e4      	bne.n	8004f8e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e1      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	60fb      	str	r3, [r7, #12]
   return(result);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	617b      	str	r3, [r7, #20]
   return(result);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e4      	bne.n	8005014 <HAL_UART_IRQHandler+0x564>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 800326c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f876 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003278:	e063      	b.n	8003342 <HAL_UART_IRQHandler+0x676>
=======
 8005050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f876 	bl	8005148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800505c:	e063      	b.n	8005126 <HAL_UART_IRQHandler+0x676>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x5d8>
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800329a:	621a      	str	r2, [r3, #32]
=======
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d8>
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800507e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff37 	bl	8004110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032a2:	e051      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 ff37 	bl	8005ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005086:	e051      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< Updated upstream
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d014      	beq.n	80032da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d03a      	beq.n	8003346 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
    }
    return;
 80032d8:	e035      	b.n	8003346 <HAL_UART_IRQHandler+0x67a>
=======
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d014      	beq.n	80050be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d03a      	beq.n	800512a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    }
    return;
 80050bc:	e035      	b.n	800512a <HAL_UART_IRQHandler+0x67a>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_UART_IRQHandler+0x62e>
 80032e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fee1 	bl	80040ba <UART_EndTransmit_IT>
    return;
 80032f8:	e026      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_UART_IRQHandler+0x62e>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fee1 	bl	8005e9e <UART_EndTransmit_IT>
    return;
 80050dc:	e026      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< Updated upstream
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_UART_IRQHandler+0x64e>
 8003306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_UART_IRQHandler+0x64e>
=======
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_UART_IRQHandler+0x64e>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x64e>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< Updated upstream
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 ff10 	bl	8004138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003318:	e016      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 ff10 	bl	8005f1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050fc:	e016      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< Updated upstream
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_UART_IRQHandler+0x67c>
 8003326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0c      	bge.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_UART_IRQHandler+0x67c>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510e:	2b00      	cmp	r3, #0
 8005110:	da0c      	bge.n	800512c <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< Updated upstream
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fef8 	bl	8004124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003334:	e008      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 8003336:	bf00      	nop
 8003338:	e006      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
    return;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
    return;
 8003346:	bf00      	nop
  }
}
 8003348:	37e8      	adds	r7, #232	@ 0xe8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop

08003350 <HAL_UART_ErrorCallback>:
=======
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fef8 	bl	8005f08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005118:	e008      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 800511a:	bf00      	nop
 800511c:	e006      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
    return;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
      return;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_UART_IRQHandler+0x67c>
    return;
 800512a:	bf00      	nop
  }
}
 800512c:	37e8      	adds	r7, #232	@ 0xe8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
=======
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UARTEx_RxEventCallback>:
=======
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
=======
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <UART_SetConfig>:
=======
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b08c      	sub	sp, #48	@ 0x30
 8003382:	af00      	add	r7, sp, #0
 8003384:	6178      	str	r0, [r7, #20]
=======
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b08c      	sub	sp, #48	@ 0x30
 8005166:	af00      	add	r7, sp, #0
 8005168:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8003386:	2300      	movs	r3, #0
 8003388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800516a:	2300      	movs	r3, #0
 800516c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	431a      	orrs	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4bab      	ldr	r3, [pc, #684]	@ (8003658 <UART_SetConfig+0x2dc>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6013      	str	r3, [r2, #0]
=======
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	431a      	orrs	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	431a      	orrs	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4313      	orrs	r3, r2
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4bab      	ldr	r3, [pc, #684]	@ (800543c <UART_SetConfig+0x2dc>)
 8005190:	4013      	ands	r3, r2
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005198:	430b      	orrs	r3, r1
 800519a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
=======
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4aa0      	ldr	r2, [pc, #640]	@ (800365c <UART_SetConfig+0x2e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e4:	4313      	orrs	r3, r2
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80033f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6093      	str	r3, [r2, #8]
=======
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4aa0      	ldr	r2, [pc, #640]	@ (8005440 <UART_SetConfig+0x2e0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	f023 010f 	bic.w	r1, r3, #15
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a91      	ldr	r2, [pc, #580]	@ (8003660 <UART_SetConfig+0x2e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d125      	bne.n	800346c <UART_SetConfig+0xf0>
 8003420:	4b90      	ldr	r3, [pc, #576]	@ (8003664 <UART_SetConfig+0x2e8>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d81a      	bhi.n	8003464 <UART_SetConfig+0xe8>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <UART_SetConfig+0xb8>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	08003455 	.word	0x08003455
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2301      	movs	r3, #1
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344a:	e0d6      	b.n	80035fa <UART_SetConfig+0x27e>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003452:	e0d2      	b.n	80035fa <UART_SetConfig+0x27e>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345a:	e0ce      	b.n	80035fa <UART_SetConfig+0x27e>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003462:	e0ca      	b.n	80035fa <UART_SetConfig+0x27e>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800346a:	e0c6      	b.n	80035fa <UART_SetConfig+0x27e>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	@ (8003668 <UART_SetConfig+0x2ec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d138      	bne.n	80034e8 <UART_SetConfig+0x16c>
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <UART_SetConfig+0x2e8>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d82d      	bhi.n	80034e0 <UART_SetConfig+0x164>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <UART_SetConfig+0x110>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034e1 	.word	0x080034e1
 8003494:	080034e1 	.word	0x080034e1
 8003498:	080034e1 	.word	0x080034e1
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034e1 	.word	0x080034e1
 80034a4:	080034e1 	.word	0x080034e1
 80034a8:	080034e1 	.word	0x080034e1
 80034ac:	080034c9 	.word	0x080034c9
 80034b0:	080034e1 	.word	0x080034e1
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034d9 	.word	0x080034d9
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c6:	e098      	b.n	80035fa <UART_SetConfig+0x27e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	e094      	b.n	80035fa <UART_SetConfig+0x27e>
 80034d0:	2304      	movs	r3, #4
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d6:	e090      	b.n	80035fa <UART_SetConfig+0x27e>
 80034d8:	2308      	movs	r3, #8
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034de:	e08c      	b.n	80035fa <UART_SetConfig+0x27e>
 80034e0:	2310      	movs	r3, #16
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e6:	e088      	b.n	80035fa <UART_SetConfig+0x27e>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5f      	ldr	r2, [pc, #380]	@ (800366c <UART_SetConfig+0x2f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d125      	bne.n	800353e <UART_SetConfig+0x1c2>
 80034f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003664 <UART_SetConfig+0x2e8>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034fc:	2b30      	cmp	r3, #48	@ 0x30
 80034fe:	d016      	beq.n	800352e <UART_SetConfig+0x1b2>
 8003500:	2b30      	cmp	r3, #48	@ 0x30
 8003502:	d818      	bhi.n	8003536 <UART_SetConfig+0x1ba>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d00a      	beq.n	800351e <UART_SetConfig+0x1a2>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d814      	bhi.n	8003536 <UART_SetConfig+0x1ba>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <UART_SetConfig+0x19a>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d008      	beq.n	8003526 <UART_SetConfig+0x1aa>
 8003514:	e00f      	b.n	8003536 <UART_SetConfig+0x1ba>
 8003516:	2300      	movs	r3, #0
 8003518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351c:	e06d      	b.n	80035fa <UART_SetConfig+0x27e>
 800351e:	2302      	movs	r3, #2
 8003520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003524:	e069      	b.n	80035fa <UART_SetConfig+0x27e>
 8003526:	2304      	movs	r3, #4
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352c:	e065      	b.n	80035fa <UART_SetConfig+0x27e>
 800352e:	2308      	movs	r3, #8
 8003530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003534:	e061      	b.n	80035fa <UART_SetConfig+0x27e>
 8003536:	2310      	movs	r3, #16
 8003538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353c:	e05d      	b.n	80035fa <UART_SetConfig+0x27e>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4b      	ldr	r2, [pc, #300]	@ (8003670 <UART_SetConfig+0x2f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d125      	bne.n	8003594 <UART_SetConfig+0x218>
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <UART_SetConfig+0x2e8>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003552:	2bc0      	cmp	r3, #192	@ 0xc0
 8003554:	d016      	beq.n	8003584 <UART_SetConfig+0x208>
 8003556:	2bc0      	cmp	r3, #192	@ 0xc0
 8003558:	d818      	bhi.n	800358c <UART_SetConfig+0x210>
 800355a:	2b80      	cmp	r3, #128	@ 0x80
 800355c:	d00a      	beq.n	8003574 <UART_SetConfig+0x1f8>
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d814      	bhi.n	800358c <UART_SetConfig+0x210>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <UART_SetConfig+0x1f0>
 8003566:	2b40      	cmp	r3, #64	@ 0x40
 8003568:	d008      	beq.n	800357c <UART_SetConfig+0x200>
 800356a:	e00f      	b.n	800358c <UART_SetConfig+0x210>
 800356c:	2300      	movs	r3, #0
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003572:	e042      	b.n	80035fa <UART_SetConfig+0x27e>
 8003574:	2302      	movs	r3, #2
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357a:	e03e      	b.n	80035fa <UART_SetConfig+0x27e>
 800357c:	2304      	movs	r3, #4
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003582:	e03a      	b.n	80035fa <UART_SetConfig+0x27e>
 8003584:	2308      	movs	r3, #8
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e036      	b.n	80035fa <UART_SetConfig+0x27e>
 800358c:	2310      	movs	r3, #16
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e032      	b.n	80035fa <UART_SetConfig+0x27e>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	@ (800365c <UART_SetConfig+0x2e0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12a      	bne.n	80035f4 <UART_SetConfig+0x278>
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <UART_SetConfig+0x2e8>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ac:	d01a      	beq.n	80035e4 <UART_SetConfig+0x268>
 80035ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035b2:	d81b      	bhi.n	80035ec <UART_SetConfig+0x270>
 80035b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035b8:	d00c      	beq.n	80035d4 <UART_SetConfig+0x258>
 80035ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035be:	d815      	bhi.n	80035ec <UART_SetConfig+0x270>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <UART_SetConfig+0x250>
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c8:	d008      	beq.n	80035dc <UART_SetConfig+0x260>
 80035ca:	e00f      	b.n	80035ec <UART_SetConfig+0x270>
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035d2:	e012      	b.n	80035fa <UART_SetConfig+0x27e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035da:	e00e      	b.n	80035fa <UART_SetConfig+0x27e>
 80035dc:	2304      	movs	r3, #4
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e2:	e00a      	b.n	80035fa <UART_SetConfig+0x27e>
 80035e4:	2308      	movs	r3, #8
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	e006      	b.n	80035fa <UART_SetConfig+0x27e>
 80035ec:	2310      	movs	r3, #16
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f2:	e002      	b.n	80035fa <UART_SetConfig+0x27e>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <UART_SetConfig+0x2e0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 80a8 	bne.w	8003756 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003606:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800360a:	2b08      	cmp	r3, #8
 800360c:	d834      	bhi.n	8003678 <UART_SetConfig+0x2fc>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <UART_SetConfig+0x298>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003639 	.word	0x08003639
 8003618:	08003679 	.word	0x08003679
 800361c:	08003641 	.word	0x08003641
 8003620:	08003679 	.word	0x08003679
 8003624:	08003647 	.word	0x08003647
 8003628:	08003679 	.word	0x08003679
 800362c:	08003679 	.word	0x08003679
 8003630:	08003679 	.word	0x08003679
 8003634:	0800364f 	.word	0x0800364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fcaa 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800363e:	e021      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <UART_SetConfig+0x2f8>)
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003644:	e01e      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7fe fc35 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800364c:	e01a      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003654:	e016      	b.n	8003684 <UART_SetConfig+0x308>
 8003656:	bf00      	nop
 8003658:	cfff69f3 	.word	0xcfff69f3
 800365c:	40008000 	.word	0x40008000
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	40004800 	.word	0x40004800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003682:	bf00      	nop
=======
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	f023 010f 	bic.w	r1, r3, #15
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a91      	ldr	r2, [pc, #580]	@ (8005444 <UART_SetConfig+0x2e4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d125      	bne.n	8005250 <UART_SetConfig+0xf0>
 8005204:	4b90      	ldr	r3, [pc, #576]	@ (8005448 <UART_SetConfig+0x2e8>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d81a      	bhi.n	8005248 <UART_SetConfig+0xe8>
 8005212:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <UART_SetConfig+0xb8>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005229 	.word	0x08005229
 800521c:	08005239 	.word	0x08005239
 8005220:	08005231 	.word	0x08005231
 8005224:	08005241 	.word	0x08005241
 8005228:	2301      	movs	r3, #1
 800522a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522e:	e0d6      	b.n	80053de <UART_SetConfig+0x27e>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e0d2      	b.n	80053de <UART_SetConfig+0x27e>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e0ce      	b.n	80053de <UART_SetConfig+0x27e>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e0ca      	b.n	80053de <UART_SetConfig+0x27e>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e0c6      	b.n	80053de <UART_SetConfig+0x27e>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7d      	ldr	r2, [pc, #500]	@ (800544c <UART_SetConfig+0x2ec>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d138      	bne.n	80052cc <UART_SetConfig+0x16c>
 800525a:	4b7b      	ldr	r3, [pc, #492]	@ (8005448 <UART_SetConfig+0x2e8>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d82d      	bhi.n	80052c4 <UART_SetConfig+0x164>
 8005268:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <UART_SetConfig+0x110>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052c5 	.word	0x080052c5
 8005278:	080052c5 	.word	0x080052c5
 800527c:	080052c5 	.word	0x080052c5
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052c5 	.word	0x080052c5
 8005288:	080052c5 	.word	0x080052c5
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052ad 	.word	0x080052ad
 8005294:	080052c5 	.word	0x080052c5
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052aa:	e098      	b.n	80053de <UART_SetConfig+0x27e>
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e094      	b.n	80053de <UART_SetConfig+0x27e>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e090      	b.n	80053de <UART_SetConfig+0x27e>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e08c      	b.n	80053de <UART_SetConfig+0x27e>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e088      	b.n	80053de <UART_SetConfig+0x27e>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005450 <UART_SetConfig+0x2f0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d125      	bne.n	8005322 <UART_SetConfig+0x1c2>
 80052d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005448 <UART_SetConfig+0x2e8>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d016      	beq.n	8005312 <UART_SetConfig+0x1b2>
 80052e4:	2b30      	cmp	r3, #48	@ 0x30
 80052e6:	d818      	bhi.n	800531a <UART_SetConfig+0x1ba>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d00a      	beq.n	8005302 <UART_SetConfig+0x1a2>
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d814      	bhi.n	800531a <UART_SetConfig+0x1ba>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <UART_SetConfig+0x19a>
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d008      	beq.n	800530a <UART_SetConfig+0x1aa>
 80052f8:	e00f      	b.n	800531a <UART_SetConfig+0x1ba>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005300:	e06d      	b.n	80053de <UART_SetConfig+0x27e>
 8005302:	2302      	movs	r3, #2
 8005304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005308:	e069      	b.n	80053de <UART_SetConfig+0x27e>
 800530a:	2304      	movs	r3, #4
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005310:	e065      	b.n	80053de <UART_SetConfig+0x27e>
 8005312:	2308      	movs	r3, #8
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005318:	e061      	b.n	80053de <UART_SetConfig+0x27e>
 800531a:	2310      	movs	r3, #16
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005320:	e05d      	b.n	80053de <UART_SetConfig+0x27e>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a4b      	ldr	r2, [pc, #300]	@ (8005454 <UART_SetConfig+0x2f4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d125      	bne.n	8005378 <UART_SetConfig+0x218>
 800532c:	4b46      	ldr	r3, [pc, #280]	@ (8005448 <UART_SetConfig+0x2e8>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005336:	2bc0      	cmp	r3, #192	@ 0xc0
 8005338:	d016      	beq.n	8005368 <UART_SetConfig+0x208>
 800533a:	2bc0      	cmp	r3, #192	@ 0xc0
 800533c:	d818      	bhi.n	8005370 <UART_SetConfig+0x210>
 800533e:	2b80      	cmp	r3, #128	@ 0x80
 8005340:	d00a      	beq.n	8005358 <UART_SetConfig+0x1f8>
 8005342:	2b80      	cmp	r3, #128	@ 0x80
 8005344:	d814      	bhi.n	8005370 <UART_SetConfig+0x210>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <UART_SetConfig+0x1f0>
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d008      	beq.n	8005360 <UART_SetConfig+0x200>
 800534e:	e00f      	b.n	8005370 <UART_SetConfig+0x210>
 8005350:	2300      	movs	r3, #0
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e042      	b.n	80053de <UART_SetConfig+0x27e>
 8005358:	2302      	movs	r3, #2
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535e:	e03e      	b.n	80053de <UART_SetConfig+0x27e>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005366:	e03a      	b.n	80053de <UART_SetConfig+0x27e>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e036      	b.n	80053de <UART_SetConfig+0x27e>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e032      	b.n	80053de <UART_SetConfig+0x27e>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a30      	ldr	r2, [pc, #192]	@ (8005440 <UART_SetConfig+0x2e0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d12a      	bne.n	80053d8 <UART_SetConfig+0x278>
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <UART_SetConfig+0x2e8>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005388:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800538c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005390:	d01a      	beq.n	80053c8 <UART_SetConfig+0x268>
 8005392:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005396:	d81b      	bhi.n	80053d0 <UART_SetConfig+0x270>
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539c:	d00c      	beq.n	80053b8 <UART_SetConfig+0x258>
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a2:	d815      	bhi.n	80053d0 <UART_SetConfig+0x270>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <UART_SetConfig+0x250>
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ac:	d008      	beq.n	80053c0 <UART_SetConfig+0x260>
 80053ae:	e00f      	b.n	80053d0 <UART_SetConfig+0x270>
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b6:	e012      	b.n	80053de <UART_SetConfig+0x27e>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053be:	e00e      	b.n	80053de <UART_SetConfig+0x27e>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e00a      	b.n	80053de <UART_SetConfig+0x27e>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e006      	b.n	80053de <UART_SetConfig+0x27e>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e002      	b.n	80053de <UART_SetConfig+0x27e>
 80053d8:	2310      	movs	r3, #16
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <UART_SetConfig+0x2e0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f040 80a8 	bne.w	800553a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d834      	bhi.n	800545c <UART_SetConfig+0x2fc>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <UART_SetConfig+0x298>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	0800545d 	.word	0x0800545d
 8005400:	08005425 	.word	0x08005425
 8005404:	0800545d 	.word	0x0800545d
 8005408:	0800542b 	.word	0x0800542b
 800540c:	0800545d 	.word	0x0800545d
 8005410:	0800545d 	.word	0x0800545d
 8005414:	0800545d 	.word	0x0800545d
 8005418:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe fa3a 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 8005420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005422:	e021      	b.n	8005468 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <UART_SetConfig+0x2f8>)
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005428:	e01e      	b.n	8005468 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe f9c5 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005430:	e01a      	b.n	8005468 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005438:	e016      	b.n	8005468 <UART_SetConfig+0x308>
 800543a:	bf00      	nop
 800543c:	cfff69f3 	.word	0xcfff69f3
 8005440:	40008000 	.word	0x40008000
 8005444:	40013800 	.word	0x40013800
 8005448:	40021000 	.word	0x40021000
 800544c:	40004400 	.word	0x40004400
 8005450:	40004800 	.word	0x40004800
 8005454:	40004c00 	.word	0x40004c00
 8005458:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005466:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 812a 	beq.w	80038e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	4a9e      	ldr	r2, [pc, #632]	@ (800390c <UART_SetConfig+0x590>)
 8003692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	fbb3 f3f2 	udiv	r3, r3, r2
 800369e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d305      	bcc.n	80036bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d903      	bls.n	80036c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036c2:	e10d      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 812a 	beq.w	80056c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	4a9e      	ldr	r2, [pc, #632]	@ (80056f0 <UART_SetConfig+0x590>)
 8005476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800547a:	461a      	mov	r2, r3
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005482:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	429a      	cmp	r2, r3
 8005492:	d305      	bcc.n	80054a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054a6:	e10d      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	2200      	movs	r2, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	60fa      	str	r2, [r7, #12]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	4a8e      	ldr	r2, [pc, #568]	@ (800390c <UART_SetConfig+0x590>)
 80036d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e6:	f7fc fd9b 	bl	8000220 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	020b      	lsls	r3, r1, #8
 80036fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003700:	0202      	lsls	r2, r0, #8
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	0849      	lsrs	r1, r1, #1
 8003708:	2000      	movs	r0, #0
 800370a:	460c      	mov	r4, r1
 800370c:	4605      	mov	r5, r0
 800370e:	eb12 0804 	adds.w	r8, r2, r4
 8003712:	eb43 0905 	adc.w	r9, r3, r5
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	469a      	mov	sl, r3
 800371e:	4693      	mov	fp, r2
 8003720:	4652      	mov	r2, sl
 8003722:	465b      	mov	r3, fp
 8003724:	4640      	mov	r0, r8
 8003726:	4649      	mov	r1, r9
 8003728:	f7fc fd7a 	bl	8000220 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800373a:	d308      	bcc.n	800374e <UART_SetConfig+0x3d2>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003742:	d204      	bcs.n	800374e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e0c8      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	2200      	movs	r2, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	60fa      	str	r2, [r7, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	4a8e      	ldr	r2, [pc, #568]	@ (80056f0 <UART_SetConfig+0x590>)
 80054b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054ca:	f7fa fea9 	bl	8000220 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4610      	mov	r0, r2
 80054d4:	4619      	mov	r1, r3
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	020b      	lsls	r3, r1, #8
 80054e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054e4:	0202      	lsls	r2, r0, #8
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	6849      	ldr	r1, [r1, #4]
 80054ea:	0849      	lsrs	r1, r1, #1
 80054ec:	2000      	movs	r0, #0
 80054ee:	460c      	mov	r4, r1
 80054f0:	4605      	mov	r5, r0
 80054f2:	eb12 0804 	adds.w	r8, r2, r4
 80054f6:	eb43 0905 	adc.w	r9, r3, r5
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	469a      	mov	sl, r3
 8005502:	4693      	mov	fp, r2
 8005504:	4652      	mov	r2, sl
 8005506:	465b      	mov	r3, fp
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	f7fa fe88 	bl	8000220 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800551e:	d308      	bcc.n	8005532 <UART_SetConfig+0x3d2>
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005526:	d204      	bcs.n	8005532 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e0c8      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 800374e:	2301      	movs	r3, #1
 8003750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003754:	e0c4      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 8005532:	2301      	movs	r3, #1
 8005534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005538:	e0c4      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375e:	d167      	bne.n	8003830 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x43e>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <UART_SetConfig+0x3f4>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fbfc 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fc0e 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037a2:	e010      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <UART_SetConfig+0x594>)
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fb83 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 80037ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b0:	e009      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037c4:	bf00      	nop
=======
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005542:	d167      	bne.n	8005614 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005544:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005548:	2b08      	cmp	r3, #8
 800554a:	d828      	bhi.n	800559e <UART_SetConfig+0x43e>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <UART_SetConfig+0x3f4>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	0800559f 	.word	0x0800559f
 8005564:	0800558f 	.word	0x0800558f
 8005568:	0800559f 	.word	0x0800559f
 800556c:	0800559f 	.word	0x0800559f
 8005570:	0800559f 	.word	0x0800559f
 8005574:	08005597 	.word	0x08005597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7fe f98c 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800557c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557e:	e014      	b.n	80055aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005580:	f7fe f99e 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005586:	e010      	b.n	80055aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005588:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <UART_SetConfig+0x594>)
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800558c:	e00d      	b.n	80055aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558e:	f7fe f913 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8005592:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005594:	e009      	b.n	80055aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800559c:	e005      	b.n	80055aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055a8:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8089 	beq.w	80038e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	4a4e      	ldr	r2, [pc, #312]	@ (800390c <UART_SetConfig+0x590>)
 80037d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d8:	461a      	mov	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	441a      	add	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d916      	bls.n	8003828 <UART_SetConfig+0x4ac>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d212      	bcs.n	8003828 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f023 030f 	bic.w	r3, r3, #15
 800380a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	b29a      	uxth	r2, r3
 8003818:	8bfb      	ldrh	r3, [r7, #30]
 800381a:	4313      	orrs	r3, r2
 800381c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	8bfa      	ldrh	r2, [r7, #30]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e05b      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8089 	beq.w	80056c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	4a4e      	ldr	r2, [pc, #312]	@ (80056f0 <UART_SetConfig+0x590>)
 80055b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055bc:	461a      	mov	r2, r3
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055c4:	005a      	lsls	r2, r3, #1
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	441a      	add	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	d916      	bls.n	800560c <UART_SetConfig+0x4ac>
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e4:	d212      	bcs.n	800560c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f023 030f 	bic.w	r3, r3, #15
 80055ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	8bfb      	ldrh	r3, [r7, #30]
 80055fe:	4313      	orrs	r3, r2
 8005600:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	8bfa      	ldrh	r2, [r7, #30]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	e05b      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8003828:	2301      	movs	r3, #1
 800382a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800382e:	e057      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 800560c:	2301      	movs	r3, #1
 800560e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005612:	e057      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8003830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003834:	2b08      	cmp	r3, #8
 8003836:	d828      	bhi.n	800388a <UART_SetConfig+0x50e>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x4c4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003875 	.word	0x08003875
 800384c:	0800388b 	.word	0x0800388b
 8003850:	0800387b 	.word	0x0800387b
 8003854:	0800388b 	.word	0x0800388b
 8003858:	0800388b 	.word	0x0800388b
 800385c:	0800388b 	.word	0x0800388b
 8003860:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fb94 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800386a:	e014      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7fe fba6 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003872:	e010      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <UART_SetConfig+0x594>)
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe fb1b 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003880:	e009      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003894:	bf00      	nop
    }

    if (pclk != 0U)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d021      	beq.n	80038e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <UART_SetConfig+0x590>)
 80038a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	441a      	add	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	d909      	bls.n	80038da <UART_SetConfig+0x55e>
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d205      	bcs.n	80038da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e002      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 8005614:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005618:	2b08      	cmp	r3, #8
 800561a:	d828      	bhi.n	800566e <UART_SetConfig+0x50e>
 800561c:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0x4c4>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fe f924 	bl	8003894 <HAL_RCC_GetPCLK1Freq>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800564e:	e014      	b.n	800567a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fe f936 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b26      	ldr	r3, [pc, #152]	@ (80056f4 <UART_SetConfig+0x594>)
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe f8ab 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8005662:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005664:	e009      	b.n	800567a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005678:	bf00      	nop
    }

    if (pclk != 0U)
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d021      	beq.n	80056c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	4a1a      	ldr	r2, [pc, #104]	@ (80056f0 <UART_SetConfig+0x590>)
 8005686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800568a:	461a      	mov	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d909      	bls.n	80056be <UART_SetConfig+0x55e>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b0:	d205      	bcs.n	80056be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
 80056bc:	e002      	b.n	80056c4 <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	@ 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	08006a4c 	.word	0x08006a4c
 8003910:	00f42400 	.word	0x00f42400

08003914 <UART_AdvFeatureConfig>:
=======
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3730      	adds	r7, #48	@ 0x30
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ee:	bf00      	nop
 80056f0:	080088c0 	.word	0x080088c0
 80056f4:	00f42400 	.word	0x00f42400

080056f8 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
=======
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
=======
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
=======
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
=======
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
=======
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
=======
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
=======
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01a      	beq.n	8003a2a <UART_AdvFeatureConfig+0x116>
=======
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01a      	beq.n	800580e <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a12:	d10a      	bne.n	8003a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
=======
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f6:	d10a      	bne.n	800580e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <UART_CheckIdleState>:
=======
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b098      	sub	sp, #96	@ 0x60
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
=======
 800583c:	b580      	push	{r7, lr}
 800583e:	b098      	sub	sp, #96	@ 0x60
 8005840:	af02      	add	r7, sp, #8
 8005842:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a68:	f7fd f978 	bl	8000d5c <HAL_GetTick>
 8003a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d12f      	bne.n	8003adc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f88e 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d022      	beq.n	8003adc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e063      	b.n	8003ba4 <UART_CheckIdleState+0x14c>
=======
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800584c:	f7fb fc40 	bl	80010d0 <HAL_GetTick>
 8005850:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d12f      	bne.n	80058c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005860:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005868:	2200      	movs	r2, #0
 800586a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f88e 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d022      	beq.n	80058c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
 800589a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800589e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e063      	b.n	8005988 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d149      	bne.n	8003b7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f857 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <UART_CheckIdleState+0x126>
=======
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d149      	bne.n	8005962 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d6:	2200      	movs	r2, #0
 80058d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f857 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d03c      	beq.n	8005962 <UART_CheckIdleState+0x126>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	623b      	str	r3, [r7, #32]
   return(result);
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3308      	adds	r3, #8
 8003b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b56:	61fa      	str	r2, [r7, #28]
 8003b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	617b      	str	r3, [r7, #20]
   return(result);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e5      	bne.n	8003b36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e012      	b.n	8003ba4 <UART_CheckIdleState+0x14c>
=======
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	623b      	str	r3, [r7, #32]
   return(result);
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005906:	633b      	str	r3, [r7, #48]	@ 0x30
 8005908:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800590c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e6      	bne.n	80058e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3308      	adds	r3, #8
 8005920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	60fb      	str	r3, [r7, #12]
   return(result);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800593a:	61fa      	str	r2, [r7, #28]
 800593c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	69b9      	ldr	r1, [r7, #24]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	617b      	str	r3, [r7, #20]
   return(result);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e5      	bne.n	800591a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e012      	b.n	8005988 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3758      	adds	r7, #88	@ 0x58
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_WaitOnFlagUntilTimeout>:
=======
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3758      	adds	r7, #88	@ 0x58
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e04f      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d04b      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fd f8c9 	bl	8000d5c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e04e      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d037      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d034      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d031      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d110      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]
=======
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a0:	e04f      	b.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d04b      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fb fb91 	bl	80010d0 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e04e      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d037      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b80      	cmp	r3, #128	@ 0x80
 80059d6:	d034      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b40      	cmp	r3, #64	@ 0x40
 80059dc:	d031      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d110      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f838 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e029      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c38:	d111      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c42:	621a      	str	r2, [r3, #32]
=======
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f838 	bl	8005a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2208      	movs	r2, #8
 80059fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e029      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a1c:	d111      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a26:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f81e 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d0a0      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f81e 	bl	8005a6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e00f      	b.n	8005a62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d0a0      	beq.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndRxTransfer>:
=======
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003c86:	b480      	push	{r7}
 8003c88:	b095      	sub	sp, #84	@ 0x54
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e3      	bne.n	8003cc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d118      	bne.n	8003d32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0310 	bic.w	r3, r3, #16
 8003d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6979      	ldr	r1, [r7, #20]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_EndRxTransfer+0x7a>
=======
 8005a6a:	b480      	push	{r7}
 8005a6c:	b095      	sub	sp, #84	@ 0x54
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d118      	bne.n	8005b16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f023 0310 	bic.w	r3, r3, #16
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6979      	ldr	r1, [r7, #20]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e6      	bne.n	8005ae4 <UART_EndRxTransfer+0x7a>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d46:	bf00      	nop
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <UART_DMAAbortOnError>:
=======
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b2a:	bf00      	nop
 8005b2c:	3754      	adds	r7, #84	@ 0x54
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
=======
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff faf1 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_TxISR_8BIT>:
=======
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff faf1 	bl	8005134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <UART_TxISR_8BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003d76:	b480      	push	{r7}
 8003d78:	b08f      	sub	sp, #60	@ 0x3c
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d14c      	bne.n	8003e22 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d132      	bne.n	8003dfa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e6      	bne.n	8003d94 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e6      	bne.n	8003dc6 <UART_TxISR_8BIT+0x50>
=======
 8005b5a:	b480      	push	{r7}
 8005b5c:	b08f      	sub	sp, #60	@ 0x3c
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b68:	2b21      	cmp	r3, #33	@ 0x21
 8005b6a:	d14c      	bne.n	8005c06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d132      	bne.n	8005bde <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e6      	bne.n	8005baa <UART_TxISR_8BIT+0x50>
>>>>>>> Stashed changes
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 8003df8:	e013      	b.n	8003e22 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003e22:	bf00      	nop
 8003e24:	373c      	adds	r7, #60	@ 0x3c
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_TxISR_16BIT>:
=======
 8005bdc:	e013      	b.n	8005c06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005c06:	bf00      	nop
 8005c08:	373c      	adds	r7, #60	@ 0x3c
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <UART_TxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003e2e:	b480      	push	{r7}
 8003e30:	b091      	sub	sp, #68	@ 0x44
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
=======
 8005c12:	b480      	push	{r7}
 8005c14:	b091      	sub	sp, #68	@ 0x44
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	2b21      	cmp	r3, #33	@ 0x21
 8003e3e:	d151      	bne.n	8003ee4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d132      	bne.n	8003eb2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e6      	bne.n	8003e7e <UART_TxISR_16BIT+0x50>
=======
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c20:	2b21      	cmp	r3, #33	@ 0x21
 8005c22:	d151      	bne.n	8005cc8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d132      	bne.n	8005c96 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e6      	bne.n	8005c30 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	69b9      	ldr	r1, [r7, #24]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e6      	bne.n	8005c62 <UART_TxISR_16BIT+0x50>
>>>>>>> Stashed changes
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 8003eb0:	e018      	b.n	8003ee4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003ee4:	bf00      	nop
 8003ee6:	3744      	adds	r7, #68	@ 0x44
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_TxISR_8BIT_FIFOEN>:
=======
 8005c94:	e018      	b.n	8005cc8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb0:	1c9a      	adds	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005cc8:	bf00      	nop
 8005cca:	3744      	adds	r7, #68	@ 0x44
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <UART_TxISR_8BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003ef0:	b480      	push	{r7}
 8003ef2:	b091      	sub	sp, #68	@ 0x44
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
=======
 8005cd4:	b480      	push	{r7}
 8005cd6:	b091      	sub	sp, #68	@ 0x44
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efe:	2b21      	cmp	r3, #33	@ 0x21
 8003f00:	d160      	bne.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f0a:	e057      	b.n	8003fbc <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d133      	bne.n	8003f80 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	623b      	str	r3, [r7, #32]
   return(result);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f38:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	617b      	str	r3, [r7, #20]
   return(result);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f7e:	e021      	b.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003fbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1a4      	bne.n	8003f0c <UART_TxISR_8BIT_FIFOEN+0x1c>
=======
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	2b21      	cmp	r3, #33	@ 0x21
 8005ce4:	d160      	bne.n	8005da8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005cee:	e057      	b.n	8005da0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d133      	bne.n	8005d64 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e6      	bne.n	8005d30 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005d62:	e021      	b.n	8005da8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d013      	beq.n	8005d9a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005da0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1a4      	bne.n	8005cf0 <UART_TxISR_8BIT_FIFOEN+0x1c>
>>>>>>> Stashed changes
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< Updated upstream
 8003fc2:	e7ff      	b.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003fc4:	bf00      	nop
 8003fc6:	3744      	adds	r7, #68	@ 0x44
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_TxISR_16BIT_FIFOEN>:
=======
 8005da6:	e7ff      	b.n	8005da8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005da8:	bf00      	nop
 8005daa:	3744      	adds	r7, #68	@ 0x44
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_TxISR_16BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003fd0:	b480      	push	{r7}
 8003fd2:	b091      	sub	sp, #68	@ 0x44
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
=======
 8005db4:	b480      	push	{r7}
 8005db6:	b091      	sub	sp, #68	@ 0x44
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	2b21      	cmp	r3, #33	@ 0x21
 8003fe0:	d165      	bne.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fe8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003fea:	e05c      	b.n	80040a6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d133      	bne.n	8004060 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	60bb      	str	r3, [r7, #8]
   return(result);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e6      	bne.n	800402c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800405e:	e026      	b.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004082:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80040a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040a2:	3b01      	subs	r3, #1
 80040a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80040a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19f      	bne.n	8003fec <UART_TxISR_16BIT_FIFOEN+0x1c>
=======
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	2b21      	cmp	r3, #33	@ 0x21
 8005dc4:	d165      	bne.n	8005e92 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005dce:	e05c      	b.n	8005e8a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d133      	bne.n	8005e44 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005e42:	e026      	b.n	8005e92 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d018      	beq.n	8005e84 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e66:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005e84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005e86:	3b01      	subs	r3, #1
 8005e88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005e8a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d19f      	bne.n	8005dd0 <UART_TxISR_16BIT_FIFOEN+0x1c>
>>>>>>> Stashed changes
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< Updated upstream
 80040ac:	e7ff      	b.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
 80040ae:	bf00      	nop
 80040b0:	3744      	adds	r7, #68	@ 0x44
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <UART_EndTransmit_IT>:
=======
 8005e90:	e7ff      	b.n	8005e92 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005e92:	bf00      	nop
 8005e94:	3744      	adds	r7, #68	@ 0x44
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b088      	sub	sp, #32
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e6      	bne.n	8005ea6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fad8 	bl	80006b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UARTEx_WakeupCallback>:
=======
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fa fbca 	bl	8000680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eec:	bf00      	nop
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
=======
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> Stashed changes
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
=======
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> Stashed changes
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
=======
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UARTEx_DisableFifoMode>:
=======
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
=======
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_UARTEx_DisableFifoMode+0x16>
 800415e:	2302      	movs	r3, #2
 8004160:	e027      	b.n	80041b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	@ 0x24
 800416e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e027      	b.n	8005f96 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2224      	movs	r2, #36	@ 0x24
 8005f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
=======
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e02d      	b.n	8004232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2224      	movs	r2, #36	@ 0x24
 80041e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f850 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UARTEx_SetRxFifoThreshold>:
=======
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e02d      	b.n	8006016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2224      	movs	r2, #36	@ 0x24
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f850 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
=======
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800424e:	2302      	movs	r3, #2
 8004250:	e02d      	b.n	80042ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	@ 0x24
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f812 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <UARTEx_SetNbDataToProcess>:
=======
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006032:	2302      	movs	r3, #2
 8006034:	e02d      	b.n	8006092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2224      	movs	r2, #36	@ 0x24
 8006042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f812 	bl	800609c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
=======
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 80042d8:	e031      	b.n	800433e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042da:	2308      	movs	r3, #8
 80042dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042de:	2308      	movs	r3, #8
 80042e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0f5b      	lsrs	r3, r3, #29
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	7b3a      	ldrb	r2, [r7, #12]
 8004306:	4911      	ldr	r1, [pc, #68]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004308:	5c8a      	ldrb	r2, [r1, r2]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800430e:	7b3a      	ldrb	r2, [r7, #12]
 8004310:	490f      	ldr	r1, [pc, #60]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004314:	fb93 f3f2 	sdiv	r3, r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	7b7a      	ldrb	r2, [r7, #13]
 8004324:	4909      	ldr	r1, [pc, #36]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004326:	5c8a      	ldrb	r2, [r1, r2]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800432c:	7b7a      	ldrb	r2, [r7, #13]
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004332:	fb93 f3f2 	sdiv	r3, r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	08006a64 	.word	0x08006a64
 8004350:	08006a6c 	.word	0x08006a6c

08004354 <osKernelStart>:
=======
 80060bc:	e031      	b.n	8006122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060be:	2308      	movs	r3, #8
 80060c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060c2:	2308      	movs	r3, #8
 80060c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	0e5b      	lsrs	r3, r3, #25
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	0f5b      	lsrs	r3, r3, #29
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	7b3a      	ldrb	r2, [r7, #12]
 80060ea:	4911      	ldr	r1, [pc, #68]	@ (8006130 <UARTEx_SetNbDataToProcess+0x94>)
 80060ec:	5c8a      	ldrb	r2, [r1, r2]
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060f2:	7b3a      	ldrb	r2, [r7, #12]
 80060f4:	490f      	ldr	r1, [pc, #60]	@ (8006134 <UARTEx_SetNbDataToProcess+0x98>)
 80060f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	7b7a      	ldrb	r2, [r7, #13]
 8006108:	4909      	ldr	r1, [pc, #36]	@ (8006130 <UARTEx_SetNbDataToProcess+0x94>)
 800610a:	5c8a      	ldrb	r2, [r1, r2]
 800610c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006110:	7b7a      	ldrb	r2, [r7, #13]
 8006112:	4908      	ldr	r1, [pc, #32]	@ (8006134 <UARTEx_SetNbDataToProcess+0x98>)
 8006114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006116:	fb93 f3f2 	sdiv	r3, r3, r2
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	080088d8 	.word	0x080088d8
 8006134:	080088e0 	.word	0x080088e0

08006138 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800614a:	2b84      	cmp	r3, #132	@ 0x84
 800614c:	d005      	beq.n	800615a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800614e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	3303      	adds	r3, #3
 8006158:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800615a:	68fb      	ldr	r3, [r7, #12]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <osKernelStart>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< Updated upstream
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004358:	f000 fff4 	bl	8005344 <vTaskStartScheduler>
  
  return osOK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	bd80      	pop	{r7, pc}

08004362 <vListInitialise>:
=======
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800616c:	f001 f81a 	bl	80071a4 <vTaskStartScheduler>
  
  return osOK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	bd80      	pop	{r7, pc}

08006176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006178:	b087      	sub	sp, #28
 800617a:	af02      	add	r7, sp, #8
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685c      	ldr	r4, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800618c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ffcf 	bl	8006138 <makeFreeRtosPriority>
 800619a:	4602      	mov	r2, r0
 800619c:	f107 030c 	add.w	r3, r7, #12
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	9200      	str	r2, [sp, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	4632      	mov	r2, r6
 80061a8:	4629      	mov	r1, r5
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fd54 	bl	8006c58 <xTaskCreate>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d001      	beq.n	80061ba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e000      	b.n	80061bc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80061ba:	68fb      	ldr	r3, [r7, #12]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061c4 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
=======
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f103 0208 	add.w	r2, r3, #8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
=======
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f103 0208 	add.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	609a      	str	r2, [r3, #8]
=======
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f103 0208 	add.w	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 0208 	add.w	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
=======
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0208 	add.w	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 0208 	add.w	r2, r3, #8
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <vListInitialiseItem>:
=======
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]
=======
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <vListInsertEnd>:
=======
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
=======
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	609a      	str	r2, [r3, #8]
=======
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <vListInsert>:
=======
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60bb      	str	r3, [r7, #8]
=======
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e00c      	b.n	800443e <vListInsert+0x3a>
=======
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d103      	bne.n	8006286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e00c      	b.n	80062a0 <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3308      	adds	r3, #8
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e002      	b.n	8004432 <vListInsert+0x2e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d2f6      	bcs.n	800442c <vListInsert+0x28>
=======
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3308      	adds	r3, #8
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e002      	b.n	8006294 <vListInsert+0x2e>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	d2f6      	bcs.n	800628e <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	605a      	str	r2, [r3, #4]
=======
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <uxListRemove>:
=======
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6892      	ldr	r2, [r2, #8]
 800448c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6852      	ldr	r2, [r2, #4]
 8004496:	605a      	str	r2, [r3, #4]
=======
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6892      	ldr	r2, [r2, #8]
 80062ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d103      	bne.n	80044aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]
=======
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d103      	bne.n	800630c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <xQueueGenericReset>:
=======
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1e5a      	subs	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xQueueGenericReset+0x2c>
=======
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <xQueueGenericReset+0x2c>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60bb      	str	r3, [r7, #8]
=======
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044f8:	f001 fe66 	bl	80061c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	441a      	add	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	3b01      	subs	r3, #1
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	441a      	add	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	@ 0xff
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	22ff      	movs	r2, #255	@ 0xff
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d114      	bne.n	8004578 <xQueueGenericReset+0xac>
=======
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006358:	f001 fe66 	bl	8008028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006364:	68f9      	ldr	r1, [r7, #12]
 8006366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006388:	3b01      	subs	r3, #1
 800638a:	68f9      	ldr	r1, [r7, #12]
 800638c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	441a      	add	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	22ff      	movs	r2, #255	@ 0xff
 800639c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	22ff      	movs	r2, #255	@ 0xff
 80063a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d114      	bne.n	80063d8 <xQueueGenericReset+0xac>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f934 	bl	80057c8 <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <xQueueGenericReset+0xd0>)
 8004568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	e009      	b.n	800458c <xQueueGenericReset+0xc0>
=======
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01a      	beq.n	80063ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3310      	adds	r3, #16
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f934 	bl	8007628 <xTaskRemoveFromEventList>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d012      	beq.n	80063ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <xQueueGenericReset+0xd0>)
 80063c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	e009      	b.n	80063ec <xQueueGenericReset+0xc0>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3310      	adds	r3, #16
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fef0 	bl	8004362 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3324      	adds	r3, #36	@ 0x24
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff feeb 	bl	8004362 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800458c:	f001 fe4e 	bl	800622c <vPortExitCritical>
=======
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3310      	adds	r3, #16
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fef1 	bl	80061c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3324      	adds	r3, #36	@ 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff feec 	bl	80061c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 fe4e 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 8004590:	2301      	movs	r3, #1
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <xQueueGenericCreate>:
=======
 80063f0:	2301      	movs	r3, #1
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
=======
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xQueueGenericCreate+0x2c>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xQueueGenericCreate+0x28>
=======
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xQueueGenericCreate+0x2c>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	613b      	str	r3, [r7, #16]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xQueueGenericCreate+0x28>
>>>>>>> Stashed changes

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	61fb      	str	r3, [r7, #28]
=======
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< Updated upstream
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3348      	adds	r3, #72	@ 0x48
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 ff16 	bl	800640c <pvPortMalloc>
 80045e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <xQueueGenericCreate+0x64>
=======
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3348      	adds	r3, #72	@ 0x48
 800643a:	4618      	mov	r0, r3
 800643c:	f001 ff16 	bl	800826c <pvPortMalloc>
 8006440:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00d      	beq.n	8006464 <xQueueGenericCreate+0x64>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3348      	adds	r3, #72	@ 0x48
 80045f0:	617b      	str	r3, [r7, #20]
=======
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3348      	adds	r3, #72	@ 0x48
 8006450:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 80045f2:	79fa      	ldrb	r2, [r7, #7]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f805 	bl	800460e <prvInitialiseNewQueue>
=======
 8006452:	79fa      	ldrb	r2, [r7, #7]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f805 	bl	800646e <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 8004604:	69bb      	ldr	r3, [r7, #24]
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <prvInitialiseNewQueue>:
=======
 8006464:	69bb      	ldr	r3, [r7, #24]
	}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	70fb      	strb	r3, [r7, #3]
=======
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <prvInitialiseNewQueue+0x1c>
=======
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e002      	b.n	8004630 <prvInitialiseNewQueue+0x22>
=======
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e002      	b.n	8006490 <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
=======
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800463c:	2101      	movs	r1, #1
 800463e:	69b8      	ldr	r0, [r7, #24]
 8004640:	f7ff ff44 	bl	80044cc <xQueueGenericReset>
=======
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800649c:	2101      	movs	r1, #1
 800649e:	69b8      	ldr	r0, [r7, #24]
 80064a0:	f7ff ff44 	bl	800632c <xQueueGenericReset>
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <prvInitialiseMutex>:
=======
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvInitialiseMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< Updated upstream
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <prvInitialiseMutex+0x2c>
=======
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <prvInitialiseMutex+0x2c>
>>>>>>> Stashed changes
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< Updated upstream
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]
=======
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 800466c:	2300      	movs	r3, #0
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f81c 	bl	80046b0 <xQueueGenericSend>
=======
 80064cc:	2300      	movs	r3, #0
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f81c 	bl	8006510 <xQueueGenericSend>
>>>>>>> Stashed changes
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< Updated upstream
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <xQueueCreateMutex>:
=======
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <xQueueCreateMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	461a      	mov	r2, r3
 8004696:	6939      	ldr	r1, [r7, #16]
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f7ff ff81 	bl	80045a0 <xQueueGenericCreate>
 800469e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ffd3 	bl	800464c <prvInitialiseMutex>

		return xNewQueue;
 80046a6:	68fb      	ldr	r3, [r7, #12]
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xQueueGenericSend>:
=======
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064ea:	2301      	movs	r3, #1
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6939      	ldr	r1, [r7, #16]
 80064f8:	6978      	ldr	r0, [r7, #20]
 80064fa:	f7ff ff81 	bl	8006400 <xQueueGenericCreate>
 80064fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ffd3 	bl	80064ac <prvInitialiseMutex>

		return xNewQueue;
 8006506:	68fb      	ldr	r3, [r7, #12]
	}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericSend+0x34>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x42>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <xQueueGenericSend+0x46>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueGenericSend+0x48>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <xQueueGenericSend+0x64>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d103      	bne.n	8004722 <xQueueGenericSend+0x72>
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <xQueueGenericSend+0x76>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueGenericSend+0x78>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xQueueGenericSend+0x94>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	623b      	str	r3, [r7, #32]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004744:	f001 f9e6 	bl	8005b14 <xTaskGetSchedulerState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <xQueueGenericSend+0xa4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueGenericSend+0xa8>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueGenericSend+0xaa>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <xQueueGenericSend+0xc6>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61fb      	str	r3, [r7, #28]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <xQueueGenericSend+0xc2>
=======
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	@ 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <xQueueGenericSend+0x34>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <xQueueGenericSend+0x42>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <xQueueGenericSend+0x46>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericSend+0x48>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <xQueueGenericSend+0x64>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x72>
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0x76>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0x78>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <xQueueGenericSend+0x94>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	623b      	str	r3, [r7, #32]
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a4:	f001 f9e6 	bl	8007974 <xTaskGetSchedulerState>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <xQueueGenericSend+0xa4>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <xQueueGenericSend+0xa8>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <xQueueGenericSend+0xaa>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61fb      	str	r3, [r7, #28]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <xQueueGenericSend+0xc2>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8004776:	f001 fd27 	bl	80061c8 <vPortEnterCritical>
=======
 80065d6:	f001 fd27 	bl	8008028 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <xQueueGenericSend+0xdc>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d129      	bne.n	80047e0 <xQueueGenericSend+0x130>
=======
 80065da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <xQueueGenericSend+0xdc>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d129      	bne.n	8006640 <xQueueGenericSend+0x130>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004792:	f000 fa47 	bl	8004c24 <prvCopyDataToQueue>
 8004796:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065f2:	f000 fa47 	bl	8006a84 <prvCopyDataToQueue>
 80065f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	3324      	adds	r3, #36	@ 0x24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f80f 	bl	80057c8 <xTaskRemoveFromEventList>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <xQueueGenericSend+0x128>
=======
 80065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d010      	beq.n	8006622 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	3324      	adds	r3, #36	@ 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f80f 	bl	8007628 <xTaskRemoveFromEventList>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80047b0:	4b3f      	ldr	r3, [pc, #252]	@ (80048b0 <xQueueGenericSend+0x200>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	e00a      	b.n	80047d8 <xQueueGenericSend+0x128>
=======
 8006610:	4b3f      	ldr	r3, [pc, #252]	@ (8006710 <xQueueGenericSend+0x200>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	e00a      	b.n	8006638 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <xQueueGenericSend+0x128>
=======
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <xQueueGenericSend+0x200>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
=======
 8006628:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <xQueueGenericSend+0x200>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 80047d8:	f001 fd28 	bl	800622c <vPortExitCritical>
				return pdPASS;
 80047dc:	2301      	movs	r3, #1
 80047de:	e063      	b.n	80048a8 <xQueueGenericSend+0x1f8>
=======
 8006638:	f001 fd28 	bl	800808c <vPortExitCritical>
				return pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	e063      	b.n	8006708 <xQueueGenericSend+0x1f8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSend+0x13e>
=======
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <xQueueGenericSend+0x13e>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 80047e6:	f001 fd21 	bl	800622c <vPortExitCritical>
=======
 8006646:	f001 fd21 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 80047ea:	2300      	movs	r3, #0
 80047ec:	e05c      	b.n	80048a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <xQueueGenericSend+0x152>
=======
 800664a:	2300      	movs	r3, #0
 800664c:	e05c      	b.n	8006708 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <xQueueGenericSend+0x152>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f849 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f849 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004802:	f001 fd13 	bl	800622c <vPortExitCritical>
=======
 8006662:	f001 fd13 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8004806:	f000 fdef 	bl	80053e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800480a:	f001 fcdd 	bl	80061c8 <vPortEnterCritical>
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004814:	b25b      	sxtb	r3, r3
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d103      	bne.n	8004824 <xQueueGenericSend+0x174>
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800482a:	b25b      	sxtb	r3, r3
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d103      	bne.n	800483a <xQueueGenericSend+0x18a>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800483a:	f001 fcf7 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800483e:	1d3a      	adds	r2, r7, #4
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f838 	bl	80058bc <xTaskCheckForTimeOut>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d124      	bne.n	800489c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004852:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004854:	f000 fab8 	bl	8004dc8 <prvIsQueueFull>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	3310      	adds	r3, #16
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 ff88 	bl	800577c <vTaskPlaceOnEventList>
=======
 8006666:	f000 fdef 	bl	8007248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800666a:	f001 fcdd 	bl	8008028 <vPortEnterCritical>
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006674:	b25b      	sxtb	r3, r3
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d103      	bne.n	8006684 <xQueueGenericSend+0x174>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800668a:	b25b      	sxtb	r3, r3
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d103      	bne.n	800669a <xQueueGenericSend+0x18a>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800669a:	f001 fcf7 	bl	800808c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800669e:	1d3a      	adds	r2, r7, #4
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4611      	mov	r1, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f838 	bl	800771c <xTaskCheckForTimeOut>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d124      	bne.n	80066fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066b4:	f000 fab8 	bl	8006c28 <prvIsQueueFull>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	3310      	adds	r3, #16
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 ff88 	bl	80075dc <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800486c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800486e:	f000 fa43 	bl	8004cf8 <prvUnlockQueue>
=======
 80066cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ce:	f000 fa43 	bl	8006b58 <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 8004872:	f000 fdc7 	bl	8005404 <xTaskResumeAll>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f af7c 	bne.w	8004776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800487e:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <xQueueGenericSend+0x200>)
 8004880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	e772      	b.n	8004776 <xQueueGenericSend+0xc6>
=======
 80066d2:	f000 fdc7 	bl	8007264 <xTaskResumeAll>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f af7c 	bne.w	80065d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066de:	4b0c      	ldr	r3, [pc, #48]	@ (8006710 <xQueueGenericSend+0x200>)
 80066e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	e772      	b.n	80065d6 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004892:	f000 fa31 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004896:	f000 fdb5 	bl	8005404 <xTaskResumeAll>
 800489a:	e76c      	b.n	8004776 <xQueueGenericSend+0xc6>
=======
 80066f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f2:	f000 fa31 	bl	8006b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f6:	f000 fdb5 	bl	8007264 <xTaskResumeAll>
 80066fa:	e76c      	b.n	80065d6 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800489c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800489e:	f000 fa2b 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048a2:	f000 fdaf 	bl	8005404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3738      	adds	r7, #56	@ 0x38
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <xQueueGiveFromISR>:
=======
 80066fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066fe:	f000 fa2b 	bl	8006b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006702:	f000 fdaf 	bl	8007264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006708:	4618      	mov	r0, r3
 800670a:	3738      	adds	r7, #56	@ 0x38
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <xQueueGiveFromISR>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< Updated upstream
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	@ 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 8006714:	b580      	push	{r7, lr}
 8006716:	b08e      	sub	sp, #56	@ 0x38
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> Stashed changes
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
<<<<<<< Updated upstream
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xQueueGiveFromISR+0x28>
=======
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	623b      	str	r3, [r7, #32]
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	e7fd      	b.n	800673c <xQueueGiveFromISR+0x28>
>>>>>>> Stashed changes

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< Updated upstream
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xQueueGiveFromISR+0x48>
=======
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61fb      	str	r3, [r7, #28]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <xQueueGiveFromISR+0x48>
>>>>>>> Stashed changes

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
<<<<<<< Updated upstream
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <xQueueGiveFromISR+0x5c>
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <xQueueGiveFromISR+0x60>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <xQueueGiveFromISR+0x62>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	61bb      	str	r3, [r7, #24]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <xQueueGiveFromISR+0x7a>
=======
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <xQueueGiveFromISR+0x5c>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <xQueueGiveFromISR+0x60>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <xQueueGiveFromISR+0x62>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10b      	bne.n	8006792 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	61bb      	str	r3, [r7, #24]
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	e7fd      	b.n	800678e <xQueueGiveFromISR+0x7a>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 8004932:	f001 fd29 	bl	8006388 <vPortValidateInterruptPriority>
=======
 8006792:	f001 fd29 	bl	80081e8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 8004936:	f3ef 8211 	mrs	r2, BASEPRI
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	617a      	str	r2, [r7, #20]
 800494c:	613b      	str	r3, [r7, #16]
=======
 8006796:	f3ef 8211 	mrs	r2, BASEPRI
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	617a      	str	r2, [r7, #20]
 80067ac:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 800494e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80067ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b6:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
<<<<<<< Updated upstream
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495e:	429a      	cmp	r2, r3
 8004960:	d22b      	bcs.n	80049ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067be:	429a      	cmp	r2, r3
 80067c0:	d22b      	bcs.n	800681a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 8004974:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d112      	bne.n	80049a4 <xQueueGiveFromISR+0xf0>
=======
 80067d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d112      	bne.n	8006804 <xQueueGiveFromISR+0xf0>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	3324      	adds	r3, #36	@ 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f000 ff1c 	bl	80057c8 <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00e      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
=======
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	3324      	adds	r3, #36	@ 0x24
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 ff1c 	bl	8007628 <xTaskRemoveFromEventList>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <xQueueGiveFromISR+0x100>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e007      	b.n	80049b4 <xQueueGiveFromISR+0x100>
=======
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	e007      	b.n	8006814 <xQueueGiveFromISR+0x100>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 80049a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	b25a      	sxtb	r2, r3
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049b4:	2301      	movs	r3, #1
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b8:	e001      	b.n	80049be <xQueueGiveFromISR+0x10a>
=======
 8006804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006808:	3301      	adds	r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	b25a      	sxtb	r2, r3
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
 8006818:	e001      	b.n	800681e <xQueueGiveFromISR+0x10a>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c0:	60fb      	str	r3, [r7, #12]
=======
 800681a:	2300      	movs	r3, #0
 800681c:	637b      	str	r3, [r7, #52]	@ 0x34
 800681e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006820:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f383 8811 	msr	BASEPRI, r3
=======
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 80049c8:	bf00      	nop
=======
 8006828:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3738      	adds	r7, #56	@ 0x38
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xQueueSemaphoreTake>:
=======
 800682a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800682c:	4618      	mov	r0, r3
 800682e:	3738      	adds	r7, #56	@ 0x38
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <xQueueSemaphoreTake>:
>>>>>>> Stashed changes
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	@ 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	@ 0x38
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> Stashed changes
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< Updated upstream
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueSemaphoreTake+0x30>
=======
 800684a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xQueueSemaphoreTake+0x30>
>>>>>>> Stashed changes

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< Updated upstream
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueSemaphoreTake+0x50>
=======
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <xQueueSemaphoreTake+0x50>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 8004a28:	f001 f874 	bl	8005b14 <xTaskGetSchedulerState>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <xQueueSemaphoreTake+0x64>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueSemaphoreTake+0x68>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueSemaphoreTake+0x6a>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	61bb      	str	r3, [r7, #24]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xQueueSemaphoreTake+0x82>
=======
 8006888:	f001 f874 	bl	8007974 <xTaskGetSchedulerState>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <xQueueSemaphoreTake+0x64>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <xQueueSemaphoreTake+0x68>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <xQueueSemaphoreTake+0x6a>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <xQueueSemaphoreTake+0x86>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	61bb      	str	r3, [r7, #24]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <xQueueSemaphoreTake+0x82>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8004a5a:	f001 fbb5 	bl	80061c8 <vPortEnterCritical>
=======
 80068ba:	f001 fbb5 	bl	8008028 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <xQueueSemaphoreTake+0xe0>
=======
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d024      	beq.n	8006914 <xQueueSemaphoreTake+0xe0>
>>>>>>> Stashed changes
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	1e5a      	subs	r2, r3, #1
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> Stashed changes

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <xQueueSemaphoreTake+0xb0>
=======
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <xQueueSemaphoreTake+0xb0>
>>>>>>> Stashed changes
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< Updated upstream
 8004a7a:	f001 f9f7 	bl	8005e6c <pvTaskIncrementMutexHeldCount>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a82:	609a      	str	r2, [r3, #8]
=======
 80068da:	f001 f9f7 	bl	8007ccc <pvTaskIncrementMutexHeldCount>
 80068de:	4602      	mov	r2, r0
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00f      	beq.n	8004aac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	3310      	adds	r3, #16
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fe99 	bl	80057c8 <xTaskRemoveFromEventList>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a9c:	4b54      	ldr	r3, [pc, #336]	@ (8004bf0 <xQueueSemaphoreTake+0x21c>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
=======
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00f      	beq.n	800690c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ee:	3310      	adds	r3, #16
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fe99 	bl	8007628 <xTaskRemoveFromEventList>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068fc:	4b54      	ldr	r3, [pc, #336]	@ (8006a50 <xQueueSemaphoreTake+0x21c>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004aac:	f001 fbbe 	bl	800622c <vPortExitCritical>
				return pdPASS;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e098      	b.n	8004be6 <xQueueSemaphoreTake+0x212>
=======
 800690c:	f001 fbbe 	bl	800808c <vPortExitCritical>
				return pdPASS;
 8006910:	2301      	movs	r3, #1
 8006912:	e098      	b.n	8006a46 <xQueueSemaphoreTake+0x212>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d112      	bne.n	8004ae0 <xQueueSemaphoreTake+0x10c>
=======
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d112      	bne.n	8006940 <xQueueSemaphoreTake+0x10c>
>>>>>>> Stashed changes
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< Updated upstream
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	617b      	str	r3, [r7, #20]
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	e7fd      	b.n	8004ad4 <xQueueSemaphoreTake+0x100>
=======
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	617b      	str	r3, [r7, #20]
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	e7fd      	b.n	8006934 <xQueueSemaphoreTake+0x100>
>>>>>>> Stashed changes
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004ad8:	f001 fba8 	bl	800622c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e082      	b.n	8004be6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <xQueueSemaphoreTake+0x120>
=======
 8006938:	f001 fba8 	bl	800808c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800693c:	2300      	movs	r3, #0
 800693e:	e082      	b.n	8006a46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <xQueueSemaphoreTake+0x120>
>>>>>>> Stashed changes
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fed0 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af0:	2301      	movs	r3, #1
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8006946:	f107 030c 	add.w	r3, r7, #12
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fed0 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004af4:	f001 fb9a 	bl	800622c <vPortExitCritical>
=======
 8006954:	f001 fb9a 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8004af8:	f000 fc76 	bl	80053e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004afc:	f001 fb64 	bl	80061c8 <vPortEnterCritical>
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d103      	bne.n	8004b16 <xQueueSemaphoreTake+0x142>
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <xQueueSemaphoreTake+0x158>
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b2c:	f001 fb7e 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b30:	463a      	mov	r2, r7
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 febf 	bl	80058bc <xTaskCheckForTimeOut>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d132      	bne.n	8004baa <xQueueSemaphoreTake+0x1d6>
=======
 8006958:	f000 fc76 	bl	8007248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800695c:	f001 fb64 	bl	8008028 <vPortEnterCritical>
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006966:	b25b      	sxtb	r3, r3
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d103      	bne.n	8006976 <xQueueSemaphoreTake+0x142>
 800696e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800697c:	b25b      	sxtb	r3, r3
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d103      	bne.n	800698c <xQueueSemaphoreTake+0x158>
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800698c:	f001 fb7e 	bl	800808c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006990:	463a      	mov	r2, r7
 8006992:	f107 030c 	add.w	r3, r7, #12
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f000 febf 	bl	800771c <xTaskCheckForTimeOut>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d132      	bne.n	8006a0a <xQueueSemaphoreTake+0x1d6>
>>>>>>> Stashed changes
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 8004b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b46:	f000 f929 	bl	8004d9c <prvIsQueueEmpty>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d026      	beq.n	8004b9e <xQueueSemaphoreTake+0x1ca>
=======
 80069a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069a6:	f000 f929 	bl	8006bfc <prvIsQueueEmpty>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d026      	beq.n	80069fe <xQueueSemaphoreTake+0x1ca>
>>>>>>> Stashed changes
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004b58:	f001 fb36 	bl	80061c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fff5 	bl	8005b50 <xTaskPriorityInherit>
 8004b66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004b68:	f001 fb60 	bl	800622c <vPortExitCritical>
=======
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80069b8:	f001 fb36 	bl	8008028 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fff5 	bl	80079b0 <xTaskPriorityInherit>
 80069c6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80069c8:	f001 fb60 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< Updated upstream
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	3324      	adds	r3, #36	@ 0x24
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fe01 	bl	800577c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b7c:	f000 f8bc 	bl	8004cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b80:	f000 fc40 	bl	8005404 <xTaskResumeAll>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f af67 	bne.w	8004a5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b8c:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <xQueueSemaphoreTake+0x21c>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	e75d      	b.n	8004a5a <xQueueSemaphoreTake+0x86>
=======
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	3324      	adds	r3, #36	@ 0x24
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	4611      	mov	r1, r2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fe01 	bl	80075dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069dc:	f000 f8bc 	bl	8006b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069e0:	f000 fc40 	bl	8007264 <xTaskResumeAll>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f47f af67 	bne.w	80068ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80069ec:	4b18      	ldr	r3, [pc, #96]	@ (8006a50 <xQueueSemaphoreTake+0x21c>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	e75d      	b.n	80068ba <xQueueSemaphoreTake+0x86>
>>>>>>> Stashed changes
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ba0:	f000 f8aa 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba4:	f000 fc2e 	bl	8005404 <xTaskResumeAll>
 8004ba8:	e757      	b.n	8004a5a <xQueueSemaphoreTake+0x86>
=======
 80069fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a00:	f000 f8aa 	bl	8006b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a04:	f000 fc2e 	bl	8007264 <xTaskResumeAll>
 8006a08:	e757      	b.n	80068ba <xQueueSemaphoreTake+0x86>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bac:	f000 f8a4 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bb0:	f000 fc28 	bl	8005404 <xTaskResumeAll>
=======
 8006a0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a0c:	f000 f8a4 	bl	8006b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a10:	f000 fc28 	bl	8007264 <xTaskResumeAll>
>>>>>>> Stashed changes

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 8004bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb6:	f000 f8f1 	bl	8004d9c <prvIsQueueEmpty>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f43f af4c 	beq.w	8004a5a <xQueueSemaphoreTake+0x86>
=======
 8006a14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a16:	f000 f8f1 	bl	8006bfc <prvIsQueueEmpty>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f43f af4c 	beq.w	80068ba <xQueueSemaphoreTake+0x86>
>>>>>>> Stashed changes
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< Updated upstream
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004bc8:	f001 fafe 	bl	80061c8 <vPortEnterCritical>
=======
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00d      	beq.n	8006a44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a28:	f001 fafe 	bl	8008028 <vPortEnterCritical>
>>>>>>> Stashed changes
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< Updated upstream
 8004bcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bce:	f000 f811 	bl	8004bf4 <prvGetDisinheritPriorityAfterTimeout>
 8004bd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 f8b6 	bl	8005d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004be0:	f001 fb24 	bl	800622c <vPortExitCritical>
=======
 8006a2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a2e:	f000 f811 	bl	8006a54 <prvGetDisinheritPriorityAfterTimeout>
 8006a32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f001 f8b6 	bl	8007bac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a40:	f001 fb24 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< Updated upstream
 8004be4:	2300      	movs	r3, #0
=======
 8006a44:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 8004be6:	4618      	mov	r0, r3
 8004be8:	3738      	adds	r7, #56	@ 0x38
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <prvGetDisinheritPriorityAfterTimeout>:
=======
 8006a46:	4618      	mov	r0, r3
 8006a48:	3738      	adds	r7, #56	@ 0x38
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< Updated upstream
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
=======
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< Updated upstream
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1c3 0307 	rsb	r3, r3, #7
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e001      	b.n	8004c16 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d006      	beq.n	8006a72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1c3 0307 	rsb	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e001      	b.n	8006a76 <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< Updated upstream
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c16:	68fb      	ldr	r3, [r7, #12]
	}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <prvCopyDataToQueue>:
=======
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a76:	68fb      	ldr	r3, [r7, #12]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
=======
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <prvCopyDataToQueue+0x3a>
=======
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d14d      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fff4 	bl	8005c3c <xTaskPriorityDisinherit>
 8004c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e043      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d14d      	bne.n	8006b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fff4 	bl	8007a9c <xTaskPriorityDisinherit>
 8006ab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	e043      	b.n	8006b46 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d119      	bne.n	8004c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6858      	ldr	r0, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	f001 fe46 	bl	8006900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d32b      	bcc.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e026      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d119      	bne.n	8006af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6858      	ldr	r0, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	f001 fe46 	bl	8008760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	441a      	add	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d32b      	bcc.n	8006b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	e026      	b.n	8006b46 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68d8      	ldr	r0, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	f001 fe2c 	bl	8006900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d207      	bcs.n	8004cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	425b      	negs	r3, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
=======
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68d8      	ldr	r0, [r3, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b00:	461a      	mov	r2, r3
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	f001 fe2c 	bl	8008760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b10:	425b      	negs	r3, r3
 8006b12:	441a      	add	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d207      	bcs.n	8006b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2c:	425b      	negs	r3, r3
 8006b2e:	441a      	add	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d105      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d105      	bne.n	8006b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
=======
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvUnlockQueue>:
=======
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006b4e:	697b      	ldr	r3, [r7, #20]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <prvUnlockQueue>:
>>>>>>> Stashed changes
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
=======
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8004d00:	f001 fa62 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d0c:	e011      	b.n	8004d32 <prvUnlockQueue+0x3a>
=======
 8006b60:	f001 fa62 	bl	8008028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b6c:	e011      	b.n	8006b92 <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3324      	adds	r3, #36	@ 0x24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd54 	bl	80057c8 <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <prvUnlockQueue+0x32>
=======
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d012      	beq.n	8006b9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3324      	adds	r3, #36	@ 0x24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fd54 	bl	8007628 <xTaskRemoveFromEventList>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 8004d26:	f000 fe2d 	bl	8005984 <vTaskMissedYield>
=======
 8006b86:	f000 fe2d 	bl	80077e4 <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dce9      	bgt.n	8004d0e <prvUnlockQueue+0x16>
 8004d3a:	e000      	b.n	8004d3e <prvUnlockQueue+0x46>
					break;
 8004d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	22ff      	movs	r2, #255	@ 0xff
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d46:	f001 fa71 	bl	800622c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d4a:	f001 fa3d 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d56:	e011      	b.n	8004d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3310      	adds	r3, #16
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fd2f 	bl	80057c8 <xTaskRemoveFromEventList>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d70:	f000 fe08 	bl	8005984 <vTaskMissedYield>
=======
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dce9      	bgt.n	8006b6e <prvUnlockQueue+0x16>
 8006b9a:	e000      	b.n	8006b9e <prvUnlockQueue+0x46>
					break;
 8006b9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	22ff      	movs	r2, #255	@ 0xff
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ba6:	f001 fa71 	bl	800808c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006baa:	f001 fa3d 	bl	8008028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb6:	e011      	b.n	8006bdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d012      	beq.n	8006be6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fd2f 	bl	8007628 <xTaskRemoveFromEventList>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bd0:	f000 fe08 	bl	80077e4 <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dce9      	bgt.n	8004d58 <prvUnlockQueue+0x60>
 8004d84:	e000      	b.n	8004d88 <prvUnlockQueue+0x90>
=======
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dce9      	bgt.n	8006bb8 <prvUnlockQueue+0x60>
 8006be4:	e000      	b.n	8006be8 <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 8004d86:	bf00      	nop
=======
 8006be6:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	22ff      	movs	r2, #255	@ 0xff
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d90:	f001 fa4c 	bl	800622c <vPortExitCritical>
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <prvIsQueueEmpty>:
=======
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	22ff      	movs	r2, #255	@ 0xff
 8006bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006bf0:	f001 fa4c 	bl	800808c <vPortExitCritical>
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da4:	f001 fa10 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e001      	b.n	8004dba <prvIsQueueEmpty+0x1e>
=======
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c04:	f001 fa10 	bl	8008028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e001      	b.n	8006c1a <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dba:	f001 fa37 	bl	800622c <vPortExitCritical>

	return xReturn;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvIsQueueFull>:
=======
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c1a:	f001 fa37 	bl	800808c <vPortExitCritical>

	return xReturn;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd0:	f001 f9fa 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d102      	bne.n	8004de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e001      	b.n	8004dea <prvIsQueueFull+0x22>
=======
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c30:	f001 f9fa 	bl	8008028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d102      	bne.n	8006c46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e001      	b.n	8006c4a <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dea:	f001 fa1f 	bl	800622c <vPortExitCritical>

	return xReturn;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTaskCreate>:
=======
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c4a:	f001 fa1f 	bl	800808c <vPortExitCritical>

	return xReturn;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	@ 0x30
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80fb      	strh	r3, [r7, #6]
=======
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08c      	sub	sp, #48	@ 0x30
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fafd 	bl	800640c <pvPortMalloc>
 8004e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e1a:	20a0      	movs	r0, #160	@ 0xa0
 8004e1c:	f001 faf6 	bl	800640c <pvPortMalloc>
 8004e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e2e:	e005      	b.n	8004e3c <xTaskCreate+0x44>
=======
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fafd 	bl	800826c <pvPortMalloc>
 8006c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c7a:	20a0      	movs	r0, #160	@ 0xa0
 8006c7c:	f001 faf6 	bl	800826c <pvPortMalloc>
 8006c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c8e:	e005      	b.n	8006c9c <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	f001 fbb9 	bl	80065a8 <vPortFree>
 8004e36:	e001      	b.n	8004e3c <xTaskCreate+0x44>
=======
 8006c90:	6978      	ldr	r0, [r7, #20]
 8006c92:	f001 fbb9 	bl	8008408 <vPortFree>
 8006c96:	e001      	b.n	8006c9c <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
=======
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d013      	beq.n	8004e6a <xTaskCreate+0x72>
=======
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d013      	beq.n	8006cca <xTaskCreate+0x72>
>>>>>>> Stashed changes
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f80f 	bl	8004e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e5e:	69f8      	ldr	r0, [r7, #28]
 8004e60:	f000 f8ac 	bl	8004fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e002      	b.n	8004e70 <xTaskCreate+0x78>
=======
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	9302      	str	r3, [sp, #8]
 8006cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f80f 	bl	8006cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cbe:	69f8      	ldr	r0, [r7, #28]
 8006cc0:	f000 f8ac 	bl	8006e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e002      	b.n	8006cd0 <xTaskCreate+0x78>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e70:	69bb      	ldr	r3, [r7, #24]
	}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <prvInitialiseNewTask>:
=======
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3720      	adds	r7, #32
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
=======
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	3b01      	subs	r3, #1
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <prvInitialiseNewTask+0x46>
=======
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f023 0307 	bic.w	r3, r3, #7
 8006d02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	617b      	str	r3, [r7, #20]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <prvInitialiseNewTask+0x46>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01f      	beq.n	8004f0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e012      	b.n	8004ef8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3334      	adds	r3, #52	@ 0x34
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	701a      	strb	r2, [r3, #0]
=======
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01f      	beq.n	8006d6c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	e012      	b.n	8006d58 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	7819      	ldrb	r1, [r3, #0]
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	3334      	adds	r3, #52	@ 0x34
 8006d42:	460a      	mov	r2, r1
 8006d44:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b0f      	cmp	r3, #15
 8004efc:	d9e9      	bls.n	8004ed2 <prvInitialiseNewTask+0x56>
 8004efe:	e000      	b.n	8004f02 <prvInitialiseNewTask+0x86>
			{
				break;
 8004f00:	bf00      	nop
=======
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	3301      	adds	r3, #1
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d9e9      	bls.n	8006d32 <prvInitialiseNewTask+0x56>
 8006d5e:	e000      	b.n	8006d62 <prvInitialiseNewTask+0x86>
			{
				break;
 8006d60:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0a:	e003      	b.n	8004f14 <prvInitialiseNewTask+0x98>
=======
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d6a:	e003      	b.n	8006d74 <prvInitialiseNewTask+0x98>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d901      	bls.n	8004f1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d901      	bls.n	8006d7e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d88:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fa34 	bl	80043a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fa2f 	bl	80043a2 <vListInitialiseItem>
=======
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fa35 	bl	8006204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fa30 	bl	8006204 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	f1c3 0207 	rsb	r2, r3, #7
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	f1c3 0207 	rsb	r2, r3, #7
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db8:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
=======
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
>>>>>>> Stashed changes
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	334c      	adds	r3, #76	@ 0x4c
 8004f6e:	224c      	movs	r2, #76	@ 0x4c
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fc38 	bl	80067e8 <memset>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <prvInitialiseNewTask+0x134>)
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb4 <prvInitialiseNewTask+0x138>)
 8004f82:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb8 <prvInitialiseNewTask+0x13c>)
 8004f88:	659a      	str	r2, [r3, #88]	@ 0x58
=======
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	334c      	adds	r3, #76	@ 0x4c
 8006dce:	224c      	movs	r2, #76	@ 0x4c
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fc38 	bl	8008648 <memset>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	4a0d      	ldr	r2, [pc, #52]	@ (8006e10 <prvInitialiseNewTask+0x134>)
 8006ddc:	651a      	str	r2, [r3, #80]	@ 0x50
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	4a0c      	ldr	r2, [pc, #48]	@ (8006e14 <prvInitialiseNewTask+0x138>)
 8006de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <prvInitialiseNewTask+0x13c>)
 8006de8:	659a      	str	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	69b8      	ldr	r0, [r7, #24]
 8004f90:	f000 ffe6 	bl	8005f60 <pxPortInitialiseStack>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	601a      	str	r2, [r3, #0]
=======
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	69b8      	ldr	r0, [r7, #24]
 8006df0:	f000 ffe6 	bl	8007dc0 <pxPortInitialiseStack>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <prvInitialiseNewTask+0x12a>
=======
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <prvInitialiseNewTask+0x12a>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa4:	601a      	str	r2, [r3, #0]
=======
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e04:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 8004fa6:	bf00      	nop
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200042dc 	.word	0x200042dc
 8004fb4:	20004344 	.word	0x20004344
 8004fb8:	200043ac 	.word	0x200043ac

08004fbc <prvAddNewTaskToReadyList>:
=======
 8006e06:	bf00      	nop
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	200023f8 	.word	0x200023f8
 8006e14:	20002460 	.word	0x20002460
 8006e18:	200024c8 	.word	0x200024c8

08006e1c <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f001 f900 	bl	80061c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a29      	ldr	r2, [pc, #164]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
=======
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e24:	f001 f900 	bl	8008028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e28:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed4 <prvAddNewTaskToReadyList+0xb8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	4a29      	ldr	r2, [pc, #164]	@ (8006ed4 <prvAddNewTaskToReadyList+0xb8>)
 8006e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e32:	4b29      	ldr	r3, [pc, #164]	@ (8006ed8 <prvAddNewTaskToReadyList+0xbc>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
=======
 8006e3a:	4a27      	ldr	r2, [pc, #156]	@ (8006ed8 <prvAddNewTaskToReadyList+0xbc>)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e40:	4b24      	ldr	r3, [pc, #144]	@ (8006ed4 <prvAddNewTaskToReadyList+0xb8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d110      	bne.n	8006e6a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 8004fe8:	f000 fcf0 	bl	80059cc <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
=======
 8006e48:	f000 fcf0 	bl	800782c <prvInitialiseTaskLists>
 8006e4c:	e00d      	b.n	8006e6a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 8004fee:	4b23      	ldr	r3, [pc, #140]	@ (800507c <prvAddNewTaskToReadyList+0xc0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
=======
 8006e4e:	4b23      	ldr	r3, [pc, #140]	@ (8006edc <prvAddNewTaskToReadyList+0xc0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e56:	4b20      	ldr	r3, [pc, #128]	@ (8006ed8 <prvAddNewTaskToReadyList+0xbc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d802      	bhi.n	8006e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed8 <prvAddNewTaskToReadyList+0xbc>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800500a:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <prvAddNewTaskToReadyList+0xc4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1b      	ldr	r2, [pc, #108]	@ (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8005012:	6013      	str	r3, [r2, #0]
=======
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee0 <prvAddNewTaskToReadyList+0xc4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee0 <prvAddNewTaskToReadyList+0xc4>)
 8006e72:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7ff f9bd 	bl	80043bc <vListInsertEnd>
=======
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	2201      	movs	r2, #1
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ee4 <prvAddNewTaskToReadyList+0xc8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <prvAddNewTaskToReadyList+0xc8>)
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4a15      	ldr	r2, [pc, #84]	@ (8006ee8 <prvAddNewTaskToReadyList+0xcc>)
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7ff f9be 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005042:	f001 f8f3 	bl	800622c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <prvAddNewTaskToReadyList+0xc0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <prvAddNewTaskToReadyList+0xb0>
=======
 8006ea2:	f001 f8f3 	bl	800808c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <prvAddNewTaskToReadyList+0xc0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00e      	beq.n	8006ecc <prvAddNewTaskToReadyList+0xb0>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800504e:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	429a      	cmp	r2, r3
 800505a:	d207      	bcs.n	800506c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <prvAddNewTaskToReadyList+0xd0>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
=======
 8006eae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <prvAddNewTaskToReadyList+0xbc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d207      	bcs.n	8006ecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <prvAddNewTaskToReadyList+0xd0>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000288 	.word	0x20000288
 8005078:	20000188 	.word	0x20000188
 800507c:	20000294 	.word	0x20000294
 8005080:	200002a4 	.word	0x200002a4
 8005084:	20000290 	.word	0x20000290
 8005088:	2000018c 	.word	0x2000018c
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <vTaskDelay>:
=======
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	200003a0 	.word	0x200003a0
 8006ed8:	200002a0 	.word	0x200002a0
 8006edc:	200003ac 	.word	0x200003ac
 8006ee0:	200003bc 	.word	0x200003bc
 8006ee4:	200003a8 	.word	0x200003a8
 8006ee8:	200002a4 	.word	0x200002a4
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050a2:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <vTaskDelay+0x64>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <vTaskDelay+0x32>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050c2:	f000 f991 	bl	80053e8 <vTaskSuspendAll>
=======
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d018      	beq.n	8006f34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f02:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <vTaskDelay+0x64>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <vTaskDelay+0x32>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	60bb      	str	r3, [r7, #8]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f22:	f000 f991 	bl	8007248 <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 80050c6:	2100      	movs	r1, #0
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fee3 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ce:	f000 f999 	bl	8005404 <xTaskResumeAll>
 80050d2:	60f8      	str	r0, [r7, #12]
=======
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fee3 	bl	8007cf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f2e:	f000 f999 	bl	8007264 <xTaskResumeAll>
 8006f32:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050da:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <vTaskDelay+0x68>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	f3bf 8f6f 	isb	sy
=======
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f3a:	4b07      	ldr	r3, [pc, #28]	@ (8006f58 <vTaskDelay+0x68>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200002b0 	.word	0x200002b0
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vTaskSuspend>:
=======
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200003c8 	.word	0x200003c8
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vTaskSuspend>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
<<<<<<< Updated upstream
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005104:	f001 f860 	bl	80061c8 <vPortEnterCritical>
=======
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f64:	f001 f860 	bl	8008028 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
<<<<<<< Updated upstream
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <vTaskSuspend+0x18>
 800510e:	4b3d      	ldr	r3, [pc, #244]	@ (8005204 <vTaskSuspend+0x108>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	e000      	b.n	8005116 <vTaskSuspend+0x1a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60fb      	str	r3, [r7, #12]
=======
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <vTaskSuspend+0x18>
 8006f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007064 <vTaskSuspend+0x108>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	e000      	b.n	8006f76 <vTaskSuspend+0x1a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff f9aa 	bl	8004476 <uxListRemove>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4936      	ldr	r1, [pc, #216]	@ (8005208 <vTaskSuspend+0x10c>)
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vTaskSuspend+0x58>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	2201      	movs	r2, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	4b30      	ldr	r3, [pc, #192]	@ (800520c <vTaskSuspend+0x110>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4013      	ands	r3, r2
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <vTaskSuspend+0x110>)
 8005152:	6013      	str	r3, [r2, #0]
=======
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f9ab 	bl	80062d8 <uxListRemove>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d115      	bne.n	8006fb4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8c:	4936      	ldr	r1, [pc, #216]	@ (8007068 <vTaskSuspend+0x10c>)
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <vTaskSuspend+0x58>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	43da      	mvns	r2, r3
 8006faa:	4b30      	ldr	r3, [pc, #192]	@ (800706c <vTaskSuspend+0x110>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800706c <vTaskSuspend+0x110>)
 8006fb2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3318      	adds	r3, #24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f988 	bl	8004476 <uxListRemove>
=======
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3318      	adds	r3, #24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff f989 	bl	80062d8 <uxListRemove>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4828      	ldr	r0, [pc, #160]	@ (8005210 <vTaskSuspend+0x114>)
 800516e:	f7ff f925 	bl	80043bc <vListInsertEnd>
=======
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4828      	ldr	r0, [pc, #160]	@ (8007070 <vTaskSuspend+0x114>)
 8006fce:	f7ff f926 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< Updated upstream
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d103      	bne.n	8005186 <vTaskSuspend+0x8a>
=======
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d103      	bne.n	8006fe6 <vTaskSuspend+0x8a>
>>>>>>> Stashed changes
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< Updated upstream
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
=======
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
>>>>>>> Stashed changes
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005186:	f001 f851 	bl	800622c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <vTaskSuspend+0x118>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <vTaskSuspend+0xa2>
=======
 8006fe6:	f001 f851 	bl	800808c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006fea:	4b22      	ldr	r3, [pc, #136]	@ (8007074 <vTaskSuspend+0x118>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <vTaskSuspend+0xa2>
>>>>>>> Stashed changes
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005192:	f001 f819 	bl	80061c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005196:	f000 fc9d 	bl	8005ad4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800519a:	f001 f847 	bl	800622c <vPortExitCritical>
=======
 8006ff2:	f001 f819 	bl	8008028 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006ff6:	f000 fc9d 	bl	8007934 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006ffa:	f001 f847 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
<<<<<<< Updated upstream
 800519e:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <vTaskSuspend+0x108>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d128      	bne.n	80051fa <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80051a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <vTaskSuspend+0x118>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d018      	beq.n	80051e2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80051b0:	4b19      	ldr	r3, [pc, #100]	@ (8005218 <vTaskSuspend+0x11c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <vTaskSuspend+0xd4>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60bb      	str	r3, [r7, #8]
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80051d0:	4b12      	ldr	r3, [pc, #72]	@ (800521c <vTaskSuspend+0x120>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
=======
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <vTaskSuspend+0x108>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d128      	bne.n	800705a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8007008:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <vTaskSuspend+0x118>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007010:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <vTaskSuspend+0x11c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <vTaskSuspend+0xd4>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60bb      	str	r3, [r7, #8]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007030:	4b12      	ldr	r3, [pc, #72]	@ (800707c <vTaskSuspend+0x120>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 80051e0:	e00b      	b.n	80051fa <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80051e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <vTaskSuspend+0x114>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005220 <vTaskSuspend+0x124>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <vTaskSuspend+0x108>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
	}
 80051f4:	e001      	b.n	80051fa <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80051f6:	f000 fa5d 	bl	80056b4 <vTaskSwitchContext>
	}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000188 	.word	0x20000188
 8005208:	2000018c 	.word	0x2000018c
 800520c:	20000290 	.word	0x20000290
 8005210:	20000274 	.word	0x20000274
 8005214:	20000294 	.word	0x20000294
 8005218:	200002b0 	.word	0x200002b0
 800521c:	e000ed04 	.word	0xe000ed04
 8005220:	20000288 	.word	0x20000288

08005224 <prvTaskIsTaskSuspended>:
=======
 8007040:	e00b      	b.n	800705a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007042:	4b0b      	ldr	r3, [pc, #44]	@ (8007070 <vTaskSuspend+0x114>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b0e      	ldr	r3, [pc, #56]	@ (8007080 <vTaskSuspend+0x124>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d103      	bne.n	8007056 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800704e:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <vTaskSuspend+0x108>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
	}
 8007054:	e001      	b.n	800705a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8007056:	f000 fa5d 	bl	8007514 <vTaskSwitchContext>
	}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200002a0 	.word	0x200002a0
 8007068:	200002a4 	.word	0x200002a4
 800706c:	200003a8 	.word	0x200003a8
 8007070:	2000038c 	.word	0x2000038c
 8007074:	200003ac 	.word	0x200003ac
 8007078:	200003c8 	.word	0x200003c8
 800707c:	e000ed04 	.word	0xe000ed04
 8007080:	200003a0 	.word	0x200003a0

08007084 <prvTaskIsTaskSuspended>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
<<<<<<< Updated upstream
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	613b      	str	r3, [r7, #16]
=======
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
<<<<<<< Updated upstream
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <prvTaskIsTaskSuspended+0x5c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10a      	bne.n	8005272 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <prvTaskIsTaskSuspended+0x60>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d005      	beq.n	8005272 <prvTaskIsTaskSuspended+0x4e>
=======
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	60fb      	str	r3, [r7, #12]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <prvTaskIsTaskSuspended+0x5c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10a      	bne.n	80070d2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <prvTaskIsTaskSuspended+0x60>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d005      	beq.n	80070d2 <prvTaskIsTaskSuspended+0x4e>
>>>>>>> Stashed changes
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
<<<<<<< Updated upstream
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
=======
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80070ce:	2301      	movs	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005272:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005274:	4618      	mov	r0, r3
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000274 	.word	0x20000274
 8005284:	20000248 	.word	0x20000248

08005288 <vTaskResume>:
=======
 80070d2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	2000038c 	.word	0x2000038c
 80070e4:	20000360 	.word	0x20000360

080070e8 <vTaskResume>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
<<<<<<< Updated upstream
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <vTaskResume+0x2a>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60bb      	str	r3, [r7, #8]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <vTaskResume+0x26>
=======
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <vTaskResume+0x2a>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <vTaskResume+0x26>
>>>>>>> Stashed changes

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
<<<<<<< Updated upstream
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <vTaskResume+0xac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d037      	beq.n	800532c <vTaskResume+0xa4>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d034      	beq.n	800532c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80052c2:	f000 ff81 	bl	80061c8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ffac 	bl	8005224 <prvTaskIsTaskSuspended>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02a      	beq.n	8005328 <vTaskResume+0xa0>
=======
 8007112:	4b20      	ldr	r3, [pc, #128]	@ (8007194 <vTaskResume+0xac>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d037      	beq.n	800718c <vTaskResume+0xa4>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d034      	beq.n	800718c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007122:	f000 ff81 	bl	8008028 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff ffac 	bl	8007084 <prvTaskIsTaskSuspended>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d02a      	beq.n	8007188 <vTaskResume+0xa0>
>>>>>>> Stashed changes
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f8cd 	bl	8004476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	4b14      	ldr	r3, [pc, #80]	@ (8005338 <vTaskResume+0xb0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <vTaskResume+0xb0>)
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4a10      	ldr	r2, [pc, #64]	@ (800533c <vTaskResume+0xb4>)
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7ff f859 	bl	80043bc <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <vTaskResume+0xac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	429a      	cmp	r2, r3
 8005316:	d307      	bcc.n	8005328 <vTaskResume+0xa0>
=======
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3304      	adds	r3, #4
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff f8ce 	bl	80062d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	2201      	movs	r2, #1
 8007142:	409a      	lsls	r2, r3
 8007144:	4b14      	ldr	r3, [pc, #80]	@ (8007198 <vTaskResume+0xb0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4313      	orrs	r3, r2
 800714a:	4a13      	ldr	r2, [pc, #76]	@ (8007198 <vTaskResume+0xb0>)
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4a10      	ldr	r2, [pc, #64]	@ (800719c <vTaskResume+0xb4>)
 800715c:	441a      	add	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7ff f85a 	bl	800621e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716e:	4b09      	ldr	r3, [pc, #36]	@ (8007194 <vTaskResume+0xac>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	429a      	cmp	r2, r3
 8007176:	d307      	bcc.n	8007188 <vTaskResume+0xa0>
>>>>>>> Stashed changes
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <vTaskResume+0xb8>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
=======
 8007178:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <vTaskResume+0xb8>)
 800717a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005328:	f000 ff80 	bl	800622c <vPortExitCritical>
=======
 8007188:	f000 ff80 	bl	800808c <vPortExitCritical>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000188 	.word	0x20000188
 8005338:	20000290 	.word	0x20000290
 800533c:	2000018c 	.word	0x2000018c
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskStartScheduler>:
=======
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200002a0 	.word	0x200002a0
 8007198:	200003a8 	.word	0x200003a8
 800719c:	200002a4 	.word	0x200002a4
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
=======
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
<<<<<<< Updated upstream
 800534a:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <vTaskStartScheduler+0x84>)
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	2280      	movs	r2, #128	@ 0x80
 8005356:	491d      	ldr	r1, [pc, #116]	@ (80053cc <vTaskStartScheduler+0x88>)
 8005358:	481d      	ldr	r0, [pc, #116]	@ (80053d0 <vTaskStartScheduler+0x8c>)
 800535a:	f7ff fd4d 	bl	8004df8 <xTaskCreate>
 800535e:	60f8      	str	r0, [r7, #12]
=======
 80071aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <vTaskStartScheduler+0x84>)
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	2280      	movs	r2, #128	@ 0x80
 80071b6:	491d      	ldr	r1, [pc, #116]	@ (800722c <vTaskStartScheduler+0x88>)
 80071b8:	481d      	ldr	r0, [pc, #116]	@ (8007230 <vTaskStartScheduler+0x8c>)
 80071ba:	f7ff fd4d 	bl	8006c58 <xTaskCreate>
 80071be:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11b      	bne.n	800539e <vTaskStartScheduler+0x5a>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
}
 8005378:	bf00      	nop
=======
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d11b      	bne.n	80071fe <vTaskStartScheduler+0x5a>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
}
 80071d8:	bf00      	nop
>>>>>>> Stashed changes
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <vTaskStartScheduler+0x90>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	334c      	adds	r3, #76	@ 0x4c
 8005380:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <vTaskStartScheduler+0x94>)
 8005382:	6013      	str	r3, [r2, #0]
=======
 80071da:	4b16      	ldr	r3, [pc, #88]	@ (8007234 <vTaskStartScheduler+0x90>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	334c      	adds	r3, #76	@ 0x4c
 80071e0:	4a15      	ldr	r2, [pc, #84]	@ (8007238 <vTaskStartScheduler+0x94>)
 80071e2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 8005384:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <vTaskStartScheduler+0x98>)
 8005386:	f04f 32ff 	mov.w	r2, #4294967295
 800538a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800538c:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <vTaskStartScheduler+0x9c>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005392:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <vTaskStartScheduler+0xa0>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
=======
 80071e4:	4b15      	ldr	r3, [pc, #84]	@ (800723c <vTaskStartScheduler+0x98>)
 80071e6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ec:	4b14      	ldr	r3, [pc, #80]	@ (8007240 <vTaskStartScheduler+0x9c>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071f2:	4b14      	ldr	r3, [pc, #80]	@ (8007244 <vTaskStartScheduler+0xa0>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 8005398:	f000 fe72 	bl	8006080 <xPortStartScheduler>
=======
 80071f8:	f000 fe72 	bl	8007ee0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800539c:	e00f      	b.n	80053be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d10b      	bne.n	80053be <vTaskStartScheduler+0x7a>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <vTaskStartScheduler+0x76>
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200002ac 	.word	0x200002ac
 80053cc:	08006a2c 	.word	0x08006a2c
 80053d0:	0800599d 	.word	0x0800599d
 80053d4:	20000188 	.word	0x20000188
 80053d8:	20000020 	.word	0x20000020
 80053dc:	200002a8 	.word	0x200002a8
 80053e0:	20000294 	.word	0x20000294
 80053e4:	2000028c 	.word	0x2000028c

080053e8 <vTaskSuspendAll>:
=======
 80071fc:	e00f      	b.n	800721e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d10b      	bne.n	800721e <vTaskStartScheduler+0x7a>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	607b      	str	r3, [r7, #4]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <vTaskStartScheduler+0x76>
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	200003c4 	.word	0x200003c4
 800722c:	080088a0 	.word	0x080088a0
 8007230:	080077fd 	.word	0x080077fd
 8007234:	200002a0 	.word	0x200002a0
 8007238:	20000014 	.word	0x20000014
 800723c:	200003c0 	.word	0x200003c0
 8007240:	200003ac 	.word	0x200003ac
 8007244:	200003a4 	.word	0x200003a4

08007248 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
=======
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <vTaskSuspendAll+0x18>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a03      	ldr	r2, [pc, #12]	@ (8005400 <vTaskSuspendAll+0x18>)
 80053f4:	6013      	str	r3, [r2, #0]
=======
 800724c:	4b04      	ldr	r3, [pc, #16]	@ (8007260 <vTaskSuspendAll+0x18>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	4a03      	ldr	r2, [pc, #12]	@ (8007260 <vTaskSuspendAll+0x18>)
 8007254:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< Updated upstream
 80053f6:	bf00      	nop
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	200002b0 	.word	0x200002b0

08005404 <xTaskResumeAll>:
=======
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200003c8 	.word	0x200003c8

08007264 <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
=======
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 8005412:	4b42      	ldr	r3, [pc, #264]	@ (800551c <xTaskResumeAll+0x118>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <xTaskResumeAll+0x2e>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	603b      	str	r3, [r7, #0]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <xTaskResumeAll+0x2a>
=======
 8007272:	4b42      	ldr	r3, [pc, #264]	@ (800737c <xTaskResumeAll+0x118>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <xTaskResumeAll+0x2e>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	603b      	str	r3, [r7, #0]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005432:	f000 fec9 	bl	80061c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005436:	4b39      	ldr	r3, [pc, #228]	@ (800551c <xTaskResumeAll+0x118>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a37      	ldr	r2, [pc, #220]	@ (800551c <xTaskResumeAll+0x118>)
 800543e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005440:	4b36      	ldr	r3, [pc, #216]	@ (800551c <xTaskResumeAll+0x118>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d161      	bne.n	800550c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005448:	4b35      	ldr	r3, [pc, #212]	@ (8005520 <xTaskResumeAll+0x11c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d05d      	beq.n	800550c <xTaskResumeAll+0x108>
=======
 8007292:	f000 fec9 	bl	8008028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007296:	4b39      	ldr	r3, [pc, #228]	@ (800737c <xTaskResumeAll+0x118>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3b01      	subs	r3, #1
 800729c:	4a37      	ldr	r2, [pc, #220]	@ (800737c <xTaskResumeAll+0x118>)
 800729e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a0:	4b36      	ldr	r3, [pc, #216]	@ (800737c <xTaskResumeAll+0x118>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d161      	bne.n	800736c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072a8:	4b35      	ldr	r3, [pc, #212]	@ (8007380 <xTaskResumeAll+0x11c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d05d      	beq.n	800736c <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 8005450:	e02e      	b.n	80054b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005452:	4b34      	ldr	r3, [pc, #208]	@ (8005524 <xTaskResumeAll+0x120>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3318      	adds	r3, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff f809 	bl	8004476 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f804 	bl	8004476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	2201      	movs	r2, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	4b2c      	ldr	r3, [pc, #176]	@ (8005528 <xTaskResumeAll+0x124>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	4a2a      	ldr	r2, [pc, #168]	@ (8005528 <xTaskResumeAll+0x124>)
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <xTaskResumeAll+0x128>)
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fe ff90 	bl	80043bc <vListInsertEnd>
=======
 80072b0:	e02e      	b.n	8007310 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b34      	ldr	r3, [pc, #208]	@ (8007384 <xTaskResumeAll+0x120>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3318      	adds	r3, #24
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f80a 	bl	80062d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff f805 	bl	80062d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	2201      	movs	r2, #1
 80072d4:	409a      	lsls	r2, r3
 80072d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007388 <xTaskResumeAll+0x124>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4313      	orrs	r3, r2
 80072dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007388 <xTaskResumeAll+0x124>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4a27      	ldr	r2, [pc, #156]	@ (800738c <xTaskResumeAll+0x128>)
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe ff91 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <xTaskResumeAll+0x12c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054aa:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <xTaskResumeAll+0x130>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <xTaskResumeAll+0x120>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1cc      	bne.n	8005452 <xTaskResumeAll+0x4e>
=======
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007300:	4b23      	ldr	r3, [pc, #140]	@ (8007390 <xTaskResumeAll+0x12c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800730a:	4b22      	ldr	r3, [pc, #136]	@ (8007394 <xTaskResumeAll+0x130>)
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007310:	4b1c      	ldr	r3, [pc, #112]	@ (8007384 <xTaskResumeAll+0x120>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1cc      	bne.n	80072b2 <xTaskResumeAll+0x4e>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <xTaskResumeAll+0xbe>
=======
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <xTaskResumeAll+0xbe>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 80054be:	f000 fb09 	bl	8005ad4 <prvResetNextTaskUnblockTime>
=======
 800731e:	f000 fb09 	bl	8007934 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <xTaskResumeAll+0x134>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <xTaskResumeAll+0xec>
=======
 8007322:	4b1d      	ldr	r3, [pc, #116]	@ (8007398 <xTaskResumeAll+0x134>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d010      	beq.n	8007350 <xTaskResumeAll+0xec>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 80054ce:	f000 f837 	bl	8005540 <xTaskIncrementTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054d8:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <xTaskResumeAll+0x130>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
=======
 800732e:	f000 f837 	bl	80073a0 <xTaskIncrementTick>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007338:	4b16      	ldr	r3, [pc, #88]	@ (8007394 <xTaskResumeAll+0x130>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< Updated upstream
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f1      	bne.n	80054ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <xTaskResumeAll+0x134>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
=======
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3b01      	subs	r3, #1
 8007342:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f1      	bne.n	800732e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800734a:	4b13      	ldr	r3, [pc, #76]	@ (8007398 <xTaskResumeAll+0x134>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <xTaskResumeAll+0x130>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <xTaskResumeAll+0x108>
=======
 8007350:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <xTaskResumeAll+0x130>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 80054f8:	2301      	movs	r3, #1
 80054fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054fc:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <xTaskResumeAll+0x138>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
=======
 8007358:	2301      	movs	r3, #1
 800735a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800735c:	4b0f      	ldr	r3, [pc, #60]	@ (800739c <xTaskResumeAll+0x138>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800550c:	f000 fe8e 	bl	800622c <vPortExitCritical>

	return xAlreadyYielded;
 8005510:	68bb      	ldr	r3, [r7, #8]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200002b0 	.word	0x200002b0
 8005520:	20000288 	.word	0x20000288
 8005524:	20000248 	.word	0x20000248
 8005528:	20000290 	.word	0x20000290
 800552c:	2000018c 	.word	0x2000018c
 8005530:	20000188 	.word	0x20000188
 8005534:	2000029c 	.word	0x2000029c
 8005538:	20000298 	.word	0x20000298
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <xTaskIncrementTick>:
=======
 800736c:	f000 fe8e 	bl	800808c <vPortExitCritical>

	return xAlreadyYielded;
 8007370:	68bb      	ldr	r3, [r7, #8]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200003c8 	.word	0x200003c8
 8007380:	200003a0 	.word	0x200003a0
 8007384:	20000360 	.word	0x20000360
 8007388:	200003a8 	.word	0x200003a8
 800738c:	200002a4 	.word	0x200002a4
 8007390:	200002a0 	.word	0x200002a0
 8007394:	200003b4 	.word	0x200003b4
 8007398:	200003b0 	.word	0x200003b0
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
=======
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800554a:	4b4f      	ldr	r3, [pc, #316]	@ (8005688 <xTaskIncrementTick+0x148>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 808f 	bne.w	8005672 <xTaskIncrementTick+0x132>
=======
 80073aa:	4b4f      	ldr	r3, [pc, #316]	@ (80074e8 <xTaskIncrementTick+0x148>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 808f 	bne.w	80074d2 <xTaskIncrementTick+0x132>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 8005554:	4b4d      	ldr	r3, [pc, #308]	@ (800568c <xTaskIncrementTick+0x14c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
=======
 80073b4:	4b4d      	ldr	r3, [pc, #308]	@ (80074ec <xTaskIncrementTick+0x14c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800555c:	4a4b      	ldr	r2, [pc, #300]	@ (800568c <xTaskIncrementTick+0x14c>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d121      	bne.n	80055ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005568:	4b49      	ldr	r3, [pc, #292]	@ (8005690 <xTaskIncrementTick+0x150>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xTaskIncrementTick+0x46>
 800558a:	4b41      	ldr	r3, [pc, #260]	@ (8005690 <xTaskIncrementTick+0x150>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	4b40      	ldr	r3, [pc, #256]	@ (8005694 <xTaskIncrementTick+0x154>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3e      	ldr	r2, [pc, #248]	@ (8005690 <xTaskIncrementTick+0x150>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4a3e      	ldr	r2, [pc, #248]	@ (8005694 <xTaskIncrementTick+0x154>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b3e      	ldr	r3, [pc, #248]	@ (8005698 <xTaskIncrementTick+0x158>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005698 <xTaskIncrementTick+0x158>)
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	f000 fa94 	bl	8005ad4 <prvResetNextTaskUnblockTime>
=======
 80073bc:	4a4b      	ldr	r2, [pc, #300]	@ (80074ec <xTaskIncrementTick+0x14c>)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d121      	bne.n	800740c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80073c8:	4b49      	ldr	r3, [pc, #292]	@ (80074f0 <xTaskIncrementTick+0x150>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xTaskIncrementTick+0x46>
 80073ea:	4b41      	ldr	r3, [pc, #260]	@ (80074f0 <xTaskIncrementTick+0x150>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4b40      	ldr	r3, [pc, #256]	@ (80074f4 <xTaskIncrementTick+0x154>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a3e      	ldr	r2, [pc, #248]	@ (80074f0 <xTaskIncrementTick+0x150>)
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	4a3e      	ldr	r2, [pc, #248]	@ (80074f4 <xTaskIncrementTick+0x154>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	4b3e      	ldr	r3, [pc, #248]	@ (80074f8 <xTaskIncrementTick+0x158>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	4a3c      	ldr	r2, [pc, #240]	@ (80074f8 <xTaskIncrementTick+0x158>)
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	f000 fa94 	bl	8007934 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 80055ac:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d348      	bcc.n	8005648 <xTaskIncrementTick+0x108>
=======
 800740c:	4b3b      	ldr	r3, [pc, #236]	@ (80074fc <xTaskIncrementTick+0x15c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d348      	bcc.n	80074a8 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 80055b6:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <xTaskIncrementTick+0x150>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <xTaskIncrementTick+0x8a>
=======
 8007416:	4b36      	ldr	r3, [pc, #216]	@ (80074f0 <xTaskIncrementTick+0x150>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <xTaskIncrementTick+0x8a>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 80055c0:	4b36      	ldr	r3, [pc, #216]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	601a      	str	r2, [r3, #0]
					break;
 80055c8:	e03e      	b.n	8005648 <xTaskIncrementTick+0x108>
=======
 8007420:	4b36      	ldr	r3, [pc, #216]	@ (80074fc <xTaskIncrementTick+0x15c>)
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	601a      	str	r2, [r3, #0]
					break;
 8007428:	e03e      	b.n	80074a8 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <xTaskIncrementTick+0x150>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d203      	bcs.n	80055ea <xTaskIncrementTick+0xaa>
=======
 800742a:	4b31      	ldr	r3, [pc, #196]	@ (80074f0 <xTaskIncrementTick+0x150>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <xTaskIncrementTick+0xaa>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 80055e2:	4a2e      	ldr	r2, [pc, #184]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e8:	e02e      	b.n	8005648 <xTaskIncrementTick+0x108>
=======
 8007442:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <xTaskIncrementTick+0x15c>)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007448:	e02e      	b.n	80074a8 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe ff41 	bl	8004476 <uxListRemove>
=======
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	3304      	adds	r3, #4
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe ff42 	bl	80062d8 <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3318      	adds	r3, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ff38 	bl	8004476 <uxListRemove>
=======
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3318      	adds	r3, #24
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe ff39 	bl	80062d8 <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <xTaskIncrementTick+0x160>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <xTaskIncrementTick+0x160>)
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a1f      	ldr	r2, [pc, #124]	@ (80056a4 <xTaskIncrementTick+0x164>)
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3304      	adds	r3, #4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fe fec4 	bl	80043bc <vListInsertEnd>
=======
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	2201      	movs	r2, #1
 800746c:	409a      	lsls	r2, r3
 800746e:	4b24      	ldr	r3, [pc, #144]	@ (8007500 <xTaskIncrementTick+0x160>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	4a22      	ldr	r2, [pc, #136]	@ (8007500 <xTaskIncrementTick+0x160>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <xTaskIncrementTick+0x164>)
 8007486:	441a      	add	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe fec5 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <xTaskIncrementTick+0x168>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d3b9      	bcc.n	80055b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	e7b6      	b.n	80055b6 <xTaskIncrementTick+0x76>
=======
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007498:	4b1b      	ldr	r3, [pc, #108]	@ (8007508 <xTaskIncrementTick+0x168>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	429a      	cmp	r2, r3
 80074a0:	d3b9      	bcc.n	8007416 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074a6:	e7b6      	b.n	8007416 <xTaskIncrementTick+0x76>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 8005648:	4b17      	ldr	r3, [pc, #92]	@ (80056a8 <xTaskIncrementTick+0x168>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	4915      	ldr	r1, [pc, #84]	@ (80056a4 <xTaskIncrementTick+0x164>)
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d901      	bls.n	8005664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
=======
 80074a8:	4b17      	ldr	r3, [pc, #92]	@ (8007508 <xTaskIncrementTick+0x168>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	4915      	ldr	r1, [pc, #84]	@ (8007504 <xTaskIncrementTick+0x164>)
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d901      	bls.n	80074c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <xTaskIncrementTick+0x16c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e004      	b.n	800567c <xTaskIncrementTick+0x13c>
=======
 80074c4:	4b11      	ldr	r3, [pc, #68]	@ (800750c <xTaskIncrementTick+0x16c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e004      	b.n	80074dc <xTaskIncrementTick+0x13c>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< Updated upstream
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <xTaskIncrementTick+0x170>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a0d      	ldr	r2, [pc, #52]	@ (80056b0 <xTaskIncrementTick+0x170>)
 800567a:	6013      	str	r3, [r2, #0]
=======
 80074d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007510 <xTaskIncrementTick+0x170>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007510 <xTaskIncrementTick+0x170>)
 80074da:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< Updated upstream
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200002b0 	.word	0x200002b0
 800568c:	2000028c 	.word	0x2000028c
 8005690:	20000240 	.word	0x20000240
 8005694:	20000244 	.word	0x20000244
 8005698:	200002a0 	.word	0x200002a0
 800569c:	200002a8 	.word	0x200002a8
 80056a0:	20000290 	.word	0x20000290
 80056a4:	2000018c 	.word	0x2000018c
 80056a8:	20000188 	.word	0x20000188
 80056ac:	2000029c 	.word	0x2000029c
 80056b0:	20000298 	.word	0x20000298

080056b4 <vTaskSwitchContext>:
=======
 80074dc:	697b      	ldr	r3, [r7, #20]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200003c8 	.word	0x200003c8
 80074ec:	200003a4 	.word	0x200003a4
 80074f0:	20000358 	.word	0x20000358
 80074f4:	2000035c 	.word	0x2000035c
 80074f8:	200003b8 	.word	0x200003b8
 80074fc:	200003c0 	.word	0x200003c0
 8007500:	200003a8 	.word	0x200003a8
 8007504:	200002a4 	.word	0x200002a4
 8007508:	200002a0 	.word	0x200002a0
 800750c:	200003b4 	.word	0x200003b4
 8007510:	200003b0 	.word	0x200003b0

08007514 <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <vTaskSwitchContext+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <vTaskSwitchContext+0x16>
=======
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800751a:	4b2a      	ldr	r3, [pc, #168]	@ (80075c4 <vTaskSwitchContext+0xb0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 80056c2:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <vTaskSwitchContext+0xb4>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
=======
 8007522:	4b29      	ldr	r3, [pc, #164]	@ (80075c8 <vTaskSwitchContext+0xb4>)
 8007524:	2201      	movs	r2, #1
 8007526:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 80056c8:	e045      	b.n	8005756 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <vTaskSwitchContext+0xb4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	4b26      	ldr	r3, [pc, #152]	@ (800576c <vTaskSwitchContext+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	f1c3 031f 	rsb	r3, r3, #31
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	4922      	ldr	r1, [pc, #136]	@ (8005770 <vTaskSwitchContext+0xbc>)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <vTaskSwitchContext+0x5e>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vTaskSwitchContext+0x5a>
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a14      	ldr	r2, [pc, #80]	@ (8005770 <vTaskSwitchContext+0xbc>)
 800571e:	4413      	add	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3308      	adds	r3, #8
 8005734:	429a      	cmp	r2, r3
 8005736:	d104      	bne.n	8005742 <vTaskSwitchContext+0x8e>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a0a      	ldr	r2, [pc, #40]	@ (8005774 <vTaskSwitchContext+0xc0>)
 800574a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <vTaskSwitchContext+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	334c      	adds	r3, #76	@ 0x4c
 8005752:	4a09      	ldr	r2, [pc, #36]	@ (8005778 <vTaskSwitchContext+0xc4>)
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200002b0 	.word	0x200002b0
 8005768:	2000029c 	.word	0x2000029c
 800576c:	20000290 	.word	0x20000290
 8005770:	2000018c 	.word	0x2000018c
 8005774:	20000188 	.word	0x20000188
 8005778:	20000020 	.word	0x20000020

0800577c <vTaskPlaceOnEventList>:
=======
 8007528:	e045      	b.n	80075b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800752a:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <vTaskSwitchContext+0xb4>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007530:	4b26      	ldr	r3, [pc, #152]	@ (80075cc <vTaskSwitchContext+0xb8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	fab3 f383 	clz	r3, r3
 800753c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	f1c3 031f 	rsb	r3, r3, #31
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	4922      	ldr	r1, [pc, #136]	@ (80075d0 <vTaskSwitchContext+0xbc>)
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <vTaskSwitchContext+0x5e>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	607b      	str	r3, [r7, #4]
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <vTaskSwitchContext+0x5a>
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <vTaskSwitchContext+0xbc>)
 800757e:	4413      	add	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3308      	adds	r3, #8
 8007594:	429a      	cmp	r2, r3
 8007596:	d104      	bne.n	80075a2 <vTaskSwitchContext+0x8e>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a0a      	ldr	r2, [pc, #40]	@ (80075d4 <vTaskSwitchContext+0xc0>)
 80075aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075ac:	4b09      	ldr	r3, [pc, #36]	@ (80075d4 <vTaskSwitchContext+0xc0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	334c      	adds	r3, #76	@ 0x4c
 80075b2:	4a09      	ldr	r2, [pc, #36]	@ (80075d8 <vTaskSwitchContext+0xc4>)
 80075b4:	6013      	str	r3, [r2, #0]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	200003c8 	.word	0x200003c8
 80075c8:	200003b4 	.word	0x200003b4
 80075cc:	200003a8 	.word	0x200003a8
 80075d0:	200002a4 	.word	0x200002a4
 80075d4:	200002a0 	.word	0x200002a0
 80075d8:	20000014 	.word	0x20000014

080075dc <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <vTaskPlaceOnEventList+0x24>
=======
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <vTaskPlaceOnEventList+0x48>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3318      	adds	r3, #24
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fe fe29 	bl	8004404 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b2:	2101      	movs	r1, #1
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f000 fb6d 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000188 	.word	0x20000188

080057c8 <xTaskRemoveFromEventList>:
=======
 8007604:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <vTaskPlaceOnEventList+0x48>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3318      	adds	r3, #24
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7fe fe2a 	bl	8006266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007612:	2101      	movs	r1, #1
 8007614:	6838      	ldr	r0, [r7, #0]
 8007616:	f000 fb6d 	bl	8007cf4 <prvAddCurrentTaskToDelayedList>
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200002a0 	.word	0x200002a0

08007628 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
=======
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fe3b 	bl	8004476 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <xTaskRemoveFromEventList+0xb0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11c      	bne.n	8005842 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fe32 	bl	8004476 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	2201      	movs	r2, #1
 8005818:	409a      	lsls	r2, r3
 800581a:	4b18      	ldr	r3, [pc, #96]	@ (800587c <xTaskRemoveFromEventList+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	4a16      	ldr	r2, [pc, #88]	@ (800587c <xTaskRemoveFromEventList+0xb4>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <xTaskRemoveFromEventList+0xb8>)
 8005832:	441a      	add	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fdbe 	bl	80043bc <vListInsertEnd>
 8005840:	e005      	b.n	800584e <xTaskRemoveFromEventList+0x86>
=======
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10b      	bne.n	8007656 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	e7fd      	b.n	8007652 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3318      	adds	r3, #24
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fe3c 	bl	80062d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007660:	4b1d      	ldr	r3, [pc, #116]	@ (80076d8 <xTaskRemoveFromEventList+0xb0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11c      	bne.n	80076a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fe33 	bl	80062d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	2201      	movs	r2, #1
 8007678:	409a      	lsls	r2, r3
 800767a:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <xTaskRemoveFromEventList+0xb4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4313      	orrs	r3, r2
 8007680:	4a16      	ldr	r2, [pc, #88]	@ (80076dc <xTaskRemoveFromEventList+0xb4>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a13      	ldr	r2, [pc, #76]	@ (80076e0 <xTaskRemoveFromEventList+0xb8>)
 8007692:	441a      	add	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe fdbf 	bl	800621e <vListInsertEnd>
 80076a0:	e005      	b.n	80076ae <xTaskRemoveFromEventList+0x86>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3318      	adds	r3, #24
 8005846:	4619      	mov	r1, r3
 8005848:	480e      	ldr	r0, [pc, #56]	@ (8005884 <xTaskRemoveFromEventList+0xbc>)
 800584a:	f7fe fdb7 	bl	80043bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <xTaskRemoveFromEventList+0xc0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	429a      	cmp	r2, r3
 800585a:	d905      	bls.n	8005868 <xTaskRemoveFromEventList+0xa0>
=======
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4619      	mov	r1, r3
 80076a8:	480e      	ldr	r0, [pc, #56]	@ (80076e4 <xTaskRemoveFromEventList+0xbc>)
 80076aa:	f7fe fdb8 	bl	800621e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <xTaskRemoveFromEventList+0xc0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d905      	bls.n	80076c8 <xTaskRemoveFromEventList+0xa0>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
=======
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 8005860:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <xTaskRemoveFromEventList+0xc4>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e001      	b.n	800586c <xTaskRemoveFromEventList+0xa4>
=======
 80076c0:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <xTaskRemoveFromEventList+0xc4>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e001      	b.n	80076cc <xTaskRemoveFromEventList+0xa4>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200002b0 	.word	0x200002b0
 800587c:	20000290 	.word	0x20000290
 8005880:	2000018c 	.word	0x2000018c
 8005884:	20000248 	.word	0x20000248
 8005888:	20000188 	.word	0x20000188
 800588c:	2000029c 	.word	0x2000029c

08005890 <vTaskInternalSetTimeOutState>:
=======
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076cc:	697b      	ldr	r3, [r7, #20]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200003c8 	.word	0x200003c8
 80076dc:	200003a8 	.word	0x200003a8
 80076e0:	200002a4 	.word	0x200002a4
 80076e4:	20000360 	.word	0x20000360
 80076e8:	200002a0 	.word	0x200002a0
 80076ec:	200003b4 	.word	0x200003b4

080076f0 <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005898:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <vTaskInternalSetTimeOutState+0x24>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058a0:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <vTaskInternalSetTimeOutState+0x28>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	200002a0 	.word	0x200002a0
 80058b8:	2000028c 	.word	0x2000028c

080058bc <xTaskCheckForTimeOut>:
=======
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <vTaskInternalSetTimeOutState+0x24>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007700:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <vTaskInternalSetTimeOutState+0x28>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	200003b8 	.word	0x200003b8
 8007718:	200003a4 	.word	0x200003a4

0800771c <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	613b      	str	r3, [r7, #16]
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	e7fd      	b.n	80058e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005902:	f000 fc61 	bl	80061c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005906:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <xTaskCheckForTimeOut+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
=======
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	613b      	str	r3, [r7, #16]
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	e7fd      	b.n	8007740 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60fb      	str	r3, [r7, #12]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007762:	f000 fc61 	bl	8008028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007766:	4b1d      	ldr	r3, [pc, #116]	@ (80077dc <xTaskCheckForTimeOut+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d102      	bne.n	8005926 <xTaskCheckForTimeOut+0x6a>
=======
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d102      	bne.n	8007786 <xTaskCheckForTimeOut+0x6a>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e023      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
=======
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]
 8007784:	e023      	b.n	80077ce <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <xTaskCheckForTimeOut+0xc4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d007      	beq.n	8005942 <xTaskCheckForTimeOut+0x86>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <xTaskCheckForTimeOut+0x86>
=======
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <xTaskCheckForTimeOut+0xc4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d007      	beq.n	80077a2 <xTaskCheckForTimeOut+0x86>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	429a      	cmp	r2, r3
 800779a:	d302      	bcc.n	80077a2 <xTaskCheckForTimeOut+0x86>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800593c:	2301      	movs	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e015      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	429a      	cmp	r2, r3
 800594a:	d20b      	bcs.n	8005964 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff99 	bl	8005890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e004      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
=======
 800779c:	2301      	movs	r3, #1
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	e015      	b.n	80077ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d20b      	bcs.n	80077c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1ad2      	subs	r2, r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff99 	bl	80076f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	e004      	b.n	80077ce <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f000 fc5d 	bl	800622c <vPortExitCritical>

	return xReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2000028c 	.word	0x2000028c
 8005980:	200002a0 	.word	0x200002a0

08005984 <vTaskMissedYield>:
=======
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077ce:	f000 fc5d 	bl	800808c <vPortExitCritical>

	return xReturn;
 80077d2:	69fb      	ldr	r3, [r7, #28]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	200003a4 	.word	0x200003a4
 80077e0:	200003b8 	.word	0x200003b8

080077e4 <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <vTaskMissedYield+0x14>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	2000029c 	.word	0x2000029c

0800599c <prvIdleTask>:
=======
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077e8:	4b03      	ldr	r3, [pc, #12]	@ (80077f8 <vTaskMissedYield+0x14>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	200003b4 	.word	0x200003b4

080077fc <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
=======
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 80059a4:	f000 f852 	bl	8005a4c <prvCheckTasksWaitingTermination>
=======
 8007804:	f000 f852 	bl	80078ac <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <prvIdleTask+0x28>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d9f9      	bls.n	80059a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <prvIdleTask+0x2c>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059c0:	e7f0      	b.n	80059a4 <prvIdleTask+0x8>
 80059c2:	bf00      	nop
 80059c4:	2000018c 	.word	0x2000018c
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <prvInitialiseTaskLists>:
=======
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <prvIdleTask+0x28>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d9f9      	bls.n	8007804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <prvIdleTask+0x2c>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007820:	e7f0      	b.n	8007804 <prvIdleTask+0x8>
 8007822:	bf00      	nop
 8007824:	200002a4 	.word	0x200002a4
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	e00c      	b.n	80059f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <prvInitialiseTaskLists+0x60>)
 80059e4:	4413      	add	r3, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fcbb 	bl	8004362 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d9ef      	bls.n	80059d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059f8:	480d      	ldr	r0, [pc, #52]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 80059fa:	f7fe fcb2 	bl	8004362 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059fe:	480d      	ldr	r0, [pc, #52]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a00:	f7fe fcaf 	bl	8004362 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a04:	480c      	ldr	r0, [pc, #48]	@ (8005a38 <prvInitialiseTaskLists+0x6c>)
 8005a06:	f7fe fcac 	bl	8004362 <vListInitialise>
=======
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	e00c      	b.n	8007852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4a12      	ldr	r2, [pc, #72]	@ (800788c <prvInitialiseTaskLists+0x60>)
 8007844:	4413      	add	r3, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fcbc 	bl	80061c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3301      	adds	r3, #1
 8007850:	607b      	str	r3, [r7, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b06      	cmp	r3, #6
 8007856:	d9ef      	bls.n	8007838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007858:	480d      	ldr	r0, [pc, #52]	@ (8007890 <prvInitialiseTaskLists+0x64>)
 800785a:	f7fe fcb3 	bl	80061c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800785e:	480d      	ldr	r0, [pc, #52]	@ (8007894 <prvInitialiseTaskLists+0x68>)
 8007860:	f7fe fcb0 	bl	80061c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007864:	480c      	ldr	r0, [pc, #48]	@ (8007898 <prvInitialiseTaskLists+0x6c>)
 8007866:	f7fe fcad 	bl	80061c4 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 8005a0a:	480c      	ldr	r0, [pc, #48]	@ (8005a3c <prvInitialiseTaskLists+0x70>)
 8005a0c:	f7fe fca9 	bl	8004362 <vListInitialise>
=======
 800786a:	480c      	ldr	r0, [pc, #48]	@ (800789c <prvInitialiseTaskLists+0x70>)
 800786c:	f7fe fcaa 	bl	80061c4 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 8005a10:	480b      	ldr	r0, [pc, #44]	@ (8005a40 <prvInitialiseTaskLists+0x74>)
 8005a12:	f7fe fca6 	bl	8004362 <vListInitialise>
=======
 8007870:	480b      	ldr	r0, [pc, #44]	@ (80078a0 <prvInitialiseTaskLists+0x74>)
 8007872:	f7fe fca7 	bl	80061c4 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 8005a16:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <prvInitialiseTaskLists+0x78>)
 8005a18:	4a05      	ldr	r2, [pc, #20]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 8005a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <prvInitialiseTaskLists+0x7c>)
 8005a1e:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a20:	601a      	str	r2, [r3, #0]
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000018c 	.word	0x2000018c
 8005a30:	20000218 	.word	0x20000218
 8005a34:	2000022c 	.word	0x2000022c
 8005a38:	20000248 	.word	0x20000248
 8005a3c:	2000025c 	.word	0x2000025c
 8005a40:	20000274 	.word	0x20000274
 8005a44:	20000240 	.word	0x20000240
 8005a48:	20000244 	.word	0x20000244

08005a4c <prvCheckTasksWaitingTermination>:
=======
 8007876:	4b0b      	ldr	r3, [pc, #44]	@ (80078a4 <prvInitialiseTaskLists+0x78>)
 8007878:	4a05      	ldr	r2, [pc, #20]	@ (8007890 <prvInitialiseTaskLists+0x64>)
 800787a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800787c:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <prvInitialiseTaskLists+0x7c>)
 800787e:	4a05      	ldr	r2, [pc, #20]	@ (8007894 <prvInitialiseTaskLists+0x68>)
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200002a4 	.word	0x200002a4
 8007890:	20000330 	.word	0x20000330
 8007894:	20000344 	.word	0x20000344
 8007898:	20000360 	.word	0x20000360
 800789c:	20000374 	.word	0x20000374
 80078a0:	2000038c 	.word	0x2000038c
 80078a4:	20000358 	.word	0x20000358
 80078a8:	2000035c 	.word	0x2000035c

080078ac <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
=======
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 8005a52:	e019      	b.n	8005a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a54:	f000 fbb8 	bl	80061c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a58:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <prvCheckTasksWaitingTermination+0x50>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fd06 	bl	8004476 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a7e:	f000 fbd5 	bl	800622c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f810 	bl	8005aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e1      	bne.n	8005a54 <prvCheckTasksWaitingTermination+0x8>
=======
 80078b2:	e019      	b.n	80078e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078b4:	f000 fbb8 	bl	8008028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b8:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <prvCheckTasksWaitingTermination+0x50>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fd07 	bl	80062d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <prvCheckTasksWaitingTermination+0x54>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007900 <prvCheckTasksWaitingTermination+0x54>)
 80078d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4a0a      	ldr	r2, [pc, #40]	@ (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078de:	f000 fbd5 	bl	800808c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f810 	bl	8007908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078e8:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <prvCheckTasksWaitingTermination+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e1      	bne.n	80078b4 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000025c 	.word	0x2000025c
 8005aa0:	20000288 	.word	0x20000288
 8005aa4:	20000270 	.word	0x20000270

08005aa8 <prvDeleteTCB>:
=======
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000374 	.word	0x20000374
 8007900:	200003a0 	.word	0x200003a0
 8007904:	20000388 	.word	0x20000388

08007908 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
=======
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	334c      	adds	r3, #76	@ 0x4c
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fe9f 	bl	80067f8 <_reclaim_reent>
=======
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	334c      	adds	r3, #76	@ 0x4c
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fe9f 	bl	8008658 <_reclaim_reent>
>>>>>>> Stashed changes

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd72 	bl	80065a8 <vPortFree>
			vPortFree( pxTCB );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fd6f 	bl	80065a8 <vPortFree>
=======
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fd72 	bl	8008408 <vPortFree>
			vPortFree( pxTCB );
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fd6f 	bl	8008408 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <prvResetNextTaskUnblockTime>:
=======
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <prvResetNextTaskUnblockTime+0x38>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <prvResetNextTaskUnblockTime+0x1a>
=======
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793a:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <prvResetNextTaskUnblockTime+0x38>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <prvResetNextTaskUnblockTime+0x3c>)
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	601a      	str	r2, [r3, #0]
=======
 8007944:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <prvResetNextTaskUnblockTime+0x3c>)
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 8005aec:	e008      	b.n	8005b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aee:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <prvResetNextTaskUnblockTime+0x38>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a04      	ldr	r2, [pc, #16]	@ (8005b10 <prvResetNextTaskUnblockTime+0x3c>)
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	20000240 	.word	0x20000240
 8005b10:	200002a8 	.word	0x200002a8

08005b14 <xTaskGetSchedulerState>:
=======
 800794c:	e008      	b.n	8007960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794e:	4b07      	ldr	r3, [pc, #28]	@ (800796c <prvResetNextTaskUnblockTime+0x38>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	4a04      	ldr	r2, [pc, #16]	@ (8007970 <prvResetNextTaskUnblockTime+0x3c>)
 800795e:	6013      	str	r3, [r2, #0]
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000358 	.word	0x20000358
 8007970:	200003c0 	.word	0x200003c0

08007974 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <xTaskGetSchedulerState+0x34>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b22:	2301      	movs	r3, #1
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e008      	b.n	8005b3a <xTaskGetSchedulerState+0x26>
=======
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800797a:	4b0b      	ldr	r3, [pc, #44]	@ (80079a8 <xTaskGetSchedulerState+0x34>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d102      	bne.n	8007988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007982:	2301      	movs	r3, #1
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	e008      	b.n	800799a <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 8005b28:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <xTaskGetSchedulerState+0x38>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b30:	2302      	movs	r3, #2
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e001      	b.n	8005b3a <xTaskGetSchedulerState+0x26>
=======
 8007988:	4b08      	ldr	r3, [pc, #32]	@ (80079ac <xTaskGetSchedulerState+0x38>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007990:	2302      	movs	r3, #2
 8007992:	607b      	str	r3, [r7, #4]
 8007994:	e001      	b.n	800799a <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
=======
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 8005b3a:	687b      	ldr	r3, [r7, #4]
	}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000294 	.word	0x20000294
 8005b4c:	200002b0 	.word	0x200002b0

08005b50 <xTaskPriorityInherit>:
=======
 800799a:	687b      	ldr	r3, [r7, #4]
	}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	200003ac 	.word	0x200003ac
 80079ac:	200003c8 	.word	0x200003c8

080079b0 <xTaskPriorityInherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
=======
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< Updated upstream
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d05e      	beq.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d05e      	beq.n	8007a84 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d24e      	bcs.n	8005c12 <xTaskPriorityInherit+0xc2>
=======
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <xTaskPriorityInherit+0xe0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d24e      	bcs.n	8007a72 <xTaskPriorityInherit+0xc2>
>>>>>>> Stashed changes
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	db06      	blt.n	8005b8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	f1c3 0207 	rsb	r2, r3, #7
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	619a      	str	r2, [r3, #24]
=======
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db06      	blt.n	80079ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007a90 <xTaskPriorityInherit+0xe0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	f1c3 0207 	rsb	r2, r3, #7
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6959      	ldr	r1, [r3, #20]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <xTaskPriorityInherit+0xe4>)
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	d12f      	bne.n	8005c02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fc65 	bl	8004476 <uxListRemove>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xTaskPriorityInherit+0x78>
=======
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6959      	ldr	r1, [r3, #20]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a26      	ldr	r2, [pc, #152]	@ (8007a94 <xTaskPriorityInherit+0xe4>)
 80079fc:	4413      	add	r3, r2
 80079fe:	4299      	cmp	r1, r3
 8007a00:	d12f      	bne.n	8007a62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fc66 	bl	80062d8 <uxListRemove>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xTaskPriorityInherit+0x78>
>>>>>>> Stashed changes
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
<<<<<<< Updated upstream
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bc6:	6013      	str	r3, [r2, #0]
=======
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	2201      	movs	r2, #1
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43da      	mvns	r2, r3
 8007a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a98 <xTaskPriorityInherit+0xe8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4013      	ands	r3, r2
 8007a24:	4a1c      	ldr	r2, [pc, #112]	@ (8007a98 <xTaskPriorityInherit+0xe8>)
 8007a26:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 8005bc8:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	4b17      	ldr	r3, [pc, #92]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <xTaskPriorityInherit+0xe4>)
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fbde 	bl	80043bc <vListInsertEnd>
 8005c00:	e004      	b.n	8005c0c <xTaskPriorityInherit+0xbc>
=======
 8007a28:	4b19      	ldr	r3, [pc, #100]	@ (8007a90 <xTaskPriorityInherit+0xe0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a36:	2201      	movs	r2, #1
 8007a38:	409a      	lsls	r2, r3
 8007a3a:	4b17      	ldr	r3, [pc, #92]	@ (8007a98 <xTaskPriorityInherit+0xe8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	4a15      	ldr	r2, [pc, #84]	@ (8007a98 <xTaskPriorityInherit+0xe8>)
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4a10      	ldr	r2, [pc, #64]	@ (8007a94 <xTaskPriorityInherit+0xe4>)
 8007a52:	441a      	add	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f7fe fbdf 	bl	800621e <vListInsertEnd>
 8007a60:	e004      	b.n	8007a6c <xTaskPriorityInherit+0xbc>
>>>>>>> Stashed changes
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 8005c02:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8007a62:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <xTaskPriorityInherit+0xe0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e008      	b.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e008      	b.n	8007a84 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d201      	bcs.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a76:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <xTaskPriorityInherit+0xe0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d201      	bcs.n	8007a84 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005c20:	2301      	movs	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
=======
 8007a80:	2301      	movs	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005c24:	68fb      	ldr	r3, [r7, #12]
	}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000188 	.word	0x20000188
 8005c34:	2000018c 	.word	0x2000018c
 8005c38:	20000290 	.word	0x20000290

08005c3c <xTaskPriorityDisinherit>:
=======
 8007a84:	68fb      	ldr	r3, [r7, #12]
	}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200002a0 	.word	0x200002a0
 8007a94:	200002a4 	.word	0x200002a4
 8007a98:	200003a8 	.word	0x200003a8

08007a9c <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d070      	beq.n	8005d34 <xTaskPriorityDisinherit+0xf8>
=======
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d070      	beq.n	8007b94 <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 8005c52:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <xTaskPriorityDisinherit+0x104>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d00b      	beq.n	8005c74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60bb      	str	r3, [r7, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c98:	1e5a      	subs	r2, r3, #1
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 8007ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba0 <xTaskPriorityDisinherit+0x104>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d00b      	beq.n	8007ad4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10b      	bne.n	8007af4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60bb      	str	r3, [r7, #8]
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	e7fd      	b.n	8007af0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af8:	1e5a      	subs	r2, r3, #1
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d044      	beq.n	8005d34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d140      	bne.n	8005d34 <xTaskPriorityDisinherit+0xf8>
=======
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d044      	beq.n	8007b94 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d140      	bne.n	8007b94 <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fbdd 	bl	8004476 <uxListRemove>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d115      	bne.n	8005cee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	491f      	ldr	r1, [pc, #124]	@ (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xTaskPriorityDisinherit+0xb2>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	43da      	mvns	r2, r3
 8005ce4:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005cec:	6013      	str	r3, [r2, #0]
=======
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fbde 	bl	80062d8 <uxListRemove>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d115      	bne.n	8007b4e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	491f      	ldr	r1, [pc, #124]	@ (8007ba4 <xTaskPriorityDisinherit+0x108>)
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xTaskPriorityDisinherit+0xb2>
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	43da      	mvns	r2, r3
 8007b44:	4b18      	ldr	r3, [pc, #96]	@ (8007ba8 <xTaskPriorityDisinherit+0x10c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	4a17      	ldr	r2, [pc, #92]	@ (8007ba8 <xTaskPriorityDisinherit+0x10c>)
 8007b4c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	f1c3 0207 	rsb	r2, r3, #7
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	2201      	movs	r2, #1
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	4a0d      	ldr	r2, [pc, #52]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4a08      	ldr	r2, [pc, #32]	@ (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005d22:	441a      	add	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe fb46 	bl	80043bc <vListInsertEnd>
=======
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5a:	f1c3 0207 	rsb	r2, r3, #7
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	2201      	movs	r2, #1
 8007b68:	409a      	lsls	r2, r3
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <xTaskPriorityDisinherit+0x10c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4a0d      	ldr	r2, [pc, #52]	@ (8007ba8 <xTaskPriorityDisinherit+0x10c>)
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4a08      	ldr	r2, [pc, #32]	@ (8007ba4 <xTaskPriorityDisinherit+0x108>)
 8007b82:	441a      	add	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	f7fe fb47 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
=======
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005d34:	697b      	ldr	r3, [r7, #20]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000188 	.word	0x20000188
 8005d44:	2000018c 	.word	0x2000018c
 8005d48:	20000290 	.word	0x20000290

08005d4c <vTaskPriorityDisinheritAfterTimeout>:
=======
 8007b94:	697b      	ldr	r3, [r7, #20]
	}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200002a0 	.word	0x200002a0
 8007ba4:	200002a4 	.word	0x200002a4
 8007ba8:	200003a8 	.word	0x200003a8

08007bac <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< Updated upstream
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d079      	beq.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d079      	beq.n	8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< Updated upstream
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> Stashed changes

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< Updated upstream
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d902      	bls.n	8005d94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e002      	b.n	8005d9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
=======
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d902      	bls.n	8007bf4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e002      	b.n	8007bfa <vTaskPriorityDisinheritAfterTimeout+0x4e>
>>>>>>> Stashed changes
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d98:	61fb      	str	r3, [r7, #28]
=======
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf8:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< Updated upstream
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d059      	beq.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d059      	beq.n	8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< Updated upstream
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d154      	bne.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d154      	bne.n	8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< Updated upstream
 8005dae:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10b      	bne.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60bb      	str	r3, [r7, #8]
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <vTaskPriorityDisinheritAfterTimeout+0x80>
=======
 8007c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d10b      	bne.n	8007c30 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60bb      	str	r3, [r7, #8]
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <vTaskPriorityDisinheritAfterTimeout+0x80>
>>>>>>> Stashed changes

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< Updated upstream
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db04      	blt.n	8005dee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f1c3 0207 	rsb	r2, r3, #7
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	619a      	str	r2, [r3, #24]
=======
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f1c3 0207 	rsb	r2, r3, #7
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	6959      	ldr	r1, [r3, #20]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dfe:	4413      	add	r3, r2
 8005e00:	4299      	cmp	r1, r3
 8005e02:	d129      	bne.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fb34 	bl	8004476 <uxListRemove>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <vTaskPriorityDisinheritAfterTimeout+0xde>
=======
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6959      	ldr	r1, [r3, #20]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a19      	ldr	r2, [pc, #100]	@ (8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c5e:	4413      	add	r3, r2
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d129      	bne.n	8007cb8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fb35 	bl	80062d8 <uxListRemove>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0xde>
>>>>>>> Stashed changes
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
<<<<<<< Updated upstream
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4013      	ands	r3, r2
 8005e26:	4a10      	ldr	r2, [pc, #64]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e28:	6013      	str	r3, [r2, #0]
=======
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	2201      	movs	r2, #1
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	43da      	mvns	r2, r3
 8007c80:	4b11      	ldr	r3, [pc, #68]	@ (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4013      	ands	r3, r2
 8007c86:	4a10      	ldr	r2, [pc, #64]	@ (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c88:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a0b      	ldr	r2, [pc, #44]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a06      	ldr	r2, [pc, #24]	@ (8005e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fab2 	bl	80043bc <vListInsertEnd>
=======
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8e:	2201      	movs	r2, #1
 8007c90:	409a      	lsls	r2, r3
 8007c92:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	4a0b      	ldr	r2, [pc, #44]	@ (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4a06      	ldr	r2, [pc, #24]	@ (8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007caa:	441a      	add	r2, r3
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7fe fab3 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 8005e58:	bf00      	nop
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000188 	.word	0x20000188
 8005e64:	2000018c 	.word	0x2000018c
 8005e68:	20000290 	.word	0x20000290

08005e6c <pvTaskIncrementMutexHeldCount>:
=======
 8007cb8:	bf00      	nop
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200002a0 	.word	0x200002a0
 8007cc4:	200002a4 	.word	0x200002a4
 8007cc8:	200003a8 	.word	0x200003a8

08007ccc <pvTaskIncrementMutexHeldCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< Updated upstream
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e7e:	3201      	adds	r2, #1
 8005e80:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e82:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e84:	681b      	ldr	r3, [r3, #0]
	}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000188 	.word	0x20000188

08005e94 <prvAddCurrentTaskToDelayedList>:
=======
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007cd0:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007cd8:	4b05      	ldr	r3, [pc, #20]	@ (8007cf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cde:	3201      	adds	r2, #1
 8007ce0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007ce2:	4b03      	ldr	r3, [pc, #12]	@ (8007cf0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
	}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	200002a0 	.word	0x200002a0

08007cf4 <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e9e:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
=======
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cfe:	4b29      	ldr	r3, [pc, #164]	@ (8007da4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fae3 	bl	8004476 <uxListRemove>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8007d04:	4b28      	ldr	r3, [pc, #160]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fae4 	bl	80062d8 <uxListRemove>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< Updated upstream
 8005eb6:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	4a20      	ldr	r2, [pc, #128]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ecc:	6013      	str	r3, [r2, #0]
=======
 8007d16:	4b24      	ldr	r3, [pc, #144]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43da      	mvns	r2, r3
 8007d24:	4b21      	ldr	r3, [pc, #132]	@ (8007dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	4a20      	ldr	r2, [pc, #128]	@ (8007dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d2c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d10a      	bne.n	8005eec <prvAddCurrentTaskToDelayedList+0x58>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <prvAddCurrentTaskToDelayedList+0x58>
=======
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d10a      	bne.n	8007d4c <prvAddCurrentTaskToDelayedList+0x58>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8005edc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	481a      	ldr	r0, [pc, #104]	@ (8005f50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ee6:	f7fe fa69 	bl	80043bc <vListInsertEnd>
=======
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4619      	mov	r1, r3
 8007d44:	481a      	ldr	r0, [pc, #104]	@ (8007db0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d46:	f7fe fa6a 	bl	800621e <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 8005eea:	e026      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef4:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d209      	bcs.n	8005f18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f04:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe fa77 	bl	8004404 <vListInsert>
}
 8005f16:	e010      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f18:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fe fa6d 	bl	8004404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d202      	bcs.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f34:	4a09      	ldr	r2, [pc, #36]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	2000028c 	.word	0x2000028c
 8005f48:	20000188 	.word	0x20000188
 8005f4c:	20000290 	.word	0x20000290
 8005f50:	20000274 	.word	0x20000274
 8005f54:	20000244 	.word	0x20000244
 8005f58:	20000240 	.word	0x20000240
 8005f5c:	200002a8 	.word	0x200002a8

08005f60 <pxPortInitialiseStack>:
=======
 8007d4a:	e026      	b.n	8007d9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d54:	4b14      	ldr	r3, [pc, #80]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d209      	bcs.n	8007d78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d64:	4b13      	ldr	r3, [pc, #76]	@ (8007db4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7fe fa78 	bl	8006266 <vListInsert>
}
 8007d76:	e010      	b.n	8007d9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d78:	4b0f      	ldr	r3, [pc, #60]	@ (8007db8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f7fe fa6e 	bl	8006266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d202      	bcs.n	8007d9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d94:	4a09      	ldr	r2, [pc, #36]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6013      	str	r3, [r2, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200003a4 	.word	0x200003a4
 8007da8:	200002a0 	.word	0x200002a0
 8007dac:	200003a8 	.word	0x200003a8
 8007db0:	2000038c 	.word	0x2000038c
 8007db4:	2000035c 	.word	0x2000035c
 8007db8:	20000358 	.word	0x20000358
 8007dbc:	200003c0 	.word	0x200003c0

08007dc0 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
=======
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f90:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc4 <pxPortInitialiseStack+0x64>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3b14      	subs	r3, #20
 8005f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	601a      	str	r2, [r3, #0]
=======
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3b04      	subs	r3, #4
 8007dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3b04      	subs	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007df0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e24 <pxPortInitialiseStack+0x64>)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3b14      	subs	r3, #20
 8007dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f06f 0202 	mvn.w	r2, #2
 8005fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3b20      	subs	r3, #32
 8005fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	08005fc9 	.word	0x08005fc9

08005fc8 <prvTaskExitError>:
=======
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f06f 0202 	mvn.w	r2, #2
 8007e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3b20      	subs	r3, #32
 8007e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e16:	68fb      	ldr	r3, [r7, #12]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	08007e29 	.word	0x08007e29

08007e28 <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
=======
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 8005fd2:	4b13      	ldr	r3, [pc, #76]	@ (8006020 <prvTaskExitError+0x58>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d00b      	beq.n	8005ff4 <prvTaskExitError+0x2c>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <prvTaskExitError+0x28>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
}
 8006006:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006008:	bf00      	nop
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0fc      	beq.n	800600a <prvTaskExitError+0x42>
=======
 8007e32:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <prvTaskExitError+0x58>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d00b      	beq.n	8007e54 <prvTaskExitError+0x2c>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <prvTaskExitError+0x28>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60bb      	str	r3, [r7, #8]
}
 8007e66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e68:	bf00      	nop
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0fc      	beq.n	8007e6a <prvTaskExitError+0x42>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2000001c 	.word	0x2000001c
	...

08006030 <SVC_Handler>:
=======
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000010 	.word	0x20000010
	...

08007e90 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 8006030:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000188 	.word	0x20000188
=======
 8007e90:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <pxCurrentTCBConst2>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	6808      	ldr	r0, [r1, #0]
 8007e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	f380 8809 	msr	PSP, r0
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8811 	msr	BASEPRI, r0
 8007eaa:	4770      	bx	lr
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst2>:
 8007eb0:	200002a0 	.word	0x200002a0
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
=======
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 8006058:	4808      	ldr	r0, [pc, #32]	@ (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
=======
 8007eb8:	4808      	ldr	r0, [pc, #32]	@ (8007edc <prvPortStartFirstTask+0x24>)
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f380 8808 	msr	MSP, r0
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f380 8814 	msr	CONTROL, r0
 8007eca:	b662      	cpsie	i
 8007ecc:	b661      	cpsie	f
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	df00      	svc	0
 8007ed8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:
=======
 8007eda:	bf00      	nop
 8007edc:	e000ed08 	.word	0xe000ed08

08007ee0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
=======
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 8006086:	4b47      	ldr	r3, [pc, #284]	@ (80061a4 <xPortStartScheduler+0x124>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a47      	ldr	r2, [pc, #284]	@ (80061a8 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10b      	bne.n	80060a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a8:	4b3e      	ldr	r3, [pc, #248]	@ (80061a4 <xPortStartScheduler+0x124>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3f      	ldr	r2, [pc, #252]	@ (80061ac <xPortStartScheduler+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10b      	bne.n	80060ca <xPortStartScheduler+0x4a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	613b      	str	r3, [r7, #16]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xPortStartScheduler+0x46>
=======
 8007ee6:	4b47      	ldr	r3, [pc, #284]	@ (8008004 <xPortStartScheduler+0x124>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a47      	ldr	r2, [pc, #284]	@ (8008008 <xPortStartScheduler+0x128>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10b      	bne.n	8007f08 <xPortStartScheduler+0x28>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	60fb      	str	r3, [r7, #12]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f08:	4b3e      	ldr	r3, [pc, #248]	@ (8008004 <xPortStartScheduler+0x124>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800800c <xPortStartScheduler+0x12c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10b      	bne.n	8007f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	613b      	str	r3, [r7, #16]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <xPortStartScheduler+0x46>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <xPortStartScheduler+0x130>)
 80060cc:	617b      	str	r3, [r7, #20]
=======
 8007f2a:	4b39      	ldr	r3, [pc, #228]	@ (8008010 <xPortStartScheduler+0x130>)
 8007f2c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	607b      	str	r3, [r7, #4]
=======
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	22ff      	movs	r2, #255	@ 0xff
 80060da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	701a      	strb	r2, [r3, #0]
=======
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	22ff      	movs	r2, #255	@ 0xff
 8007f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	4b31      	ldr	r3, [pc, #196]	@ (8008014 <xPortStartScheduler+0x134>)
 8007f50:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 80060f2:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060f4:	2207      	movs	r2, #7
 80060f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f8:	e009      	b.n	800610e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060fa:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3b01      	subs	r3, #1
 8006100:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b80      	cmp	r3, #128	@ 0x80
 8006118:	d0ef      	beq.n	80060fa <xPortStartScheduler+0x7a>
=======
 8007f52:	4b31      	ldr	r3, [pc, #196]	@ (8008018 <xPortStartScheduler+0x138>)
 8007f54:	2207      	movs	r2, #7
 8007f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f58:	e009      	b.n	8007f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008018 <xPortStartScheduler+0x138>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	4a2d      	ldr	r2, [pc, #180]	@ (8008018 <xPortStartScheduler+0x138>)
 8007f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f76:	2b80      	cmp	r3, #128	@ 0x80
 8007f78:	d0ef      	beq.n	8007f5a <xPortStartScheduler+0x7a>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 800611a:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <xPortStartScheduler+0x138>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1c3 0307 	rsb	r3, r3, #7
 8006122:	2b04      	cmp	r3, #4
 8006124:	d00b      	beq.n	800613e <xPortStartScheduler+0xbe>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60bb      	str	r3, [r7, #8]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xPortStartScheduler+0xba>
=======
 8007f7a:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <xPortStartScheduler+0x138>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f1c3 0307 	rsb	r3, r3, #7
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d00b      	beq.n	8007f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <xPortStartScheduler+0xba>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <xPortStartScheduler+0x138>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006150:	4a19      	ldr	r2, [pc, #100]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006152:	6013      	str	r3, [r2, #0]
=======
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <xPortStartScheduler+0x138>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8008018 <xPortStartScheduler+0x138>)
 8007fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8008018 <xPortStartScheduler+0x138>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <xPortStartScheduler+0x138>)
 8007fb2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	701a      	strb	r2, [r3, #0]
=======
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <xPortStartScheduler+0x13c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <xPortStartScheduler+0x13c>)
 8006162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006172:	6013      	str	r3, [r2, #0]
=======
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <xPortStartScheduler+0x13c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a16      	ldr	r2, [pc, #88]	@ (800801c <xPortStartScheduler+0x13c>)
 8007fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fc8:	4b14      	ldr	r3, [pc, #80]	@ (800801c <xPortStartScheduler+0x13c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a13      	ldr	r2, [pc, #76]	@ (800801c <xPortStartScheduler+0x13c>)
 8007fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fd2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 8006174:	f000 f8da 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <xPortStartScheduler+0x140>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800617e:	f000 f8f9 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006182:	4b10      	ldr	r3, [pc, #64]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a0f      	ldr	r2, [pc, #60]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800618e:	f7ff ff63 	bl	8006058 <prvPortStartFirstTask>
=======
 8007fd4:	f000 f8da 	bl	800818c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fd8:	4b11      	ldr	r3, [pc, #68]	@ (8008020 <xPortStartScheduler+0x140>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fde:	f000 f8f9 	bl	80081d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fe2:	4b10      	ldr	r3, [pc, #64]	@ (8008024 <xPortStartScheduler+0x144>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8008024 <xPortStartScheduler+0x144>)
 8007fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fee:	f7ff ff63 	bl	8007eb8 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 8006192:	f7ff fa8f 	bl	80056b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006196:	f7ff ff17 	bl	8005fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	410fc271 	.word	0x410fc271
 80061ac:	410fc270 	.word	0x410fc270
 80061b0:	e000e400 	.word	0xe000e400
 80061b4:	200002b4 	.word	0x200002b4
 80061b8:	200002b8 	.word	0x200002b8
 80061bc:	e000ed20 	.word	0xe000ed20
 80061c0:	2000001c 	.word	0x2000001c
 80061c4:	e000ef34 	.word	0xe000ef34

080061c8 <vPortEnterCritical>:
=======
 8007ff2:	f7ff fa8f 	bl	8007514 <vTaskSwitchContext>
	prvTaskExitError();
 8007ff6:	f7ff ff17 	bl	8007e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	e000ed00 	.word	0xe000ed00
 8008008:	410fc271 	.word	0x410fc271
 800800c:	410fc270 	.word	0x410fc270
 8008010:	e000e400 	.word	0xe000e400
 8008014:	200003cc 	.word	0x200003cc
 8008018:	200003d0 	.word	0x200003d0
 800801c:	e000ed20 	.word	0xe000ed20
 8008020:	20000010 	.word	0x20000010
 8008024:	e000ef34 	.word	0xe000ef34

08008028 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ea:	6013      	str	r3, [r2, #0]
=======
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	607b      	str	r3, [r7, #4]
}
 8008040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <vPortEnterCritical+0x5c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3301      	adds	r3, #1
 8008048:	4a0e      	ldr	r2, [pc, #56]	@ (8008084 <vPortEnterCritical+0x5c>)
 800804a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d110      	bne.n	8006216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <vPortEnterCritical+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <vPortEnterCritical+0x4e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <vPortEnterCritical+0x4a>
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000001c 	.word	0x2000001c
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortExitCritical>:
=======
 800804c:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <vPortEnterCritical+0x5c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d110      	bne.n	8008076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008054:	4b0c      	ldr	r3, [pc, #48]	@ (8008088 <vPortEnterCritical+0x60>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <vPortEnterCritical+0x4e>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	603b      	str	r3, [r7, #0]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <vPortEnterCritical+0x4a>
	}
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000010 	.word	0x20000010
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006232:	4b12      	ldr	r3, [pc, #72]	@ (800627c <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <vPortExitCritical+0x26>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006252:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <vPortExitCritical+0x50>)
 800625a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800625c:	4b07      	ldr	r3, [pc, #28]	@ (800627c <vPortExitCritical+0x50>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <vPortExitCritical+0x44>
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
=======
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008092:	4b12      	ldr	r3, [pc, #72]	@ (80080dc <vPortExitCritical+0x50>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <vPortExitCritical+0x26>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080b2:	4b0a      	ldr	r3, [pc, #40]	@ (80080dc <vPortExitCritical+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4a08      	ldr	r2, [pc, #32]	@ (80080dc <vPortExitCritical+0x50>)
 80080ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080bc:	4b07      	ldr	r3, [pc, #28]	@ (80080dc <vPortExitCritical+0x50>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <vPortExitCritical+0x44>
 80080c4:	2300      	movs	r3, #0
 80080c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f383 8811 	msr	BASEPRI, r3
}
 80080ce:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000001c 	.word	0x2000001c

08006280 <PendSV_Handler>:
=======
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20000010 	.word	0x20000010

080080e0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7ff fa00 	bl	80056b4 <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000188 	.word	0x20000188
=======
 80080e0:	f3ef 8009 	mrs	r0, PSP
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <pxCurrentTCBConst>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f01e 0f10 	tst.w	lr, #16
 80080f0:	bf08      	it	eq
 80080f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	6010      	str	r0, [r2, #0]
 80080fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008104:	f380 8811 	msr	BASEPRI, r0
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f7ff fa00 	bl	8007514 <vTaskSwitchContext>
 8008114:	f04f 0000 	mov.w	r0, #0
 8008118:	f380 8811 	msr	BASEPRI, r0
 800811c:	bc09      	pop	{r0, r3}
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	6808      	ldr	r0, [r1, #0]
 8008122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008126:	f01e 0f10 	tst.w	lr, #16
 800812a:	bf08      	it	eq
 800812c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008130:	f380 8809 	msr	PSP, r0
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst>:
 8008140:	200002a0 	.word	0x200002a0
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <SysTick_Handler>:
=======
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <SysTick_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
=======
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 8006302:	f7ff f91d 	bl	8005540 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <SysTick_Handler+0x2c>
=======
 8008162:	f7ff f91d 	bl	80073a0 <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <SysTick_Handler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <SysTick_Handler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
=======
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <SysTick_Handler+0x40>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
=======
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
=======
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	@ (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000010 	.word	0x20000010
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
=======
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <vPortSetupTimerInterrupt+0x34>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008196:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <vPortSetupTimerInterrupt+0x38>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800819c:	4b0a      	ldr	r3, [pc, #40]	@ (80081c8 <vPortSetupTimerInterrupt+0x3c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	@ (80081cc <vPortSetupTimerInterrupt+0x40>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	4a09      	ldr	r2, [pc, #36]	@ (80081d0 <vPortSetupTimerInterrupt+0x44>)
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ae:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <vPortSetupTimerInterrupt+0x34>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	e000e010 	.word	0xe000e010
 80081c4:	e000e018 	.word	0xe000e018
 80081c8:	20000004 	.word	0x20000004
 80081cc:	10624dd3 	.word	0x10624dd3
 80081d0:	e000e014 	.word	0xe000e014

080081d4 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
=======
 80081d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081e4 <vPortEnableVFP+0x10>
 80081d8:	6801      	ldr	r1, [r0, #0]
 80081da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081de:	6001      	str	r1, [r0, #0]
 80081e0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
=======
 80081e2:	bf00      	nop
 80081e4:	e000ed88 	.word	0xe000ed88

080081e8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
=======
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d915      	bls.n	80063c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <vPortValidateInterruptPriority+0x74>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
=======
 80081ee:	f3ef 8305 	mrs	r3, IPSR
 80081f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b0f      	cmp	r3, #15
 80081f8:	d915      	bls.n	8008226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081fa:	4a18      	ldr	r2, [pc, #96]	@ (800825c <vPortValidateInterruptPriority+0x74>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 80063a4:	4b16      	ldr	r3, [pc, #88]	@ (8006400 <vPortValidateInterruptPriority+0x78>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20b      	bcs.n	80063c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
=======
 8008204:	4b16      	ldr	r3, [pc, #88]	@ (8008260 <vPortValidateInterruptPriority+0x78>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	7afa      	ldrb	r2, [r7, #11]
 800820a:	429a      	cmp	r2, r3
 800820c:	d20b      	bcs.n	8008226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 80063c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <vPortValidateInterruptPriority+0x80>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90b      	bls.n	80063ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	603b      	str	r3, [r7, #0]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortValidateInterruptPriority+0x62>
	}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	e000e3f0 	.word	0xe000e3f0
 8006400:	200002b4 	.word	0x200002b4
 8006404:	e000ed0c 	.word	0xe000ed0c
 8006408:	200002b8 	.word	0x200002b8

0800640c <pvPortMalloc>:
=======
 8008226:	4b0f      	ldr	r3, [pc, #60]	@ (8008264 <vPortValidateInterruptPriority+0x7c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800822e:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <vPortValidateInterruptPriority+0x80>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d90b      	bls.n	800824e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	603b      	str	r3, [r7, #0]
}
 8008248:	bf00      	nop
 800824a:	bf00      	nop
 800824c:	e7fd      	b.n	800824a <vPortValidateInterruptPriority+0x62>
	}
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	e000e3f0 	.word	0xe000e3f0
 8008260:	200003cc 	.word	0x200003cc
 8008264:	e000ed0c 	.word	0xe000ed0c
 8008268:	200003d0 	.word	0x200003d0

0800826c <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006418:	f7fe ffe6 	bl	80053e8 <vTaskSuspendAll>
=======
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	@ 0x28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008278:	f7fe ffe6 	bl	8007248 <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <pvPortMalloc+0x184>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006424:	f000 f924 	bl	8006670 <prvHeapInit>
=======
 800827c:	4b5c      	ldr	r3, [pc, #368]	@ (80083f0 <pvPortMalloc+0x184>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008284:	f000 f924 	bl	80084d0 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 8006428:	4b5a      	ldr	r3, [pc, #360]	@ (8006594 <pvPortMalloc+0x188>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 8095 	bne.w	8006560 <pvPortMalloc+0x154>
=======
 8008288:	4b5a      	ldr	r3, [pc, #360]	@ (80083f4 <pvPortMalloc+0x188>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4013      	ands	r3, r2
 8008290:	2b00      	cmp	r3, #0
 8008292:	f040 8095 	bne.w	80083c0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01e      	beq.n	800647a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800643c:	2208      	movs	r2, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	607b      	str	r3, [r7, #4]
=======
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800829c:	2208      	movs	r2, #8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	3308      	adds	r3, #8
 8006456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <pvPortMalloc+0x6e>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <pvPortMalloc+0x6a>
=======
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d015      	beq.n	80082da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f023 0307 	bic.w	r3, r3, #7
 80082b4:	3308      	adds	r3, #8
 80082b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <pvPortMalloc+0x6e>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	617b      	str	r3, [r7, #20]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d06f      	beq.n	8006560 <pvPortMalloc+0x154>
 8006480:	4b45      	ldr	r3, [pc, #276]	@ (8006598 <pvPortMalloc+0x18c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d86a      	bhi.n	8006560 <pvPortMalloc+0x154>
=======
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d06f      	beq.n	80083c0 <pvPortMalloc+0x154>
 80082e0:	4b45      	ldr	r3, [pc, #276]	@ (80083f8 <pvPortMalloc+0x18c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d86a      	bhi.n	80083c0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 800648a:	4b44      	ldr	r3, [pc, #272]	@ (800659c <pvPortMalloc+0x190>)
 800648c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800648e:	4b43      	ldr	r3, [pc, #268]	@ (800659c <pvPortMalloc+0x190>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006494:	e004      	b.n	80064a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <pvPortMalloc+0xa6>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <pvPortMalloc+0x8a>
=======
 80082ea:	4b44      	ldr	r3, [pc, #272]	@ (80083fc <pvPortMalloc+0x190>)
 80082ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082ee:	4b43      	ldr	r3, [pc, #268]	@ (80083fc <pvPortMalloc+0x190>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082f4:	e004      	b.n	8008300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d903      	bls.n	8008312 <pvPortMalloc+0xa6>
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f1      	bne.n	80082f6 <pvPortMalloc+0x8a>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <pvPortMalloc+0x184>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d051      	beq.n	8006560 <pvPortMalloc+0x154>
=======
 8008312:	4b37      	ldr	r3, [pc, #220]	@ (80083f0 <pvPortMalloc+0x184>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008318:	429a      	cmp	r2, r3
 800831a:	d051      	beq.n	80083c0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]
=======
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	4413      	add	r3, r2
 8008324:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	601a      	str	r2, [r3, #0]
=======
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	2308      	movs	r3, #8
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d920      	bls.n	8006520 <pvPortMalloc+0x114>
=======
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	1ad2      	subs	r2, r2, r3
 8008336:	2308      	movs	r3, #8
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	429a      	cmp	r2, r3
 800833c:	d920      	bls.n	8008380 <pvPortMalloc+0x114>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <pvPortMalloc+0xfc>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <pvPortMalloc+0xf8>
=======
 800833e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <pvPortMalloc+0xfc>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <pvPortMalloc+0xf8>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800651a:	69b8      	ldr	r0, [r7, #24]
 800651c:	f000 f90a 	bl	8006734 <prvInsertBlockIntoFreeList>
=======
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800837a:	69b8      	ldr	r0, [r7, #24]
 800837c:	f000 f90a 	bl	8008594 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <pvPortMalloc+0x18c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <pvPortMalloc+0x18c>)
 800652c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800652e:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <pvPortMalloc+0x18c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b1b      	ldr	r3, [pc, #108]	@ (80065a0 <pvPortMalloc+0x194>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <pvPortMalloc+0x18c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <pvPortMalloc+0x194>)
 8006540:	6013      	str	r3, [r2, #0]
=======
 8008380:	4b1d      	ldr	r3, [pc, #116]	@ (80083f8 <pvPortMalloc+0x18c>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	4a1b      	ldr	r2, [pc, #108]	@ (80083f8 <pvPortMalloc+0x18c>)
 800838c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800838e:	4b1a      	ldr	r3, [pc, #104]	@ (80083f8 <pvPortMalloc+0x18c>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b1b      	ldr	r3, [pc, #108]	@ (8008400 <pvPortMalloc+0x194>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d203      	bcs.n	80083a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800839a:	4b17      	ldr	r3, [pc, #92]	@ (80083f8 <pvPortMalloc+0x18c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a18      	ldr	r2, [pc, #96]	@ (8008400 <pvPortMalloc+0x194>)
 80083a0:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <pvPortMalloc+0x188>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	431a      	orrs	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <pvPortMalloc+0x198>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <pvPortMalloc+0x198>)
 800655e:	6013      	str	r3, [r2, #0]
=======
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <pvPortMalloc+0x188>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083b6:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <pvPortMalloc+0x198>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a11      	ldr	r2, [pc, #68]	@ (8008404 <pvPortMalloc+0x198>)
 80083be:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 8006560:	f7fe ff50 	bl	8005404 <xTaskResumeAll>
=======
 80083c0:	f7fe ff50 	bl	8007264 <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <pvPortMalloc+0x17a>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <pvPortMalloc+0x176>
	return pvReturn;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3728      	adds	r7, #40	@ 0x28
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200042c4 	.word	0x200042c4
 8006594:	200042d8 	.word	0x200042d8
 8006598:	200042c8 	.word	0x200042c8
 800659c:	200042bc 	.word	0x200042bc
 80065a0:	200042cc 	.word	0x200042cc
 80065a4:	200042d0 	.word	0x200042d0

080065a8 <vPortFree>:
=======
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <pvPortMalloc+0x17a>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <pvPortMalloc+0x176>
	return pvReturn;
 80083e6:	69fb      	ldr	r3, [r7, #28]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3728      	adds	r7, #40	@ 0x28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	200023e0 	.word	0x200023e0
 80083f4:	200023f4 	.word	0x200023f4
 80083f8:	200023e4 	.word	0x200023e4
 80083fc:	200023d8 	.word	0x200023d8
 8008400:	200023e8 	.word	0x200023e8
 8008404:	200023ec 	.word	0x200023ec

08008408 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04f      	beq.n	800665a <vPortFree+0xb2>
=======
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d04f      	beq.n	80084ba <vPortFree+0xb2>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 80065ba:	2308      	movs	r3, #8
 80065bc:	425b      	negs	r3, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <vPortFree+0xbc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <vPortFree+0x46>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <vPortFree+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60bb      	str	r3, [r7, #8]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <vPortFree+0xbc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01e      	beq.n	800665a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11a      	bne.n	800665a <vPortFree+0xb2>
=======
 800841a:	2308      	movs	r3, #8
 800841c:	425b      	negs	r3, r3
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4413      	add	r3, r2
 8008422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	4b25      	ldr	r3, [pc, #148]	@ (80084c4 <vPortFree+0xbc>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4013      	ands	r3, r2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <vPortFree+0x46>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60fb      	str	r3, [r7, #12]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <vPortFree+0x66>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	60bb      	str	r3, [r7, #8]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <vPortFree+0xbc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4013      	ands	r3, r2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01e      	beq.n	80084ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11a      	bne.n	80084ba <vPortFree+0xb2>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <vPortFree+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006634:	f7fe fed8 	bl	80053e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <vPortFree+0xc0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <vPortFree+0xc0>)
 8006644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f874 	bl	8006734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800664c:	4b07      	ldr	r3, [pc, #28]	@ (800666c <vPortFree+0xc4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a06      	ldr	r2, [pc, #24]	@ (800666c <vPortFree+0xc4>)
 8006654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006656:	f7fe fed5 	bl	8005404 <xTaskResumeAll>
=======
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <vPortFree+0xbc>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	43db      	mvns	r3, r3
 800848e:	401a      	ands	r2, r3
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008494:	f7fe fed8 	bl	8007248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <vPortFree+0xc0>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4413      	add	r3, r2
 80084a2:	4a09      	ldr	r2, [pc, #36]	@ (80084c8 <vPortFree+0xc0>)
 80084a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084a6:	6938      	ldr	r0, [r7, #16]
 80084a8:	f000 f874 	bl	8008594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084ac:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <vPortFree+0xc4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a06      	ldr	r2, [pc, #24]	@ (80084cc <vPortFree+0xc4>)
 80084b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084b6:	f7fe fed5 	bl	8007264 <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	200042d8 	.word	0x200042d8
 8006668:	200042c8 	.word	0x200042c8
 800666c:	200042d4 	.word	0x200042d4

08006670 <prvHeapInit>:
=======
 80084ba:	bf00      	nop
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200023f4 	.word	0x200023f4
 80084c8:	200023e4 	.word	0x200023e4
 80084cc:	200023f0 	.word	0x200023f0

080084d0 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
=======
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 8006676:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800667a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800667c:	4b27      	ldr	r3, [pc, #156]	@ (800671c <prvHeapInit+0xac>)
 800667e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3307      	adds	r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <prvHeapInit+0xac>)
 80066a0:	4413      	add	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	607b      	str	r3, [r7, #4]
=======
 80084d6:	f242 0304 	movw	r3, #8196	@ 0x2004
 80084da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084dc:	4b27      	ldr	r3, [pc, #156]	@ (800857c <prvHeapInit+0xac>)
 80084de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00c      	beq.n	8008504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3307      	adds	r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	4a1f      	ldr	r2, [pc, #124]	@ (800857c <prvHeapInit+0xac>)
 8008500:	4413      	add	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <prvHeapInit+0xb0>)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006720 <prvHeapInit+0xb0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	605a      	str	r2, [r3, #4]
=======
 8008508:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <prvHeapInit+0xb0>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800850e:	4b1c      	ldr	r3, [pc, #112]	@ (8008580 <prvHeapInit+0xb0>)
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066bc:	2208      	movs	r2, #8
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a15      	ldr	r2, [pc, #84]	@ (8006724 <prvHeapInit+0xb4>)
 80066d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d2:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <prvHeapInit+0xb4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <prvHeapInit+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
=======
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	4413      	add	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800851c:	2208      	movs	r2, #8
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4a15      	ldr	r2, [pc, #84]	@ (8008584 <prvHeapInit+0xb4>)
 8008530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008532:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <prvHeapInit+0xb4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800853a:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <prvHeapInit+0xb4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvHeapInit+0xb4>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <prvHeapInit+0xb8>)
 80066fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a09      	ldr	r2, [pc, #36]	@ (800672c <prvHeapInit+0xbc>)
 8006706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <prvHeapInit+0xc0>)
 800670a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	200002bc 	.word	0x200002bc
 8006720:	200042bc 	.word	0x200042bc
 8006724:	200042c4 	.word	0x200042c4
 8006728:	200042cc 	.word	0x200042cc
 800672c:	200042c8 	.word	0x200042c8
 8006730:	200042d8 	.word	0x200042d8

08006734 <prvInsertBlockIntoFreeList>:
=======
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008550:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <prvHeapInit+0xb4>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4a0a      	ldr	r2, [pc, #40]	@ (8008588 <prvHeapInit+0xb8>)
 800855e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4a09      	ldr	r2, [pc, #36]	@ (800858c <prvHeapInit+0xbc>)
 8008566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008568:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <prvHeapInit+0xc0>)
 800856a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	200003d4 	.word	0x200003d4
 8008580:	200023d8 	.word	0x200023d8
 8008584:	200023e0 	.word	0x200023e0
 8008588:	200023e8 	.word	0x200023e8
 800858c:	200023e4 	.word	0x200023e4
 8008590:	200023f4 	.word	0x200023f4

08008594 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
=======
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 800673c:	4b28      	ldr	r3, [pc, #160]	@ (80067e0 <prvInsertBlockIntoFreeList+0xac>)
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e002      	b.n	8006748 <prvInsertBlockIntoFreeList+0x14>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d8f7      	bhi.n	8006742 <prvInsertBlockIntoFreeList+0xe>
=======
 800859c:	4b28      	ldr	r3, [pc, #160]	@ (8008640 <prvInsertBlockIntoFreeList+0xac>)
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e002      	b.n	80085a8 <prvInsertBlockIntoFreeList+0x14>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d8f7      	bhi.n	80085a2 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d108      	bne.n	8006776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	607b      	str	r3, [r7, #4]
=======
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d108      	bne.n	80085d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d118      	bne.n	80067bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d00d      	beq.n	80067b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e008      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
=======
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	441a      	add	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d118      	bne.n	800861c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b15      	ldr	r3, [pc, #84]	@ (8008644 <prvInsertBlockIntoFreeList+0xb0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d00d      	beq.n	8008612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e008      	b.n	8008624 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e003      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
=======
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <prvInsertBlockIntoFreeList+0xb0>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e003      	b.n	8008624 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
=======
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d002      	beq.n	80067d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
=======
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d002      	beq.n	8008632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200042bc 	.word	0x200042bc
 80067e4:	200042c4 	.word	0x200042c4

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <_reclaim_reent>:
 80067f8:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <_reclaim_reent+0xb8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4283      	cmp	r3, r0
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	d053      	beq.n	80068ac <_reclaim_reent+0xb4>
 8006804:	69c3      	ldr	r3, [r0, #28]
 8006806:	b31b      	cbz	r3, 8006850 <_reclaim_reent+0x58>
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	b163      	cbz	r3, 8006826 <_reclaim_reent+0x2e>
 800680c:	2500      	movs	r5, #0
 800680e:	69e3      	ldr	r3, [r4, #28]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	5959      	ldr	r1, [r3, r5]
 8006814:	b9b1      	cbnz	r1, 8006844 <_reclaim_reent+0x4c>
 8006816:	3504      	adds	r5, #4
 8006818:	2d80      	cmp	r5, #128	@ 0x80
 800681a:	d1f8      	bne.n	800680e <_reclaim_reent+0x16>
 800681c:	69e3      	ldr	r3, [r4, #28]
 800681e:	4620      	mov	r0, r4
 8006820:	68d9      	ldr	r1, [r3, #12]
 8006822:	f000 f87b 	bl	800691c <_free_r>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	b111      	cbz	r1, 8006832 <_reclaim_reent+0x3a>
 800682c:	4620      	mov	r0, r4
 800682e:	f000 f875 	bl	800691c <_free_r>
 8006832:	69e3      	ldr	r3, [r4, #28]
 8006834:	689d      	ldr	r5, [r3, #8]
 8006836:	b15d      	cbz	r5, 8006850 <_reclaim_reent+0x58>
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	682d      	ldr	r5, [r5, #0]
 800683e:	f000 f86d 	bl	800691c <_free_r>
 8006842:	e7f8      	b.n	8006836 <_reclaim_reent+0x3e>
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f868 	bl	800691c <_free_r>
 800684c:	4631      	mov	r1, r6
 800684e:	e7e1      	b.n	8006814 <_reclaim_reent+0x1c>
 8006850:	6961      	ldr	r1, [r4, #20]
 8006852:	b111      	cbz	r1, 800685a <_reclaim_reent+0x62>
 8006854:	4620      	mov	r0, r4
 8006856:	f000 f861 	bl	800691c <_free_r>
 800685a:	69e1      	ldr	r1, [r4, #28]
 800685c:	b111      	cbz	r1, 8006864 <_reclaim_reent+0x6c>
 800685e:	4620      	mov	r0, r4
 8006860:	f000 f85c 	bl	800691c <_free_r>
 8006864:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006866:	b111      	cbz	r1, 800686e <_reclaim_reent+0x76>
 8006868:	4620      	mov	r0, r4
 800686a:	f000 f857 	bl	800691c <_free_r>
 800686e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006870:	b111      	cbz	r1, 8006878 <_reclaim_reent+0x80>
 8006872:	4620      	mov	r0, r4
 8006874:	f000 f852 	bl	800691c <_free_r>
 8006878:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800687a:	b111      	cbz	r1, 8006882 <_reclaim_reent+0x8a>
 800687c:	4620      	mov	r0, r4
 800687e:	f000 f84d 	bl	800691c <_free_r>
 8006882:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006884:	b111      	cbz	r1, 800688c <_reclaim_reent+0x94>
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f848 	bl	800691c <_free_r>
 800688c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800688e:	b111      	cbz	r1, 8006896 <_reclaim_reent+0x9e>
 8006890:	4620      	mov	r0, r4
 8006892:	f000 f843 	bl	800691c <_free_r>
 8006896:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006898:	b111      	cbz	r1, 80068a0 <_reclaim_reent+0xa8>
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f83e 	bl	800691c <_free_r>
 80068a0:	6a23      	ldr	r3, [r4, #32]
 80068a2:	b11b      	cbz	r3, 80068ac <_reclaim_reent+0xb4>
 80068a4:	4620      	mov	r0, r4
 80068a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068aa:	4718      	bx	r3
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	bf00      	nop
 80068b0:	20000020 	.word	0x20000020

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	@ (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	@ (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	@ (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	@ (80068f8 <__libc_init_array+0x44>)
 80068c8:	f000 f87e 	bl	80069c8 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	08006a7c 	.word	0x08006a7c
 80068f0:	08006a7c 	.word	0x08006a7c
 80068f4:	08006a7c 	.word	0x08006a7c
 80068f8:	08006a80 	.word	0x08006a80

080068fc <__retarget_lock_acquire_recursive>:
 80068fc:	4770      	bx	lr

080068fe <__retarget_lock_release_recursive>:
 80068fe:	4770      	bx	lr

08006900 <memcpy>:
 8006900:	440a      	add	r2, r1
 8006902:	4291      	cmp	r1, r2
 8006904:	f100 33ff 	add.w	r3, r0, #4294967295
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	4770      	bx	lr
 800690c:	b510      	push	{r4, lr}
 800690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006916:	4291      	cmp	r1, r2
 8006918:	d1f9      	bne.n	800690e <memcpy+0xe>
 800691a:	bd10      	pop	{r4, pc}

0800691c <_free_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4605      	mov	r5, r0
 8006920:	2900      	cmp	r1, #0
 8006922:	d041      	beq.n	80069a8 <_free_r+0x8c>
 8006924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006928:	1f0c      	subs	r4, r1, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfb8      	it	lt
 800692e:	18e4      	addlt	r4, r4, r3
 8006930:	f000 f83e 	bl	80069b0 <__malloc_lock>
 8006934:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <_free_r+0x90>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	b933      	cbnz	r3, 8006948 <_free_r+0x2c>
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	6014      	str	r4, [r2, #0]
 800693e:	4628      	mov	r0, r5
 8006940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006944:	f000 b83a 	b.w	80069bc <__malloc_unlock>
 8006948:	42a3      	cmp	r3, r4
 800694a:	d908      	bls.n	800695e <_free_r+0x42>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	1821      	adds	r1, r4, r0
 8006950:	428b      	cmp	r3, r1
 8006952:	bf01      	itttt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	1809      	addeq	r1, r1, r0
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	e7ed      	b.n	800693a <_free_r+0x1e>
 800695e:	461a      	mov	r2, r3
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b10b      	cbz	r3, 8006968 <_free_r+0x4c>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d9fa      	bls.n	800695e <_free_r+0x42>
 8006968:	6811      	ldr	r1, [r2, #0]
 800696a:	1850      	adds	r0, r2, r1
 800696c:	42a0      	cmp	r0, r4
 800696e:	d10b      	bne.n	8006988 <_free_r+0x6c>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	4401      	add	r1, r0
 8006974:	1850      	adds	r0, r2, r1
 8006976:	4283      	cmp	r3, r0
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	d1e0      	bne.n	800693e <_free_r+0x22>
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	4408      	add	r0, r1
 8006984:	6010      	str	r0, [r2, #0]
 8006986:	e7da      	b.n	800693e <_free_r+0x22>
 8006988:	d902      	bls.n	8006990 <_free_r+0x74>
 800698a:	230c      	movs	r3, #12
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	e7d6      	b.n	800693e <_free_r+0x22>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	1821      	adds	r1, r4, r0
 8006994:	428b      	cmp	r3, r1
 8006996:	bf04      	itt	eq
 8006998:	6819      	ldreq	r1, [r3, #0]
 800699a:	685b      	ldreq	r3, [r3, #4]
 800699c:	6063      	str	r3, [r4, #4]
 800699e:	bf04      	itt	eq
 80069a0:	1809      	addeq	r1, r1, r0
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	6054      	str	r4, [r2, #4]
 80069a6:	e7ca      	b.n	800693e <_free_r+0x22>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	bf00      	nop
 80069ac:	20004418 	.word	0x20004418

080069b0 <__malloc_lock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__malloc_lock+0x8>)
 80069b2:	f7ff bfa3 	b.w	80068fc <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	20004414 	.word	0x20004414

080069bc <__malloc_unlock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__malloc_unlock+0x8>)
 80069be:	f7ff bf9e 	b.w	80068fe <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	20004414 	.word	0x20004414

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
=======
 8008632:	bf00      	nop
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	200023d8 	.word	0x200023d8
 8008644:	200023e0 	.word	0x200023e0

08008648 <memset>:
 8008648:	4402      	add	r2, r0
 800864a:	4603      	mov	r3, r0
 800864c:	4293      	cmp	r3, r2
 800864e:	d100      	bne.n	8008652 <memset+0xa>
 8008650:	4770      	bx	lr
 8008652:	f803 1b01 	strb.w	r1, [r3], #1
 8008656:	e7f9      	b.n	800864c <memset+0x4>

08008658 <_reclaim_reent>:
 8008658:	4b2d      	ldr	r3, [pc, #180]	@ (8008710 <_reclaim_reent+0xb8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4283      	cmp	r3, r0
 800865e:	b570      	push	{r4, r5, r6, lr}
 8008660:	4604      	mov	r4, r0
 8008662:	d053      	beq.n	800870c <_reclaim_reent+0xb4>
 8008664:	69c3      	ldr	r3, [r0, #28]
 8008666:	b31b      	cbz	r3, 80086b0 <_reclaim_reent+0x58>
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	b163      	cbz	r3, 8008686 <_reclaim_reent+0x2e>
 800866c:	2500      	movs	r5, #0
 800866e:	69e3      	ldr	r3, [r4, #28]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	5959      	ldr	r1, [r3, r5]
 8008674:	b9b1      	cbnz	r1, 80086a4 <_reclaim_reent+0x4c>
 8008676:	3504      	adds	r5, #4
 8008678:	2d80      	cmp	r5, #128	@ 0x80
 800867a:	d1f8      	bne.n	800866e <_reclaim_reent+0x16>
 800867c:	69e3      	ldr	r3, [r4, #28]
 800867e:	4620      	mov	r0, r4
 8008680:	68d9      	ldr	r1, [r3, #12]
 8008682:	f000 f87b 	bl	800877c <_free_r>
 8008686:	69e3      	ldr	r3, [r4, #28]
 8008688:	6819      	ldr	r1, [r3, #0]
 800868a:	b111      	cbz	r1, 8008692 <_reclaim_reent+0x3a>
 800868c:	4620      	mov	r0, r4
 800868e:	f000 f875 	bl	800877c <_free_r>
 8008692:	69e3      	ldr	r3, [r4, #28]
 8008694:	689d      	ldr	r5, [r3, #8]
 8008696:	b15d      	cbz	r5, 80086b0 <_reclaim_reent+0x58>
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	682d      	ldr	r5, [r5, #0]
 800869e:	f000 f86d 	bl	800877c <_free_r>
 80086a2:	e7f8      	b.n	8008696 <_reclaim_reent+0x3e>
 80086a4:	680e      	ldr	r6, [r1, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 f868 	bl	800877c <_free_r>
 80086ac:	4631      	mov	r1, r6
 80086ae:	e7e1      	b.n	8008674 <_reclaim_reent+0x1c>
 80086b0:	6961      	ldr	r1, [r4, #20]
 80086b2:	b111      	cbz	r1, 80086ba <_reclaim_reent+0x62>
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 f861 	bl	800877c <_free_r>
 80086ba:	69e1      	ldr	r1, [r4, #28]
 80086bc:	b111      	cbz	r1, 80086c4 <_reclaim_reent+0x6c>
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f85c 	bl	800877c <_free_r>
 80086c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086c6:	b111      	cbz	r1, 80086ce <_reclaim_reent+0x76>
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 f857 	bl	800877c <_free_r>
 80086ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d0:	b111      	cbz	r1, 80086d8 <_reclaim_reent+0x80>
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 f852 	bl	800877c <_free_r>
 80086d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80086da:	b111      	cbz	r1, 80086e2 <_reclaim_reent+0x8a>
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 f84d 	bl	800877c <_free_r>
 80086e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80086e4:	b111      	cbz	r1, 80086ec <_reclaim_reent+0x94>
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 f848 	bl	800877c <_free_r>
 80086ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086ee:	b111      	cbz	r1, 80086f6 <_reclaim_reent+0x9e>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 f843 	bl	800877c <_free_r>
 80086f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086f8:	b111      	cbz	r1, 8008700 <_reclaim_reent+0xa8>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f83e 	bl	800877c <_free_r>
 8008700:	6a23      	ldr	r3, [r4, #32]
 8008702:	b11b      	cbz	r3, 800870c <_reclaim_reent+0xb4>
 8008704:	4620      	mov	r0, r4
 8008706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800870a:	4718      	bx	r3
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	bf00      	nop
 8008710:	20000014 	.word	0x20000014

08008714 <__libc_init_array>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	4d0d      	ldr	r5, [pc, #52]	@ (800874c <__libc_init_array+0x38>)
 8008718:	4c0d      	ldr	r4, [pc, #52]	@ (8008750 <__libc_init_array+0x3c>)
 800871a:	1b64      	subs	r4, r4, r5
 800871c:	10a4      	asrs	r4, r4, #2
 800871e:	2600      	movs	r6, #0
 8008720:	42a6      	cmp	r6, r4
 8008722:	d109      	bne.n	8008738 <__libc_init_array+0x24>
 8008724:	4d0b      	ldr	r5, [pc, #44]	@ (8008754 <__libc_init_array+0x40>)
 8008726:	4c0c      	ldr	r4, [pc, #48]	@ (8008758 <__libc_init_array+0x44>)
 8008728:	f000 f87e 	bl	8008828 <_init>
 800872c:	1b64      	subs	r4, r4, r5
 800872e:	10a4      	asrs	r4, r4, #2
 8008730:	2600      	movs	r6, #0
 8008732:	42a6      	cmp	r6, r4
 8008734:	d105      	bne.n	8008742 <__libc_init_array+0x2e>
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	f855 3b04 	ldr.w	r3, [r5], #4
 800873c:	4798      	blx	r3
 800873e:	3601      	adds	r6, #1
 8008740:	e7ee      	b.n	8008720 <__libc_init_array+0xc>
 8008742:	f855 3b04 	ldr.w	r3, [r5], #4
 8008746:	4798      	blx	r3
 8008748:	3601      	adds	r6, #1
 800874a:	e7f2      	b.n	8008732 <__libc_init_array+0x1e>
 800874c:	080088f0 	.word	0x080088f0
 8008750:	080088f0 	.word	0x080088f0
 8008754:	080088f0 	.word	0x080088f0
 8008758:	080088f4 	.word	0x080088f4

0800875c <__retarget_lock_acquire_recursive>:
 800875c:	4770      	bx	lr

0800875e <__retarget_lock_release_recursive>:
 800875e:	4770      	bx	lr

08008760 <memcpy>:
 8008760:	440a      	add	r2, r1
 8008762:	4291      	cmp	r1, r2
 8008764:	f100 33ff 	add.w	r3, r0, #4294967295
 8008768:	d100      	bne.n	800876c <memcpy+0xc>
 800876a:	4770      	bx	lr
 800876c:	b510      	push	{r4, lr}
 800876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008776:	4291      	cmp	r1, r2
 8008778:	d1f9      	bne.n	800876e <memcpy+0xe>
 800877a:	bd10      	pop	{r4, pc}

0800877c <_free_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4605      	mov	r5, r0
 8008780:	2900      	cmp	r1, #0
 8008782:	d041      	beq.n	8008808 <_free_r+0x8c>
 8008784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008788:	1f0c      	subs	r4, r1, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfb8      	it	lt
 800878e:	18e4      	addlt	r4, r4, r3
 8008790:	f000 f83e 	bl	8008810 <__malloc_lock>
 8008794:	4a1d      	ldr	r2, [pc, #116]	@ (800880c <_free_r+0x90>)
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	b933      	cbnz	r3, 80087a8 <_free_r+0x2c>
 800879a:	6063      	str	r3, [r4, #4]
 800879c:	6014      	str	r4, [r2, #0]
 800879e:	4628      	mov	r0, r5
 80087a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087a4:	f000 b83a 	b.w	800881c <__malloc_unlock>
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	d908      	bls.n	80087be <_free_r+0x42>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	1821      	adds	r1, r4, r0
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf01      	itttt	eq
 80087b4:	6819      	ldreq	r1, [r3, #0]
 80087b6:	685b      	ldreq	r3, [r3, #4]
 80087b8:	1809      	addeq	r1, r1, r0
 80087ba:	6021      	streq	r1, [r4, #0]
 80087bc:	e7ed      	b.n	800879a <_free_r+0x1e>
 80087be:	461a      	mov	r2, r3
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	b10b      	cbz	r3, 80087c8 <_free_r+0x4c>
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d9fa      	bls.n	80087be <_free_r+0x42>
 80087c8:	6811      	ldr	r1, [r2, #0]
 80087ca:	1850      	adds	r0, r2, r1
 80087cc:	42a0      	cmp	r0, r4
 80087ce:	d10b      	bne.n	80087e8 <_free_r+0x6c>
 80087d0:	6820      	ldr	r0, [r4, #0]
 80087d2:	4401      	add	r1, r0
 80087d4:	1850      	adds	r0, r2, r1
 80087d6:	4283      	cmp	r3, r0
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	d1e0      	bne.n	800879e <_free_r+0x22>
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	6053      	str	r3, [r2, #4]
 80087e2:	4408      	add	r0, r1
 80087e4:	6010      	str	r0, [r2, #0]
 80087e6:	e7da      	b.n	800879e <_free_r+0x22>
 80087e8:	d902      	bls.n	80087f0 <_free_r+0x74>
 80087ea:	230c      	movs	r3, #12
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	e7d6      	b.n	800879e <_free_r+0x22>
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	1821      	adds	r1, r4, r0
 80087f4:	428b      	cmp	r3, r1
 80087f6:	bf04      	itt	eq
 80087f8:	6819      	ldreq	r1, [r3, #0]
 80087fa:	685b      	ldreq	r3, [r3, #4]
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	bf04      	itt	eq
 8008800:	1809      	addeq	r1, r1, r0
 8008802:	6021      	streq	r1, [r4, #0]
 8008804:	6054      	str	r4, [r2, #4]
 8008806:	e7ca      	b.n	800879e <_free_r+0x22>
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	20002534 	.word	0x20002534

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	@ (8008818 <__malloc_lock+0x8>)
 8008812:	f7ff bfa3 	b.w	800875c <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20002530 	.word	0x20002530

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__malloc_unlock+0x8>)
 800881e:	f7ff bf9e 	b.w	800875e <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20002530 	.word	0x20002530

08008828 <_init>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	bf00      	nop
 800882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882e:	bc08      	pop	{r3}
 8008830:	469e      	mov	lr, r3
 8008832:	4770      	bx	lr

08008834 <_fini>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr
>>>>>>> Stashed changes
