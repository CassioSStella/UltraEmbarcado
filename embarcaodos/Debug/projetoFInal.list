
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008480  08008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008534  08008534  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008534  08008534  00009534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800853c  0800853c  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800853c  0800853c  0000953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008544  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002470  20000070  080085b4  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024e0  080085b4  0000a4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbab  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbd  00000000  00000000  00027c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001483  00000000  00000000  0002d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037d1  00000000  00000000  0002e7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c874  00000000  00000000  00031fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3a98  00000000  00000000  0004e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001322c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007418  00000000  00000000  0013230c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00139724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008468 	.word	0x08008468

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008468 	.word	0x08008468

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
	while(1){

	}
}

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <led_task+0x34>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f005 ff8b 	bl	800647c <xQueueSemaphoreTake>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1f5      	bne.n	8000558 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f002 fa0e 	bl	8002998 <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 800057c:	e7ec      	b.n	8000558 <led_task+0xc>
 800057e:	bf00      	nop
 8000580:	200001e4 	.word	0x200001e4

08000584 <button_task>:
		}
	}
}

void button_task(void *args){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	while(1){

		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <button_task+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4618      	mov	r0, r3
 8000596:	f005 ff71 	bl	800647c <xQueueSemaphoreTake>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f5      	bne.n	800058c <button_task+0x8>
			vTaskDelay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f006 fac9 	bl	8006b38 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <button_task+0x68>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f005 fdd2 	bl	8006158 <xQueueGenericSend>
			if(sinal==1){
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <button_task+0x6c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d106      	bne.n	80005ca <button_task+0x46>
				sinal=0;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <button_task+0x6c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor desligado!\n\r";
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <button_task+0x70>)
 80005c4:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <button_task+0x74>)
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e00a      	b.n	80005e0 <button_task+0x5c>
			}else{
				sinal=1;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <button_task+0x6c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor ligado!\n\r";
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <button_task+0x70>)
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <button_task+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
				vTaskResume(xuart_task);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <button_task+0x7c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fba8 	bl	8006d30 <vTaskResume>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e0:	2028      	movs	r0, #40	@ 0x28
 80005e2:	f001 ff63 	bl	80024ac <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 80005e6:	e7d1      	b.n	800058c <button_task+0x8>
 80005e8:	200001e0 	.word	0x200001e0
 80005ec:	200001e4 	.word	0x200001e4
 80005f0:	200001f4 	.word	0x200001f4
 80005f4:	20000000 	.word	0x20000000
 80005f8:	08008480 	.word	0x08008480
 80005fc:	08008494 	.word	0x08008494
 8000600:	200001f0 	.word	0x200001f0

08000604 <uart_task>:
		}
	}
}

void uart_task(void *argument){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	while(1){

		if(sinal==0){
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <uart_task+0x9c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d124      	bne.n	800065e <uart_task+0x5a>
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <uart_task+0xa0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	4618      	mov	r0, r3
 800061e:	f005 ff2d 	bl	800647c <xQueueSemaphoreTake>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1f1      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <uart_task+0xa4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2213      	movs	r2, #19
 800062e:	4619      	mov	r1, r3
 8000630:	481e      	ldr	r0, [pc, #120]	@ (80006ac <uart_task+0xa8>)
 8000632:	f003 ffcd 	bl	80045d0 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <uart_task+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	4618      	mov	r0, r3
 8000640:	f005 ff1c 	bl	800647c <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <uart_task+0xa0>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	f005 fd83 	bl	8006158 <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <uart_task+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f006 faa4 	bl	8006ba4 <vTaskSuspend>
 800065c:	e7d6      	b.n	800060c <uart_task+0x8>
			}
		}else{
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <uart_task+0xa0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 31ff 	mov.w	r1, #4294967295
 8000666:	4618      	mov	r0, r3
 8000668:	f005 ff08 	bl	800647c <xQueueSemaphoreTake>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1cc      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 16);
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <uart_task+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2210      	movs	r2, #16
 8000678:	4619      	mov	r1, r3
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <uart_task+0xa8>)
 800067c:	f003 ffa8 	bl	80045d0 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <uart_task+0xac>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f04f 31ff 	mov.w	r1, #4294967295
 8000688:	4618      	mov	r0, r3
 800068a:	f005 fef7 	bl	800647c <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 800068e:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <uart_task+0xa0>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f005 fd5e 	bl	8006158 <xQueueGenericSend>
		if(sinal==0){
 800069c:	e7b6      	b.n	800060c <uart_task+0x8>
 800069e:	bf00      	nop
 80006a0:	200001f4 	.word	0x200001f4
 80006a4:	200001ec 	.word	0x200001ec
 80006a8:	20000000 	.word	0x20000000
 80006ac:	200000f8 	.word	0x200000f8
 80006b0:	200001e8 	.word	0x200001e8
 80006b4:	200001f0 	.word	0x200001f0

080006b8 <HAL_UART_TxCpltCallback>:
			}
		}
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_UART_TxCpltCallback+0x3c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f107 020c 	add.w	r2, r7, #12
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fe44 	bl	800635c <xQueueGiveFromISR>

	if (pxHigherPriorityTaskWokenTX == pdTRUE)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d107      	bne.n	80006ea <HAL_UART_TxCpltCallback+0x32>
	{
		portYIELD();
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <HAL_UART_TxCpltCallback+0x40>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	f3bf 8f4f 	dsb	sy
 80006e6:	f3bf 8f6f 	isb	sy
	}
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200001e8 	.word	0x200001e8
 80006f8:	e000ed04 	.word	0xe000ed04

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fc7e 	bl	8001002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f889 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f9e1 	bl	8000ad0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800070e:	f000 f947 	bl	80009a0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000712:	f000 f8cd 	bl	80008b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000716:	f000 f98d 	bl	8000a34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800071a:	217f      	movs	r1, #127	@ 0x7f
 800071c:	482e      	ldr	r0, [pc, #184]	@ (80007d8 <main+0xdc>)
 800071e:	f001 fcc9 	bl	80020b4 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim2);
 8000722:	482e      	ldr	r0, [pc, #184]	@ (80007dc <main+0xe0>)
 8000724:	f003 f9c6 	bl	8003ab4 <HAL_TIM_Base_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  adcSemaphore = xSemaphoreCreateBinary();
 8000728:	2203      	movs	r2, #3
 800072a:	2100      	movs	r1, #0
 800072c:	2001      	movs	r0, #1
 800072e:	f005 fc8b 	bl	8006048 <xQueueGenericCreate>
 8000732:	4603      	mov	r3, r0
 8000734:	4a2a      	ldr	r2, [pc, #168]	@ (80007e0 <main+0xe4>)
 8000736:	6013      	str	r3, [r2, #0]
  bSemaphore = xSemaphoreCreateBinary();
 8000738:	2203      	movs	r2, #3
 800073a:	2100      	movs	r1, #0
 800073c:	2001      	movs	r0, #1
 800073e:	f005 fc83 	bl	8006048 <xQueueGenericCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <main+0xe8>)
 8000746:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 8000748:	2203      	movs	r2, #3
 800074a:	2100      	movs	r1, #0
 800074c:	2001      	movs	r0, #1
 800074e:	f005 fc7b 	bl	8006048 <xQueueGenericCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <main+0xec>)
 8000756:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000758:	2203      	movs	r2, #3
 800075a:	2100      	movs	r1, #0
 800075c:	2001      	movs	r0, #1
 800075e:	f005 fc73 	bl	8006048 <xQueueGenericCreate>
 8000762:	4603      	mov	r3, r0
 8000764:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <main+0xf0>)
 8000766:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 8000768:	2001      	movs	r0, #1
 800076a:	f005 fcdd 	bl	8006128 <xQueueCreateMutex>
 800076e:	4603      	mov	r3, r0
 8000770:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <main+0xf4>)
 8000772:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000774:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <main+0xf8>)
 8000776:	1d3c      	adds	r4, r7, #4
 8000778:	461d      	mov	r5, r3
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	682b      	ldr	r3, [r5, #0]
 8000780:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fb19 	bl	8005dbe <osThreadCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a1a      	ldr	r2, [pc, #104]	@ (80007f8 <main+0xfc>)
 8000790:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 128, &led, 2, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <main+0x100>)
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	4918      	ldr	r1, [pc, #96]	@ (8000800 <main+0x104>)
 80007a0:	4818      	ldr	r0, [pc, #96]	@ (8000804 <main+0x108>)
 80007a2:	f006 f87d 	bl	80068a0 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, &xuart_task);
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <main+0x10c>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	4916      	ldr	r1, [pc, #88]	@ (800080c <main+0x110>)
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <main+0x114>)
 80007b6:	f006 f873 	bl	80068a0 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, NULL);
 80007ba:	2300      	movs	r3, #0
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2303      	movs	r3, #3
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2280      	movs	r2, #128	@ 0x80
 80007c6:	4913      	ldr	r1, [pc, #76]	@ (8000814 <main+0x118>)
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <main+0x11c>)
 80007ca:	f006 f869 	bl	80068a0 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ce:	f005 faef 	bl	8005db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0xd6>
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	2000018c 	.word	0x2000018c
 80007e0:	200001dc 	.word	0x200001dc
 80007e4:	200001e0 	.word	0x200001e0
 80007e8:	200001e4 	.word	0x200001e4
 80007ec:	200001e8 	.word	0x200001e8
 80007f0:	200001ec 	.word	0x200001ec
 80007f4:	080084d8 	.word	0x080084d8
 80007f8:	200001d8 	.word	0x200001d8
 80007fc:	20000004 	.word	0x20000004
 8000800:	080084a8 	.word	0x080084a8
 8000804:	0800054d 	.word	0x0800054d
 8000808:	200001f0 	.word	0x200001f0
 800080c:	080084b4 	.word	0x080084b4
 8000810:	08000605 	.word	0x08000605
 8000814:	080084c0 	.word	0x080084c0
 8000818:	08000585 	.word	0x08000585

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2238      	movs	r2, #56	@ 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f007 fd2c 	bl	8008288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800083e:	2000      	movs	r0, #0
 8000840:	f002 f8dc 	bl	80029fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2303      	movs	r3, #3
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000856:	2306      	movs	r3, #6
 8000858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800085a:	2355      	movs	r3, #85	@ 0x55
 800085c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f978 	bl	8002b64 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800087a:	f000 f9d1 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2104      	movs	r1, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fc76 	bl	8003188 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008a2:	f000 f9bd 	bl	8000c20 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	@ 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fcdd 	bl	8008288 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f0:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008f8:	2204      	movs	r2, #4
 80008fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_ADC1_Init+0xe8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000902:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000904:	2200      	movs	r2, #0
 8000906:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000908:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_ADC1_Init+0xe8>)
 800090a:	2201      	movs	r2, #1
 800090c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_ADC1_Init+0xe8>)
 800091e:	2200      	movs	r2, #0
 8000920:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_ADC1_Init+0xe8>)
 800092c:	2200      	movs	r2, #0
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000938:	4817      	ldr	r0, [pc, #92]	@ (8000998 <MX_ADC1_Init+0xe8>)
 800093a:	f000 fd95 	bl	8001468 <HAL_ADC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000944:	f000 f96c 	bl	8000c20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000954:	f001 fc10 	bl	8002178 <HAL_ADCEx_MultiModeConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800095e:	f000 f95f 	bl	8000c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_ADC1_Init+0xec>)
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000966:	2306      	movs	r3, #6
 8000968:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800096e:	237f      	movs	r3, #127	@ 0x7f
 8000970:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000972:	2304      	movs	r3, #4
 8000974:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_ADC1_Init+0xe8>)
 8000980:	f000 fef6 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800098a:	f000 f949 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	@ 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c
 800099c:	08600004 	.word	0x08600004

080009a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e2:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	f003 fda4 	bl	8004530 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f917 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009f6:	f005 f8f8 	bl	8005bea <HAL_UARTEx_SetTxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a00:	f000 f90e 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a08:	f005 f92d 	bl	8005c66 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a12:	f000 f905 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a18:	f005 f8ae 	bl	8005b78 <HAL_UARTEx_DisableFifoMode>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a22:	f000 f8fd 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000f8 	.word	0x200000f8
 8000a30:	40008000 	.word	0x40008000

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a5c:	22a9      	movs	r2, #169	@ 0xa9
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a76:	2280      	movs	r2, #128	@ 0x80
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7a:	4814      	ldr	r0, [pc, #80]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a7c:	f002 ffc2 	bl	8003a04 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a86:	f000 f8cb 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000a98:	f003 fa28 	bl	8003eec <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aa2:	f000 f8bd 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <MX_TIM2_Init+0x98>)
 8000ab4:	f003 fc74 	bl	80043a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000abe:	f000 f8af 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000018c 	.word	0x2000018c

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a28      	ldr	r2, [pc, #160]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afe:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0320 	and.w	r3, r3, #32
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_GPIO_Init+0xbc>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2120      	movs	r1, #32
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b36:	f001 ff17 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	@ (8000b90 <MX_GPIO_Init+0xc0>)
 8000b52:	f001 fd87 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b56:	2320      	movs	r3, #32
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f001 fd78 	bl	8002664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	2028      	movs	r0, #40	@ 0x28
 8000b7a:	f001 fc7d 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b7e:	2028      	movs	r0, #40	@ 0x28
 8000b80:	f001 fc94 	bl	80024ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000800 	.word	0x48000800

08000b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba8:	d115      	bne.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000baa:	2028      	movs	r0, #40	@ 0x28
 8000bac:	f001 fc8c 	bl	80024c8 <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f107 020c 	add.w	r2, r7, #12
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 fbce 	bl	800635c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x42>
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	f3bf 8f4f 	dsb	sy
 8000bd2:	f3bf 8f6f 	isb	sy
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001e0 	.word	0x200001e0
 8000be4:	e000ed04 	.word	0xe000ed04

08000be8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END 5 */
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c0e:	f000 fa11 	bl	8001034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <HAL_MspInit+0x50>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f001 fc05 	bl	8002478 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c6e:	f001 ff69 	bl	8002b44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09a      	sub	sp, #104	@ 0x68
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2244      	movs	r2, #68	@ 0x44
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f007 faf1 	bl	8008288 <memset>
  if(hadc->Instance==ADC1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cae:	d134      	bne.n	8000d1a <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cb6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fcaf 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ccc:	f7ff ffa8 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <HAL_ADC_MspInit+0xa4>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d00:	2302      	movs	r3, #2
 8000d02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d04:	2303      	movs	r3, #3
 8000d06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d16:	f001 fca5 	bl	8002664 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3768      	adds	r7, #104	@ 0x68
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09a      	sub	sp, #104	@ 0x68
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2244      	movs	r2, #68	@ 0x44
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 fa9d 	bl	8008288 <memset>
  if(huart->Instance==LPUART1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a23      	ldr	r2, [pc, #140]	@ (8000de0 <HAL_UART_MspInit+0xb8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d13e      	bne.n	8000dd6 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fc5d 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff ff56 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d78:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da4:	230c      	movs	r3, #12
 8000da6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000db4:	230c      	movs	r3, #12
 8000db6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f001 fc4f 	bl	8002664 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	205b      	movs	r0, #91	@ 0x5b
 8000dcc:	f001 fb54 	bl	8002478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dd0:	205b      	movs	r0, #91	@ 0x5b
 8000dd2:	f001 fb6b 	bl	80024ac <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3768      	adds	r7, #104	@ 0x68
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40008000 	.word	0x40008000
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df8:	d113      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2105      	movs	r1, #5
 8000e16:	201c      	movs	r0, #28
 8000e18:	f001 fb2e 	bl	8002478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f001 fb45 	bl	80024ac <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	@ 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <HAL_InitTick+0xc4>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef4 <HAL_InitTick+0xc4>)
 8000e46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <HAL_InitTick+0xc4>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e58:	f107 020c 	add.w	r2, r7, #12
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 fb66 	bl	8003534 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e68:	f002 fb4e 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8000e6c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_InitTick+0xc8>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e7e:	4a20      	ldr	r2, [pc, #128]	@ (8000f00 <HAL_InitTick+0xd0>)
 8000e80:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <HAL_InitTick+0xcc>)
 8000e9e:	f002 fdb1 	bl	8003a04 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d11b      	bne.n	8000ee8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000eb0:	4812      	ldr	r0, [pc, #72]	@ (8000efc <HAL_InitTick+0xcc>)
 8000eb2:	f002 fe61 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d111      	bne.n	8000ee8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ec4:	2019      	movs	r0, #25
 8000ec6:	f001 faf1 	bl	80024ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d808      	bhi.n	8000ee2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	2019      	movs	r0, #25
 8000ed6:	f001 facf 	bl	8002478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_InitTick+0xd4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e002      	b.n	8000ee8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3730      	adds	r7, #48	@ 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	200001f8 	.word	0x200001f8
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	20000014 	.word	0x20000014

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f46:	f002 fe81 	bl	8003c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM2_IRQHandler+0x10>)
 8000f5a:	f002 fe77 	bl	8003c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000018c 	.word	0x2000018c

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000f6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f70:	f001 fd2c 	bl	80029cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <LPUART1_IRQHandler+0x10>)
 8000f7e:	f003 fbbb 	bl	80046f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000f8 	.word	0x200000f8

08000f8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff ffea 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f007 f9b9 	bl	8008354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff fb8b 	bl	80006fc <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff4:	08008544 	.word	0x08008544
  ldr r2, =_sbss
 8000ff8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ffc:	200024e0 	.word	0x200024e0

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>

08001002 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f001 fa28 	bl	8002462 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	200f      	movs	r0, #15
 8001014:	f7ff ff0c 	bl	8000e30 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	e001      	b.n	8001028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001024:	f7ff fe02 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001028:	79fb      	ldrb	r3, [r7, #7]

}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_IncTick+0x1c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x20>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4413      	add	r3, r2
 8001042:	4a03      	ldr	r2, [pc, #12]	@ (8001050 <HAL_IncTick+0x1c>)
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000244 	.word	0x20000244
 8001054:	20000018 	.word	0x20000018

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000244 	.word	0x20000244

08001070 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	609a      	str	r2, [r3, #8]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3360      	adds	r3, #96	@ 0x60
 80010ea:	461a      	mov	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <LL_ADC_SetOffset+0x44>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	4313      	orrs	r3, r2
 8001108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	03fff000 	.word	0x03fff000

08001120 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3360      	adds	r3, #96	@ 0x60
 800112e:	461a      	mov	r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3360      	adds	r3, #96	@ 0x60
 800115c:	461a      	mov	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3360      	adds	r3, #96	@ 0x60
 8001192:	461a      	mov	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3360      	adds	r3, #96	@ 0x60
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80011e2:	bf00      	nop
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	615a      	str	r2, [r3, #20]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3330      	adds	r3, #48	@ 0x30
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	211f      	movs	r1, #31
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0e9b      	lsrs	r3, r3, #26
 800124c:	f003 011f 	and.w	r1, r3, #31
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3314      	adds	r3, #20
 800127c:	461a      	mov	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	0e5b      	lsrs	r3, r3, #25
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	0d1b      	lsrs	r3, r3, #20
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2107      	movs	r1, #7
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	401a      	ands	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	0d1b      	lsrs	r3, r3, #20
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	431a      	orrs	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0318 	and.w	r3, r3, #24
 80012e6:	4908      	ldr	r1, [pc, #32]	@ (8001308 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012e8:	40d9      	lsrs	r1, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	400b      	ands	r3, r1
 80012ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f2:	431a      	orrs	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	0007ffff 	.word	0x0007ffff

0800130c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800131c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001344:	d101      	bne.n	800134a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800136c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001394:	d101      	bne.n	800139a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <LL_ADC_IsEnabled+0x18>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <LL_ADC_IsEnabled+0x1a>
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b02      	cmp	r3, #2
 8001408:	d101      	bne.n	800140e <LL_ADC_IsDisableOngoing+0x18>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <LL_ADC_IsDisableOngoing+0x1a>
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b04      	cmp	r3, #4
 800142e:	d101      	bne.n	8001434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b08      	cmp	r3, #8
 8001454:	d101      	bne.n	800145a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e167      	b.n	8001752 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fbf5 	bl	8000c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff41 	bl	8001330 <LL_ADC_IsDeepPowerDownEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff27 	bl	800130c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff5c 	bl	8001380 <LL_ADC_IsInternalRegulatorEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff40 	bl	8001358 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d8:	4ba0      	ldr	r3, [pc, #640]	@ (800175c <HAL_ADC_Init+0x2f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	4aa0      	ldr	r2, [pc, #640]	@ (8001760 <HAL_ADC_Init+0x2f8>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff3e 	bl	8001380 <LL_ADC_IsInternalRegulatorEnabled>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff76 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 8001530:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8100 	bne.w	8001740 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80fc 	bne.w	8001740 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff37 	bl	80013d0 <LL_ADC_IsEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001568:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800156c:	f7ff ff30 	bl	80013d0 <LL_ADC_IsEnabled>
 8001570:	4604      	mov	r4, r0
 8001572:	487c      	ldr	r0, [pc, #496]	@ (8001764 <HAL_ADC_Init+0x2fc>)
 8001574:	f7ff ff2c 	bl	80013d0 <LL_ADC_IsEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	4323      	orrs	r3, r4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4619      	mov	r1, r3
 8001586:	4878      	ldr	r0, [pc, #480]	@ (8001768 <HAL_ADC_Init+0x300>)
 8001588:	f7ff fd72 	bl	8001070 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7f5b      	ldrb	r3, [r3, #29]
 8001590:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001596:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800159c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	3b01      	subs	r3, #1
 80015c0:	045b      	lsls	r3, r3, #17
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4b60      	ldr	r3, [pc, #384]	@ (800176c <HAL_ADC_Init+0x304>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff15 	bl	8001442 <LL_ADC_INJ_IsConversionOngoing>
 8001618:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d16d      	bne.n	80016fc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d16a      	bne.n	80016fc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800162a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001632:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001642:	f023 0302 	bic.w	r3, r3, #2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	69b9      	ldr	r1, [r7, #24]
 800164c:	430b      	orrs	r3, r1
 800164e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d017      	beq.n	8001688 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001666:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001670:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6911      	ldr	r1, [r2, #16]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	430b      	orrs	r3, r1
 8001682:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001686:	e013      	b.n	80016b0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001696:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d118      	bne.n	80016ec <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016d6:	4311      	orrs	r1, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016dc:	430a      	orrs	r2, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	e007      	b.n	80016fc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10c      	bne.n	800171e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f023 010f 	bic.w	r1, r3, #15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	631a      	str	r2, [r3, #48]	@ 0x30
 800171c:	e007      	b.n	800172e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 020f 	bic.w	r2, r2, #15
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001732:	f023 0303 	bic.w	r3, r3, #3
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800173e:	e007      	b.n	8001750 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001744:	f043 0210 	orr.w	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001750:	7ffb      	ldrb	r3, [r7, #31]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	@ 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	20000010 	.word	0x20000010
 8001760:	053e2d63 	.word	0x053e2d63
 8001764:	50000100 	.word	0x50000100
 8001768:	50000300 	.word	0x50000300
 800176c:	fff04007 	.word	0xfff04007

08001770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0b6      	sub	sp, #216	@ 0xd8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x22>
 800178e:	2302      	movs	r3, #2
 8001790:	e3c8      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x7b4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fe3c 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 83ad 	bne.w	8001f06 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f7ff fd2b 	bl	8001214 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe2a 	bl	800141c <LL_ADC_REG_IsConversionOngoing>
 80017c8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe36 	bl	8001442 <LL_ADC_INJ_IsConversionOngoing>
 80017d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 81d9 	bne.w	8001b96 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 81d4 	bne.w	8001b96 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017f6:	d10f      	bne.n	8001818 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff fd32 	bl	800126c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fcec 	bl	80011ee <LL_ADC_SetSamplingTimeCommonConfig>
 8001816:	e00e      	b.n	8001836 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	461a      	mov	r2, r3
 8001826:	f7ff fd21 	bl	800126c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fcdc 	bl	80011ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d022      	beq.n	800189e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6919      	ldr	r1, [r3, #16]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001868:	f7ff fc36 	bl	80010d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff fc82 	bl	8001182 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x124>
 800188e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001892:	e000      	b.n	8001896 <HAL_ADC_ConfigChannel+0x126>
 8001894:	2300      	movs	r3, #0
 8001896:	461a      	mov	r2, r3
 8001898:	f7ff fc8e 	bl	80011b8 <LL_ADC_SetOffsetSaturation>
 800189c:	e17b      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc3b 	bl	8001120 <LL_ADC_GetOffsetChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x15a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc30 	bl	8001120 <LL_ADC_GetOffsetChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	e01e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x198>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fc25 	bl	8001120 <LL_ADC_GetOffsetChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80018fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1b0>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	e018      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1e2>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800193c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e004      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001952:	429a      	cmp	r2, r3
 8001954:	d106      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fbf4 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fbd8 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x220>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbcd 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 021f 	and.w	r2, r3, #31
 800198e:	e01e      	b.n	80019ce <HAL_ADC_ConfigChannel+0x25e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbc2 	bl	8001120 <LL_ADC_GetOffsetChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80019ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80019b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80019c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x276>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	e018      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x2a8>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80019fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e004      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d106      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb91 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fb75 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x2e6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2102      	movs	r1, #2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fb6a 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	e01e      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x324>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fb5f 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001a84:	2320      	movs	r3, #32
 8001a86:	e004      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x33c>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0e9b      	lsrs	r3, r3, #26
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	e016      	b.n	8001ada <HAL_ADC_ConfigChannel+0x36a>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001acc:	2320      	movs	r3, #32
 8001ace:	e004      	b.n	8001ada <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d106      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fb30 	bl	800114c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2103      	movs	r1, #3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb14 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x3a8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2103      	movs	r1, #3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fb09 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	f003 021f 	and.w	r2, r3, #31
 8001b16:	e017      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x3d8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fafe 	bl	8001120 <LL_ADC_GetOffsetChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001b30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b32:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x3f0>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	e011      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x414>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e003      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2103      	movs	r1, #3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fadb 	bl	800114c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fc18 	bl	80013d0 <LL_ADC_IsEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8140 	bne.w	8001e28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f7ff fb85 	bl	80012c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a8f      	ldr	r2, [pc, #572]	@ (8001dfc <HAL_ADC_ConfigChannel+0x68c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	f040 8131 	bne.w	8001e28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x47e>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	bf94      	ite	ls
 8001be6:	2301      	movls	r3, #1
 8001be8:	2300      	movhi	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	e019      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x4b2>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e003      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d079      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d107      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x4d2>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0e9b      	lsrs	r3, r3, #26
 8001c38:	3301      	adds	r3, #1
 8001c3a:	069b      	lsls	r3, r3, #26
 8001c3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c40:	e015      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x4fe>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	069b      	lsls	r3, r3, #26
 8001c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x51e>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0e9b      	lsrs	r3, r3, #26
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	e017      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x54e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	ea42 0103 	orr.w	r1, r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x574>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	051b      	lsls	r3, r3, #20
 8001ce2:	e018      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x5a6>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 021f 	and.w	r2, r3, #31
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d16:	430b      	orrs	r3, r1
 8001d18:	e081      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x5c6>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	069b      	lsls	r3, r3, #26
 8001d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d34:	e015      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x5f2>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e003      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	069b      	lsls	r3, r3, #26
 8001d5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x612>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	e017      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x642>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	61fb      	str	r3, [r7, #28]
  return result;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	ea42 0103 	orr.w	r1, r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x66e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 021f 	and.w	r2, r3, #31
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b1e      	subs	r3, #30
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	e01e      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x6ac>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	613b      	str	r3, [r7, #16]
  return result;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e006      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x698>
 8001dfa:	bf00      	nop
 8001dfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	051b      	lsls	r3, r3, #20
 8001e18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fa22 	bl	800126c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <HAL_ADC_ConfigChannel+0x7bc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d071      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e34:	483e      	ldr	r0, [pc, #248]	@ (8001f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e36:	f7ff f941 	bl	80010bc <LL_ADC_GetCommonPathInternalCh>
 8001e3a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3c      	ldr	r2, [pc, #240]	@ (8001f34 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x6e2>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f38 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d127      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d121      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e66:	d157      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e70:	4619      	mov	r1, r3
 8001e72:	482f      	ldr	r0, [pc, #188]	@ (8001f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e74:	f7ff f90f 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e78:	4b30      	ldr	r3, [pc, #192]	@ (8001f3c <HAL_ADC_ConfigChannel+0x7cc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	4a30      	ldr	r2, [pc, #192]	@ (8001f40 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea0:	e03a      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d113      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	@ (8001f48 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02a      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4818      	ldr	r0, [pc, #96]	@ (8001f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ece:	f7ff f8e2 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed2:	e021      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <HAL_ADC_ConfigChannel+0x7dc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11c      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a16      	ldr	r2, [pc, #88]	@ (8001f48 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d011      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ef8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001efc:	4619      	mov	r1, r3
 8001efe:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f00:	f7ff f8c9 	bl	8001096 <LL_ADC_SetCommonPathInternalCh>
 8001f04:	e008      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f20:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	37d8      	adds	r7, #216	@ 0xd8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	80080000 	.word	0x80080000
 8001f30:	50000300 	.word	0x50000300
 8001f34:	c3210000 	.word	0xc3210000
 8001f38:	90c00010 	.word	0x90c00010
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	053e2d63 	.word	0x053e2d63
 8001f44:	c7520000 	.word	0xc7520000
 8001f48:	50000100 	.word	0x50000100
 8001f4c:	cb840000 	.word	0xcb840000

08001f50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fa4a 	bl	80013f6 <LL_ADC_IsDisableOngoing>
 8001f62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa31 	bl	80013d0 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d047      	beq.n	8002004 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d144      	bne.n	8002004 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030d 	and.w	r3, r3, #13
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10c      	bne.n	8001fa2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fa0b 	bl	80013a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2203      	movs	r2, #3
 8001f98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f9a:	f7ff f85d 	bl	8001058 <HAL_GetTick>
 8001f9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fa0:	e029      	b.n	8001ff6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e023      	b.n	8002006 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fbe:	f7ff f84b 	bl	8001058 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d914      	bls.n	8001ff6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1dc      	bne.n	8001fbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <LL_ADC_IsEnabled>:
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <LL_ADC_IsEnabled+0x18>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_IsEnabled+0x1a>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_StartCalibration>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002046:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002050:	4313      	orrs	r3, r2
 8002052:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_ADC_IsCalibrationOnGoing>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800207a:	d101      	bne.n	8002080 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_REG_IsConversionOngoing>:
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e04d      	b.n	800216c <HAL_ADCEx_Calibration_Start+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff39 	bl	8001f50 <ADC_Disable>
 80020de:	4603      	mov	r3, r0
 80020e0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d136      	bne.n	8002156 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020f0:	f023 0302 	bic.w	r3, r3, #2
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6839      	ldr	r1, [r7, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff96 	bl	8002034 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002108:	e014      	b.n	8002134 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d90d      	bls.n	8002134 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	f023 0312 	bic.w	r3, r3, #18
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e01b      	b.n	800216c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff94 	bl	8002066 <LL_ADC_IsCalibrationOnGoing>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e2      	bne.n	800210a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002154:	e005      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0004de01 	.word	0x0004de01

08002178 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0a1      	sub	sp, #132	@ 0x84
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002192:	2302      	movs	r3, #2
 8002194:	e08b      	b.n	80022ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800219e:	2300      	movs	r3, #0
 80021a0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021a2:	2300      	movs	r3, #0
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ae:	d102      	bne.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80021b0:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	e001      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e06a      	b.n	80022ae <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff57 	bl	800208e <LL_ADC_REG_IsConversionOngoing>
 80021e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff51 	bl	800208e <LL_ADC_REG_IsConversionOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14c      	bne.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80021f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d149      	bne.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021f8:	4b30      	ldr	r3, [pc, #192]	@ (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80021fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d028      	beq.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002216:	035b      	lsls	r3, r3, #13
 8002218:	430b      	orrs	r3, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800221e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002220:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002224:	f7ff fef3 	bl	800200e <LL_ADC_IsEnabled>
 8002228:	4604      	mov	r4, r0
 800222a:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800222c:	f7ff feef 	bl	800200e <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	4323      	orrs	r3, r4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d133      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002240:	f023 030f 	bic.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6811      	ldr	r1, [r2, #0]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6892      	ldr	r2, [r2, #8]
 800224c:	430a      	orrs	r2, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002252:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002254:	e024      	b.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800225e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002260:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002262:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002266:	f7ff fed2 	bl	800200e <LL_ADC_IsEnabled>
 800226a:	4604      	mov	r4, r0
 800226c:	4812      	ldr	r0, [pc, #72]	@ (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800226e:	f7ff fece 	bl	800200e <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	4323      	orrs	r3, r4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d112      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800227a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002282:	f023 030f 	bic.w	r3, r3, #15
 8002286:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002288:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800228a:	e009      	b.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800229e:	e000      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3784      	adds	r7, #132	@ 0x84
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}
 80022b6:	bf00      	nop
 80022b8:	50000100 	.word	0x50000100
 80022bc:	50000300 	.word	0x50000300

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	@ (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db12      	blt.n	8002398 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <__NVIC_DisableIRQ+0x44>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	3320      	adds	r3, #32
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800238c:	f3bf 8f4f 	dsb	sy
}
 8002390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	@ (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	@ 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff28 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002486:	f7ff ff3f 	bl	8002308 <__NVIC_GetPriorityGrouping>
 800248a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7ff ffb3 	bl	80023fc <NVIC_EncodePriority>
 8002496:	4602      	mov	r2, r0
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff82 	bl	80023a8 <__NVIC_SetPriority>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff32 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff42 	bl	8002360 <__NVIC_DisableIRQ>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d005      	beq.n	8002508 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2204      	movs	r2, #4
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e037      	b.n	8002578 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 020e 	bic.w	r2, r2, #14
 8002516:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002522:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002526:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f202 	lsl.w	r2, r1, r2
 800254a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002554:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002576:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d00d      	beq.n	80025ca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e047      	b.n	800265a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020e 	bic.w	r2, r2, #14
 80025d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002616:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00c      	beq.n	800263a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002638:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
    }
  }
  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002672:	e15a      	b.n	800292a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 814c 	beq.w	8002924 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d005      	beq.n	80026a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d130      	bne.n	8002706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026da:	2201      	movs	r2, #1
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0201 	and.w	r2, r3, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b03      	cmp	r3, #3
 8002710:	d017      	beq.n	8002742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d123      	bne.n	8002796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0203 	and.w	r2, r3, #3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80a6 	beq.w	8002924 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002948 <HAL_GPIO_Init+0x2e4>)
 80027da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002948 <HAL_GPIO_Init+0x2e4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80027e4:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_GPIO_Init+0x2e4>)
 80027e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f0:	4a56      	ldr	r2, [pc, #344]	@ (800294c <HAL_GPIO_Init+0x2e8>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800281a:	d01f      	beq.n	800285c <HAL_GPIO_Init+0x1f8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a4c      	ldr	r2, [pc, #304]	@ (8002950 <HAL_GPIO_Init+0x2ec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d019      	beq.n	8002858 <HAL_GPIO_Init+0x1f4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a4b      	ldr	r2, [pc, #300]	@ (8002954 <HAL_GPIO_Init+0x2f0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_GPIO_Init+0x1f0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a4a      	ldr	r2, [pc, #296]	@ (8002958 <HAL_GPIO_Init+0x2f4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00d      	beq.n	8002850 <HAL_GPIO_Init+0x1ec>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a49      	ldr	r2, [pc, #292]	@ (800295c <HAL_GPIO_Init+0x2f8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x1e8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a48      	ldr	r2, [pc, #288]	@ (8002960 <HAL_GPIO_Init+0x2fc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_GPIO_Init+0x1e4>
 8002844:	2305      	movs	r3, #5
 8002846:	e00a      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 8002848:	2306      	movs	r3, #6
 800284a:	e008      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 800284c:	2304      	movs	r3, #4
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 8002850:	2303      	movs	r3, #3
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x1fa>
 800285c:	2300      	movs	r3, #0
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286e:	4937      	ldr	r1, [pc, #220]	@ (800294c <HAL_GPIO_Init+0x2e8>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800287c:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <HAL_GPIO_Init+0x300>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a0:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ca:	4a26      	ldr	r2, [pc, #152]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80028d0:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <HAL_GPIO_Init+0x300>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800291e:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <HAL_GPIO_Init+0x300>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f ae9d 	bne.w	8002674 <HAL_GPIO_Init+0x10>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	48000400 	.word	0x48000400
 8002954:	48000800 	.word	0x48000800
 8002958:	48000c00 	.word	0x48000c00
 800295c:	48001000 	.word	0x48001000
 8002960:	48001400 	.word	0x48001400
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002984:	e002      	b.n	800298c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	041a      	lsls	r2, r3, #16
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43d9      	mvns	r1, r3
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	400b      	ands	r3, r1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f8d2 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d141      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a16:	d131      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a18:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a1e:	4a46      	ldr	r2, [pc, #280]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a28:	4b43      	ldr	r3, [pc, #268]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a30:	4a41      	ldr	r2, [pc, #260]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a38:	4b40      	ldr	r3, [pc, #256]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2232      	movs	r2, #50	@ 0x32
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4a3f      	ldr	r2, [pc, #252]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4e:	e002      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a62:	d102      	bne.n	8002a6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f2      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a6a:	4b33      	ldr	r3, [pc, #204]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d158      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e057      	b.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a82:	4a2d      	ldr	r2, [pc, #180]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a8c:	e04d      	b.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a94:	d141      	bne.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa2:	d131      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa4:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002abc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2232      	movs	r2, #50	@ 0x32
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ada:	e002      	b.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aee:	d102      	bne.n	8002af6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f2      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b02:	d112      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e011      	b.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b18:	e007      	b.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b22:	4a05      	ldr	r2, [pc, #20]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	20000010 	.word	0x20000010
 8002b40:	431bde83 	.word	0x431bde83

08002b44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b52:	6093      	str	r3, [r2, #8]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40007000 	.word	0x40007000

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e2fe      	b.n	8003174 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b97      	ldr	r3, [pc, #604]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	4b94      	ldr	r3, [pc, #592]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3e>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b8d      	ldr	r3, [pc, #564]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e2d9      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b85      	ldr	r3, [pc, #532]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a84      	ldr	r2, [pc, #528]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b7f      	ldr	r3, [pc, #508]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b7c      	ldr	r3, [pc, #496]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7b      	ldr	r2, [pc, #492]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b78      	ldr	r3, [pc, #480]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a77      	ldr	r2, [pc, #476]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b75      	ldr	r3, [pc, #468]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a74      	ldr	r2, [pc, #464]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa1c 	bl	8001058 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa18 	bl	8001058 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e29e      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fa08 	bl	8001058 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fa04 	bl	8001058 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e28a      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5e:	4b60      	ldr	r3, [pc, #384]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c84:	4b56      	ldr	r3, [pc, #344]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_OscConfig+0x136>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x13c>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d11f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x154>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e25d      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	4946      	ldr	r1, [pc, #280]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ccc:	4b45      	ldr	r3, [pc, #276]	@ (8002de4 <HAL_RCC_OscConfig+0x280>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f8ad 	bl	8000e30 <HAL_InitTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d043      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e249      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3c      	ldr	r2, [pc, #240]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f9b0 	bl	8001058 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f9ac 	bl	8001058 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e232      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0e:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	492d      	ldr	r1, [pc, #180]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
 8002d2e:	e01a      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f98c 	bl	8001058 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe f988 	bl	8001058 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e20e      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d56:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1e0>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d041      	beq.n	8002df6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d80:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f965 	bl	8001058 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe f961 	bl	8001058 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1e7      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ef      	beq.n	8002d92 <HAL_RCC_OscConfig+0x22e>
 8002db2:	e020      	b.n	8002df6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_OscConfig+0x27c>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe f948 	bl	8001058 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dca:	e00d      	b.n	8002de8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f944 	bl	8001058 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d906      	bls.n	8002de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1ca      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de8:	4b8c      	ldr	r3, [pc, #560]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ea      	bne.n	8002dcc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80a6 	beq.w	8002f50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e08:	4b84      	ldr	r3, [pc, #528]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2b4>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	4a7e      	ldr	r2, [pc, #504]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3a:	4b79      	ldr	r3, [pc, #484]	@ (8003020 <HAL_RCC_OscConfig+0x4bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e46:	4b76      	ldr	r3, [pc, #472]	@ (8003020 <HAL_RCC_OscConfig+0x4bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	@ (8003020 <HAL_RCC_OscConfig+0x4bc>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe f901 	bl	8001058 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe f8fd 	bl	8001058 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e183      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003020 <HAL_RCC_OscConfig+0x4bc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_RCC_OscConfig+0x32e>
 8002e80:	4b66      	ldr	r3, [pc, #408]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e90:	e024      	b.n	8002edc <HAL_RCC_OscConfig+0x378>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d110      	bne.n	8002ebc <HAL_RCC_OscConfig+0x358>
 8002e9a:	4b60      	ldr	r3, [pc, #384]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eba:	e00f      	b.n	8002edc <HAL_RCC_OscConfig+0x378>
 8002ebc:	4b57      	ldr	r3, [pc, #348]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	4a56      	ldr	r2, [pc, #344]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ecc:	4b53      	ldr	r3, [pc, #332]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	4a52      	ldr	r2, [pc, #328]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f8b8 	bl	8001058 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f8b4 	bl	8001058 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e138      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f02:	4b46      	ldr	r3, [pc, #280]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ed      	beq.n	8002eec <HAL_RCC_OscConfig+0x388>
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f8a1 	bl	8001058 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f89d 	bl	8001058 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e121      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f30:	4b3a      	ldr	r3, [pc, #232]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ed      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f44:	4b35      	ldr	r3, [pc, #212]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	4a34      	ldr	r2, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f64:	4b2d      	ldr	r3, [pc, #180]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe f870 	bl	8001058 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7c:	f7fe f86c 	bl	8001058 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0f2      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8e:	4b23      	ldr	r3, [pc, #140]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x418>
 8002f9c:	e01b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fe f853 	bl	8001058 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb6:	f7fe f84f 	bl	8001058 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0d5      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc8:	4b14      	ldr	r3, [pc, #80]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80c9 	beq.w	8003172 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	f000 8083 	beq.w	80030f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d15e      	bne.n	80030b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b09      	ldr	r3, [pc, #36]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a08      	ldr	r2, [pc, #32]	@ (800301c <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe f829 	bl	8001058 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003008:	e00c      	b.n	8003024 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe f825 	bl	8001058 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d905      	bls.n	8003024 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0ab      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
 800301c:	40021000 	.word	0x40021000
 8003020:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	4b55      	ldr	r3, [pc, #340]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ec      	bne.n	800300a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b52      	ldr	r3, [pc, #328]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <HAL_RCC_OscConfig+0x61c>)
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6a11      	ldr	r1, [r2, #32]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003040:	3a01      	subs	r2, #1
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800304a:	0212      	lsls	r2, r2, #8
 800304c:	4311      	orrs	r1, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0552      	lsls	r2, r2, #21
 8003058:	4311      	orrs	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800305e:	0852      	lsrs	r2, r2, #1
 8003060:	3a01      	subs	r2, #1
 8003062:	0652      	lsls	r2, r2, #25
 8003064:	4311      	orrs	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800306a:	06d2      	lsls	r2, r2, #27
 800306c:	430a      	orrs	r2, r1
 800306e:	4943      	ldr	r1, [pc, #268]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003070:	4313      	orrs	r3, r2
 8003072:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a40      	ldr	r2, [pc, #256]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003080:	4b3e      	ldr	r3, [pc, #248]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a3d      	ldr	r2, [pc, #244]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800308a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fd ffe4 	bl	8001058 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7fd ffe0 	bl	8001058 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e066      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a6:	4b35      	ldr	r3, [pc, #212]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x530>
 80030b2:	e05e      	b.n	8003172 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a30      	ldr	r2, [pc, #192]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd ffca 	bl	8001058 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd ffc6 	bl	8001058 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04c      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	4b28      	ldr	r3, [pc, #160]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030e6:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4924      	ldr	r1, [pc, #144]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 80030ec:	4b25      	ldr	r3, [pc, #148]	@ (8003184 <HAL_RCC_OscConfig+0x620>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
 80030f2:	e03e      	b.n	8003172 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e039      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003100:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_RCC_OscConfig+0x618>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	429a      	cmp	r2, r3
 8003112:	d12c      	bne.n	800316e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	3b01      	subs	r3, #1
 8003120:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d123      	bne.n	800316e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d11b      	bne.n	800316e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d113      	bne.n	800316e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d109      	bne.n	800316e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	019f800c 	.word	0x019f800c
 8003184:	feeefffc 	.word	0xfeeefffc

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e11e      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b91      	ldr	r3, [pc, #580]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b8e      	ldr	r3, [pc, #568]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 020f 	bic.w	r2, r3, #15
 80031b6:	498c      	ldr	r1, [pc, #560]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b8a      	ldr	r3, [pc, #552]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e106      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d073      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d129      	bne.n	8003238 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e4:	4b81      	ldr	r3, [pc, #516]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0f4      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031f4:	f000 f9d0 	bl	8003598 <RCC_GetSysClockFreqFromPLLSource>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4a7c      	ldr	r2, [pc, #496]	@ (80033f0 <HAL_RCC_ClockConfig+0x268>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d93f      	bls.n	8003282 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003202:	4b7a      	ldr	r3, [pc, #488]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d033      	beq.n	8003282 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d12f      	bne.n	8003282 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003222:	4b72      	ldr	r3, [pc, #456]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800322a:	4a70      	ldr	r2, [pc, #448]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 800322c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003230:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e024      	b.n	8003282 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d107      	bne.n	8003250 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003240:	4b6a      	ldr	r3, [pc, #424]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0c6      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003250:	4b66      	ldr	r3, [pc, #408]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0be      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003260:	f000 f8ce 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8003264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a61      	ldr	r2, [pc, #388]	@ (80033f0 <HAL_RCC_ClockConfig+0x268>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d909      	bls.n	8003282 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800326e:	4b5f      	ldr	r3, [pc, #380]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003276:	4a5d      	ldr	r2, [pc, #372]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800327c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b5a      	ldr	r3, [pc, #360]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4957      	ldr	r1, [pc, #348]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fd fee0 	bl	8001058 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fd fedc 	bl	8001058 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e095      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b4e      	ldr	r3, [pc, #312]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a42      	ldr	r2, [pc, #264]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80032e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032f4:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032fc:	4a3b      	ldr	r2, [pc, #236]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80032fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b39      	ldr	r3, [pc, #228]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4936      	ldr	r1, [pc, #216]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
 8003316:	e008      	b.n	800332a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b80      	cmp	r3, #128	@ 0x80
 800331c:	d105      	bne.n	800332a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800331e:	4b33      	ldr	r3, [pc, #204]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4a32      	ldr	r2, [pc, #200]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003328:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332a:	4b2f      	ldr	r3, [pc, #188]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d21d      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003338:	4b2b      	ldr	r3, [pc, #172]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 020f 	bic.w	r2, r3, #15
 8003340:	4929      	ldr	r1, [pc, #164]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003348:	f7fd fe86 	bl	8001058 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fd fe82 	bl	8001058 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e03b      	b.n	80033de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <HAL_RCC_ClockConfig+0x260>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d1ed      	bne.n	8003350 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4917      	ldr	r1, [pc, #92]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339e:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490f      	ldr	r1, [pc, #60]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b2:	f000 f825 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_RCC_ClockConfig+0x264>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490c      	ldr	r1, [pc, #48]	@ (80033f4 <HAL_RCC_ClockConfig+0x26c>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_RCC_ClockConfig+0x270>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <HAL_RCC_ClockConfig+0x274>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fd2a 	bl	8000e30 <HAL_InitTick>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	04c4b400 	.word	0x04c4b400
 80033f4:	080084f4 	.word	0x080084f4
 80033f8:	20000010 	.word	0x20000010
 80033fc:	20000014 	.word	0x20000014

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003406:	4b2c      	ldr	r3, [pc, #176]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d102      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003412:	4b2a      	ldr	r3, [pc, #168]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e047      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003418:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d102      	bne.n	800342a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003424:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e03e      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800342a:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d136      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003440:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3301      	adds	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d10c      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003454:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	68d2      	ldr	r2, [r2, #12]
 8003460:	0a12      	lsrs	r2, r2, #8
 8003462:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	617b      	str	r3, [r7, #20]
      break;
 800346c:	e00c      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800346e:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	0a12      	lsrs	r2, r2, #8
 800347c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
      break;
 8003486:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	0e5b      	lsrs	r3, r3, #25
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e001      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	016e3600 	.word	0x016e3600

080034c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000010 	.word	0x20000010

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034e0:	f7ff fff0 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4904      	ldr	r1, [pc, #16]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08008504 	.word	0x08008504

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800350c:	f7ff ffda 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0adb      	lsrs	r3, r3, #11
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4904      	ldr	r1, [pc, #16]	@ (8003530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	08008504 	.word	0x08008504

08003534 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	220f      	movs	r2, #15
 8003542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003544:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003576:	4b07      	ldr	r3, [pc, #28]	@ (8003594 <HAL_RCC_GetClockConfig+0x60>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 020f 	and.w	r2, r3, #15
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40022000 	.word	0x40022000

08003598 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800359e:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d10c      	bne.n	80035d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035bc:	4a17      	ldr	r2, [pc, #92]	@ (800361c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035c6:	68d2      	ldr	r2, [r2, #12]
 80035c8:	0a12      	lsrs	r2, r2, #8
 80035ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	617b      	str	r3, [r7, #20]
    break;
 80035d4:	e00c      	b.n	80035f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d6:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	4a0e      	ldr	r2, [pc, #56]	@ (8003618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e0:	68d2      	ldr	r2, [r2, #12]
 80035e2:	0a12      	lsrs	r2, r2, #8
 80035e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
    break;
 80035ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0e5b      	lsrs	r3, r3, #25
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800360a:	687b      	ldr	r3, [r7, #4]
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	016e3600 	.word	0x016e3600
 8003620:	00f42400 	.word	0x00f42400

08003624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800362c:	2300      	movs	r3, #0
 800362e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003630:	2300      	movs	r3, #0
 8003632:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8098 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
 800365e:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366e:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a39      	ldr	r2, [pc, #228]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800367a:	f7fd fced 	bl	8001058 <HAL_GetTick>
 800367e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003680:	e009      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fd fce9 	bl	8001058 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	74fb      	strb	r3, [r7, #19]
        break;
 8003694:	e005      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003696:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ef      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d159      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01e      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d019      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c4:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f0:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fca9 	bl	8001058 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	e00b      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd fca5 	bl	8001058 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d902      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	74fb      	strb	r3, [r7, #19]
            break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ec      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	4903      	ldr	r1, [pc, #12]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	74bb      	strb	r3, [r7, #18]
 8003752:	e005      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003760:	7c7b      	ldrb	r3, [r7, #17]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4ba6      	ldr	r3, [pc, #664]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4aa5      	ldr	r2, [pc, #660]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377e:	4ba0      	ldr	r3, [pc, #640]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f023 0203 	bic.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	499c      	ldr	r1, [pc, #624]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a0:	4b97      	ldr	r3, [pc, #604]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 020c 	bic.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4994      	ldr	r1, [pc, #592]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	498b      	ldr	r1, [pc, #556]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e4:	4b86      	ldr	r3, [pc, #536]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4983      	ldr	r1, [pc, #524]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003806:	4b7e      	ldr	r3, [pc, #504]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	497a      	ldr	r1, [pc, #488]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003828:	4b75      	ldr	r3, [pc, #468]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4972      	ldr	r1, [pc, #456]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003850:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4969      	ldr	r1, [pc, #420]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800386c:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4961      	ldr	r1, [pc, #388]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	4958      	ldr	r1, [pc, #352]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b53      	ldr	r3, [pc, #332]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038be:	4950      	ldr	r1, [pc, #320]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ce:	d105      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038e8:	4b45      	ldr	r3, [pc, #276]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	4942      	ldr	r1, [pc, #264]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003906:	d105      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003912:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003920:	4b37      	ldr	r3, [pc, #220]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4934      	ldr	r1, [pc, #208]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003940:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a2e      	ldr	r2, [pc, #184]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003958:	4b29      	ldr	r3, [pc, #164]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	4926      	ldr	r1, [pc, #152]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a20      	ldr	r2, [pc, #128]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	4918      	ldr	r1, [pc, #96]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	490a      	ldr	r1, [pc, #40]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a04      	ldr	r2, [pc, #16]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80039f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e049      	b.n	8003aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd f9dc 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fb74 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e042      	b.n	8003b52 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <HAL_TIM_Base_Start+0xac>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_TIM_Base_Start+0x5c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d013      	beq.n	8003b10 <HAL_TIM_Base_Start+0x5c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_TIM_Base_Start+0xb0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIM_Base_Start+0x5c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b68 <HAL_TIM_Base_Start+0xb4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIM_Base_Start+0x5c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1a      	ldr	r2, [pc, #104]	@ (8003b6c <HAL_TIM_Base_Start+0xb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_Base_Start+0x5c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	@ (8003b70 <HAL_TIM_Base_Start+0xbc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d115      	bne.n	8003b3c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HAL_TIM_Base_Start+0xc0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d015      	beq.n	8003b4e <HAL_TIM_Base_Start+0x9a>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d011      	beq.n	8003b4e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	e008      	b.n	8003b4e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e000      	b.n	8003b50 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40013400 	.word	0x40013400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	00010007 	.word	0x00010007

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04a      	b.n	8003c26 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d115      	bne.n	8003c10 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d015      	beq.n	8003c22 <HAL_TIM_Base_Start_IT+0xaa>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfc:	d011      	beq.n	8003c22 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	e008      	b.n	8003c22 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e000      	b.n	8003c24 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	00010007 	.word	0x00010007

08003c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d020      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01b      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0202 	mvn.w	r2, #2
 8003c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa2c 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa1e 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fa2f 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d020      	beq.n	8003cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01b      	beq.n	8003cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0204 	mvn.w	r2, #4
 8003ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa06 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003ce8:	e005      	b.n	8003cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9f8 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fa09 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d020      	beq.n	8003d48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01b      	beq.n	8003d48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0208 	mvn.w	r2, #8
 8003d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9e0 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9d2 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f9e3 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d020      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0210 	mvn.w	r2, #16
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9ba 	bl	80040f4 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9ac 	bl	80040e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f9bd 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0201 	mvn.w	r2, #1
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc ff22 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb69 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb61 	bl	80044cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f977 	bl	800411c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0220 	mvn.w	r2, #32
 8003e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb29 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fb35 	bl	80044e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fb2d 	bl	80044f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fb25 	bl	8004508 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00c      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fb1d 	bl	800451c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIM_ConfigClockSource+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e0de      	b.n	80040c6 <HAL_TIM_ConfigClockSource+0x1da>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003f26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a63      	ldr	r2, [pc, #396]	@ (80040d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	f000 80a9 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003f48:	4a61      	ldr	r2, [pc, #388]	@ (80040d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f200 80ae 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f50:	4a60      	ldr	r2, [pc, #384]	@ (80040d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f000 80a1 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003f58:	4a5e      	ldr	r2, [pc, #376]	@ (80040d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	f200 80a6 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f60:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f000 8099 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003f68:	4a5b      	ldr	r2, [pc, #364]	@ (80040d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f200 809e 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f70:	4a5a      	ldr	r2, [pc, #360]	@ (80040dc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f000 8091 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003f78:	4a58      	ldr	r2, [pc, #352]	@ (80040dc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	f200 8096 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f84:	f000 8089 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f8c:	f200 808e 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f94:	d03e      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0x128>
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f9a:	f200 8087 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa2:	f000 8086 	beq.w	80040b2 <HAL_TIM_ConfigClockSource+0x1c6>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003faa:	d87f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fac:	2b70      	cmp	r3, #112	@ 0x70
 8003fae:	d01a      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8003fb0:	2b70      	cmp	r3, #112	@ 0x70
 8003fb2:	d87b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fb4:	2b60      	cmp	r3, #96	@ 0x60
 8003fb6:	d050      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x16e>
 8003fb8:	2b60      	cmp	r3, #96	@ 0x60
 8003fba:	d877      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fbc:	2b50      	cmp	r3, #80	@ 0x50
 8003fbe:	d03c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x14e>
 8003fc0:	2b50      	cmp	r3, #80	@ 0x50
 8003fc2:	d873      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	d058      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x18e>
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d86f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fcc:	2b30      	cmp	r3, #48	@ 0x30
 8003fce:	d064      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fd0:	2b30      	cmp	r3, #48	@ 0x30
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d867      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d05a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fe4:	e062      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	f000 f9b3 	bl	8004360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	609a      	str	r2, [r3, #8]
      break;
 8004012:	e04f      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	f000 f99c 	bl	8004360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	461a      	mov	r2, r3
 8004048:	f000 f90e 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	@ 0x50
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f967 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 f92d 	bl	80042c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	@ 0x60
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f957 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 f8ee 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	@ 0x40
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f947 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00c      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f000 f93e 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 80040aa:	e003      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      break;
 80040b0:	e000      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80040b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	00100070 	.word	0x00100070
 80040d4:	00100040 	.word	0x00100040
 80040d8:	00100030 	.word	0x00100030
 80040dc:	00100020 	.word	0x00100020

080040e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a42      	ldr	r2, [pc, #264]	@ (800424c <TIM_Base_SetConfig+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00f      	beq.n	8004168 <TIM_Base_SetConfig+0x38>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	d00b      	beq.n	8004168 <TIM_Base_SetConfig+0x38>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3f      	ldr	r2, [pc, #252]	@ (8004250 <TIM_Base_SetConfig+0x120>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_Base_SetConfig+0x38>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3e      	ldr	r2, [pc, #248]	@ (8004254 <TIM_Base_SetConfig+0x124>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3d      	ldr	r2, [pc, #244]	@ (8004258 <TIM_Base_SetConfig+0x128>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d108      	bne.n	800417a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a33      	ldr	r2, [pc, #204]	@ (800424c <TIM_Base_SetConfig+0x11c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01b      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d017      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <TIM_Base_SetConfig+0x120>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <TIM_Base_SetConfig+0x124>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2e      	ldr	r2, [pc, #184]	@ (8004258 <TIM_Base_SetConfig+0x128>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <TIM_Base_SetConfig+0x12c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <TIM_Base_SetConfig+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004264 <TIM_Base_SetConfig+0x134>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a16      	ldr	r2, [pc, #88]	@ (800424c <TIM_Base_SetConfig+0x11c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0xe8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <TIM_Base_SetConfig+0x128>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0xe8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a16      	ldr	r2, [pc, #88]	@ (800425c <TIM_Base_SetConfig+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0xe8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <TIM_Base_SetConfig+0x130>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0xe8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a14      	ldr	r2, [pc, #80]	@ (8004264 <TIM_Base_SetConfig+0x134>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]
  }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40013400 	.word	0x40013400
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f023 0210 	bic.w	r2, r3, #16
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004302:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800433c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	f043 0307 	orr.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800437a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	431a      	orrs	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e065      	b.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d018      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d013      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a18      	ldr	r2, [pc, #96]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00e      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a17      	ldr	r2, [pc, #92]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a13      	ldr	r2, [pc, #76]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10c      	bne.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40013400 	.word	0x40013400
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e042      	b.n	80045c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fbe7 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2224      	movs	r2, #36	@ 0x24
 800455e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fee0 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fc11 	bl	8004da8 <UART_SetConfig>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e01b      	b.n	80045c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800459e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 ff5f 	bl	8005484 <UART_CheckIdleState>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b091      	sub	sp, #68	@ 0x44
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d178      	bne.n	80046da <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Transmit_IT+0x24>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e071      	b.n	80046dc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2221      	movs	r2, #33	@ 0x21
 8004620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800462c:	d12a      	bne.n	8004684 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004636:	d107      	bne.n	8004648 <HAL_UART_Transmit_IT+0x78>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a29      	ldr	r2, [pc, #164]	@ (80046e8 <HAL_UART_Transmit_IT+0x118>)
 8004644:	679a      	str	r2, [r3, #120]	@ 0x78
 8004646:	e002      	b.n	800464e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <HAL_UART_Transmit_IT+0x11c>)
 800464c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3308      	adds	r3, #8
 8004654:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800466e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <HAL_UART_Transmit_IT+0x7e>
 8004682:	e028      	b.n	80046d6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d107      	bne.n	800469e <HAL_UART_Transmit_IT+0xce>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a15      	ldr	r2, [pc, #84]	@ (80046f0 <HAL_UART_Transmit_IT+0x120>)
 800469a:	679a      	str	r2, [r3, #120]	@ 0x78
 800469c:	e002      	b.n	80046a4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <HAL_UART_Transmit_IT+0x124>)
 80046a2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	613b      	str	r3, [r7, #16]
   return(result);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	69f9      	ldr	r1, [r7, #28]
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e6      	bne.n	80046a4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3744      	adds	r7, #68	@ 0x44
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	080059fd 	.word	0x080059fd
 80046ec:	0800591d 	.word	0x0800591d
 80046f0:	0800585b 	.word	0x0800585b
 80046f4:	080057a3 	.word	0x080057a3

080046f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0ba      	sub	sp, #232	@ 0xe8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800471e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004722:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004726:	4013      	ands	r3, r2
 8004728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800472c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11b      	bne.n	800476c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8300 	beq.w	8004d62 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      }
      return;
 800476a:	e2fa      	b.n	8004d62 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800476c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8123 	beq.w	80049bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004776:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800477a:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <HAL_UART_IRQHandler+0x2b8>)
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004782:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004786:	4b8b      	ldr	r3, [pc, #556]	@ (80049b4 <HAL_UART_IRQHandler+0x2bc>)
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8116 	beq.w	80049bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d011      	beq.n	80047c0 <HAL_UART_IRQHandler+0xc8>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d011      	beq.n	80047f0 <HAL_UART_IRQHandler+0xf8>
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2202      	movs	r2, #2
 80047de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d011      	beq.n	8004820 <HAL_UART_IRQHandler+0x128>
 80047fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f043 0202 	orr.w	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d017      	beq.n	800485c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004838:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800483c:	4b5c      	ldr	r3, [pc, #368]	@ (80049b0 <HAL_UART_IRQHandler+0x2b8>)
 800483e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	f043 0208 	orr.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <HAL_UART_IRQHandler+0x196>
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800487c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8266 	beq.w	8004d66 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d013      	beq.n	80048ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d054      	beq.n	800499c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fedd 	bl	80056b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d146      	bne.n	8004994 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800491c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800493e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1d9      	bne.n	8004906 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d017      	beq.n	800498c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004962:	4a15      	ldr	r2, [pc, #84]	@ (80049b8 <HAL_UART_IRQHandler+0x2c0>)
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd fe12 	bl	8002596 <HAL_DMA_Abort_IT>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d019      	beq.n	80049ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004986:	4610      	mov	r0, r2
 8004988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498a:	e00f      	b.n	80049ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9f5 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004992:	e00b      	b.n	80049ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9f1 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499a:	e007      	b.n	80049ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9ed 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80049aa:	e1dc      	b.n	8004d66 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	bf00      	nop
    return;
 80049ae:	e1da      	b.n	8004d66 <HAL_UART_IRQHandler+0x66e>
 80049b0:	10000001 	.word	0x10000001
 80049b4:	04000120 	.word	0x04000120
 80049b8:	0800577f 	.word	0x0800577f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 8170 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8169 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8162 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2210      	movs	r2, #16
 80049e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	f040 80d8 	bne.w	8004baa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80af 	beq.w	8004b70 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	f080 80a7 	bcs.w	8004b70 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 8087 	bne.w	8004b4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1da      	bne.n	8004a40 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004aba:	e841 2300 	strex	r3, r2, [r1]
 8004abe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1e1      	bne.n	8004a8a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004aea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004aec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004af0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e3      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e4      	bne.n	8004b0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fd fccb 	bl	80024e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f911 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b6e:	e0fc      	b.n	8004d6a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	f040 80f5 	bne.w	8004d6a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	f040 80eb 	bne.w	8004d6a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f8f4 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
      return;
 8004ba8:	e0df      	b.n	8004d6a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80d1 	beq.w	8004d6e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80cc 	beq.w	8004d6e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e4      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c34:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e1      	bne.n	8004c0c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f023 0310 	bic.w	r3, r3, #16
 8004c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	69b9      	ldr	r1, [r7, #24]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e4      	bne.n	8004c5c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f876 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca4:	e063      	b.n	8004d6e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5d8>
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 ff37 	bl	8005b3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cce:	e051      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d014      	beq.n	8004d06 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03a      	beq.n	8004d72 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
    }
    return;
 8004d04:	e035      	b.n	8004d72 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_UART_IRQHandler+0x62e>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fee1 	bl	8005ae6 <UART_EndTransmit_IT>
    return;
 8004d24:	e026      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_UART_IRQHandler+0x64e>
 8004d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 ff10 	bl	8005b64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d44:	e016      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d010      	beq.n	8004d74 <HAL_UART_IRQHandler+0x67c>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da0c      	bge.n	8004d74 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fef8 	bl	8005b50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d60:	e008      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d62:	bf00      	nop
 8004d64:	e006      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
    return;
 8004d66:	bf00      	nop
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x67c>
    return;
 8004d72:	bf00      	nop
  }
}
 8004d74:	37e8      	adds	r7, #232	@ 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b08c      	sub	sp, #48	@ 0x30
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4bab      	ldr	r3, [pc, #684]	@ (8005084 <UART_SetConfig+0x2dc>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4aa0      	ldr	r2, [pc, #640]	@ (8005088 <UART_SetConfig+0x2e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e10:	4313      	orrs	r3, r2
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	f023 010f 	bic.w	r1, r3, #15
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a91      	ldr	r2, [pc, #580]	@ (800508c <UART_SetConfig+0x2e4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d125      	bne.n	8004e98 <UART_SetConfig+0xf0>
 8004e4c:	4b90      	ldr	r3, [pc, #576]	@ (8005090 <UART_SetConfig+0x2e8>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d81a      	bhi.n	8004e90 <UART_SetConfig+0xe8>
 8004e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0xb8>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e89 	.word	0x08004e89
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e76:	e0d6      	b.n	8005026 <UART_SetConfig+0x27e>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7e:	e0d2      	b.n	8005026 <UART_SetConfig+0x27e>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e0ce      	b.n	8005026 <UART_SetConfig+0x27e>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e0ca      	b.n	8005026 <UART_SetConfig+0x27e>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e0c6      	b.n	8005026 <UART_SetConfig+0x27e>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a7d      	ldr	r2, [pc, #500]	@ (8005094 <UART_SetConfig+0x2ec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d138      	bne.n	8004f14 <UART_SetConfig+0x16c>
 8004ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8005090 <UART_SetConfig+0x2e8>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d82d      	bhi.n	8004f0c <UART_SetConfig+0x164>
 8004eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0x110>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	08004f0d 	.word	0x08004f0d
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f0d 	.word	0x08004f0d
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004ef5 	.word	0x08004ef5
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f0d 	.word	0x08004f0d
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f05 	.word	0x08004f05
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef2:	e098      	b.n	8005026 <UART_SetConfig+0x27e>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efa:	e094      	b.n	8005026 <UART_SetConfig+0x27e>
 8004efc:	2304      	movs	r3, #4
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f02:	e090      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f04:	2308      	movs	r3, #8
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0a:	e08c      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e088      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5f      	ldr	r2, [pc, #380]	@ (8005098 <UART_SetConfig+0x2f0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d125      	bne.n	8004f6a <UART_SetConfig+0x1c2>
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005090 <UART_SetConfig+0x2e8>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f28:	2b30      	cmp	r3, #48	@ 0x30
 8004f2a:	d016      	beq.n	8004f5a <UART_SetConfig+0x1b2>
 8004f2c:	2b30      	cmp	r3, #48	@ 0x30
 8004f2e:	d818      	bhi.n	8004f62 <UART_SetConfig+0x1ba>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d00a      	beq.n	8004f4a <UART_SetConfig+0x1a2>
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d814      	bhi.n	8004f62 <UART_SetConfig+0x1ba>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <UART_SetConfig+0x19a>
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d008      	beq.n	8004f52 <UART_SetConfig+0x1aa>
 8004f40:	e00f      	b.n	8004f62 <UART_SetConfig+0x1ba>
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f48:	e06d      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f50:	e069      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f52:	2304      	movs	r3, #4
 8004f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f58:	e065      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f60:	e061      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f62:	2310      	movs	r3, #16
 8004f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f68:	e05d      	b.n	8005026 <UART_SetConfig+0x27e>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800509c <UART_SetConfig+0x2f4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d125      	bne.n	8004fc0 <UART_SetConfig+0x218>
 8004f74:	4b46      	ldr	r3, [pc, #280]	@ (8005090 <UART_SetConfig+0x2e8>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f80:	d016      	beq.n	8004fb0 <UART_SetConfig+0x208>
 8004f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f84:	d818      	bhi.n	8004fb8 <UART_SetConfig+0x210>
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d00a      	beq.n	8004fa0 <UART_SetConfig+0x1f8>
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d814      	bhi.n	8004fb8 <UART_SetConfig+0x210>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <UART_SetConfig+0x1f0>
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d008      	beq.n	8004fa8 <UART_SetConfig+0x200>
 8004f96:	e00f      	b.n	8004fb8 <UART_SetConfig+0x210>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9e:	e042      	b.n	8005026 <UART_SetConfig+0x27e>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa6:	e03e      	b.n	8005026 <UART_SetConfig+0x27e>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fae:	e03a      	b.n	8005026 <UART_SetConfig+0x27e>
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb6:	e036      	b.n	8005026 <UART_SetConfig+0x27e>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e032      	b.n	8005026 <UART_SetConfig+0x27e>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a30      	ldr	r2, [pc, #192]	@ (8005088 <UART_SetConfig+0x2e0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d12a      	bne.n	8005020 <UART_SetConfig+0x278>
 8004fca:	4b31      	ldr	r3, [pc, #196]	@ (8005090 <UART_SetConfig+0x2e8>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fd8:	d01a      	beq.n	8005010 <UART_SetConfig+0x268>
 8004fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fde:	d81b      	bhi.n	8005018 <UART_SetConfig+0x270>
 8004fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe4:	d00c      	beq.n	8005000 <UART_SetConfig+0x258>
 8004fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fea:	d815      	bhi.n	8005018 <UART_SetConfig+0x270>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <UART_SetConfig+0x250>
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff4:	d008      	beq.n	8005008 <UART_SetConfig+0x260>
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x270>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffe:	e012      	b.n	8005026 <UART_SetConfig+0x27e>
 8005000:	2302      	movs	r3, #2
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005006:	e00e      	b.n	8005026 <UART_SetConfig+0x27e>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500e:	e00a      	b.n	8005026 <UART_SetConfig+0x27e>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005016:	e006      	b.n	8005026 <UART_SetConfig+0x27e>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501e:	e002      	b.n	8005026 <UART_SetConfig+0x27e>
 8005020:	2310      	movs	r3, #16
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <UART_SetConfig+0x2e0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f040 80a8 	bne.w	8005182 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005032:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005036:	2b08      	cmp	r3, #8
 8005038:	d834      	bhi.n	80050a4 <UART_SetConfig+0x2fc>
 800503a:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <UART_SetConfig+0x298>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	080050a5 	.word	0x080050a5
 8005048:	0800506d 	.word	0x0800506d
 800504c:	080050a5 	.word	0x080050a5
 8005050:	08005073 	.word	0x08005073
 8005054:	080050a5 	.word	0x080050a5
 8005058:	080050a5 	.word	0x080050a5
 800505c:	080050a5 	.word	0x080050a5
 8005060:	0800507b 	.word	0x0800507b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7fe fa3a 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800506a:	e021      	b.n	80050b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800506c:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <UART_SetConfig+0x2f8>)
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005070:	e01e      	b.n	80050b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005072:	f7fe f9c5 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005078:	e01a      	b.n	80050b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005080:	e016      	b.n	80050b0 <UART_SetConfig+0x308>
 8005082:	bf00      	nop
 8005084:	cfff69f3 	.word	0xcfff69f3
 8005088:	40008000 	.word	0x40008000
 800508c:	40013800 	.word	0x40013800
 8005090:	40021000 	.word	0x40021000
 8005094:	40004400 	.word	0x40004400
 8005098:	40004800 	.word	0x40004800
 800509c:	40004c00 	.word	0x40004c00
 80050a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 812a 	beq.w	800530c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	4a9e      	ldr	r2, [pc, #632]	@ (8005338 <UART_SetConfig+0x590>)
 80050be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c2:	461a      	mov	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d305      	bcc.n	80050e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d903      	bls.n	80050f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050ee:	e10d      	b.n	800530c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	2200      	movs	r2, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	60fa      	str	r2, [r7, #12]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	4a8e      	ldr	r2, [pc, #568]	@ (8005338 <UART_SetConfig+0x590>)
 80050fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005102:	b29b      	uxth	r3, r3
 8005104:	2200      	movs	r2, #0
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005112:	f7fb f885 	bl	8000220 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	020b      	lsls	r3, r1, #8
 8005128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800512c:	0202      	lsls	r2, r0, #8
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	6849      	ldr	r1, [r1, #4]
 8005132:	0849      	lsrs	r1, r1, #1
 8005134:	2000      	movs	r0, #0
 8005136:	460c      	mov	r4, r1
 8005138:	4605      	mov	r5, r0
 800513a:	eb12 0804 	adds.w	r8, r2, r4
 800513e:	eb43 0905 	adc.w	r9, r3, r5
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	469a      	mov	sl, r3
 800514a:	4693      	mov	fp, r2
 800514c:	4652      	mov	r2, sl
 800514e:	465b      	mov	r3, fp
 8005150:	4640      	mov	r0, r8
 8005152:	4649      	mov	r1, r9
 8005154:	f7fb f864 	bl	8000220 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005166:	d308      	bcc.n	800517a <UART_SetConfig+0x3d2>
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516e:	d204      	bcs.n	800517a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a3a      	ldr	r2, [r7, #32]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e0c8      	b.n	800530c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005180:	e0c4      	b.n	800530c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518a:	d167      	bne.n	800525c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800518c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005190:	2b08      	cmp	r3, #8
 8005192:	d828      	bhi.n	80051e6 <UART_SetConfig+0x43e>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0x3f4>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d7 	.word	0x080051d7
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051e7 	.word	0x080051e7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe f98c 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051c6:	e014      	b.n	80051f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe f99e 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80051cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ce:	e010      	b.n	80051f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <UART_SetConfig+0x594>)
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051d4:	e00d      	b.n	80051f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fe f913 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80051da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8089 	beq.w	800530c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005338 <UART_SetConfig+0x590>)
 8005200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005204:	461a      	mov	r2, r3
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	fbb3 f3f2 	udiv	r3, r3, r2
 800520c:	005a      	lsls	r2, r3, #1
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	441a      	add	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d916      	bls.n	8005254 <UART_SetConfig+0x4ac>
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800522c:	d212      	bcs.n	8005254 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f023 030f 	bic.w	r3, r3, #15
 8005236:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	b29a      	uxth	r2, r3
 8005244:	8bfb      	ldrh	r3, [r7, #30]
 8005246:	4313      	orrs	r3, r2
 8005248:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8bfa      	ldrh	r2, [r7, #30]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e05b      	b.n	800530c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800525a:	e057      	b.n	800530c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800525c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005260:	2b08      	cmp	r3, #8
 8005262:	d828      	bhi.n	80052b6 <UART_SetConfig+0x50e>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0x4c4>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005291 	.word	0x08005291
 8005270:	08005299 	.word	0x08005299
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a7 	.word	0x080052a7
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052b7 	.word	0x080052b7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe f924 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005296:	e014      	b.n	80052c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005298:	f7fe f936 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 800529c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b26      	ldr	r3, [pc, #152]	@ (800533c <UART_SetConfig+0x594>)
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe f8ab 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80052aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ac:	e009      	b.n	80052c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052b4:	e005      	b.n	80052c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052c0:	bf00      	nop
    }

    if (pclk != 0U)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d021      	beq.n	800530c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <UART_SetConfig+0x590>)
 80052ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	441a      	add	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b0f      	cmp	r3, #15
 80052f0:	d909      	bls.n	8005306 <UART_SetConfig+0x55e>
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f8:	d205      	bcs.n	8005306 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	e002      	b.n	800530c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2201      	movs	r2, #1
 8005310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2201      	movs	r2, #1
 8005318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2200      	movs	r2, #0
 8005326:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005328:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	@ 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005336:	bf00      	nop
 8005338:	0800850c 	.word	0x0800850c
 800533c:	00f42400 	.word	0x00f42400

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b098      	sub	sp, #96	@ 0x60
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fb fde0 	bl	8001058 <HAL_GetTick>
 8005498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d12f      	bne.n	8005508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f88e 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e063      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d149      	bne.n	80055aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551e:	2200      	movs	r2, #0
 8005520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f857 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03c      	beq.n	80055aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60fb      	str	r3, [r7, #12]
   return(result);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	617b      	str	r3, [r7, #20]
   return(result);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e012      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3758      	adds	r7, #88	@ 0x58
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	e04f      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d04b      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fb fd31 	bl	8001058 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <UART_WaitOnFlagUntilTimeout+0x30>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e04e      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d037      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d034      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	d031      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d110      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f838 	bl	80056b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2208      	movs	r2, #8
 8005646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e029      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005664:	d111      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f81e 	bl	80056b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e00f      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d0a0      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b095      	sub	sp, #84	@ 0x54
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e3      	bne.n	80056ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d118      	bne.n	800575e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	60bb      	str	r3, [r7, #8]
   return(result);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	613b      	str	r3, [r7, #16]
   return(result);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005772:	bf00      	nop
 8005774:	3754      	adds	r7, #84	@ 0x54
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff faf1 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b08f      	sub	sp, #60	@ 0x3c
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	2b21      	cmp	r3, #33	@ 0x21
 80057b2:	d14c      	bne.n	800584e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d132      	bne.n	8005826 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e6      	bne.n	80057c0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	633b      	str	r3, [r7, #48]	@ 0x30
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	613b      	str	r3, [r7, #16]
   return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e6      	bne.n	80057f2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005824:	e013      	b.n	800584e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800584e:	bf00      	nop
 8005850:	373c      	adds	r7, #60	@ 0x3c
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b091      	sub	sp, #68	@ 0x44
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005868:	2b21      	cmp	r3, #33	@ 0x21
 800586a:	d151      	bne.n	8005910 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d132      	bne.n	80058de <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	623b      	str	r3, [r7, #32]
   return(result);
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	633b      	str	r3, [r7, #48]	@ 0x30
 8005898:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800589c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	617b      	str	r3, [r7, #20]
   return(result);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80058dc:	e018      	b.n	8005910 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80058e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005910:	bf00      	nop
 8005912:	3744      	adds	r7, #68	@ 0x44
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b091      	sub	sp, #68	@ 0x44
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	2b21      	cmp	r3, #33	@ 0x21
 800592c:	d160      	bne.n	80059f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005934:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005936:	e057      	b.n	80059e8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d133      	bne.n	80059ac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	623b      	str	r3, [r7, #32]
   return(result);
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800595a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005964:	633a      	str	r2, [r7, #48]	@ 0x30
 8005966:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800596a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	60fb      	str	r3, [r7, #12]
   return(result);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	617b      	str	r3, [r7, #20]
   return(result);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e6      	bne.n	8005978 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80059aa:	e021      	b.n	80059f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d013      	beq.n	80059e2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80059e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80059e4:	3b01      	subs	r3, #1
 80059e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80059e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1a4      	bne.n	8005938 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80059ee:	e7ff      	b.n	80059f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80059f0:	bf00      	nop
 80059f2:	3744      	adds	r7, #68	@ 0x44
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b091      	sub	sp, #68	@ 0x44
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	2b21      	cmp	r3, #33	@ 0x21
 8005a0c:	d165      	bne.n	8005ada <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005a16:	e05c      	b.n	8005ad2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d133      	bne.n	8005a8c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	613b      	str	r3, [r7, #16]
   return(result);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e6      	bne.n	8005a58 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005a8a:	e026      	b.n	8005ada <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005acc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ad2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d19f      	bne.n	8005a18 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005ad8:	e7ff      	b.n	8005ada <UART_TxISR_16BIT_FIFOEN+0xde>
 8005ada:	bf00      	nop
 8005adc:	3744      	adds	r7, #68	@ 0x44
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b088      	sub	sp, #32
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fa fdc2 	bl	80006b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b34:	bf00      	nop
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_UARTEx_DisableFifoMode+0x16>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e027      	b.n	8005bde <HAL_UARTEx_DisableFifoMode+0x66>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	@ 0x24
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e02d      	b.n	8005c5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f850 	bl	8005ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e02d      	b.n	8005cda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2224      	movs	r2, #36	@ 0x24
 8005c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f812 	bl	8005ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d108      	bne.n	8005d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d04:	e031      	b.n	8005d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d06:	2308      	movs	r3, #8
 8005d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	0e5b      	lsrs	r3, r3, #25
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	0f5b      	lsrs	r3, r3, #29
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	7b3a      	ldrb	r2, [r7, #12]
 8005d32:	4911      	ldr	r1, [pc, #68]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x94>)
 8005d34:	5c8a      	ldrb	r2, [r1, r2]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d3a:	7b3a      	ldrb	r2, [r7, #12]
 8005d3c:	490f      	ldr	r1, [pc, #60]	@ (8005d7c <UARTEx_SetNbDataToProcess+0x98>)
 8005d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	7b7a      	ldrb	r2, [r7, #13]
 8005d50:	4909      	ldr	r1, [pc, #36]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x94>)
 8005d52:	5c8a      	ldrb	r2, [r1, r2]
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d58:	7b7a      	ldrb	r2, [r7, #13]
 8005d5a:	4908      	ldr	r1, [pc, #32]	@ (8005d7c <UARTEx_SetNbDataToProcess+0x98>)
 8005d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	08008524 	.word	0x08008524
 8005d7c:	0800852c 	.word	0x0800852c

08005d80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d92:	2b84      	cmp	r3, #132	@ 0x84
 8005d94:	d005      	beq.n	8005da2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3303      	adds	r3, #3
 8005da0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005db4:	f001 f81a 	bl	8006dec <vTaskStartScheduler>
  
  return osOK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685c      	ldr	r4, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dd4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff ffcf 	bl	8005d80 <makeFreeRtosPriority>
 8005de2:	4602      	mov	r2, r0
 8005de4:	f107 030c 	add.w	r3, r7, #12
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	9200      	str	r2, [sp, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4632      	mov	r2, r6
 8005df0:	4629      	mov	r1, r5
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fd54 	bl	80068a0 <xTaskCreate>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 0208 	add.w	r2, r3, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f103 0208 	add.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d103      	bne.n	8005ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e00c      	b.n	8005ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e002      	b.n	8005edc <vListInsert+0x2e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d2f6      	bcs.n	8005ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6892      	ldr	r2, [r2, #8]
 8005f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6852      	ldr	r2, [r2, #4]
 8005f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d103      	bne.n	8005f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	1e5a      	subs	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fa0:	f001 fe62 	bl	8007c68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	441a      	add	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	22ff      	movs	r2, #255	@ 0xff
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d114      	bne.n	8006020 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01a      	beq.n	8006034 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f934 	bl	8007270 <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <xQueueGenericReset+0xd0>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	e009      	b.n	8006034 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3310      	adds	r3, #16
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fef1 	bl	8005e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3324      	adds	r3, #36	@ 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff feec 	bl	8005e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006034:	f001 fe4a 	bl	8007ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006038:	2301      	movs	r3, #1
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericCreate+0x2c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3348      	adds	r3, #72	@ 0x48
 8006082:	4618      	mov	r0, r3
 8006084:	f001 ff12 	bl	8007eac <pvPortMalloc>
 8006088:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3348      	adds	r3, #72	@ 0x48
 8006098:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800609a:	79fa      	ldrb	r2, [r7, #7]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f805 	bl	80060b6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ac:	69bb      	ldr	r3, [r7, #24]
	}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e002      	b.n	80060d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060e4:	2101      	movs	r1, #1
 80060e6:	69b8      	ldr	r0, [r7, #24]
 80060e8:	f7ff ff44 	bl	8005f74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f81c 	bl	8006158 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	461a      	mov	r2, r3
 800613e:	6939      	ldr	r1, [r7, #16]
 8006140:	6978      	ldr	r0, [r7, #20]
 8006142:	f7ff ff81 	bl	8006048 <xQueueGenericCreate>
 8006146:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff ffd3 	bl	80060f4 <prvInitialiseMutex>

		return xNewQueue;
 800614e:	68fb      	ldr	r3, [r7, #12]
	}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	@ 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <xQueueGenericSend+0x34>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	e7fd      	b.n	8006188 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <xQueueGenericSend+0x42>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueGenericSend+0x46>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericSend+0x48>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <xQueueGenericSend+0x64>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x72>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <xQueueGenericSend+0x76>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <xQueueGenericSend+0x78>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <xQueueGenericSend+0x94>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	623b      	str	r3, [r7, #32]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ec:	f001 f9e6 	bl	80075bc <xTaskGetSchedulerState>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <xQueueGenericSend+0xa4>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <xQueueGenericSend+0xa8>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <xQueueGenericSend+0xaa>
 8006200:	2300      	movs	r3, #0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <xQueueGenericSend+0xc6>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	61fb      	str	r3, [r7, #28]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800621e:	f001 fd23 	bl	8007c68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <xQueueGenericSend+0xdc>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d129      	bne.n	8006288 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800623a:	f000 fa47 	bl	80066cc <prvCopyDataToQueue>
 800623e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	3324      	adds	r3, #36	@ 0x24
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f80f 	bl	8007270 <xTaskRemoveFromEventList>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006258:	4b3f      	ldr	r3, [pc, #252]	@ (8006358 <xQueueGenericSend+0x200>)
 800625a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	e00a      	b.n	8006280 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800626a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006270:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <xQueueGenericSend+0x200>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006280:	f001 fd24 	bl	8007ccc <vPortExitCritical>
				return pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	e063      	b.n	8006350 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800628e:	f001 fd1d 	bl	8007ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006292:	2300      	movs	r3, #0
 8006294:	e05c      	b.n	8006350 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800629c:	f107 0314 	add.w	r3, r7, #20
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f849 	bl	8007338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a6:	2301      	movs	r3, #1
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062aa:	f001 fd0f 	bl	8007ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ae:	f000 fdef 	bl	8006e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b2:	f001 fcd9 	bl	8007c68 <vPortEnterCritical>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d103      	bne.n	80062cc <xQueueGenericSend+0x174>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d2:	b25b      	sxtb	r3, r3
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d103      	bne.n	80062e2 <xQueueGenericSend+0x18a>
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e2:	f001 fcf3 	bl	8007ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e6:	1d3a      	adds	r2, r7, #4
 80062e8:	f107 0314 	add.w	r3, r7, #20
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 f838 	bl	8007364 <xTaskCheckForTimeOut>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d124      	bne.n	8006344 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062fc:	f000 fab8 	bl	8006870 <prvIsQueueFull>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d018      	beq.n	8006338 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	3310      	adds	r3, #16
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ff88 	bl	8007224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006316:	f000 fa43 	bl	80067a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800631a:	f000 fdc7 	bl	8006eac <xTaskResumeAll>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f47f af7c 	bne.w	800621e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006326:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <xQueueGenericSend+0x200>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	e772      	b.n	800621e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800633a:	f000 fa31 	bl	80067a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800633e:	f000 fdb5 	bl	8006eac <xTaskResumeAll>
 8006342:	e76c      	b.n	800621e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006346:	f000 fa2b 	bl	80067a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800634a:	f000 fdaf 	bl	8006eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800634e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006350:	4618      	mov	r0, r3
 8006352:	3738      	adds	r7, #56	@ 0x38
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	@ 0x38
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	623b      	str	r3, [r7, #32]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61fb      	str	r3, [r7, #28]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <xQueueGiveFromISR+0x5c>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <xQueueGiveFromISR+0x60>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <xQueueGiveFromISR+0x62>
 80063bc:	2300      	movs	r3, #0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <xQueueGiveFromISR+0x7e>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61bb      	str	r3, [r7, #24]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063da:	f001 fd25 	bl	8007e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063de:	f3ef 8211 	mrs	r2, BASEPRI
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	617a      	str	r2, [r7, #20]
 80063f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006406:	429a      	cmp	r2, r3
 8006408:	d22b      	bcs.n	8006462 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800641c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d112      	bne.n	800644c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	3324      	adds	r3, #36	@ 0x24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 ff1c 	bl	8007270 <xTaskRemoveFromEventList>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e007      	b.n	800645c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	3301      	adds	r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	b25a      	sxtb	r2, r3
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006460:	e001      	b.n	8006466 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006474:	4618      	mov	r0, r3
 8006476:	3738      	adds	r7, #56	@ 0x38
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08e      	sub	sp, #56	@ 0x38
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	623b      	str	r3, [r7, #32]
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	61fb      	str	r3, [r7, #28]
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d0:	f001 f874 	bl	80075bc <xTaskGetSchedulerState>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <xQueueSemaphoreTake+0x64>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <xQueueSemaphoreTake+0x68>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <xQueueSemaphoreTake+0x6a>
 80064e4:	2300      	movs	r3, #0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61bb      	str	r3, [r7, #24]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006502:	f001 fbb1 	bl	8007c68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d024      	beq.n	800655c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006522:	f001 f9f7 	bl	8007914 <pvTaskIncrementMutexHeldCount>
 8006526:	4602      	mov	r2, r0
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	3310      	adds	r3, #16
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fe99 	bl	8007270 <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b54      	ldr	r3, [pc, #336]	@ (8006698 <xQueueSemaphoreTake+0x21c>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006554:	f001 fbba 	bl	8007ccc <vPortExitCritical>
				return pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	e098      	b.n	800668e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d112      	bne.n	8006588 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	617b      	str	r3, [r7, #20]
}
 800657a:	bf00      	nop
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006580:	f001 fba4 	bl	8007ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006584:	2300      	movs	r3, #0
 8006586:	e082      	b.n	800668e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800658e:	f107 030c 	add.w	r3, r7, #12
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fed0 	bl	8007338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800659c:	f001 fb96 	bl	8007ccc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065a0:	f000 fc76 	bl	8006e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065a4:	f001 fb60 	bl	8007c68 <vPortEnterCritical>
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d103      	bne.n	80065be <xQueueSemaphoreTake+0x142>
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065c4:	b25b      	sxtb	r3, r3
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d103      	bne.n	80065d4 <xQueueSemaphoreTake+0x158>
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065d4:	f001 fb7a 	bl	8007ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065d8:	463a      	mov	r2, r7
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 febf 	bl	8007364 <xTaskCheckForTimeOut>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d132      	bne.n	8006652 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065ee:	f000 f929 	bl	8006844 <prvIsQueueEmpty>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d026      	beq.n	8006646 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006600:	f001 fb32 	bl	8007c68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fff5 	bl	80075f8 <xTaskPriorityInherit>
 800660e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006610:	f001 fb5c 	bl	8007ccc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	3324      	adds	r3, #36	@ 0x24
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fe01 	bl	8007224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006624:	f000 f8bc 	bl	80067a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006628:	f000 fc40 	bl	8006eac <xTaskResumeAll>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f af67 	bne.w	8006502 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006634:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <xQueueSemaphoreTake+0x21c>)
 8006636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	e75d      	b.n	8006502 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006648:	f000 f8aa 	bl	80067a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800664c:	f000 fc2e 	bl	8006eac <xTaskResumeAll>
 8006650:	e757      	b.n	8006502 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006654:	f000 f8a4 	bl	80067a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006658:	f000 fc28 	bl	8006eac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800665c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800665e:	f000 f8f1 	bl	8006844 <prvIsQueueEmpty>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	f43f af4c 	beq.w	8006502 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006670:	f001 fafa 	bl	8007c68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006676:	f000 f811 	bl	800669c <prvGetDisinheritPriorityAfterTimeout>
 800667a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f8b6 	bl	80077f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006688:	f001 fb20 	bl	8007ccc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800668c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800668e:	4618      	mov	r0, r3
 8006690:	3738      	adds	r7, #56	@ 0x38
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1c3 0307 	rsb	r3, r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e001      	b.n	80066be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066be:	68fb      	ldr	r3, [r7, #12]
	}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10d      	bne.n	8006706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d14d      	bne.n	800678e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fff4 	bl	80076e4 <xTaskPriorityDisinherit>
 80066fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	e043      	b.n	800678e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d119      	bne.n	8006740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6858      	ldr	r0, [r3, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	461a      	mov	r2, r3
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	f001 fe42 	bl	80083a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	d32b      	bcc.n	800678e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	e026      	b.n	800678e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68d8      	ldr	r0, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006748:	461a      	mov	r2, r3
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	f001 fe28 	bl	80083a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	425b      	negs	r3, r3
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d207      	bcs.n	800677c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	425b      	negs	r3, r3
 8006776:	441a      	add	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d105      	bne.n	800678e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	3b01      	subs	r3, #1
 800678c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006796:	697b      	ldr	r3, [r7, #20]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a8:	f001 fa5e 	bl	8007c68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b4:	e011      	b.n	80067da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3324      	adds	r3, #36	@ 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fd54 	bl	8007270 <xTaskRemoveFromEventList>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ce:	f000 fe2d 	bl	800742c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dce9      	bgt.n	80067b6 <prvUnlockQueue+0x16>
 80067e2:	e000      	b.n	80067e6 <prvUnlockQueue+0x46>
					break;
 80067e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067ee:	f001 fa6d 	bl	8007ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067f2:	f001 fa39 	bl	8007c68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067fe:	e011      	b.n	8006824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d012      	beq.n	800682e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3310      	adds	r3, #16
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fd2f 	bl	8007270 <xTaskRemoveFromEventList>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006818:	f000 fe08 	bl	800742c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	3b01      	subs	r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dce9      	bgt.n	8006800 <prvUnlockQueue+0x60>
 800682c:	e000      	b.n	8006830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800682e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	22ff      	movs	r2, #255	@ 0xff
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006838:	f001 fa48 	bl	8007ccc <vPortExitCritical>
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800684c:	f001 fa0c 	bl	8007c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e001      	b.n	8006862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006862:	f001 fa33 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 8006866:	68fb      	ldr	r3, [r7, #12]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006878:	f001 f9f6 	bl	8007c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	429a      	cmp	r2, r3
 8006886:	d102      	bne.n	800688e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e001      	b.n	8006892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006892:	f001 fa1b 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	@ 0x30
 80068a4:	af04      	add	r7, sp, #16
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 faf9 	bl	8007eac <pvPortMalloc>
 80068ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00e      	beq.n	80068e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068c2:	20a0      	movs	r0, #160	@ 0xa0
 80068c4:	f001 faf2 	bl	8007eac <pvPortMalloc>
 80068c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068d6:	e005      	b.n	80068e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068d8:	6978      	ldr	r0, [r7, #20]
 80068da:	f001 fbb5 	bl	8008048 <vPortFree>
 80068de:	e001      	b.n	80068e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d013      	beq.n	8006912 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	2300      	movs	r3, #0
 80068ee:	9303      	str	r3, [sp, #12]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	9302      	str	r3, [sp, #8]
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f80f 	bl	8006924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006906:	69f8      	ldr	r0, [r7, #28]
 8006908:	f000 f8ac 	bl	8006a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e002      	b.n	8006918 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006918:	69bb      	ldr	r3, [r7, #24]
	}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800693c:	3b01      	subs	r3, #1
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	617b      	str	r3, [r7, #20]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01f      	beq.n	80069b4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	e012      	b.n	80069a0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	3334      	adds	r3, #52	@ 0x34
 800698a:	460a      	mov	r2, r1
 800698c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	3301      	adds	r3, #1
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b0f      	cmp	r3, #15
 80069a4:	d9e9      	bls.n	800697a <prvInitialiseNewTask+0x56>
 80069a6:	e000      	b.n	80069aa <prvInitialiseNewTask+0x86>
			{
				break;
 80069a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069b2:	e003      	b.n	80069bc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	2b06      	cmp	r3, #6
 80069c0:	d901      	bls.n	80069c6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069c2:	2306      	movs	r3, #6
 80069c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2200      	movs	r2, #0
 80069d6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	3304      	adds	r3, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fa35 	bl	8005e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	3318      	adds	r3, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fa30 	bl	8005e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	f1c3 0207 	rsb	r2, r3, #7
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	334c      	adds	r3, #76	@ 0x4c
 8006a16:	224c      	movs	r2, #76	@ 0x4c
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 fc34 	bl	8008288 <memset>
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	4a0d      	ldr	r2, [pc, #52]	@ (8006a58 <prvInitialiseNewTask+0x134>)
 8006a24:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	4a0c      	ldr	r2, [pc, #48]	@ (8006a5c <prvInitialiseNewTask+0x138>)
 8006a2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a60 <prvInitialiseNewTask+0x13c>)
 8006a30:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	69b8      	ldr	r0, [r7, #24]
 8006a38:	f000 ffe6 	bl	8007a08 <pxPortInitialiseStack>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	200023a0 	.word	0x200023a0
 8006a5c:	20002408 	.word	0x20002408
 8006a60:	20002470 	.word	0x20002470

08006a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a6c:	f001 f8fc 	bl	8007c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a70:	4b2a      	ldr	r3, [pc, #168]	@ (8006b1c <prvAddNewTaskToReadyList+0xb8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a29      	ldr	r2, [pc, #164]	@ (8006b1c <prvAddNewTaskToReadyList+0xb8>)
 8006a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a7a:	4b29      	ldr	r3, [pc, #164]	@ (8006b20 <prvAddNewTaskToReadyList+0xbc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a82:	4a27      	ldr	r2, [pc, #156]	@ (8006b20 <prvAddNewTaskToReadyList+0xbc>)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a88:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <prvAddNewTaskToReadyList+0xb8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d110      	bne.n	8006ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a90:	f000 fcf0 	bl	8007474 <prvInitialiseTaskLists>
 8006a94:	e00d      	b.n	8006ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a96:	4b23      	ldr	r3, [pc, #140]	@ (8006b24 <prvAddNewTaskToReadyList+0xc0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a9e:	4b20      	ldr	r3, [pc, #128]	@ (8006b20 <prvAddNewTaskToReadyList+0xbc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d802      	bhi.n	8006ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006aac:	4a1c      	ldr	r2, [pc, #112]	@ (8006b20 <prvAddNewTaskToReadyList+0xbc>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <prvAddNewTaskToReadyList+0xc4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <prvAddNewTaskToReadyList+0xc4>)
 8006aba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <prvAddNewTaskToReadyList+0xc8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <prvAddNewTaskToReadyList+0xc8>)
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4a15      	ldr	r2, [pc, #84]	@ (8006b30 <prvAddNewTaskToReadyList+0xcc>)
 8006adc:	441a      	add	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7ff f9be 	bl	8005e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006aea:	f001 f8ef 	bl	8007ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <prvAddNewTaskToReadyList+0xc0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <prvAddNewTaskToReadyList+0xbc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d207      	bcs.n	8006b14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b04:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <prvAddNewTaskToReadyList+0xd0>)
 8006b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000348 	.word	0x20000348
 8006b20:	20000248 	.word	0x20000248
 8006b24:	20000354 	.word	0x20000354
 8006b28:	20000364 	.word	0x20000364
 8006b2c:	20000350 	.word	0x20000350
 8006b30:	2000024c 	.word	0x2000024c
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d018      	beq.n	8006b7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b4a:	4b14      	ldr	r3, [pc, #80]	@ (8006b9c <vTaskDelay+0x64>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <vTaskDelay+0x32>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60bb      	str	r3, [r7, #8]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b6a:	f000 f991 	bl	8006e90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b6e:	2100      	movs	r1, #0
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fee3 	bl	800793c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b76:	f000 f999 	bl	8006eac <xTaskResumeAll>
 8006b7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b82:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <vTaskDelay+0x68>)
 8006b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000370 	.word	0x20000370
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006bac:	f001 f85c 	bl	8007c68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <vTaskSuspend+0x18>
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8006cac <vTaskSuspend+0x108>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	e000      	b.n	8006bbe <vTaskSuspend+0x1a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f9ab 	bl	8005f20 <uxListRemove>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d115      	bne.n	8006bfc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd4:	4936      	ldr	r1, [pc, #216]	@ (8006cb0 <vTaskSuspend+0x10c>)
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <vTaskSuspend+0x58>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bea:	2201      	movs	r2, #1
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	43da      	mvns	r2, r3
 8006bf2:	4b30      	ldr	r3, [pc, #192]	@ (8006cb4 <vTaskSuspend+0x110>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb4 <vTaskSuspend+0x110>)
 8006bfa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3318      	adds	r3, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff f989 	bl	8005f20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4828      	ldr	r0, [pc, #160]	@ (8006cb8 <vTaskSuspend+0x114>)
 8006c16:	f7ff f926 	bl	8005e66 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d103      	bne.n	8006c2e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006c2e:	f001 f84d 	bl	8007ccc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006c32:	4b22      	ldr	r3, [pc, #136]	@ (8006cbc <vTaskSuspend+0x118>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006c3a:	f001 f815 	bl	8007c68 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006c3e:	f000 fc9d 	bl	800757c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006c42:	f001 f843 	bl	8007ccc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006c46:	4b19      	ldr	r3, [pc, #100]	@ (8006cac <vTaskSuspend+0x108>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d128      	bne.n	8006ca2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8006c50:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <vTaskSuspend+0x118>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d018      	beq.n	8006c8a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006c58:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <vTaskSuspend+0x11c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <vTaskSuspend+0xd4>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60bb      	str	r3, [r7, #8]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006c78:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <vTaskSuspend+0x120>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c88:	e00b      	b.n	8006ca2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <vTaskSuspend+0x114>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc8 <vTaskSuspend+0x124>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d103      	bne.n	8006c9e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8006c96:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <vTaskSuspend+0x108>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
	}
 8006c9c:	e001      	b.n	8006ca2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8006c9e:	f000 fa5d 	bl	800715c <vTaskSwitchContext>
	}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000248 	.word	0x20000248
 8006cb0:	2000024c 	.word	0x2000024c
 8006cb4:	20000350 	.word	0x20000350
 8006cb8:	20000334 	.word	0x20000334
 8006cbc:	20000354 	.word	0x20000354
 8006cc0:	20000370 	.word	0x20000370
 8006cc4:	e000ed04 	.word	0xe000ed04
 8006cc8:	20000348 	.word	0x20000348

08006ccc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60fb      	str	r3, [r7, #12]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8006d28 <prvTaskIsTaskSuspended+0x5c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d10a      	bne.n	8006d1a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	4a08      	ldr	r2, [pc, #32]	@ (8006d2c <prvTaskIsTaskSuspended+0x60>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d005      	beq.n	8006d1a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8006d16:	2301      	movs	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d1a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	20000334 	.word	0x20000334
 8006d2c:	20000308 	.word	0x20000308

08006d30 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <vTaskResume+0x2a>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	60bb      	str	r3, [r7, #8]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006d5a:	4b20      	ldr	r3, [pc, #128]	@ (8006ddc <vTaskResume+0xac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d037      	beq.n	8006dd4 <vTaskResume+0xa4>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d034      	beq.n	8006dd4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006d6a:	f000 ff7d 	bl	8007c68 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ffac 	bl	8006ccc <prvTaskIsTaskSuspended>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d02a      	beq.n	8006dd0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff f8ce 	bl	8005f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <vTaskResume+0xb0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4a13      	ldr	r2, [pc, #76]	@ (8006de0 <vTaskResume+0xb0>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a10      	ldr	r2, [pc, #64]	@ (8006de4 <vTaskResume+0xb4>)
 8006da4:	441a      	add	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7ff f85a 	bl	8005e66 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <vTaskResume+0xac>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d307      	bcc.n	8006dd0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <vTaskResume+0xb8>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006dd0:	f000 ff7c 	bl	8007ccc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000248 	.word	0x20000248
 8006de0:	20000350 	.word	0x20000350
 8006de4:	2000024c 	.word	0x2000024c
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006df2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e70 <vTaskStartScheduler+0x84>)
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2280      	movs	r2, #128	@ 0x80
 8006dfe:	491d      	ldr	r1, [pc, #116]	@ (8006e74 <vTaskStartScheduler+0x88>)
 8006e00:	481d      	ldr	r0, [pc, #116]	@ (8006e78 <vTaskStartScheduler+0x8c>)
 8006e02:	f7ff fd4d 	bl	80068a0 <xTaskCreate>
 8006e06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d11b      	bne.n	8006e46 <vTaskStartScheduler+0x5a>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
}
 8006e20:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e22:	4b16      	ldr	r3, [pc, #88]	@ (8006e7c <vTaskStartScheduler+0x90>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	334c      	adds	r3, #76	@ 0x4c
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <vTaskStartScheduler+0x94>)
 8006e2a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e2c:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <vTaskStartScheduler+0x98>)
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e34:	4b14      	ldr	r3, [pc, #80]	@ (8006e88 <vTaskStartScheduler+0x9c>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e3a:	4b14      	ldr	r3, [pc, #80]	@ (8006e8c <vTaskStartScheduler+0xa0>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e40:	f000 fe6e 	bl	8007b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e44:	e00f      	b.n	8006e66 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d10b      	bne.n	8006e66 <vTaskStartScheduler+0x7a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <vTaskStartScheduler+0x76>
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000036c 	.word	0x2000036c
 8006e74:	080084ec 	.word	0x080084ec
 8006e78:	08007445 	.word	0x08007445
 8006e7c:	20000248 	.word	0x20000248
 8006e80:	20000020 	.word	0x20000020
 8006e84:	20000368 	.word	0x20000368
 8006e88:	20000354 	.word	0x20000354
 8006e8c:	2000034c 	.word	0x2000034c

08006e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <vTaskSuspendAll+0x18>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a03      	ldr	r2, [pc, #12]	@ (8006ea8 <vTaskSuspendAll+0x18>)
 8006e9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000370 	.word	0x20000370

08006eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eba:	4b42      	ldr	r3, [pc, #264]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <xTaskResumeAll+0x2e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	603b      	str	r3, [r7, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eda:	f000 fec5 	bl	8007c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ede:	4b39      	ldr	r3, [pc, #228]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	4a37      	ldr	r2, [pc, #220]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ee6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee8:	4b36      	ldr	r3, [pc, #216]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d161      	bne.n	8006fb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ef0:	4b35      	ldr	r3, [pc, #212]	@ (8006fc8 <xTaskResumeAll+0x11c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05d      	beq.n	8006fb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef8:	e02e      	b.n	8006f58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efa:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <xTaskResumeAll+0x120>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3318      	adds	r3, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff f80a 	bl	8005f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f805 	bl	8005f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006fd0 <xTaskResumeAll+0x124>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd0 <xTaskResumeAll+0x124>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4a27      	ldr	r2, [pc, #156]	@ (8006fd4 <xTaskResumeAll+0x128>)
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7fe ff91 	bl	8005e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4b23      	ldr	r3, [pc, #140]	@ (8006fd8 <xTaskResumeAll+0x12c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f52:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f58:	4b1c      	ldr	r3, [pc, #112]	@ (8006fcc <xTaskResumeAll+0x120>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1cc      	bne.n	8006efa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f66:	f000 fb09 	bl	800757c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <xTaskResumeAll+0x134>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d010      	beq.n	8006f98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f76:	f000 f837 	bl	8006fe8 <xTaskIncrementTick>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f80:	4b16      	ldr	r3, [pc, #88]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f1      	bne.n	8006f76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <xTaskResumeAll+0x134>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f98:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <xTaskResumeAll+0x138>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fb4:	f000 fe8a 	bl	8007ccc <vPortExitCritical>

	return xAlreadyYielded;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000370 	.word	0x20000370
 8006fc8:	20000348 	.word	0x20000348
 8006fcc:	20000308 	.word	0x20000308
 8006fd0:	20000350 	.word	0x20000350
 8006fd4:	2000024c 	.word	0x2000024c
 8006fd8:	20000248 	.word	0x20000248
 8006fdc:	2000035c 	.word	0x2000035c
 8006fe0:	20000358 	.word	0x20000358
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8007130 <xTaskIncrementTick+0x148>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f040 808f 	bne.w	800711a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8007134 <xTaskIncrementTick+0x14c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007004:	4a4b      	ldr	r2, [pc, #300]	@ (8007134 <xTaskIncrementTick+0x14c>)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d121      	bne.n	8007054 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007010:	4b49      	ldr	r3, [pc, #292]	@ (8007138 <xTaskIncrementTick+0x150>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <xTaskIncrementTick+0x4a>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskIncrementTick+0x46>
 8007032:	4b41      	ldr	r3, [pc, #260]	@ (8007138 <xTaskIncrementTick+0x150>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <xTaskIncrementTick+0x154>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3e      	ldr	r2, [pc, #248]	@ (8007138 <xTaskIncrementTick+0x150>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4a3e      	ldr	r2, [pc, #248]	@ (800713c <xTaskIncrementTick+0x154>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b3e      	ldr	r3, [pc, #248]	@ (8007140 <xTaskIncrementTick+0x158>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	4a3c      	ldr	r2, [pc, #240]	@ (8007140 <xTaskIncrementTick+0x158>)
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	f000 fa94 	bl	800757c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007054:	4b3b      	ldr	r3, [pc, #236]	@ (8007144 <xTaskIncrementTick+0x15c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d348      	bcc.n	80070f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800705e:	4b36      	ldr	r3, [pc, #216]	@ (8007138 <xTaskIncrementTick+0x150>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007068:	4b36      	ldr	r3, [pc, #216]	@ (8007144 <xTaskIncrementTick+0x15c>)
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	601a      	str	r2, [r3, #0]
					break;
 8007070:	e03e      	b.n	80070f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b31      	ldr	r3, [pc, #196]	@ (8007138 <xTaskIncrementTick+0x150>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d203      	bcs.n	8007092 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800708a:	4a2e      	ldr	r2, [pc, #184]	@ (8007144 <xTaskIncrementTick+0x15c>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007090:	e02e      	b.n	80070f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff42 	bl	8005f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3318      	adds	r3, #24
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe ff39 	bl	8005f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	2201      	movs	r2, #1
 80070b4:	409a      	lsls	r2, r3
 80070b6:	4b24      	ldr	r3, [pc, #144]	@ (8007148 <xTaskIncrementTick+0x160>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	4a22      	ldr	r2, [pc, #136]	@ (8007148 <xTaskIncrementTick+0x160>)
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <xTaskIncrementTick+0x164>)
 80070ce:	441a      	add	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fe fec5 	bl	8005e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <xTaskIncrementTick+0x168>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d3b9      	bcc.n	800705e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ee:	e7b6      	b.n	800705e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070f0:	4b17      	ldr	r3, [pc, #92]	@ (8007150 <xTaskIncrementTick+0x168>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f6:	4915      	ldr	r1, [pc, #84]	@ (800714c <xTaskIncrementTick+0x164>)
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d901      	bls.n	800710c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800710c:	4b11      	ldr	r3, [pc, #68]	@ (8007154 <xTaskIncrementTick+0x16c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e004      	b.n	8007124 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800711a:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <xTaskIncrementTick+0x170>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a0d      	ldr	r2, [pc, #52]	@ (8007158 <xTaskIncrementTick+0x170>)
 8007122:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007124:	697b      	ldr	r3, [r7, #20]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000370 	.word	0x20000370
 8007134:	2000034c 	.word	0x2000034c
 8007138:	20000300 	.word	0x20000300
 800713c:	20000304 	.word	0x20000304
 8007140:	20000360 	.word	0x20000360
 8007144:	20000368 	.word	0x20000368
 8007148:	20000350 	.word	0x20000350
 800714c:	2000024c 	.word	0x2000024c
 8007150:	20000248 	.word	0x20000248
 8007154:	2000035c 	.word	0x2000035c
 8007158:	20000358 	.word	0x20000358

0800715c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007162:	4b2a      	ldr	r3, [pc, #168]	@ (800720c <vTaskSwitchContext+0xb0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800716a:	4b29      	ldr	r3, [pc, #164]	@ (8007210 <vTaskSwitchContext+0xb4>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007170:	e045      	b.n	80071fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007172:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <vTaskSwitchContext+0xb4>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007178:	4b26      	ldr	r3, [pc, #152]	@ (8007214 <vTaskSwitchContext+0xb8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f1c3 031f 	rsb	r3, r3, #31
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4922      	ldr	r1, [pc, #136]	@ (8007218 <vTaskSwitchContext+0xbc>)
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <vTaskSwitchContext+0x5a>
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4a14      	ldr	r2, [pc, #80]	@ (8007218 <vTaskSwitchContext+0xbc>)
 80071c6:	4413      	add	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	3308      	adds	r3, #8
 80071dc:	429a      	cmp	r2, r3
 80071de:	d104      	bne.n	80071ea <vTaskSwitchContext+0x8e>
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4a0a      	ldr	r2, [pc, #40]	@ (800721c <vTaskSwitchContext+0xc0>)
 80071f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <vTaskSwitchContext+0xc0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	334c      	adds	r3, #76	@ 0x4c
 80071fa:	4a09      	ldr	r2, [pc, #36]	@ (8007220 <vTaskSwitchContext+0xc4>)
 80071fc:	6013      	str	r3, [r2, #0]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000370 	.word	0x20000370
 8007210:	2000035c 	.word	0x2000035c
 8007214:	20000350 	.word	0x20000350
 8007218:	2000024c 	.word	0x2000024c
 800721c:	20000248 	.word	0x20000248
 8007220:	20000020 	.word	0x20000020

08007224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800724c:	4b07      	ldr	r3, [pc, #28]	@ (800726c <vTaskPlaceOnEventList+0x48>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3318      	adds	r3, #24
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe fe2a 	bl	8005eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800725a:	2101      	movs	r1, #1
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f000 fb6d 	bl	800793c <prvAddCurrentTaskToDelayedList>
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000248 	.word	0x20000248

08007270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fe3c 	bl	8005f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <xTaskRemoveFromEventList+0xb0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11c      	bne.n	80072ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fe33 	bl	8005f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	2201      	movs	r2, #1
 80072c0:	409a      	lsls	r2, r3
 80072c2:	4b18      	ldr	r3, [pc, #96]	@ (8007324 <xTaskRemoveFromEventList+0xb4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a16      	ldr	r2, [pc, #88]	@ (8007324 <xTaskRemoveFromEventList+0xb4>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4a13      	ldr	r2, [pc, #76]	@ (8007328 <xTaskRemoveFromEventList+0xb8>)
 80072da:	441a      	add	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe fdbf 	bl	8005e66 <vListInsertEnd>
 80072e8:	e005      	b.n	80072f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	3318      	adds	r3, #24
 80072ee:	4619      	mov	r1, r3
 80072f0:	480e      	ldr	r0, [pc, #56]	@ (800732c <xTaskRemoveFromEventList+0xbc>)
 80072f2:	f7fe fdb8 	bl	8005e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <xTaskRemoveFromEventList+0xc0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d905      	bls.n	8007310 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007308:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <xTaskRemoveFromEventList+0xc4>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e001      	b.n	8007314 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007314:	697b      	ldr	r3, [r7, #20]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000370 	.word	0x20000370
 8007324:	20000350 	.word	0x20000350
 8007328:	2000024c 	.word	0x2000024c
 800732c:	20000308 	.word	0x20000308
 8007330:	20000248 	.word	0x20000248
 8007334:	2000035c 	.word	0x2000035c

08007338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <vTaskInternalSetTimeOutState+0x24>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007348:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <vTaskInternalSetTimeOutState+0x28>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000360 	.word	0x20000360
 8007360:	2000034c 	.word	0x2000034c

08007364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	613b      	str	r3, [r7, #16]
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60fb      	str	r3, [r7, #12]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80073aa:	f000 fc5d 	bl	8007c68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007424 <xTaskCheckForTimeOut+0xc0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d102      	bne.n	80073ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	e023      	b.n	8007416 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b15      	ldr	r3, [pc, #84]	@ (8007428 <xTaskCheckForTimeOut+0xc4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d007      	beq.n	80073ea <xTaskCheckForTimeOut+0x86>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	e015      	b.n	8007416 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d20b      	bcs.n	800740c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff99 	bl	8007338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	e004      	b.n	8007416 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007416:	f000 fc59 	bl	8007ccc <vPortExitCritical>

	return xReturn;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	2000034c 	.word	0x2000034c
 8007428:	20000360 	.word	0x20000360

0800742c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007430:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <vTaskMissedYield+0x14>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
}
 8007436:	bf00      	nop
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	2000035c 	.word	0x2000035c

08007444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800744c:	f000 f852 	bl	80074f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007450:	4b06      	ldr	r3, [pc, #24]	@ (800746c <prvIdleTask+0x28>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d9f9      	bls.n	800744c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007458:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <prvIdleTask+0x2c>)
 800745a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007468:	e7f0      	b.n	800744c <prvIdleTask+0x8>
 800746a:	bf00      	nop
 800746c:	2000024c 	.word	0x2000024c
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800747a:	2300      	movs	r3, #0
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	e00c      	b.n	800749a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4a12      	ldr	r2, [pc, #72]	@ (80074d4 <prvInitialiseTaskLists+0x60>)
 800748c:	4413      	add	r3, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fcbc 	bl	8005e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b06      	cmp	r3, #6
 800749e:	d9ef      	bls.n	8007480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074a0:	480d      	ldr	r0, [pc, #52]	@ (80074d8 <prvInitialiseTaskLists+0x64>)
 80074a2:	f7fe fcb3 	bl	8005e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074a6:	480d      	ldr	r0, [pc, #52]	@ (80074dc <prvInitialiseTaskLists+0x68>)
 80074a8:	f7fe fcb0 	bl	8005e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074ac:	480c      	ldr	r0, [pc, #48]	@ (80074e0 <prvInitialiseTaskLists+0x6c>)
 80074ae:	f7fe fcad 	bl	8005e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074b2:	480c      	ldr	r0, [pc, #48]	@ (80074e4 <prvInitialiseTaskLists+0x70>)
 80074b4:	f7fe fcaa 	bl	8005e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074b8:	480b      	ldr	r0, [pc, #44]	@ (80074e8 <prvInitialiseTaskLists+0x74>)
 80074ba:	f7fe fca7 	bl	8005e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074be:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <prvInitialiseTaskLists+0x78>)
 80074c0:	4a05      	ldr	r2, [pc, #20]	@ (80074d8 <prvInitialiseTaskLists+0x64>)
 80074c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074c4:	4b0a      	ldr	r3, [pc, #40]	@ (80074f0 <prvInitialiseTaskLists+0x7c>)
 80074c6:	4a05      	ldr	r2, [pc, #20]	@ (80074dc <prvInitialiseTaskLists+0x68>)
 80074c8:	601a      	str	r2, [r3, #0]
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	2000024c 	.word	0x2000024c
 80074d8:	200002d8 	.word	0x200002d8
 80074dc:	200002ec 	.word	0x200002ec
 80074e0:	20000308 	.word	0x20000308
 80074e4:	2000031c 	.word	0x2000031c
 80074e8:	20000334 	.word	0x20000334
 80074ec:	20000300 	.word	0x20000300
 80074f0:	20000304 	.word	0x20000304

080074f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fa:	e019      	b.n	8007530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074fc:	f000 fbb4 	bl	8007c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007500:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <prvCheckTasksWaitingTermination+0x50>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fd07 	bl	8005f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007512:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <prvCheckTasksWaitingTermination+0x54>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3b01      	subs	r3, #1
 8007518:	4a0b      	ldr	r2, [pc, #44]	@ (8007548 <prvCheckTasksWaitingTermination+0x54>)
 800751a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800751c:	4b0b      	ldr	r3, [pc, #44]	@ (800754c <prvCheckTasksWaitingTermination+0x58>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3b01      	subs	r3, #1
 8007522:	4a0a      	ldr	r2, [pc, #40]	@ (800754c <prvCheckTasksWaitingTermination+0x58>)
 8007524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007526:	f000 fbd1 	bl	8007ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f810 	bl	8007550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007530:	4b06      	ldr	r3, [pc, #24]	@ (800754c <prvCheckTasksWaitingTermination+0x58>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e1      	bne.n	80074fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	2000031c 	.word	0x2000031c
 8007548:	20000348 	.word	0x20000348
 800754c:	20000330 	.word	0x20000330

08007550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	334c      	adds	r3, #76	@ 0x4c
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fe9b 	bl	8008298 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fd6e 	bl	8008048 <vPortFree>
			vPortFree( pxTCB );
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fd6b 	bl	8008048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007582:	4b0c      	ldr	r3, [pc, #48]	@ (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007594:	e008      	b.n	80075a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a04      	ldr	r2, [pc, #16]	@ (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 80075a6:	6013      	str	r3, [r2, #0]
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000300 	.word	0x20000300
 80075b8:	20000368 	.word	0x20000368

080075bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075c2:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <xTaskGetSchedulerState+0x34>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ca:	2301      	movs	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	e008      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d0:	4b08      	ldr	r3, [pc, #32]	@ (80075f4 <xTaskGetSchedulerState+0x38>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075d8:	2302      	movs	r3, #2
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e001      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075e2:	687b      	ldr	r3, [r7, #4]
	}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	20000354 	.word	0x20000354
 80075f4:	20000370 	.word	0x20000370

080075f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d05e      	beq.n	80076cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007612:	4b31      	ldr	r3, [pc, #196]	@ (80076d8 <xTaskPriorityInherit+0xe0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	429a      	cmp	r2, r3
 800761a:	d24e      	bcs.n	80076ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	db06      	blt.n	8007632 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007624:	4b2c      	ldr	r3, [pc, #176]	@ (80076d8 <xTaskPriorityInherit+0xe0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	f1c3 0207 	rsb	r2, r3, #7
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6959      	ldr	r1, [r3, #20]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a26      	ldr	r2, [pc, #152]	@ (80076dc <xTaskPriorityInherit+0xe4>)
 8007644:	4413      	add	r3, r2
 8007646:	4299      	cmp	r1, r3
 8007648:	d12f      	bne.n	80076aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fc66 	bl	8005f20 <uxListRemove>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	2201      	movs	r2, #1
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	43da      	mvns	r2, r3
 8007666:	4b1e      	ldr	r3, [pc, #120]	@ (80076e0 <xTaskPriorityInherit+0xe8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4013      	ands	r3, r2
 800766c:	4a1c      	ldr	r2, [pc, #112]	@ (80076e0 <xTaskPriorityInherit+0xe8>)
 800766e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007670:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <xTaskPriorityInherit+0xe0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	2201      	movs	r2, #1
 8007680:	409a      	lsls	r2, r3
 8007682:	4b17      	ldr	r3, [pc, #92]	@ (80076e0 <xTaskPriorityInherit+0xe8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4313      	orrs	r3, r2
 8007688:	4a15      	ldr	r2, [pc, #84]	@ (80076e0 <xTaskPriorityInherit+0xe8>)
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a10      	ldr	r2, [pc, #64]	@ (80076dc <xTaskPriorityInherit+0xe4>)
 800769a:	441a      	add	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fbdf 	bl	8005e66 <vListInsertEnd>
 80076a8:	e004      	b.n	80076b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076aa:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <xTaskPriorityInherit+0xe0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e008      	b.n	80076cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <xTaskPriorityInherit+0xe0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d201      	bcs.n	80076cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076cc:	68fb      	ldr	r3, [r7, #12]
	}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000248 	.word	0x20000248
 80076dc:	2000024c 	.word	0x2000024c
 80076e0:	20000350 	.word	0x20000350

080076e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d070      	beq.n	80077dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076fa:	4b3b      	ldr	r3, [pc, #236]	@ (80077e8 <xTaskPriorityDisinherit+0x104>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d00b      	beq.n	800771c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60bb      	str	r3, [r7, #8]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007740:	1e5a      	subs	r2, r3, #1
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774e:	429a      	cmp	r2, r3
 8007750:	d044      	beq.n	80077dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d140      	bne.n	80077dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	3304      	adds	r3, #4
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fbde 	bl	8005f20 <uxListRemove>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d115      	bne.n	8007796 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776e:	491f      	ldr	r1, [pc, #124]	@ (80077ec <xTaskPriorityDisinherit+0x108>)
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	440b      	add	r3, r1
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <xTaskPriorityDisinherit+0xb2>
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	2201      	movs	r2, #1
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43da      	mvns	r2, r3
 800778c:	4b18      	ldr	r3, [pc, #96]	@ (80077f0 <xTaskPriorityDisinherit+0x10c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4013      	ands	r3, r2
 8007792:	4a17      	ldr	r2, [pc, #92]	@ (80077f0 <xTaskPriorityDisinherit+0x10c>)
 8007794:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a2:	f1c3 0207 	rsb	r2, r3, #7
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ae:	2201      	movs	r2, #1
 80077b0:	409a      	lsls	r2, r3
 80077b2:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <xTaskPriorityDisinherit+0x10c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	4a0d      	ldr	r2, [pc, #52]	@ (80077f0 <xTaskPriorityDisinherit+0x10c>)
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4a08      	ldr	r2, [pc, #32]	@ (80077ec <xTaskPriorityDisinherit+0x108>)
 80077ca:	441a      	add	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7fe fb47 	bl	8005e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
	}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000248 	.word	0x20000248
 80077ec:	2000024c 	.word	0x2000024c
 80077f0:	20000350 	.word	0x20000350

080077f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007802:	2301      	movs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d079      	beq.n	8007900 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d902      	bls.n	800783c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	e002      	b.n	8007842 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007840:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	429a      	cmp	r2, r3
 800784a:	d059      	beq.n	8007900 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	429a      	cmp	r2, r3
 8007854:	d154      	bne.n	8007900 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007856:	4b2c      	ldr	r3, [pc, #176]	@ (8007908 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	429a      	cmp	r2, r3
 800785e:	d10b      	bne.n	8007878 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60bb      	str	r3, [r7, #8]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	db04      	blt.n	8007896 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f1c3 0207 	rsb	r2, r3, #7
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4a19      	ldr	r2, [pc, #100]	@ (800790c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078a6:	4413      	add	r3, r2
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d129      	bne.n	8007900 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fb35 	bl	8005f20 <uxListRemove>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	2201      	movs	r2, #1
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	43da      	mvns	r2, r3
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4013      	ands	r3, r2
 80078ce:	4a10      	ldr	r2, [pc, #64]	@ (8007910 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	2201      	movs	r2, #1
 80078d8:	409a      	lsls	r2, r3
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4313      	orrs	r3, r2
 80078e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007910 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4a06      	ldr	r2, [pc, #24]	@ (800790c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80078f2:	441a      	add	r2, r3
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fe fab3 	bl	8005e66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007900:	bf00      	nop
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000248 	.word	0x20000248
 800790c:	2000024c 	.word	0x2000024c
 8007910:	20000350 	.word	0x20000350

08007914 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <pvTaskIncrementMutexHeldCount+0x24>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007920:	4b05      	ldr	r3, [pc, #20]	@ (8007938 <pvTaskIncrementMutexHeldCount+0x24>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007926:	3201      	adds	r2, #1
 8007928:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800792a:	4b03      	ldr	r3, [pc, #12]	@ (8007938 <pvTaskIncrementMutexHeldCount+0x24>)
 800792c:	681b      	ldr	r3, [r3, #0]
	}
 800792e:	4618      	mov	r0, r3
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20000248 	.word	0x20000248

0800793c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007946:	4b29      	ldr	r3, [pc, #164]	@ (80079ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800794c:	4b28      	ldr	r3, [pc, #160]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fae4 	bl	8005f20 <uxListRemove>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800795e:	4b24      	ldr	r3, [pc, #144]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	2201      	movs	r2, #1
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	43da      	mvns	r2, r3
 800796c:	4b21      	ldr	r3, [pc, #132]	@ (80079f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4013      	ands	r3, r2
 8007972:	4a20      	ldr	r2, [pc, #128]	@ (80079f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007974:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d10a      	bne.n	8007994 <prvAddCurrentTaskToDelayedList+0x58>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007984:	4b1a      	ldr	r3, [pc, #104]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	481a      	ldr	r0, [pc, #104]	@ (80079f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800798e:	f7fe fa6a 	bl	8005e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007992:	e026      	b.n	80079e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800799c:	4b14      	ldr	r3, [pc, #80]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d209      	bcs.n	80079c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ac:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b0f      	ldr	r3, [pc, #60]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe fa78 	bl	8005eae <vListInsert>
}
 80079be:	e010      	b.n	80079e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a00 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	4b0a      	ldr	r3, [pc, #40]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7fe fa6e 	bl	8005eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d202      	bcs.n	80079e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079dc:	4a09      	ldr	r2, [pc, #36]	@ (8007a04 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6013      	str	r3, [r2, #0]
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	2000034c 	.word	0x2000034c
 80079f0:	20000248 	.word	0x20000248
 80079f4:	20000350 	.word	0x20000350
 80079f8:	20000334 	.word	0x20000334
 80079fc:	20000304 	.word	0x20000304
 8007a00:	20000300 	.word	0x20000300
 8007a04:	20000368 	.word	0x20000368

08007a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b04      	subs	r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f023 0201 	bic.w	r2, r3, #1
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a38:	4a0c      	ldr	r2, [pc, #48]	@ (8007a6c <pxPortInitialiseStack+0x64>)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3b14      	subs	r3, #20
 8007a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f06f 0202 	mvn.w	r2, #2
 8007a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3b20      	subs	r3, #32
 8007a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	08007a71 	.word	0x08007a71

08007a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a7a:	4b13      	ldr	r3, [pc, #76]	@ (8007ac8 <prvTaskExitError+0x58>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d00b      	beq.n	8007a9c <prvTaskExitError+0x2c>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <prvTaskExitError+0x28>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60bb      	str	r3, [r7, #8]
}
 8007aae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ab0:	bf00      	nop
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0fc      	beq.n	8007ab2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	2000001c 	.word	0x2000001c
 8007acc:	00000000 	.word	0x00000000

08007ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ad0:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <pxCurrentTCBConst2>)
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	6808      	ldr	r0, [r1, #0]
 8007ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	f380 8809 	msr	PSP, r0
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8811 	msr	BASEPRI, r0
 8007aea:	4770      	bx	lr
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst2>:
 8007af0:	20000248 	.word	0x20000248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007af8:	4808      	ldr	r0, [pc, #32]	@ (8007b1c <prvPortStartFirstTask+0x24>)
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	6800      	ldr	r0, [r0, #0]
 8007afe:	f380 8808 	msr	MSP, r0
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8814 	msr	CONTROL, r0
 8007b0a:	b662      	cpsie	i
 8007b0c:	b661      	cpsie	f
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	df00      	svc	0
 8007b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b1a:	bf00      	nop
 8007b1c:	e000ed08 	.word	0xe000ed08

08007b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b26:	4b47      	ldr	r3, [pc, #284]	@ (8007c44 <xPortStartScheduler+0x124>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a47      	ldr	r2, [pc, #284]	@ (8007c48 <xPortStartScheduler+0x128>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10b      	bne.n	8007b48 <xPortStartScheduler+0x28>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b48:	4b3e      	ldr	r3, [pc, #248]	@ (8007c44 <xPortStartScheduler+0x124>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c4c <xPortStartScheduler+0x12c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10b      	bne.n	8007b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	613b      	str	r3, [r7, #16]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b6a:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <xPortStartScheduler+0x130>)
 8007b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	22ff      	movs	r2, #255	@ 0xff
 8007b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	4b31      	ldr	r3, [pc, #196]	@ (8007c54 <xPortStartScheduler+0x134>)
 8007b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b92:	4b31      	ldr	r3, [pc, #196]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007b94:	2207      	movs	r2, #7
 8007b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b98:	e009      	b.n	8007bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb6:	2b80      	cmp	r3, #128	@ 0x80
 8007bb8:	d0ef      	beq.n	8007b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bba:	4b27      	ldr	r3, [pc, #156]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1c3 0307 	rsb	r3, r3, #7
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d00b      	beq.n	8007bde <xPortStartScheduler+0xbe>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60bb      	str	r3, [r7, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bde:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007be8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bf0:	4a19      	ldr	r2, [pc, #100]	@ (8007c58 <xPortStartScheduler+0x138>)
 8007bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bfc:	4b17      	ldr	r3, [pc, #92]	@ (8007c5c <xPortStartScheduler+0x13c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a16      	ldr	r2, [pc, #88]	@ (8007c5c <xPortStartScheduler+0x13c>)
 8007c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c08:	4b14      	ldr	r3, [pc, #80]	@ (8007c5c <xPortStartScheduler+0x13c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <xPortStartScheduler+0x13c>)
 8007c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c14:	f000 f8da 	bl	8007dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c18:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <xPortStartScheduler+0x140>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c1e:	f000 f8f9 	bl	8007e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c22:	4b10      	ldr	r3, [pc, #64]	@ (8007c64 <xPortStartScheduler+0x144>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a0f      	ldr	r2, [pc, #60]	@ (8007c64 <xPortStartScheduler+0x144>)
 8007c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c2e:	f7ff ff63 	bl	8007af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c32:	f7ff fa93 	bl	800715c <vTaskSwitchContext>
	prvTaskExitError();
 8007c36:	f7ff ff1b 	bl	8007a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	e000ed00 	.word	0xe000ed00
 8007c48:	410fc271 	.word	0x410fc271
 8007c4c:	410fc270 	.word	0x410fc270
 8007c50:	e000e400 	.word	0xe000e400
 8007c54:	20000374 	.word	0x20000374
 8007c58:	20000378 	.word	0x20000378
 8007c5c:	e000ed20 	.word	0xe000ed20
 8007c60:	2000001c 	.word	0x2000001c
 8007c64:	e000ef34 	.word	0xe000ef34

08007c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c82:	4b10      	ldr	r3, [pc, #64]	@ (8007cc4 <vPortEnterCritical+0x5c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	4a0e      	ldr	r2, [pc, #56]	@ (8007cc4 <vPortEnterCritical+0x5c>)
 8007c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc4 <vPortEnterCritical+0x5c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d110      	bne.n	8007cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c94:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <vPortEnterCritical+0x60>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	603b      	str	r3, [r7, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	e7fd      	b.n	8007cb2 <vPortEnterCritical+0x4a>
	}
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	2000001c 	.word	0x2000001c
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cd2:	4b12      	ldr	r3, [pc, #72]	@ (8007d1c <vPortExitCritical+0x50>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <vPortExitCritical+0x26>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	607b      	str	r3, [r7, #4]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <vPortExitCritical+0x50>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4a08      	ldr	r2, [pc, #32]	@ (8007d1c <vPortExitCritical+0x50>)
 8007cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <vPortExitCritical+0x50>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <vPortExitCritical+0x44>
 8007d04:	2300      	movs	r3, #0
 8007d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	2000001c 	.word	0x2000001c

08007d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b15      	ldr	r3, [pc, #84]	@ (8007d80 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f01e 0f10 	tst.w	lr, #16
 8007d30:	bf08      	it	eq
 8007d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d44:	f380 8811 	msr	BASEPRI, r0
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f7ff fa04 	bl	800715c <vTaskSwitchContext>
 8007d54:	f04f 0000 	mov.w	r0, #0
 8007d58:	f380 8811 	msr	BASEPRI, r0
 8007d5c:	bc09      	pop	{r0, r3}
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	6808      	ldr	r0, [r1, #0]
 8007d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d66:	f01e 0f10 	tst.w	lr, #16
 8007d6a:	bf08      	it	eq
 8007d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d70:	f380 8809 	msr	PSP, r0
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	f3af 8000 	nop.w

08007d80 <pxCurrentTCBConst>:
 8007d80:	20000248 	.word	0x20000248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop

08007d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007da2:	f7ff f921 	bl	8006fe8 <xTaskIncrementTick>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <SysTick_Handler+0x40>)
 8007dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f383 8811 	msr	BASEPRI, r3
}
 8007dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <vPortSetupTimerInterrupt+0x34>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <vPortSetupTimerInterrupt+0x38>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <vPortSetupTimerInterrupt+0x3c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0a      	ldr	r2, [pc, #40]	@ (8007e0c <vPortSetupTimerInterrupt+0x40>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	099b      	lsrs	r3, r3, #6
 8007de8:	4a09      	ldr	r2, [pc, #36]	@ (8007e10 <vPortSetupTimerInterrupt+0x44>)
 8007dea:	3b01      	subs	r3, #1
 8007dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dee:	4b04      	ldr	r3, [pc, #16]	@ (8007e00 <vPortSetupTimerInterrupt+0x34>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	e000e010 	.word	0xe000e010
 8007e04:	e000e018 	.word	0xe000e018
 8007e08:	20000010 	.word	0x20000010
 8007e0c:	10624dd3 	.word	0x10624dd3
 8007e10:	e000e014 	.word	0xe000e014

08007e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e24 <vPortEnableVFP+0x10>
 8007e18:	6801      	ldr	r1, [r0, #0]
 8007e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e1e:	6001      	str	r1, [r0, #0]
 8007e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e22:	bf00      	nop
 8007e24:	e000ed88 	.word	0xe000ed88

08007e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e2e:	f3ef 8305 	mrs	r3, IPSR
 8007e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d915      	bls.n	8007e66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e3a:	4a18      	ldr	r2, [pc, #96]	@ (8007e9c <vPortValidateInterruptPriority+0x74>)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e44:	4b16      	ldr	r3, [pc, #88]	@ (8007ea0 <vPortValidateInterruptPriority+0x78>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	7afa      	ldrb	r2, [r7, #11]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d20b      	bcs.n	8007e66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <vPortValidateInterruptPriority+0x7c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <vPortValidateInterruptPriority+0x80>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d90b      	bls.n	8007e8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	603b      	str	r3, [r7, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <vPortValidateInterruptPriority+0x62>
	}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	e000e3f0 	.word	0xe000e3f0
 8007ea0:	20000374 	.word	0x20000374
 8007ea4:	e000ed0c 	.word	0xe000ed0c
 8007ea8:	20000378 	.word	0x20000378

08007eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08a      	sub	sp, #40	@ 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007eb8:	f7fe ffea 	bl	8006e90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8008030 <pvPortMalloc+0x184>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ec4:	f000 f924 	bl	8008110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8008034 <pvPortMalloc+0x188>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 8095 	bne.w	8008000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007edc:	2208      	movs	r2, #8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d015      	beq.n	8007f1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f023 0307 	bic.w	r3, r3, #7
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <pvPortMalloc+0x6e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	617b      	str	r3, [r7, #20]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d06f      	beq.n	8008000 <pvPortMalloc+0x154>
 8007f20:	4b45      	ldr	r3, [pc, #276]	@ (8008038 <pvPortMalloc+0x18c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d86a      	bhi.n	8008000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f2a:	4b44      	ldr	r3, [pc, #272]	@ (800803c <pvPortMalloc+0x190>)
 8007f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f2e:	4b43      	ldr	r3, [pc, #268]	@ (800803c <pvPortMalloc+0x190>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f34:	e004      	b.n	8007f40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d903      	bls.n	8007f52 <pvPortMalloc+0xa6>
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f1      	bne.n	8007f36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f52:	4b37      	ldr	r3, [pc, #220]	@ (8008030 <pvPortMalloc+0x184>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d051      	beq.n	8008000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2208      	movs	r2, #8
 8007f62:	4413      	add	r3, r2
 8007f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	2308      	movs	r3, #8
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d920      	bls.n	8007fc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <pvPortMalloc+0xfc>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fba:	69b8      	ldr	r0, [r7, #24]
 8007fbc:	f000 f90a 	bl	80081d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <pvPortMalloc+0x18c>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	4a1b      	ldr	r2, [pc, #108]	@ (8008038 <pvPortMalloc+0x18c>)
 8007fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fce:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <pvPortMalloc+0x18c>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008040 <pvPortMalloc+0x194>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d203      	bcs.n	8007fe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fda:	4b17      	ldr	r3, [pc, #92]	@ (8008038 <pvPortMalloc+0x18c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a18      	ldr	r2, [pc, #96]	@ (8008040 <pvPortMalloc+0x194>)
 8007fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4b13      	ldr	r3, [pc, #76]	@ (8008034 <pvPortMalloc+0x188>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <pvPortMalloc+0x198>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a11      	ldr	r2, [pc, #68]	@ (8008044 <pvPortMalloc+0x198>)
 8007ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008000:	f7fe ff54 	bl	8006eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <pvPortMalloc+0x17a>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	60fb      	str	r3, [r7, #12]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <pvPortMalloc+0x176>
	return pvReturn;
 8008026:	69fb      	ldr	r3, [r7, #28]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3728      	adds	r7, #40	@ 0x28
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20002388 	.word	0x20002388
 8008034:	2000239c 	.word	0x2000239c
 8008038:	2000238c 	.word	0x2000238c
 800803c:	20002380 	.word	0x20002380
 8008040:	20002390 	.word	0x20002390
 8008044:	20002394 	.word	0x20002394

08008048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d04f      	beq.n	80080fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800805a:	2308      	movs	r3, #8
 800805c:	425b      	negs	r3, r3
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	4b25      	ldr	r3, [pc, #148]	@ (8008104 <vPortFree+0xbc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <vPortFree+0x46>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	60fb      	str	r3, [r7, #12]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <vPortFree+0x66>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	4b14      	ldr	r3, [pc, #80]	@ (8008104 <vPortFree+0xbc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01e      	beq.n	80080fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11a      	bne.n	80080fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008104 <vPortFree+0xbc>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080d4:	f7fe fedc 	bl	8006e90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <vPortFree+0xc0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4413      	add	r3, r2
 80080e2:	4a09      	ldr	r2, [pc, #36]	@ (8008108 <vPortFree+0xc0>)
 80080e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080e6:	6938      	ldr	r0, [r7, #16]
 80080e8:	f000 f874 	bl	80081d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080ec:	4b07      	ldr	r3, [pc, #28]	@ (800810c <vPortFree+0xc4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	4a06      	ldr	r2, [pc, #24]	@ (800810c <vPortFree+0xc4>)
 80080f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080f6:	f7fe fed9 	bl	8006eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080fa:	bf00      	nop
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2000239c 	.word	0x2000239c
 8008108:	2000238c 	.word	0x2000238c
 800810c:	20002398 	.word	0x20002398

08008110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008116:	f242 0304 	movw	r3, #8196	@ 0x2004
 800811a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800811c:	4b27      	ldr	r3, [pc, #156]	@ (80081bc <prvHeapInit+0xac>)
 800811e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00c      	beq.n	8008144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3307      	adds	r3, #7
 800812e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0307 	bic.w	r3, r3, #7
 8008136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	4a1f      	ldr	r2, [pc, #124]	@ (80081bc <prvHeapInit+0xac>)
 8008140:	4413      	add	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008148:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <prvHeapInit+0xb0>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800814e:	4b1c      	ldr	r3, [pc, #112]	@ (80081c0 <prvHeapInit+0xb0>)
 8008150:	2200      	movs	r2, #0
 8008152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	4413      	add	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800815c:	2208      	movs	r2, #8
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4a15      	ldr	r2, [pc, #84]	@ (80081c4 <prvHeapInit+0xb4>)
 8008170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008172:	4b14      	ldr	r3, [pc, #80]	@ (80081c4 <prvHeapInit+0xb4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800817a:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <prvHeapInit+0xb4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008190:	4b0c      	ldr	r3, [pc, #48]	@ (80081c4 <prvHeapInit+0xb4>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4a0a      	ldr	r2, [pc, #40]	@ (80081c8 <prvHeapInit+0xb8>)
 800819e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a09      	ldr	r2, [pc, #36]	@ (80081cc <prvHeapInit+0xbc>)
 80081a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081a8:	4b09      	ldr	r3, [pc, #36]	@ (80081d0 <prvHeapInit+0xc0>)
 80081aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081ae:	601a      	str	r2, [r3, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	2000037c 	.word	0x2000037c
 80081c0:	20002380 	.word	0x20002380
 80081c4:	20002388 	.word	0x20002388
 80081c8:	20002390 	.word	0x20002390
 80081cc:	2000238c 	.word	0x2000238c
 80081d0:	2000239c 	.word	0x2000239c

080081d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081dc:	4b28      	ldr	r3, [pc, #160]	@ (8008280 <prvInsertBlockIntoFreeList+0xac>)
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	e002      	b.n	80081e8 <prvInsertBlockIntoFreeList+0x14>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d8f7      	bhi.n	80081e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d108      	bne.n	8008216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	441a      	add	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	441a      	add	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d118      	bne.n	800825c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b15      	ldr	r3, [pc, #84]	@ (8008284 <prvInsertBlockIntoFreeList+0xb0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d00d      	beq.n	8008252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	e008      	b.n	8008264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008252:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <prvInsertBlockIntoFreeList+0xb0>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e003      	b.n	8008264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d002      	beq.n	8008272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	20002380 	.word	0x20002380
 8008284:	20002388 	.word	0x20002388

08008288 <memset>:
 8008288:	4402      	add	r2, r0
 800828a:	4603      	mov	r3, r0
 800828c:	4293      	cmp	r3, r2
 800828e:	d100      	bne.n	8008292 <memset+0xa>
 8008290:	4770      	bx	lr
 8008292:	f803 1b01 	strb.w	r1, [r3], #1
 8008296:	e7f9      	b.n	800828c <memset+0x4>

08008298 <_reclaim_reent>:
 8008298:	4b2d      	ldr	r3, [pc, #180]	@ (8008350 <_reclaim_reent+0xb8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4283      	cmp	r3, r0
 800829e:	b570      	push	{r4, r5, r6, lr}
 80082a0:	4604      	mov	r4, r0
 80082a2:	d053      	beq.n	800834c <_reclaim_reent+0xb4>
 80082a4:	69c3      	ldr	r3, [r0, #28]
 80082a6:	b31b      	cbz	r3, 80082f0 <_reclaim_reent+0x58>
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	b163      	cbz	r3, 80082c6 <_reclaim_reent+0x2e>
 80082ac:	2500      	movs	r5, #0
 80082ae:	69e3      	ldr	r3, [r4, #28]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	5959      	ldr	r1, [r3, r5]
 80082b4:	b9b1      	cbnz	r1, 80082e4 <_reclaim_reent+0x4c>
 80082b6:	3504      	adds	r5, #4
 80082b8:	2d80      	cmp	r5, #128	@ 0x80
 80082ba:	d1f8      	bne.n	80082ae <_reclaim_reent+0x16>
 80082bc:	69e3      	ldr	r3, [r4, #28]
 80082be:	4620      	mov	r0, r4
 80082c0:	68d9      	ldr	r1, [r3, #12]
 80082c2:	f000 f87b 	bl	80083bc <_free_r>
 80082c6:	69e3      	ldr	r3, [r4, #28]
 80082c8:	6819      	ldr	r1, [r3, #0]
 80082ca:	b111      	cbz	r1, 80082d2 <_reclaim_reent+0x3a>
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 f875 	bl	80083bc <_free_r>
 80082d2:	69e3      	ldr	r3, [r4, #28]
 80082d4:	689d      	ldr	r5, [r3, #8]
 80082d6:	b15d      	cbz	r5, 80082f0 <_reclaim_reent+0x58>
 80082d8:	4629      	mov	r1, r5
 80082da:	4620      	mov	r0, r4
 80082dc:	682d      	ldr	r5, [r5, #0]
 80082de:	f000 f86d 	bl	80083bc <_free_r>
 80082e2:	e7f8      	b.n	80082d6 <_reclaim_reent+0x3e>
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f868 	bl	80083bc <_free_r>
 80082ec:	4631      	mov	r1, r6
 80082ee:	e7e1      	b.n	80082b4 <_reclaim_reent+0x1c>
 80082f0:	6961      	ldr	r1, [r4, #20]
 80082f2:	b111      	cbz	r1, 80082fa <_reclaim_reent+0x62>
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 f861 	bl	80083bc <_free_r>
 80082fa:	69e1      	ldr	r1, [r4, #28]
 80082fc:	b111      	cbz	r1, 8008304 <_reclaim_reent+0x6c>
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 f85c 	bl	80083bc <_free_r>
 8008304:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008306:	b111      	cbz	r1, 800830e <_reclaim_reent+0x76>
 8008308:	4620      	mov	r0, r4
 800830a:	f000 f857 	bl	80083bc <_free_r>
 800830e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008310:	b111      	cbz	r1, 8008318 <_reclaim_reent+0x80>
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f852 	bl	80083bc <_free_r>
 8008318:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800831a:	b111      	cbz	r1, 8008322 <_reclaim_reent+0x8a>
 800831c:	4620      	mov	r0, r4
 800831e:	f000 f84d 	bl	80083bc <_free_r>
 8008322:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008324:	b111      	cbz	r1, 800832c <_reclaim_reent+0x94>
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f848 	bl	80083bc <_free_r>
 800832c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800832e:	b111      	cbz	r1, 8008336 <_reclaim_reent+0x9e>
 8008330:	4620      	mov	r0, r4
 8008332:	f000 f843 	bl	80083bc <_free_r>
 8008336:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008338:	b111      	cbz	r1, 8008340 <_reclaim_reent+0xa8>
 800833a:	4620      	mov	r0, r4
 800833c:	f000 f83e 	bl	80083bc <_free_r>
 8008340:	6a23      	ldr	r3, [r4, #32]
 8008342:	b11b      	cbz	r3, 800834c <_reclaim_reent+0xb4>
 8008344:	4620      	mov	r0, r4
 8008346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800834a:	4718      	bx	r3
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	bf00      	nop
 8008350:	20000020 	.word	0x20000020

08008354 <__libc_init_array>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4d0d      	ldr	r5, [pc, #52]	@ (800838c <__libc_init_array+0x38>)
 8008358:	4c0d      	ldr	r4, [pc, #52]	@ (8008390 <__libc_init_array+0x3c>)
 800835a:	1b64      	subs	r4, r4, r5
 800835c:	10a4      	asrs	r4, r4, #2
 800835e:	2600      	movs	r6, #0
 8008360:	42a6      	cmp	r6, r4
 8008362:	d109      	bne.n	8008378 <__libc_init_array+0x24>
 8008364:	4d0b      	ldr	r5, [pc, #44]	@ (8008394 <__libc_init_array+0x40>)
 8008366:	4c0c      	ldr	r4, [pc, #48]	@ (8008398 <__libc_init_array+0x44>)
 8008368:	f000 f87e 	bl	8008468 <_init>
 800836c:	1b64      	subs	r4, r4, r5
 800836e:	10a4      	asrs	r4, r4, #2
 8008370:	2600      	movs	r6, #0
 8008372:	42a6      	cmp	r6, r4
 8008374:	d105      	bne.n	8008382 <__libc_init_array+0x2e>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	f855 3b04 	ldr.w	r3, [r5], #4
 800837c:	4798      	blx	r3
 800837e:	3601      	adds	r6, #1
 8008380:	e7ee      	b.n	8008360 <__libc_init_array+0xc>
 8008382:	f855 3b04 	ldr.w	r3, [r5], #4
 8008386:	4798      	blx	r3
 8008388:	3601      	adds	r6, #1
 800838a:	e7f2      	b.n	8008372 <__libc_init_array+0x1e>
 800838c:	0800853c 	.word	0x0800853c
 8008390:	0800853c 	.word	0x0800853c
 8008394:	0800853c 	.word	0x0800853c
 8008398:	08008540 	.word	0x08008540

0800839c <__retarget_lock_acquire_recursive>:
 800839c:	4770      	bx	lr

0800839e <__retarget_lock_release_recursive>:
 800839e:	4770      	bx	lr

080083a0 <memcpy>:
 80083a0:	440a      	add	r2, r1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a8:	d100      	bne.n	80083ac <memcpy+0xc>
 80083aa:	4770      	bx	lr
 80083ac:	b510      	push	{r4, lr}
 80083ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b6:	4291      	cmp	r1, r2
 80083b8:	d1f9      	bne.n	80083ae <memcpy+0xe>
 80083ba:	bd10      	pop	{r4, pc}

080083bc <_free_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4605      	mov	r5, r0
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d041      	beq.n	8008448 <_free_r+0x8c>
 80083c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c8:	1f0c      	subs	r4, r1, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfb8      	it	lt
 80083ce:	18e4      	addlt	r4, r4, r3
 80083d0:	f000 f83e 	bl	8008450 <__malloc_lock>
 80083d4:	4a1d      	ldr	r2, [pc, #116]	@ (800844c <_free_r+0x90>)
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	b933      	cbnz	r3, 80083e8 <_free_r+0x2c>
 80083da:	6063      	str	r3, [r4, #4]
 80083dc:	6014      	str	r4, [r2, #0]
 80083de:	4628      	mov	r0, r5
 80083e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e4:	f000 b83a 	b.w	800845c <__malloc_unlock>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d908      	bls.n	80083fe <_free_r+0x42>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf01      	itttt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	1809      	addeq	r1, r1, r0
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	e7ed      	b.n	80083da <_free_r+0x1e>
 80083fe:	461a      	mov	r2, r3
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b10b      	cbz	r3, 8008408 <_free_r+0x4c>
 8008404:	42a3      	cmp	r3, r4
 8008406:	d9fa      	bls.n	80083fe <_free_r+0x42>
 8008408:	6811      	ldr	r1, [r2, #0]
 800840a:	1850      	adds	r0, r2, r1
 800840c:	42a0      	cmp	r0, r4
 800840e:	d10b      	bne.n	8008428 <_free_r+0x6c>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	4401      	add	r1, r0
 8008414:	1850      	adds	r0, r2, r1
 8008416:	4283      	cmp	r3, r0
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	d1e0      	bne.n	80083de <_free_r+0x22>
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	6053      	str	r3, [r2, #4]
 8008422:	4408      	add	r0, r1
 8008424:	6010      	str	r0, [r2, #0]
 8008426:	e7da      	b.n	80083de <_free_r+0x22>
 8008428:	d902      	bls.n	8008430 <_free_r+0x74>
 800842a:	230c      	movs	r3, #12
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	e7d6      	b.n	80083de <_free_r+0x22>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428b      	cmp	r3, r1
 8008436:	bf04      	itt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	bf04      	itt	eq
 8008440:	1809      	addeq	r1, r1, r0
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	6054      	str	r4, [r2, #4]
 8008446:	e7ca      	b.n	80083de <_free_r+0x22>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	200024dc 	.word	0x200024dc

08008450 <__malloc_lock>:
 8008450:	4801      	ldr	r0, [pc, #4]	@ (8008458 <__malloc_lock+0x8>)
 8008452:	f7ff bfa3 	b.w	800839c <__retarget_lock_acquire_recursive>
 8008456:	bf00      	nop
 8008458:	200024d8 	.word	0x200024d8

0800845c <__malloc_unlock>:
 800845c:	4801      	ldr	r0, [pc, #4]	@ (8008464 <__malloc_unlock+0x8>)
 800845e:	f7ff bf9e 	b.w	800839e <__retarget_lock_release_recursive>
 8008462:	bf00      	nop
 8008464:	200024d8 	.word	0x200024d8

08008468 <_init>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr

08008474 <_fini>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr
