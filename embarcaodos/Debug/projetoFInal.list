
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006778  08006778  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006780  08006780  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006780  08006780  00007780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006788  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a4  2000006c  080067f4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004410  080067f4  00008410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b83  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  00020c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00024268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001128  00000000  00000000  00025870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003196  00000000  00000000  00026998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018805  00000000  00000000  00029b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce371  00000000  00000000  00042333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001106a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd0  00000000  00000000  001106e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  001166b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080066d8 	.word	0x080066d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080066d8 	.word	0x080066d8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <led_task+0x34>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f004 f9e7 	bl	8004934 <xQueueSemaphoreTake>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1f5      	bne.n	8000558 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f000 ff18 	bl	80013ac <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 800057c:	e7ec      	b.n	8000558 <led_task+0xc>
 800057e:	bf00      	nop
 8000580:	20000120 	.word	0x20000120

08000584 <button_task>:
		}
	}
}

void button_task(void *args){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	while(1){

		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 800058c:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <button_task+0x38>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4618      	mov	r0, r3
 8000596:	f004 f9cd 	bl	8004934 <xQueueSemaphoreTake>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f5      	bne.n	800058c <button_task+0x8>
			vTaskDelay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f004 fd25 	bl	8004ff0 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <button_task+0x3c>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f004 f82e 	bl	8004610 <xQueueGenericSend>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b4:	2028      	movs	r0, #40	@ 0x28
 80005b6:	f000 fc83 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 80005ba:	e7e7      	b.n	800058c <button_task+0x8>
 80005bc:	2000011c 	.word	0x2000011c
 80005c0:	20000120 	.word	0x20000120

080005c4 <uart_task>:
		}
	}
}

void uart_task(void *argument){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	uint8_t *string = (uint8_t *) "Ola Mundo da tarefa 1!\n\r";
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <uart_task+0x48>)
 80005ce:	60fb      	str	r3, [r7, #12]

	while(1){

		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <uart_task+0x4c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f04f 31ff 	mov.w	r1, #4294967295
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f9ab 	bl	8004934 <xQueueSemaphoreTake>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d10b      	bne.n	80005fc <uart_task+0x38>

			HAL_UART_Transmit_IT(&hlpuart1, string, 25);
 80005e4:	2219      	movs	r2, #25
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <uart_task+0x50>)
 80005ea:	f002 fa8b 	bl	8002b04 <HAL_UART_Transmit_IT>

			xSemaphoreTake(sUART, portMAX_DELAY);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <uart_task+0x54>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f04f 31ff 	mov.w	r1, #4294967295
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 f99c 	bl	8004934 <xQueueSemaphoreTake>
		}
		xSemaphoreGive(mUART);
 80005fc:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <uart_task+0x4c>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	f004 f803 	bl	8004610 <xQueueGenericSend>
		if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 800060a:	e7e1      	b.n	80005d0 <uart_task+0xc>
 800060c:	080066f0 	.word	0x080066f0
 8000610:	20000128 	.word	0x20000128
 8000614:	20000088 	.word	0x20000088
 8000618:	20000124 	.word	0x20000124

0800061c <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <HAL_UART_TxCpltCallback+0x3c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f8ee 	bl	8004814 <xQueueGiveFromISR>

	if (pxHigherPriorityTaskWokenTX == pdTRUE)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d107      	bne.n	800064e <HAL_UART_TxCpltCallback+0x32>
	{
		portYIELD();
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_UART_TxCpltCallback+0x40>)
 8000640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	f3bf 8f6f 	isb	sy
	}
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000124 	.word	0x20000124
 800065c:	e000ed04 	.word	0xe000ed04

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fafe 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f85b 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f8ed 	bl	800084c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000672:	f000 f8a1 	bl	80007b8 <MX_LPUART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
 8000676:	2203      	movs	r2, #3
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f003 ff40 	bl	8004500 <xQueueGenericCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <main+0x98>)
 8000684:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 8000686:	2203      	movs	r2, #3
 8000688:	2100      	movs	r1, #0
 800068a:	2001      	movs	r0, #1
 800068c:	f003 ff38 	bl	8004500 <xQueueGenericCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a1a      	ldr	r2, [pc, #104]	@ (80006fc <main+0x9c>)
 8000694:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000696:	2203      	movs	r2, #3
 8000698:	2100      	movs	r1, #0
 800069a:	2001      	movs	r0, #1
 800069c:	f003 ff30 	bl	8004500 <xQueueGenericCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <main+0xa0>)
 80006a4:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 80006a6:	2001      	movs	r0, #1
 80006a8:	f003 ff9a 	bl	80045e0 <xQueueCreateMutex>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <main+0xa4>)
 80006b0:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 128, &led, 2, NULL);
 80006b2:	2300      	movs	r3, #0
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2302      	movs	r3, #2
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <main+0xa8>)
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	4913      	ldr	r1, [pc, #76]	@ (800070c <main+0xac>)
 80006c0:	4813      	ldr	r0, [pc, #76]	@ (8000710 <main+0xb0>)
 80006c2:	f004 fb49 	bl	8004d58 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, NULL);
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	4910      	ldr	r1, [pc, #64]	@ (8000714 <main+0xb4>)
 80006d4:	4810      	ldr	r0, [pc, #64]	@ (8000718 <main+0xb8>)
 80006d6:	f004 fb3f 	bl	8004d58 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, NULL);
 80006da:	2300      	movs	r3, #0
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2303      	movs	r3, #3
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	2280      	movs	r2, #128	@ 0x80
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <main+0xbc>)
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <main+0xc0>)
 80006ea:	f004 fb35 	bl	8004d58 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f003 fde1 	bl	80042b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0x92>
 80006f6:	bf00      	nop
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	20000120 	.word	0x20000120
 8000700:	20000124 	.word	0x20000124
 8000704:	20000128 	.word	0x20000128
 8000708:	20000000 	.word	0x20000000
 800070c:	0800670c 	.word	0x0800670c
 8000710:	0800054d 	.word	0x0800054d
 8000714:	08006718 	.word	0x08006718
 8000718:	080005c5 	.word	0x080005c5
 800071c:	08006724 	.word	0x08006724
 8000720:	08000585 	.word	0x08000585

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	2238      	movs	r2, #56	@ 0x38
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fee0 	bl	80064f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fe62 	bl	8001410 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2303      	movs	r3, #3
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800075e:	2306      	movs	r3, #6
 8000760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000762:	2355      	movs	r3, #85	@ 0x55
 8000764:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fefe 	bl	8001578 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000782:	f000 f901 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2104      	movs	r1, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f9fc 	bl	8001b9c <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007aa:	f000 f8ed 	bl	8000988 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007bc:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <MX_LPUART1_UART_Init+0x90>)
 80007c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 80007fc:	f002 f932 	bl	8002a64 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f8bf 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 800080e:	f003 fc86 	bl	800411e <HAL_UARTEx_SetTxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000818:	f000 f8b6 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4809      	ldr	r0, [pc, #36]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	f003 fcbb 	bl	800419a <HAL_UARTEx_SetRxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800082a:	f000 f8ad 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_LPUART1_UART_Init+0x8c>)
 8000830:	f003 fc3c 	bl	80040ac <HAL_UARTEx_DisableFifoMode>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800083a:	f000 f8a5 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000088 	.word	0x20000088
 8000848:	40008000 	.word	0x40008000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a28      	ldr	r2, [pc, #160]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <MX_GPIO_Init+0xbc>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a22      	ldr	r2, [pc, #136]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a1c      	ldr	r2, [pc, #112]	@ (8000908 <MX_GPIO_Init+0xbc>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_GPIO_Init+0xbc>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f000 fd63 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c2:	2302      	movs	r3, #2
 80008c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <MX_GPIO_Init+0xc0>)
 80008ce:	f000 fbd3 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d2:	2320      	movs	r3, #32
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f000 fbc4 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2105      	movs	r1, #5
 80008f4:	2028      	movs	r0, #40	@ 0x28
 80008f6:	f000 fac9 	bl	8000e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008fa:	2028      	movs	r0, #40	@ 0x28
 80008fc:	f000 fae0 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	48000800 	.word	0x48000800

08000910 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000924:	d115      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000926:	2028      	movs	r0, #40	@ 0x28
 8000928:	f000 fad8 	bl	8000edc <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 800092c:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_GPIO_EXTI_Callback+0x4c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ff6c 	bl	8004814 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d007      	beq.n	8000952 <HAL_GPIO_EXTI_Callback+0x42>
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x50>)
 8000944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	f3bf 8f6f 	isb	sy
	}
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000011c 	.word	0x2000011c
 8000960:	e000ed04 	.word	0xe000ed04

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000976:	f000 f98f 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40012c00 	.word	0x40012c00

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_MspInit+0x50>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <HAL_MspInit+0x50>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_MspInit+0x50>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_MspInit+0x50>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_MspInit+0x50>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x50>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fa5b 	bl	8000e8c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009d6:	f000 fdbf 	bl	8001558 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09a      	sub	sp, #104	@ 0x68
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2244      	movs	r2, #68	@ 0x44
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 fd75 	bl	80064f8 <memset>
  if(huart->Instance==LPUART1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <HAL_UART_MspInit+0xb8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d13e      	bne.n	8000a96 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fb07 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a30:	f7ff ffaa 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a38:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	4a14      	ldr	r2, [pc, #80]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_UART_MspInit+0xbc>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a64:	230c      	movs	r3, #12
 8000a66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a74:	230c      	movs	r3, #12
 8000a76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a82:	f000 faf9 	bl	8001078 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2105      	movs	r1, #5
 8000a8a:	205b      	movs	r0, #91	@ 0x5b
 8000a8c:	f000 f9fe 	bl	8000e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a90:	205b      	movs	r0, #91	@ 0x5b
 8000a92:	f000 fa15 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a96:	bf00      	nop
 8000a98:	3768      	adds	r7, #104	@ 0x68
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40008000 	.word	0x40008000
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000abe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 020c 	add.w	r2, r7, #12
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fa34 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ae0:	f001 fa1c 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8000ae4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <HAL_InitTick+0xc8>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <HAL_InitTick+0xd0>)
 8000af8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000afc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b16:	f001 fc7f 	bl	8002418 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11b      	bne.n	8000b60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b2a:	f001 fcd7 	bl	80024dc <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d111      	bne.n	8000b60 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b3c:	2019      	movs	r0, #25
 8000b3e:	f000 f9bf 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d808      	bhi.n	8000b5a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2019      	movs	r0, #25
 8000b4e:	f000 f99d 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_InitTick+0xd4>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e002      	b.n	8000b60 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3730      	adds	r7, #48	@ 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	2000012c 	.word	0x2000012c
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	20000010 	.word	0x20000010

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bbe:	f001 fcf7 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000012c 	.word	0x2000012c

08000bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000bd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bd4:	f000 fc04 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <LPUART1_IRQHandler+0x10>)
 8000be2:	f002 f823 	bl	8002c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000088 	.word	0x20000088

08000bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c14:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ffea 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	@ (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f005 fcbf 	bl	80065c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fd0b 	bl	8000660 <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   r0, =_estack
 8000c4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c58:	08006788 	.word	0x08006788
  ldr r2, =_sbss
 8000c5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c60:	20004410 	.word	0x20004410

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f900 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff ff16 	bl	8000aa8 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e001      	b.n	8000c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c88:	f7ff fe84 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <HAL_IncTick+0x1c>)
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	20000178 	.word	0x20000178
 8000cb8:	20000014 	.word	0x20000014

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000178 	.word	0x20000178

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db12      	blt.n	8000dac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	490a      	ldr	r1, [pc, #40]	@ (8000db8 <__NVIC_DisableIRQ+0x44>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	3320      	adds	r3, #32
 8000d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000da0:	f3bf 8f4f 	dsb	sy
}
 8000da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da6:	f3bf 8f6f 	isb	sy
}
 8000daa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff28 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff3f 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb3 	bl	8000e10 <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff82 	bl	8000dbc <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff32 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff42 	bl	8000d74 <__NVIC_DisableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d005      	beq.n	8000f1c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2204      	movs	r2, #4
 8000f14:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e037      	b.n	8000f8c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020e 	bic.w	r2, r2, #14
 8000f2a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f3a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f68:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00c      	beq.n	8000f8c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f80:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f8a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d00d      	beq.n	8000fde <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e047      	b.n	800106e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020e 	bic.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800100c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f003 021f 	and.w	r2, r3, #31
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800102a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00c      	beq.n	800104e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800103e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001042:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800104c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4798      	blx	r3
    }
  }
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001086:	e15a      	b.n	800133e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 814c 	beq.w	8001338 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 0201 	and.w	r2, r3, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a6 	beq.w	8001338 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b5b      	ldr	r3, [pc, #364]	@ (800135c <HAL_GPIO_Init+0x2e4>)
 80011ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f0:	4a5a      	ldr	r2, [pc, #360]	@ (800135c <HAL_GPIO_Init+0x2e4>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f8:	4b58      	ldr	r3, [pc, #352]	@ (800135c <HAL_GPIO_Init+0x2e4>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001204:	4a56      	ldr	r2, [pc, #344]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800122e:	d01f      	beq.n	8001270 <HAL_GPIO_Init+0x1f8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4c      	ldr	r2, [pc, #304]	@ (8001364 <HAL_GPIO_Init+0x2ec>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d019      	beq.n	800126c <HAL_GPIO_Init+0x1f4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a4b      	ldr	r2, [pc, #300]	@ (8001368 <HAL_GPIO_Init+0x2f0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1f0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4a      	ldr	r2, [pc, #296]	@ (800136c <HAL_GPIO_Init+0x2f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a49      	ldr	r2, [pc, #292]	@ (8001370 <HAL_GPIO_Init+0x2f8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a48      	ldr	r2, [pc, #288]	@ (8001374 <HAL_GPIO_Init+0x2fc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1e4>
 8001258:	2305      	movs	r3, #5
 800125a:	e00a      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 800125c:	2306      	movs	r3, #6
 800125e:	e008      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001260:	2304      	movs	r3, #4
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001264:	2303      	movs	r3, #3
 8001266:	e004      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001268:	2302      	movs	r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001270:	2300      	movs	r3, #0
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001282:	4937      	ldr	r1, [pc, #220]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001290:	4b39      	ldr	r3, [pc, #228]	@ (8001378 <HAL_GPIO_Init+0x300>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b4:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <HAL_GPIO_Init+0x300>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <HAL_GPIO_Init+0x300>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012de:	4a26      	ldr	r2, [pc, #152]	@ (8001378 <HAL_GPIO_Init+0x300>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_GPIO_Init+0x300>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <HAL_GPIO_Init+0x300>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <HAL_GPIO_Init+0x300>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001332:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <HAL_GPIO_Init+0x300>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	f47f ae9d 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800
 800136c:	48000c00 	.word	0x48000c00
 8001370:	48001000 	.word	0x48001000
 8001374:	48001400 	.word	0x48001400
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fa86 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d141      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800141e:	4b4b      	ldr	r3, [pc, #300]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142a:	d131      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800142c:	4b47      	ldr	r3, [pc, #284]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001432:	4a46      	ldr	r2, [pc, #280]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	4b43      	ldr	r3, [pc, #268]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001444:	4a41      	ldr	r2, [pc, #260]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144c:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2232      	movs	r2, #50	@ 0x32
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	4a3f      	ldr	r2, [pc, #252]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001462:	e002      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146a:	4b38      	ldr	r3, [pc, #224]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001476:	d102      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f2      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147e:	4b33      	ldr	r3, [pc, #204]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148a:	d158      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e057      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001490:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001496:	4a2d      	ldr	r2, [pc, #180]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800149c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a0:	e04d      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a8:	d141      	bne.n	800152e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b6:	d131      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014be:	4a23      	ldr	r2, [pc, #140]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d0:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2232      	movs	r2, #50	@ 0x32
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ee:	e002      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001502:	d102      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f2      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001516:	d112      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e011      	b.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800152c:	e007      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800153c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40007000 	.word	0x40007000
 8001550:	2000000c 	.word	0x2000000c
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001566:	6093      	str	r3, [r2, #8]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e2fe      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d075      	beq.n	8001682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	4b97      	ldr	r3, [pc, #604]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a0:	4b94      	ldr	r3, [pc, #592]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3e>
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_OscConfig+0x44>
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4b8d      	ldr	r3, [pc, #564]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d05b      	beq.n	8001680 <HAL_RCC_OscConfig+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d157      	bne.n	8001680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e2d9      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_OscConfig+0x74>
 80015de:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a84      	ldr	r2, [pc, #528]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x98>
 80015f6:	4b7f      	ldr	r3, [pc, #508]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7e      	ldr	r2, [pc, #504]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b7c      	ldr	r3, [pc, #496]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7b      	ldr	r2, [pc, #492]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xb0>
 8001610:	4b78      	ldr	r3, [pc, #480]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a77      	ldr	r2, [pc, #476]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a74      	ldr	r2, [pc, #464]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb44 	bl	8000cbc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fb40 	bl	8000cbc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e29e      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xc0>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb30 	bl	8000cbc <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb2c 	bl	8000cbc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e28a      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	4b60      	ldr	r3, [pc, #384]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0xe8>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d075      	beq.n	800177a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4b59      	ldr	r3, [pc, #356]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001698:	4b56      	ldr	r3, [pc, #344]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0x136>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_OscConfig+0x13c>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d11f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x154>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e25d      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b49      	ldr	r3, [pc, #292]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4946      	ldr	r1, [pc, #280]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e0:	4b45      	ldr	r3, [pc, #276]	@ (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f9df 	bl	8000aa8 <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d043      	beq.n	8001778 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e249      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a3c      	ldr	r2, [pc, #240]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fad8 	bl	8000cbc <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fad4 	bl	8000cbc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e232      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	492d      	ldr	r1, [pc, #180]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
 8001742:	e01a      	b.n	800177a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2a      	ldr	r2, [pc, #168]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800174a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fab4 	bl	8000cbc <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fab0 	bl	8000cbc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e20e      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176a:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1e0>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d041      	beq.n	800180a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001794:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fa8d 	bl	8000cbc <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa89 	bl	8000cbc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1e7      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ef      	beq.n	80017a6 <HAL_RCC_OscConfig+0x22e>
 80017c6:	e020      	b.n	800180a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa70 	bl	8000cbc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017de:	e00d      	b.n	80017fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fa6c 	bl	8000cbc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d906      	bls.n	80017fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1ca      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ea      	bne.n	80017e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a6 	beq.w	8001964 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800181c:	4b84      	ldr	r3, [pc, #528]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x2b4>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x2b6>
 800182c:	2300      	movs	r3, #0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b7f      	ldr	r3, [pc, #508]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a7e      	ldr	r2, [pc, #504]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	4b79      	ldr	r3, [pc, #484]	@ (8001a34 <HAL_RCC_OscConfig+0x4bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185a:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x4bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a75      	ldr	r2, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x4bc>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fa29 	bl	8000cbc <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fa25 	bl	8000cbc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e183      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001880:	4b6c      	ldr	r3, [pc, #432]	@ (8001a34 <HAL_RCC_OscConfig+0x4bc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d108      	bne.n	80018a6 <HAL_RCC_OscConfig+0x32e>
 8001894:	4b66      	ldr	r3, [pc, #408]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	4a65      	ldr	r2, [pc, #404]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a4:	e024      	b.n	80018f0 <HAL_RCC_OscConfig+0x378>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d110      	bne.n	80018d0 <HAL_RCC_OscConfig+0x358>
 80018ae:	4b60      	ldr	r3, [pc, #384]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018be:	4b5c      	ldr	r3, [pc, #368]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ce:	e00f      	b.n	80018f0 <HAL_RCC_OscConfig+0x378>
 80018d0:	4b57      	ldr	r3, [pc, #348]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d6:	4a56      	ldr	r2, [pc, #344]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d016      	beq.n	8001926 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f9e0 	bl	8000cbc <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff f9dc 	bl	8000cbc <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e138      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	4b46      	ldr	r3, [pc, #280]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ed      	beq.n	8001900 <HAL_RCC_OscConfig+0x388>
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f9c9 	bl	8000cbc <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f9c5 	bl	8000cbc <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e121      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ed      	bne.n	800192e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001952:	7ffb      	ldrb	r3, [r7, #31]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b35      	ldr	r3, [pc, #212]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a34      	ldr	r2, [pc, #208]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 800197a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800197e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f998 	bl	8000cbc <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001990:	f7ff f994 	bl	8000cbc <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0f2      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a2:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80019a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x418>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80019b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f97b 	bl	8000cbc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ca:	f7ff f977 	bl	8000cbc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0d5      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80c9 	beq.w	8001b86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	f000 8083 	beq.w	8001b08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d15e      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f951 	bl	8000cbc <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	e00c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff f94d 	bl	8000cbc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d905      	bls.n	8001a38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0ab      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b55      	ldr	r3, [pc, #340]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ec      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b52      	ldr	r3, [pc, #328]	@ (8001b94 <HAL_RCC_OscConfig+0x61c>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6a11      	ldr	r1, [r2, #32]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a54:	3a01      	subs	r2, #1
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0552      	lsls	r2, r2, #21
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a72:	0852      	lsrs	r2, r2, #1
 8001a74:	3a01      	subs	r2, #1
 8001a76:	0652      	lsls	r2, r2, #25
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a7e:	06d2      	lsls	r2, r2, #27
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4943      	ldr	r1, [pc, #268]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a40      	ldr	r2, [pc, #256]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a3d      	ldr	r2, [pc, #244]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f90c 	bl	8000cbc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f908 	bl	8000cbc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e066      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x530>
 8001ac6:	e05e      	b.n	8001b86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f8f2 	bl	8000cbc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f8ee 	bl	8000cbc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04c      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4924      	ldr	r1, [pc, #144]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001b00:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_RCC_OscConfig+0x620>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
 8001b06:	e03e      	b.n	8001b86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e039      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d12c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	3b01      	subs	r3, #1
 8001b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d123      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d113      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	019f800c 	.word	0x019f800c
 8001b98:	feeefffc 	.word	0xfeeefffc

08001b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e11e      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b91      	ldr	r3, [pc, #580]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	498c      	ldr	r1, [pc, #560]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e106      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d073      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d129      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	4b81      	ldr	r3, [pc, #516]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0f4      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c08:	f000 f9d0 	bl	8001fac <RCC_GetSysClockFreqFromPLLSource>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4a7c      	ldr	r2, [pc, #496]	@ (8001e04 <HAL_RCC_ClockConfig+0x268>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d93f      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c16:	4b7a      	ldr	r3, [pc, #488]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d033      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d12f      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c36:	4b72      	ldr	r3, [pc, #456]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c3e:	4a70      	ldr	r2, [pc, #448]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e024      	b.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c54:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0c6      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0be      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c74:	f000 f8ce 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a61      	ldr	r2, [pc, #388]	@ (8001e04 <HAL_RCC_ClockConfig+0x268>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d909      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c82:	4b5f      	ldr	r3, [pc, #380]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4957      	ldr	r1, [pc, #348]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f808 	bl	8000cbc <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff f804 	bl	8000cbc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e095      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a42      	ldr	r2, [pc, #264]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d08:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d10:	4a3b      	ldr	r2, [pc, #236]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4936      	ldr	r1, [pc, #216]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b80      	cmp	r3, #128	@ 0x80
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4a32      	ldr	r2, [pc, #200]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d21d      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 020f 	bic.w	r2, r3, #15
 8001d54:	4929      	ldr	r1, [pc, #164]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe ffae 	bl	8000cbc <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe ffaa 	bl	8000cbc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e03b      	b.n	8001df2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1ed      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4917      	ldr	r1, [pc, #92]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	490f      	ldr	r1, [pc, #60]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc6:	f000 f825 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_RCC_ClockConfig+0x264>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <HAL_RCC_ClockConfig+0x26c>)
 8001dd8:	5ccb      	ldrb	r3, [r1, r3]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x270>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fe5c 	bl	8000aa8 <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	04c4b400 	.word	0x04c4b400
 8001e08:	08006738 	.word	0x08006738
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000010 	.word	0x20000010

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d102      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	e047      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e38:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e03e      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d136      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e68:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e72:	68d2      	ldr	r2, [r2, #12]
 8001e74:	0a12      	lsrs	r2, r2, #8
 8001e76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
      break;
 8001e80:	e00c      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	68d2      	ldr	r2, [r2, #12]
 8001e8e:	0a12      	lsrs	r2, r2, #8
 8001e90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0e5b      	lsrs	r3, r3, #25
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e001      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ebc:	693b      	ldr	r3, [r7, #16]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	016e3600 	.word	0x016e3600

08001ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4904      	ldr	r1, [pc, #16]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08006748 	.word	0x08006748

08001f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f20:	f7ff ffda 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0adb      	lsrs	r3, r3, #11
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08006748 	.word	0x08006748

08001f48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_RCC_GetClockConfig+0x60>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d10c      	bne.n	8001fea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd0:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fda:	68d2      	ldr	r2, [r2, #12]
 8001fdc:	0a12      	lsrs	r2, r2, #8
 8001fde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
    break;
 8001fe8:	e00c      	b.n	8002004 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	0a12      	lsrs	r2, r2, #8
 8001ff8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    break;
 8002002:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0e5b      	lsrs	r3, r3, #25
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800201e:	687b      	ldr	r3, [r7, #4]
}
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000
 8002030:	016e3600 	.word	0x016e3600
 8002034:	00f42400 	.word	0x00f42400

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002040:	2300      	movs	r3, #0
 8002042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002044:	2300      	movs	r3, #0
 8002046:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8098 	beq.w	8002186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10d      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a3f      	ldr	r2, [pc, #252]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a39      	ldr	r2, [pc, #228]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800208e:	f7fe fe15 	bl	8000cbc <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002094:	e009      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe fe11 	bl	8000cbc <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d902      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	74fb      	strb	r3, [r7, #19]
        break;
 80020a8:	e005      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020aa:	4b30      	ldr	r3, [pc, #192]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d159      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01e      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d019      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002104:	4a18      	ldr	r2, [pc, #96]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fdd1 	bl	8000cbc <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	e00b      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fdcd 	bl	8000cbc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d902      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	74fb      	strb	r3, [r7, #19]
            break;
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ec      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	4903      	ldr	r1, [pc, #12]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002160:	e008      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
 8002166:	e005      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002174:	7c7b      	ldrb	r3, [r7, #17]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d105      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4ba6      	ldr	r3, [pc, #664]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	4aa5      	ldr	r2, [pc, #660]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002192:	4ba0      	ldr	r3, [pc, #640]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f023 0203 	bic.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	499c      	ldr	r1, [pc, #624]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b4:	4b97      	ldr	r3, [pc, #604]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f023 020c 	bic.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4994      	ldr	r1, [pc, #592]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	498b      	ldr	r1, [pc, #556]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021f8:	4b86      	ldr	r3, [pc, #536]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	4983      	ldr	r1, [pc, #524]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221a:	4b7e      	ldr	r3, [pc, #504]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	497a      	ldr	r1, [pc, #488]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223c:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	4972      	ldr	r1, [pc, #456]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002264:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4969      	ldr	r1, [pc, #420]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002280:	4b64      	ldr	r3, [pc, #400]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4961      	ldr	r1, [pc, #388]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	4958      	ldr	r1, [pc, #352]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b53      	ldr	r3, [pc, #332]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	4950      	ldr	r1, [pc, #320]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022fc:	4b45      	ldr	r3, [pc, #276]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	4942      	ldr	r1, [pc, #264]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a3c      	ldr	r2, [pc, #240]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002326:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4934      	ldr	r1, [pc, #208]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	4926      	ldr	r1, [pc, #152]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800238a:	d105      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a20      	ldr	r2, [pc, #128]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	4918      	ldr	r1, [pc, #96]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002408:	7cbb      	ldrb	r3, [r7, #18]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e049      	b.n	80024be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f841 	bl	80024c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fa22 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e04a      	b.n	800258a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_TIM_Base_Start_IT+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x6c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800251e:	d013      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x6c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_TIM_Base_Start_IT+0xc0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x6c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1c      	ldr	r2, [pc, #112]	@ (80025a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x6c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x6c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d115      	bne.n	8002574 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HAL_TIM_Base_Start_IT+0xd0>)
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d015      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0xaa>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d011      	beq.n	8002586 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	e008      	b.n	8002586 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40013400 	.word	0x40013400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	00010007 	.word	0x00010007

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f931 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f923 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f934 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f90b 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8fd 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f90e 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8e5 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8d7 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8e8 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8bf 	bl	8002862 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8b1 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8c2 	bl	8002876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0201 	mvn.w	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe f924 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00c      	beq.n	800274a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f951 	bl	80029ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f949 	bl	8002a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f87c 	bl	800288a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0220 	mvn.w	r2, #32
 80027ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f911 	bl	80029d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80027d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f91d 	bl	8002a14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80027f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f915 	bl	8002a28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f90d 	bl	8002a3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00c      	beq.n	8002846 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f905 	bl	8002a50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a42      	ldr	r2, [pc, #264]	@ (80029bc <TIM_Base_SetConfig+0x11c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3f      	ldr	r2, [pc, #252]	@ (80029c0 <TIM_Base_SetConfig+0x120>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	@ (80029c4 <TIM_Base_SetConfig+0x124>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x38>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	@ (80029c8 <TIM_Base_SetConfig+0x128>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a33      	ldr	r2, [pc, #204]	@ (80029bc <TIM_Base_SetConfig+0x11c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f8:	d017      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <TIM_Base_SetConfig+0x120>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <TIM_Base_SetConfig+0x124>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2e      	ldr	r2, [pc, #184]	@ (80029c8 <TIM_Base_SetConfig+0x128>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2d      	ldr	r2, [pc, #180]	@ (80029cc <TIM_Base_SetConfig+0x12c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2c      	ldr	r2, [pc, #176]	@ (80029d0 <TIM_Base_SetConfig+0x130>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2b      	ldr	r2, [pc, #172]	@ (80029d4 <TIM_Base_SetConfig+0x134>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a16      	ldr	r2, [pc, #88]	@ (80029bc <TIM_Base_SetConfig+0x11c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00f      	beq.n	8002988 <TIM_Base_SetConfig+0xe8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <TIM_Base_SetConfig+0x128>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00b      	beq.n	8002988 <TIM_Base_SetConfig+0xe8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <TIM_Base_SetConfig+0x12c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <TIM_Base_SetConfig+0xe8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a15      	ldr	r2, [pc, #84]	@ (80029d0 <TIM_Base_SetConfig+0x130>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0xe8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <TIM_Base_SetConfig+0x134>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f023 0201 	bic.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
  }
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40013400 	.word	0x40013400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800

080029d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e042      	b.n	8002afc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fd ffad 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2224      	movs	r2, #36	@ 0x24
 8002a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fee0 	bl	8003874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fc11 	bl	80032dc <UART_SetConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e01b      	b.n	8002afc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 ff5f 	bl	80039b8 <UART_CheckIdleState>
 8002afa:	4603      	mov	r3, r0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b091      	sub	sp, #68	@ 0x44
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d178      	bne.n	8002c0e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_UART_Transmit_IT+0x24>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e071      	b.n	8002c10 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2221      	movs	r2, #33	@ 0x21
 8002b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b60:	d12a      	bne.n	8002bb8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6a:	d107      	bne.n	8002b7c <HAL_UART_Transmit_IT+0x78>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a29      	ldr	r2, [pc, #164]	@ (8002c1c <HAL_UART_Transmit_IT+0x118>)
 8002b78:	679a      	str	r2, [r3, #120]	@ 0x78
 8002b7a:	e002      	b.n	8002b82 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_UART_Transmit_IT+0x11c>)
 8002b80:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3308      	adds	r3, #8
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ba2:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <HAL_UART_Transmit_IT+0x7e>
 8002bb6:	e028      	b.n	8002c0a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc0:	d107      	bne.n	8002bd2 <HAL_UART_Transmit_IT+0xce>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <HAL_UART_Transmit_IT+0x120>)
 8002bce:	679a      	str	r2, [r3, #120]	@ 0x78
 8002bd0:	e002      	b.n	8002bd8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <HAL_UART_Transmit_IT+0x124>)
 8002bd6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	613b      	str	r3, [r7, #16]
   return(result);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	69f9      	ldr	r1, [r7, #28]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e6      	bne.n	8002bd8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3744      	adds	r7, #68	@ 0x44
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	08003f31 	.word	0x08003f31
 8002c20:	08003e51 	.word	0x08003e51
 8002c24:	08003d8f 	.word	0x08003d8f
 8002c28:	08003cd7 	.word	0x08003cd7

08002c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11b      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8300 	beq.w	8003296 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
      }
      return;
 8002c9e:	e2fa      	b.n	8003296 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8123 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002caa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002cae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ee4 <HAL_UART_IRQHandler+0x2b8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002cb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002cba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee8 <HAL_UART_IRQHandler+0x2bc>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8116 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d011      	beq.n	8002cf4 <HAL_UART_IRQHandler+0xc8>
 8002cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d011      	beq.n	8002d24 <HAL_UART_IRQHandler+0xf8>
 8002d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2202      	movs	r2, #2
 8002d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <HAL_UART_IRQHandler+0x128>
 8002d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2204      	movs	r2, #4
 8002d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d017      	beq.n	8002d90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002d70:	4b5c      	ldr	r3, [pc, #368]	@ (8002ee4 <HAL_UART_IRQHandler+0x2b8>)
 8002d72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f043 0208 	orr.w	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x196>
 8002d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00c      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8266 	beq.w	800329a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b40      	cmp	r3, #64	@ 0x40
 8002e18:	d005      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d054      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fedd 	bl	8003be6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d146      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3308      	adds	r3, #8
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3308      	adds	r3, #8
 8002e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d9      	bne.n	8002e3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d017      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e96:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <HAL_UART_IRQHandler+0x2c0>)
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe f882 	bl	8000faa <HAL_DMA_Abort_IT>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d019      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	e00f      	b.n	8002ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f9f5 	bl	80032b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec6:	e00b      	b.n	8002ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f9f1 	bl	80032b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ece:	e007      	b.n	8002ee0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f9ed 	bl	80032b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002ede:	e1dc      	b.n	800329a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	bf00      	nop
    return;
 8002ee2:	e1da      	b.n	800329a <HAL_UART_IRQHandler+0x66e>
 8002ee4:	10000001 	.word	0x10000001
 8002ee8:	04000120 	.word	0x04000120
 8002eec:	08003cb3 	.word	0x08003cb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 8170 	bne.w	80031da <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8169 	beq.w	80031da <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8162 	beq.w	80031da <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	f040 80d8 	bne.w	80030de <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80af 	beq.w	80030a4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f080 80a7 	bcs.w	80030a4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8087 	bne.w	8003082 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fa2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1da      	bne.n	8002f74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fe2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e1      	bne.n	8002fbe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800300a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800300c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800301e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800302c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e3      	bne.n	8002ffa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800304e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003050:	f023 0310 	bic.w	r3, r3, #16
 8003054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003062:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003064:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003068:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e4      	bne.n	8003040 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd ff3b 	bl	8000ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003094:	b29b      	uxth	r3, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f911 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80030a2:	e0fc      	b.n	800329e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80030aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f040 80f5 	bne.w	800329e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80eb 	bne.w	800329e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80030d4:	4619      	mov	r1, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8f4 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
      return;
 80030dc:	e0df      	b.n	800329e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80d1 	beq.w	80032a2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80cc 	beq.w	80032a2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800312c:	647b      	str	r3, [r7, #68]	@ 0x44
 800312e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e4      	bne.n	800310a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	623b      	str	r3, [r7, #32]
   return(result);
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003168:	633a      	str	r2, [r7, #48]	@ 0x30
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800316e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e1      	bne.n	8003140 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	60fb      	str	r3, [r7, #12]
   return(result);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f023 0310 	bic.w	r3, r3, #16
 80031a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	617b      	str	r3, [r7, #20]
   return(result);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e4      	bne.n	8003190 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f876 	bl	80032c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031d8:	e063      	b.n	80032a2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00e      	beq.n	8003204 <HAL_UART_IRQHandler+0x5d8>
 80031e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d008      	beq.n	8003204 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 ff37 	bl	8004070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003202:	e051      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d014      	beq.n	800323a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03a      	beq.n	80032a6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    }
    return;
 8003238:	e035      	b.n	80032a6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_UART_IRQHandler+0x62e>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fee1 	bl	800401a <UART_EndTransmit_IT>
    return;
 8003258:	e026      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x64e>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 ff10 	bl	8004098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003278:	e016      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d010      	beq.n	80032a8 <HAL_UART_IRQHandler+0x67c>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328a:	2b00      	cmp	r3, #0
 800328c:	da0c      	bge.n	80032a8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fef8 	bl	8004084 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003294:	e008      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003296:	bf00      	nop
 8003298:	e006      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
    return;
 800329a:	bf00      	nop
 800329c:	e004      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
      return;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
      return;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HAL_UART_IRQHandler+0x67c>
    return;
 80032a6:	bf00      	nop
  }
}
 80032a8:	37e8      	adds	r7, #232	@ 0xe8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b08c      	sub	sp, #48	@ 0x30
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4313      	orrs	r3, r2
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4bab      	ldr	r3, [pc, #684]	@ (80035b8 <UART_SetConfig+0x2dc>)
 800330c:	4013      	ands	r3, r2
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003314:	430b      	orrs	r3, r1
 8003316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4aa0      	ldr	r2, [pc, #640]	@ (80035bc <UART_SetConfig+0x2e0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003344:	4313      	orrs	r3, r2
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003352:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800335c:	430b      	orrs	r3, r1
 800335e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	f023 010f 	bic.w	r1, r3, #15
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a91      	ldr	r2, [pc, #580]	@ (80035c0 <UART_SetConfig+0x2e4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d125      	bne.n	80033cc <UART_SetConfig+0xf0>
 8003380:	4b90      	ldr	r3, [pc, #576]	@ (80035c4 <UART_SetConfig+0x2e8>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b03      	cmp	r3, #3
 800338c:	d81a      	bhi.n	80033c4 <UART_SetConfig+0xe8>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0xb8>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b5 	.word	0x080033b5
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033bd 	.word	0x080033bd
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033aa:	e0d6      	b.n	800355a <UART_SetConfig+0x27e>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b2:	e0d2      	b.n	800355a <UART_SetConfig+0x27e>
 80033b4:	2304      	movs	r3, #4
 80033b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ba:	e0ce      	b.n	800355a <UART_SetConfig+0x27e>
 80033bc:	2308      	movs	r3, #8
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c2:	e0ca      	b.n	800355a <UART_SetConfig+0x27e>
 80033c4:	2310      	movs	r3, #16
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ca:	e0c6      	b.n	800355a <UART_SetConfig+0x27e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7d      	ldr	r2, [pc, #500]	@ (80035c8 <UART_SetConfig+0x2ec>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d138      	bne.n	8003448 <UART_SetConfig+0x16c>
 80033d6:	4b7b      	ldr	r3, [pc, #492]	@ (80035c4 <UART_SetConfig+0x2e8>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d82d      	bhi.n	8003440 <UART_SetConfig+0x164>
 80033e4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <UART_SetConfig+0x110>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003441 	.word	0x08003441
 80033f4:	08003441 	.word	0x08003441
 80033f8:	08003441 	.word	0x08003441
 80033fc:	08003431 	.word	0x08003431
 8003400:	08003441 	.word	0x08003441
 8003404:	08003441 	.word	0x08003441
 8003408:	08003441 	.word	0x08003441
 800340c:	08003429 	.word	0x08003429
 8003410:	08003441 	.word	0x08003441
 8003414:	08003441 	.word	0x08003441
 8003418:	08003441 	.word	0x08003441
 800341c:	08003439 	.word	0x08003439
 8003420:	2300      	movs	r3, #0
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003426:	e098      	b.n	800355a <UART_SetConfig+0x27e>
 8003428:	2302      	movs	r3, #2
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800342e:	e094      	b.n	800355a <UART_SetConfig+0x27e>
 8003430:	2304      	movs	r3, #4
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003436:	e090      	b.n	800355a <UART_SetConfig+0x27e>
 8003438:	2308      	movs	r3, #8
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800343e:	e08c      	b.n	800355a <UART_SetConfig+0x27e>
 8003440:	2310      	movs	r3, #16
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003446:	e088      	b.n	800355a <UART_SetConfig+0x27e>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5f      	ldr	r2, [pc, #380]	@ (80035cc <UART_SetConfig+0x2f0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d125      	bne.n	800349e <UART_SetConfig+0x1c2>
 8003452:	4b5c      	ldr	r3, [pc, #368]	@ (80035c4 <UART_SetConfig+0x2e8>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003458:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d016      	beq.n	800348e <UART_SetConfig+0x1b2>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d818      	bhi.n	8003496 <UART_SetConfig+0x1ba>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d00a      	beq.n	800347e <UART_SetConfig+0x1a2>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d814      	bhi.n	8003496 <UART_SetConfig+0x1ba>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <UART_SetConfig+0x19a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d008      	beq.n	8003486 <UART_SetConfig+0x1aa>
 8003474:	e00f      	b.n	8003496 <UART_SetConfig+0x1ba>
 8003476:	2300      	movs	r3, #0
 8003478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347c:	e06d      	b.n	800355a <UART_SetConfig+0x27e>
 800347e:	2302      	movs	r3, #2
 8003480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003484:	e069      	b.n	800355a <UART_SetConfig+0x27e>
 8003486:	2304      	movs	r3, #4
 8003488:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348c:	e065      	b.n	800355a <UART_SetConfig+0x27e>
 800348e:	2308      	movs	r3, #8
 8003490:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003494:	e061      	b.n	800355a <UART_SetConfig+0x27e>
 8003496:	2310      	movs	r3, #16
 8003498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800349c:	e05d      	b.n	800355a <UART_SetConfig+0x27e>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4b      	ldr	r2, [pc, #300]	@ (80035d0 <UART_SetConfig+0x2f4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d125      	bne.n	80034f4 <UART_SetConfig+0x218>
 80034a8:	4b46      	ldr	r3, [pc, #280]	@ (80035c4 <UART_SetConfig+0x2e8>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034b4:	d016      	beq.n	80034e4 <UART_SetConfig+0x208>
 80034b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034b8:	d818      	bhi.n	80034ec <UART_SetConfig+0x210>
 80034ba:	2b80      	cmp	r3, #128	@ 0x80
 80034bc:	d00a      	beq.n	80034d4 <UART_SetConfig+0x1f8>
 80034be:	2b80      	cmp	r3, #128	@ 0x80
 80034c0:	d814      	bhi.n	80034ec <UART_SetConfig+0x210>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <UART_SetConfig+0x1f0>
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d008      	beq.n	80034dc <UART_SetConfig+0x200>
 80034ca:	e00f      	b.n	80034ec <UART_SetConfig+0x210>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d2:	e042      	b.n	800355a <UART_SetConfig+0x27e>
 80034d4:	2302      	movs	r3, #2
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034da:	e03e      	b.n	800355a <UART_SetConfig+0x27e>
 80034dc:	2304      	movs	r3, #4
 80034de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e2:	e03a      	b.n	800355a <UART_SetConfig+0x27e>
 80034e4:	2308      	movs	r3, #8
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ea:	e036      	b.n	800355a <UART_SetConfig+0x27e>
 80034ec:	2310      	movs	r3, #16
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f2:	e032      	b.n	800355a <UART_SetConfig+0x27e>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <UART_SetConfig+0x2e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d12a      	bne.n	8003554 <UART_SetConfig+0x278>
 80034fe:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <UART_SetConfig+0x2e8>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800350c:	d01a      	beq.n	8003544 <UART_SetConfig+0x268>
 800350e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003512:	d81b      	bhi.n	800354c <UART_SetConfig+0x270>
 8003514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003518:	d00c      	beq.n	8003534 <UART_SetConfig+0x258>
 800351a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351e:	d815      	bhi.n	800354c <UART_SetConfig+0x270>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <UART_SetConfig+0x250>
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003528:	d008      	beq.n	800353c <UART_SetConfig+0x260>
 800352a:	e00f      	b.n	800354c <UART_SetConfig+0x270>
 800352c:	2300      	movs	r3, #0
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003532:	e012      	b.n	800355a <UART_SetConfig+0x27e>
 8003534:	2302      	movs	r3, #2
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353a:	e00e      	b.n	800355a <UART_SetConfig+0x27e>
 800353c:	2304      	movs	r3, #4
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003542:	e00a      	b.n	800355a <UART_SetConfig+0x27e>
 8003544:	2308      	movs	r3, #8
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354a:	e006      	b.n	800355a <UART_SetConfig+0x27e>
 800354c:	2310      	movs	r3, #16
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003552:	e002      	b.n	800355a <UART_SetConfig+0x27e>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <UART_SetConfig+0x2e0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	f040 80a8 	bne.w	80036b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003566:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800356a:	2b08      	cmp	r3, #8
 800356c:	d834      	bhi.n	80035d8 <UART_SetConfig+0x2fc>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <UART_SetConfig+0x298>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003599 	.word	0x08003599
 8003578:	080035d9 	.word	0x080035d9
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035d9 	.word	0x080035d9
 8003584:	080035a7 	.word	0x080035a7
 8003588:	080035d9 	.word	0x080035d9
 800358c:	080035d9 	.word	0x080035d9
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035af 	.word	0x080035af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7fe fcaa 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 800359c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800359e:	e021      	b.n	80035e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <UART_SetConfig+0x2f8>)
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035a4:	e01e      	b.n	80035e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a6:	f7fe fc35 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80035aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035ac:	e01a      	b.n	80035e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035b4:	e016      	b.n	80035e4 <UART_SetConfig+0x308>
 80035b6:	bf00      	nop
 80035b8:	cfff69f3 	.word	0xcfff69f3
 80035bc:	40008000 	.word	0x40008000
 80035c0:	40013800 	.word	0x40013800
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40004400 	.word	0x40004400
 80035cc:	40004800 	.word	0x40004800
 80035d0:	40004c00 	.word	0x40004c00
 80035d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 812a 	beq.w	8003840 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	4a9e      	ldr	r2, [pc, #632]	@ (800386c <UART_SetConfig+0x590>)
 80035f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	429a      	cmp	r2, r3
 800360e:	d305      	bcc.n	800361c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	429a      	cmp	r2, r3
 800361a:	d903      	bls.n	8003624 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003622:	e10d      	b.n	8003840 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	2200      	movs	r2, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	60fa      	str	r2, [r7, #12]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	4a8e      	ldr	r2, [pc, #568]	@ (800386c <UART_SetConfig+0x590>)
 8003632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003636:	b29b      	uxth	r3, r3
 8003638:	2200      	movs	r2, #0
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003646:	f7fc fdeb 	bl	8000220 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	020b      	lsls	r3, r1, #8
 800365c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003660:	0202      	lsls	r2, r0, #8
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	6849      	ldr	r1, [r1, #4]
 8003666:	0849      	lsrs	r1, r1, #1
 8003668:	2000      	movs	r0, #0
 800366a:	460c      	mov	r4, r1
 800366c:	4605      	mov	r5, r0
 800366e:	eb12 0804 	adds.w	r8, r2, r4
 8003672:	eb43 0905 	adc.w	r9, r3, r5
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	469a      	mov	sl, r3
 800367e:	4693      	mov	fp, r2
 8003680:	4652      	mov	r2, sl
 8003682:	465b      	mov	r3, fp
 8003684:	4640      	mov	r0, r8
 8003686:	4649      	mov	r1, r9
 8003688:	f7fc fdca 	bl	8000220 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800369a:	d308      	bcc.n	80036ae <UART_SetConfig+0x3d2>
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a2:	d204      	bcs.n	80036ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e0c8      	b.n	8003840 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036b4:	e0c4      	b.n	8003840 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036be:	d167      	bne.n	8003790 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80036c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d828      	bhi.n	800371a <UART_SetConfig+0x43e>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0x3f4>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fbfc 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 80036f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036fa:	e014      	b.n	8003726 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe fc0e 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 8003700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003702:	e010      	b.n	8003726 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b5a      	ldr	r3, [pc, #360]	@ (8003870 <UART_SetConfig+0x594>)
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fb83 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003710:	e009      	b.n	8003726 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003718:	e005      	b.n	8003726 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8089 	beq.w	8003840 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <UART_SetConfig+0x590>)
 8003734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003738:	461a      	mov	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	441a      	add	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	d916      	bls.n	8003788 <UART_SetConfig+0x4ac>
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d212      	bcs.n	8003788 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f023 030f 	bic.w	r3, r3, #15
 800376a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b29a      	uxth	r2, r3
 8003778:	8bfb      	ldrh	r3, [r7, #30]
 800377a:	4313      	orrs	r3, r2
 800377c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	8bfa      	ldrh	r2, [r7, #30]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e05b      	b.n	8003840 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800378e:	e057      	b.n	8003840 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003790:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003794:	2b08      	cmp	r3, #8
 8003796:	d828      	bhi.n	80037ea <UART_SetConfig+0x50e>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <UART_SetConfig+0x4c4>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fe fb94 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
 80037c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037ca:	e014      	b.n	80037f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe fba6 	bl	8001f1c <HAL_RCC_GetPCLK2Freq>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d2:	e010      	b.n	80037f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <UART_SetConfig+0x594>)
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fb1b 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e0:	e009      	b.n	80037f6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037e8:	e005      	b.n	80037f6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037f4:	bf00      	nop
    }

    if (pclk != 0U)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d021      	beq.n	8003840 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <UART_SetConfig+0x590>)
 8003802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003806:	461a      	mov	r2, r3
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	fbb3 f2f2 	udiv	r2, r3, r2
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	441a      	add	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	d909      	bls.n	800383a <UART_SetConfig+0x55e>
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d205      	bcs.n	800383a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	b29a      	uxth	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e002      	b.n	8003840 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2201      	movs	r2, #1
 8003844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2201      	movs	r2, #1
 800384c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800385c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003860:	4618      	mov	r0, r3
 8003862:	3730      	adds	r7, #48	@ 0x30
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386a:	bf00      	nop
 800386c:	08006750 	.word	0x08006750
 8003870:	00f42400 	.word	0x00f42400

08003874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01a      	beq.n	800398a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003972:	d10a      	bne.n	800398a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b098      	sub	sp, #96	@ 0x60
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c8:	f7fd f978 	bl	8000cbc <HAL_GetTick>
 80039cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d12f      	bne.n	8003a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f88e 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d022      	beq.n	8003a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e6      	bne.n	80039f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e063      	b.n	8003b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d149      	bne.n	8003ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a52:	2200      	movs	r2, #0
 8003a54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f857 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03c      	beq.n	8003ade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	623b      	str	r3, [r7, #32]
   return(result);
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab6:	61fa      	str	r2, [r7, #28]
 8003ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	69b9      	ldr	r1, [r7, #24]
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e012      	b.n	8003b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3758      	adds	r7, #88	@ 0x58
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e04f      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d04b      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd f8c9 	bl	8000cbc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e04e      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d037      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	d034      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d031      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d110      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f838 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e029      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b98:	d111      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81e 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d0a0      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b095      	sub	sp, #84	@ 0x54
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e3      	bne.n	8003c20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d118      	bne.n	8003c92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 0310 	bic.w	r3, r3, #16
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e6      	bne.n	8003c60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003ca6:	bf00      	nop
 8003ca8:	3754      	adds	r7, #84	@ 0x54
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff faf1 	bl	80032b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b08f      	sub	sp, #60	@ 0x3c
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	2b21      	cmp	r3, #33	@ 0x21
 8003ce6:	d14c      	bne.n	8003d82 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d132      	bne.n	8003d5a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e6      	bne.n	8003cf4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	613b      	str	r3, [r7, #16]
   return(result);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e6      	bne.n	8003d26 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d58:	e013      	b.n	8003d82 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003d82:	bf00      	nop
 8003d84:	373c      	adds	r7, #60	@ 0x3c
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b091      	sub	sp, #68	@ 0x44
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	2b21      	cmp	r3, #33	@ 0x21
 8003d9e:	d151      	bne.n	8003e44 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d132      	bne.n	8003e12 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e6      	bne.n	8003dde <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e10:	e018      	b.n	8003e44 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e26:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003e44:	bf00      	nop
 8003e46:	3744      	adds	r7, #68	@ 0x44
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b091      	sub	sp, #68	@ 0x44
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	2b21      	cmp	r3, #33	@ 0x21
 8003e60:	d160      	bne.n	8003f24 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003e6a:	e057      	b.n	8003f1c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d133      	bne.n	8003ee0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	623b      	str	r3, [r7, #32]
   return(result);
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	69b9      	ldr	r1, [r7, #24]
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e6      	bne.n	8003eac <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003ede:	e021      	b.n	8003f24 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d013      	beq.n	8003f16 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1a4      	bne.n	8003e6c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003f22:	e7ff      	b.n	8003f24 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003f24:	bf00      	nop
 8003f26:	3744      	adds	r7, #68	@ 0x44
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b091      	sub	sp, #68	@ 0x44
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3e:	2b21      	cmp	r3, #33	@ 0x21
 8003f40:	d165      	bne.n	800400e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f48:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f4a:	e05c      	b.n	8004006 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d133      	bne.n	8003fc0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6979      	ldr	r1, [r7, #20]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e6      	bne.n	8003f8c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003fbe:	e026      	b.n	800400e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004000:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004002:	3b01      	subs	r3, #1
 8004004:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004006:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004008:	2b00      	cmp	r3, #0
 800400a:	d19f      	bne.n	8003f4c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800400c:	e7ff      	b.n	800400e <UART_TxISR_16BIT_FIFOEN+0xde>
 800400e:	bf00      	nop
 8004010:	3744      	adds	r7, #68	@ 0x44
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	613b      	str	r3, [r7, #16]
   return(result);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fada 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004068:	bf00      	nop
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040be:	2302      	movs	r3, #2
 80040c0:	e027      	b.n	8004112 <HAL_UARTEx_DisableFifoMode+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2224      	movs	r2, #36	@ 0x24
 80040ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80040f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004132:	2302      	movs	r3, #2
 8004134:	e02d      	b.n	8004192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2224      	movs	r2, #36	@ 0x24
 8004142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f850 	bl	8004218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e02d      	b.n	800420e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2224      	movs	r2, #36	@ 0x24
 80041be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f812 	bl	8004218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004238:	e031      	b.n	800429e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800423a:	2308      	movs	r3, #8
 800423c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800423e:	2308      	movs	r3, #8
 8004240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	0e5b      	lsrs	r3, r3, #25
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	0f5b      	lsrs	r3, r3, #29
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	7b3a      	ldrb	r2, [r7, #12]
 8004266:	4911      	ldr	r1, [pc, #68]	@ (80042ac <UARTEx_SetNbDataToProcess+0x94>)
 8004268:	5c8a      	ldrb	r2, [r1, r2]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800426e:	7b3a      	ldrb	r2, [r7, #12]
 8004270:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004274:	fb93 f3f2 	sdiv	r3, r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	7b7a      	ldrb	r2, [r7, #13]
 8004284:	4909      	ldr	r1, [pc, #36]	@ (80042ac <UARTEx_SetNbDataToProcess+0x94>)
 8004286:	5c8a      	ldrb	r2, [r1, r2]
 8004288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800428c:	7b7a      	ldrb	r2, [r7, #13]
 800428e:	4908      	ldr	r1, [pc, #32]	@ (80042b0 <UARTEx_SetNbDataToProcess+0x98>)
 8004290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004292:	fb93 f3f2 	sdiv	r3, r3, r2
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	08006768 	.word	0x08006768
 80042b0:	08006770 	.word	0x08006770

080042b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042b8:	f000 fed0 	bl	800505c <vTaskStartScheduler>
  
  return osOK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 0208 	add.w	r2, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f103 0208 	add.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f103 0208 	add.w	r2, r3, #8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d103      	bne.n	8004384 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e00c      	b.n	800439e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3308      	adds	r3, #8
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e002      	b.n	8004392 <vListInsert+0x2e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	d2f6      	bcs.n	800438c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6852      	ldr	r2, [r2, #4]
 80043f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d103      	bne.n	800440a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004458:	f001 fd3e 	bl	8005ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	441a      	add	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004488:	3b01      	subs	r3, #1
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	22ff      	movs	r2, #255	@ 0xff
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	22ff      	movs	r2, #255	@ 0xff
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d114      	bne.n	80044d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3310      	adds	r3, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 f810 	bl	80054e0 <xTaskRemoveFromEventList>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <xQueueGenericReset+0xd0>)
 80044c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	e009      	b.n	80044ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3310      	adds	r3, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fef0 	bl	80042c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3324      	adds	r3, #36	@ 0x24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff feeb 	bl	80042c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ec:	f001 fd26 	bl	8005f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	@ 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	613b      	str	r3, [r7, #16]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3348      	adds	r3, #72	@ 0x48
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fdee 	bl	800611c <pvPortMalloc>
 8004540:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3348      	adds	r3, #72	@ 0x48
 8004550:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004552:	79fa      	ldrb	r2, [r7, #7]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f805 	bl	800456e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004564:	69bb      	ldr	r3, [r7, #24]
	}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e002      	b.n	8004590 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800459c:	2101      	movs	r1, #1
 800459e:	69b8      	ldr	r0, [r7, #24]
 80045a0:	f7ff ff44 	bl	800442c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045cc:	2300      	movs	r3, #0
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f81c 	bl	8004610 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7ff ff81 	bl	8004500 <xQueueGenericCreate>
 80045fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ffd3 	bl	80045ac <prvInitialiseMutex>

		return xNewQueue;
 8004606:	68fb      	ldr	r3, [r7, #12]
	}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	@ 0x38
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <xQueueGenericSend+0x34>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <xQueueGenericSend+0x42>
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueGenericSend+0x46>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericSend+0x48>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <xQueueGenericSend+0x64>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	e7fd      	b.n	8004670 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d103      	bne.n	8004682 <xQueueGenericSend+0x72>
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <xQueueGenericSend+0x76>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <xQueueGenericSend+0x78>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <xQueueGenericSend+0x94>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a4:	f001 f8c2 	bl	800582c <xTaskGetSchedulerState>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <xQueueGenericSend+0xa4>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <xQueueGenericSend+0xa8>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <xQueueGenericSend+0xaa>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	61fb      	str	r3, [r7, #28]
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	e7fd      	b.n	80046d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d6:	f001 fbff 	bl	8005ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <xQueueGenericSend+0xdc>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d129      	bne.n	8004740 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046f2:	f000 fa47 	bl	8004b84 <prvCopyDataToQueue>
 80046f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	3324      	adds	r3, #36	@ 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f000 feeb 	bl	80054e0 <xTaskRemoveFromEventList>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004710:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <xQueueGenericSend+0x200>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	e00a      	b.n	8004738 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004728:	4b39      	ldr	r3, [pc, #228]	@ (8004810 <xQueueGenericSend+0x200>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004738:	f001 fc00 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 800473c:	2301      	movs	r3, #1
 800473e:	e063      	b.n	8004808 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004746:	f001 fbf9 	bl	8005f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800474a:	2300      	movs	r3, #0
 800474c:	e05c      	b.n	8004808 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800474e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ff25 	bl	80055a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800475e:	2301      	movs	r3, #1
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004762:	f001 fbeb 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004766:	f000 fccb 	bl	8005100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800476a:	f001 fbb5 	bl	8005ed8 <vPortEnterCritical>
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004774:	b25b      	sxtb	r3, r3
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d103      	bne.n	8004784 <xQueueGenericSend+0x174>
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800478a:	b25b      	sxtb	r3, r3
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d103      	bne.n	800479a <xQueueGenericSend+0x18a>
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800479a:	f001 fbcf 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800479e:	1d3a      	adds	r2, r7, #4
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ff14 	bl	80055d4 <xTaskCheckForTimeOut>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d124      	bne.n	80047fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047b4:	f000 fab8 	bl	8004d28 <prvIsQueueFull>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d018      	beq.n	80047f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	3310      	adds	r3, #16
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe64 	bl	8005494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ce:	f000 fa43 	bl	8004c58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047d2:	f000 fca3 	bl	800511c <xTaskResumeAll>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f47f af7c 	bne.w	80046d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047de:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <xQueueGenericSend+0x200>)
 80047e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	e772      	b.n	80046d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047f2:	f000 fa31 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047f6:	f000 fc91 	bl	800511c <xTaskResumeAll>
 80047fa:	e76c      	b.n	80046d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047fe:	f000 fa2b 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004802:	f000 fc8b 	bl	800511c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004808:	4618      	mov	r0, r3
 800480a:	3738      	adds	r7, #56	@ 0x38
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	@ 0x38
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10b      	bne.n	8004840 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	623b      	str	r3, [r7, #32]
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61fb      	str	r3, [r7, #28]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGiveFromISR+0x5c>
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGiveFromISR+0x60>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGiveFromISR+0x62>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61bb      	str	r3, [r7, #24]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004892:	f001 fc01 	bl	8006098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004896:	f3ef 8211 	mrs	r2, BASEPRI
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	617a      	str	r2, [r7, #20]
 80048ac:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048be:	429a      	cmp	r2, r3
 80048c0:	d22b      	bcs.n	800491a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d112      	bne.n	8004904 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	3324      	adds	r3, #36	@ 0x24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fdf8 	bl	80054e0 <xTaskRemoveFromEventList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00e      	beq.n	8004914 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e007      	b.n	8004914 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004908:	3301      	adds	r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	b25a      	sxtb	r2, r3
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004914:	2301      	movs	r3, #1
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
 8004918:	e001      	b.n	800491e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800491a:	2300      	movs	r3, #0
 800491c:	637b      	str	r3, [r7, #52]	@ 0x34
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800492c:	4618      	mov	r0, r3
 800492e:	3738      	adds	r7, #56	@ 0x38
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08e      	sub	sp, #56	@ 0x38
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	623b      	str	r3, [r7, #32]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004988:	f000 ff50 	bl	800582c <xTaskGetSchedulerState>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <xQueueSemaphoreTake+0x64>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueSemaphoreTake+0x68>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueSemaphoreTake+0x6a>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <xQueueSemaphoreTake+0x86>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61bb      	str	r3, [r7, #24]
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	e7fd      	b.n	80049b6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ba:	f001 fa8d 	bl	8005ed8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d024      	beq.n	8004a14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049da:	f001 f8d3 	bl	8005b84 <pvTaskIncrementMutexHeldCount>
 80049de:	4602      	mov	r2, r0
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00f      	beq.n	8004a0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ee:	3310      	adds	r3, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fd75 	bl	80054e0 <xTaskRemoveFromEventList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049fc:	4b54      	ldr	r3, [pc, #336]	@ (8004b50 <xQueueSemaphoreTake+0x21c>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a0c:	f001 fa96 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e098      	b.n	8004b46 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d112      	bne.n	8004a40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	617b      	str	r3, [r7, #20]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a38:	f001 fa80 	bl	8005f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e082      	b.n	8004b46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fdac 	bl	80055a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a54:	f001 fa72 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a58:	f000 fb52 	bl	8005100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a5c:	f001 fa3c 	bl	8005ed8 <vPortEnterCritical>
 8004a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d103      	bne.n	8004a76 <xQueueSemaphoreTake+0x142>
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a7c:	b25b      	sxtb	r3, r3
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d103      	bne.n	8004a8c <xQueueSemaphoreTake+0x158>
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a8c:	f001 fa56 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a90:	463a      	mov	r2, r7
 8004a92:	f107 030c 	add.w	r3, r7, #12
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fd9b 	bl	80055d4 <xTaskCheckForTimeOut>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d132      	bne.n	8004b0a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004aa6:	f000 f929 	bl	8004cfc <prvIsQueueEmpty>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d026      	beq.n	8004afe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004ab8:	f001 fa0e 	bl	8005ed8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fed1 	bl	8005868 <xTaskPriorityInherit>
 8004ac6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004ac8:	f001 fa38 	bl	8005f3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ace:	3324      	adds	r3, #36	@ 0x24
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fcdd 	bl	8005494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ada:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004adc:	f000 f8bc 	bl	8004c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ae0:	f000 fb1c 	bl	800511c <xTaskResumeAll>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f47f af67 	bne.w	80049ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004aec:	4b18      	ldr	r3, [pc, #96]	@ (8004b50 <xQueueSemaphoreTake+0x21c>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	e75d      	b.n	80049ba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004afe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b00:	f000 f8aa 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b04:	f000 fb0a 	bl	800511c <xTaskResumeAll>
 8004b08:	e757      	b.n	80049ba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b0c:	f000 f8a4 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b10:	f000 fb04 	bl	800511c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b16:	f000 f8f1 	bl	8004cfc <prvIsQueueEmpty>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f43f af4c 	beq.w	80049ba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b28:	f001 f9d6 	bl	8005ed8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b2e:	f000 f811 	bl	8004b54 <prvGetDisinheritPriorityAfterTimeout>
 8004b32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 ff92 	bl	8005a64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b40:	f001 f9fc 	bl	8005f3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3738      	adds	r7, #56	@ 0x38
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d006      	beq.n	8004b72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e001      	b.n	8004b76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b76:	68fb      	ldr	r3, [r7, #12]
	}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d14d      	bne.n	8004c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fed0 	bl	8005954 <xTaskPriorityDisinherit>
 8004bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e043      	b.n	8004c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d119      	bne.n	8004bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6858      	ldr	r0, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	f001 fd1e 	bl	8006610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	441a      	add	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d32b      	bcc.n	8004c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	e026      	b.n	8004c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68d8      	ldr	r0, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	f001 fd04 	bl	8006610 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	425b      	negs	r3, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d207      	bcs.n	8004c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d105      	bne.n	8004c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c60:	f001 f93a 	bl	8005ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c6c:	e011      	b.n	8004c92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	@ 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc30 	bl	80054e0 <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c86:	f000 fd09 	bl	800569c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dce9      	bgt.n	8004c6e <prvUnlockQueue+0x16>
 8004c9a:	e000      	b.n	8004c9e <prvUnlockQueue+0x46>
					break;
 8004c9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	22ff      	movs	r2, #255	@ 0xff
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ca6:	f001 f949 	bl	8005f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004caa:	f001 f915 	bl	8005ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	e011      	b.n	8004cdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fc0b 	bl	80054e0 <xTaskRemoveFromEventList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cd0:	f000 fce4 	bl	800569c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dce9      	bgt.n	8004cb8 <prvUnlockQueue+0x60>
 8004ce4:	e000      	b.n	8004ce8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ce6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	22ff      	movs	r2, #255	@ 0xff
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cf0:	f001 f924 	bl	8005f3c <vPortExitCritical>
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d04:	f001 f8e8 	bl	8005ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e001      	b.n	8004d1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f001 f90f 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d30:	f001 f8d2 	bl	8005ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d102      	bne.n	8004d46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e001      	b.n	8004d4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d4a:	f001 f8f7 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08c      	sub	sp, #48	@ 0x30
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 f9d5 	bl	800611c <pvPortMalloc>
 8004d72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00e      	beq.n	8004d98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d7a:	20a0      	movs	r0, #160	@ 0xa0
 8004d7c:	f001 f9ce 	bl	800611c <pvPortMalloc>
 8004d80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d8e:	e005      	b.n	8004d9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f001 fa91 	bl	80062b8 <vPortFree>
 8004d96:	e001      	b.n	8004d9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d013      	beq.n	8004dca <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	2300      	movs	r3, #0
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	9302      	str	r3, [sp, #8]
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f80f 	bl	8004ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dbe:	69f8      	ldr	r0, [r7, #28]
 8004dc0:	f000 f8ac 	bl	8004f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e002      	b.n	8004dd0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
 8004dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004df4:	3b01      	subs	r3, #1
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	617b      	str	r3, [r7, #20]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01f      	beq.n	8004e6c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e012      	b.n	8004e58 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	7819      	ldrb	r1, [r3, #0]
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3334      	adds	r3, #52	@ 0x34
 8004e42:	460a      	mov	r2, r1
 8004e44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d9e9      	bls.n	8004e32 <prvInitialiseNewTask+0x56>
 8004e5e:	e000      	b.n	8004e62 <prvInitialiseNewTask+0x86>
			{
				break;
 8004e60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e6a:	e003      	b.n	8004e74 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d901      	bls.n	8004e7e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fa34 	bl	8004302 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fa2f 	bl	8004302 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	f1c3 0207 	rsb	r2, r3, #7
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	334c      	adds	r3, #76	@ 0x4c
 8004ece:	224c      	movs	r2, #76	@ 0x4c
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fb10 	bl	80064f8 <memset>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	4a0d      	ldr	r2, [pc, #52]	@ (8004f10 <prvInitialiseNewTask+0x134>)
 8004edc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8004f14 <prvInitialiseNewTask+0x138>)
 8004ee2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f18 <prvInitialiseNewTask+0x13c>)
 8004ee8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	69b8      	ldr	r0, [r7, #24]
 8004ef0:	f000 fec2 	bl	8005c78 <pxPortInitialiseStack>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f06:	bf00      	nop
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200042d0 	.word	0x200042d0
 8004f14:	20004338 	.word	0x20004338
 8004f18:	200043a0 	.word	0x200043a0

08004f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f24:	f000 ffd8 	bl	8005ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <prvAddNewTaskToReadyList+0xb8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <prvAddNewTaskToReadyList+0xb8>)
 8004f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f32:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <prvAddNewTaskToReadyList+0xbc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f3a:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <prvAddNewTaskToReadyList+0xbc>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f40:	4b24      	ldr	r3, [pc, #144]	@ (8004fd4 <prvAddNewTaskToReadyList+0xb8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d110      	bne.n	8004f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f48:	f000 fbcc 	bl	80056e4 <prvInitialiseTaskLists>
 8004f4c:	e00d      	b.n	8004f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f4e:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <prvAddNewTaskToReadyList+0xc0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f56:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <prvAddNewTaskToReadyList+0xbc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d802      	bhi.n	8004f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f64:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <prvAddNewTaskToReadyList+0xbc>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <prvAddNewTaskToReadyList+0xc4>)
 8004f72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	2201      	movs	r2, #1
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	4b19      	ldr	r3, [pc, #100]	@ (8004fe4 <prvAddNewTaskToReadyList+0xc8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <prvAddNewTaskToReadyList+0xc8>)
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <prvAddNewTaskToReadyList+0xcc>)
 8004f94:	441a      	add	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7ff f9bd 	bl	800431c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fa2:	f000 ffcb 	bl	8005f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <prvAddNewTaskToReadyList+0xc0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00e      	beq.n	8004fcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fae:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <prvAddNewTaskToReadyList+0xbc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d207      	bcs.n	8004fcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <prvAddNewTaskToReadyList+0xd0>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	2000027c 	.word	0x2000027c
 8004fd8:	2000017c 	.word	0x2000017c
 8004fdc:	20000288 	.word	0x20000288
 8004fe0:	20000298 	.word	0x20000298
 8004fe4:	20000284 	.word	0x20000284
 8004fe8:	20000180 	.word	0x20000180
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d018      	beq.n	8005034 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005002:	4b14      	ldr	r3, [pc, #80]	@ (8005054 <vTaskDelay+0x64>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <vTaskDelay+0x32>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	60bb      	str	r3, [r7, #8]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005022:	f000 f86d 	bl	8005100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005026:	2100      	movs	r1, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fdbf 	bl	8005bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800502e:	f000 f875 	bl	800511c <xTaskResumeAll>
 8005032:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800503a:	4b07      	ldr	r3, [pc, #28]	@ (8005058 <vTaskDelay+0x68>)
 800503c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200002a4 	.word	0x200002a4
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <vTaskStartScheduler+0x84>)
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2300      	movs	r3, #0
 800506c:	2280      	movs	r2, #128	@ 0x80
 800506e:	491d      	ldr	r1, [pc, #116]	@ (80050e4 <vTaskStartScheduler+0x88>)
 8005070:	481d      	ldr	r0, [pc, #116]	@ (80050e8 <vTaskStartScheduler+0x8c>)
 8005072:	f7ff fe71 	bl	8004d58 <xTaskCreate>
 8005076:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11b      	bne.n	80050b6 <vTaskStartScheduler+0x5a>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60bb      	str	r3, [r7, #8]
}
 8005090:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005092:	4b16      	ldr	r3, [pc, #88]	@ (80050ec <vTaskStartScheduler+0x90>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	334c      	adds	r3, #76	@ 0x4c
 8005098:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <vTaskStartScheduler+0x94>)
 800509a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800509c:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <vTaskStartScheduler+0x98>)
 800509e:	f04f 32ff 	mov.w	r2, #4294967295
 80050a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050a4:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <vTaskStartScheduler+0x9c>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050aa:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <vTaskStartScheduler+0xa0>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050b0:	f000 fe6e 	bl	8005d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050b4:	e00f      	b.n	80050d6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d10b      	bne.n	80050d6 <vTaskStartScheduler+0x7a>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <vTaskStartScheduler+0x76>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200002a0 	.word	0x200002a0
 80050e4:	08006730 	.word	0x08006730
 80050e8:	080056b5 	.word	0x080056b5
 80050ec:	2000017c 	.word	0x2000017c
 80050f0:	2000001c 	.word	0x2000001c
 80050f4:	2000029c 	.word	0x2000029c
 80050f8:	20000288 	.word	0x20000288
 80050fc:	20000280 	.word	0x20000280

08005100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <vTaskSuspendAll+0x18>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	4a03      	ldr	r2, [pc, #12]	@ (8005118 <vTaskSuspendAll+0x18>)
 800510c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	200002a4 	.word	0x200002a4

0800511c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800512a:	4b42      	ldr	r3, [pc, #264]	@ (8005234 <xTaskResumeAll+0x118>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <xTaskResumeAll+0x2e>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	603b      	str	r3, [r7, #0]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800514a:	f000 fec5 	bl	8005ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800514e:	4b39      	ldr	r3, [pc, #228]	@ (8005234 <xTaskResumeAll+0x118>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a37      	ldr	r2, [pc, #220]	@ (8005234 <xTaskResumeAll+0x118>)
 8005156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005158:	4b36      	ldr	r3, [pc, #216]	@ (8005234 <xTaskResumeAll+0x118>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d161      	bne.n	8005224 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005160:	4b35      	ldr	r3, [pc, #212]	@ (8005238 <xTaskResumeAll+0x11c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05d      	beq.n	8005224 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005168:	e02e      	b.n	80051c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516a:	4b34      	ldr	r3, [pc, #208]	@ (800523c <xTaskResumeAll+0x120>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3318      	adds	r3, #24
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff f92d 	bl	80043d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff f928 	bl	80043d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	2201      	movs	r2, #1
 800518c:	409a      	lsls	r2, r3
 800518e:	4b2c      	ldr	r3, [pc, #176]	@ (8005240 <xTaskResumeAll+0x124>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	4a2a      	ldr	r2, [pc, #168]	@ (8005240 <xTaskResumeAll+0x124>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4a27      	ldr	r2, [pc, #156]	@ (8005244 <xTaskResumeAll+0x128>)
 80051a6:	441a      	add	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7ff f8b4 	bl	800431c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b8:	4b23      	ldr	r3, [pc, #140]	@ (8005248 <xTaskResumeAll+0x12c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80051c2:	4b22      	ldr	r3, [pc, #136]	@ (800524c <xTaskResumeAll+0x130>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051c8:	4b1c      	ldr	r3, [pc, #112]	@ (800523c <xTaskResumeAll+0x120>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1cc      	bne.n	800516a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051d6:	f000 fb09 	bl	80057ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051da:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <xTaskResumeAll+0x134>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d010      	beq.n	8005208 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051e6:	f000 f837 	bl	8005258 <xTaskIncrementTick>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80051f0:	4b16      	ldr	r3, [pc, #88]	@ (800524c <xTaskResumeAll+0x130>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f1      	bne.n	80051e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005202:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <xTaskResumeAll+0x134>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005208:	4b10      	ldr	r3, [pc, #64]	@ (800524c <xTaskResumeAll+0x130>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005214:	4b0f      	ldr	r3, [pc, #60]	@ (8005254 <xTaskResumeAll+0x138>)
 8005216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005224:	f000 fe8a 	bl	8005f3c <vPortExitCritical>

	return xAlreadyYielded;
 8005228:	68bb      	ldr	r3, [r7, #8]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200002a4 	.word	0x200002a4
 8005238:	2000027c 	.word	0x2000027c
 800523c:	2000023c 	.word	0x2000023c
 8005240:	20000284 	.word	0x20000284
 8005244:	20000180 	.word	0x20000180
 8005248:	2000017c 	.word	0x2000017c
 800524c:	20000290 	.word	0x20000290
 8005250:	2000028c 	.word	0x2000028c
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005262:	4b4f      	ldr	r3, [pc, #316]	@ (80053a0 <xTaskIncrementTick+0x148>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 808f 	bne.w	800538a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800526c:	4b4d      	ldr	r3, [pc, #308]	@ (80053a4 <xTaskIncrementTick+0x14c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005274:	4a4b      	ldr	r2, [pc, #300]	@ (80053a4 <xTaskIncrementTick+0x14c>)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d121      	bne.n	80052c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005280:	4b49      	ldr	r3, [pc, #292]	@ (80053a8 <xTaskIncrementTick+0x150>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xTaskIncrementTick+0x46>
 80052a2:	4b41      	ldr	r3, [pc, #260]	@ (80053a8 <xTaskIncrementTick+0x150>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	4b40      	ldr	r3, [pc, #256]	@ (80053ac <xTaskIncrementTick+0x154>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3e      	ldr	r2, [pc, #248]	@ (80053a8 <xTaskIncrementTick+0x150>)
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4a3e      	ldr	r2, [pc, #248]	@ (80053ac <xTaskIncrementTick+0x154>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b3e      	ldr	r3, [pc, #248]	@ (80053b0 <xTaskIncrementTick+0x158>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a3c      	ldr	r2, [pc, #240]	@ (80053b0 <xTaskIncrementTick+0x158>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	f000 fa94 	bl	80057ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c4:	4b3b      	ldr	r3, [pc, #236]	@ (80053b4 <xTaskIncrementTick+0x15c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d348      	bcc.n	8005360 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ce:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <xTaskIncrementTick+0x150>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d8:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <xTaskIncrementTick+0x15c>)
 80052da:	f04f 32ff 	mov.w	r2, #4294967295
 80052de:	601a      	str	r2, [r3, #0]
					break;
 80052e0:	e03e      	b.n	8005360 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e2:	4b31      	ldr	r3, [pc, #196]	@ (80053a8 <xTaskIncrementTick+0x150>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d203      	bcs.n	8005302 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052fa:	4a2e      	ldr	r2, [pc, #184]	@ (80053b4 <xTaskIncrementTick+0x15c>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005300:	e02e      	b.n	8005360 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3304      	adds	r3, #4
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff f865 	bl	80043d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	3318      	adds	r3, #24
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff f85c 	bl	80043d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	2201      	movs	r2, #1
 8005324:	409a      	lsls	r2, r3
 8005326:	4b24      	ldr	r3, [pc, #144]	@ (80053b8 <xTaskIncrementTick+0x160>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <xTaskIncrementTick+0x160>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a1f      	ldr	r2, [pc, #124]	@ (80053bc <xTaskIncrementTick+0x164>)
 800533e:	441a      	add	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f7fe ffe8 	bl	800431c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <xTaskIncrementTick+0x168>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	429a      	cmp	r2, r3
 8005358:	d3b9      	bcc.n	80052ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535e:	e7b6      	b.n	80052ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005360:	4b17      	ldr	r3, [pc, #92]	@ (80053c0 <xTaskIncrementTick+0x168>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4915      	ldr	r1, [pc, #84]	@ (80053bc <xTaskIncrementTick+0x164>)
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d901      	bls.n	800537c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <xTaskIncrementTick+0x16c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e004      	b.n	8005394 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <xTaskIncrementTick+0x170>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <xTaskIncrementTick+0x170>)
 8005392:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005394:	697b      	ldr	r3, [r7, #20]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200002a4 	.word	0x200002a4
 80053a4:	20000280 	.word	0x20000280
 80053a8:	20000234 	.word	0x20000234
 80053ac:	20000238 	.word	0x20000238
 80053b0:	20000294 	.word	0x20000294
 80053b4:	2000029c 	.word	0x2000029c
 80053b8:	20000284 	.word	0x20000284
 80053bc:	20000180 	.word	0x20000180
 80053c0:	2000017c 	.word	0x2000017c
 80053c4:	20000290 	.word	0x20000290
 80053c8:	2000028c 	.word	0x2000028c

080053cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053d2:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <vTaskSwitchContext+0xb0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053da:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <vTaskSwitchContext+0xb4>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053e0:	e045      	b.n	800546e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80053e2:	4b27      	ldr	r3, [pc, #156]	@ (8005480 <vTaskSwitchContext+0xb4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e8:	4b26      	ldr	r3, [pc, #152]	@ (8005484 <vTaskSwitchContext+0xb8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f1c3 031f 	rsb	r3, r3, #31
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	4922      	ldr	r1, [pc, #136]	@ (8005488 <vTaskSwitchContext+0xbc>)
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <vTaskSwitchContext+0x5a>
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a14      	ldr	r2, [pc, #80]	@ (8005488 <vTaskSwitchContext+0xbc>)
 8005436:	4413      	add	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	3308      	adds	r3, #8
 800544c:	429a      	cmp	r2, r3
 800544e:	d104      	bne.n	800545a <vTaskSwitchContext+0x8e>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <vTaskSwitchContext+0xc0>)
 8005462:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005464:	4b09      	ldr	r3, [pc, #36]	@ (800548c <vTaskSwitchContext+0xc0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	334c      	adds	r3, #76	@ 0x4c
 800546a:	4a09      	ldr	r2, [pc, #36]	@ (8005490 <vTaskSwitchContext+0xc4>)
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	200002a4 	.word	0x200002a4
 8005480:	20000290 	.word	0x20000290
 8005484:	20000284 	.word	0x20000284
 8005488:	20000180 	.word	0x20000180
 800548c:	2000017c 	.word	0x2000017c
 8005490:	2000001c 	.word	0x2000001c

08005494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <vTaskPlaceOnEventList+0x48>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3318      	adds	r3, #24
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fe ff4d 	bl	8004364 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ca:	2101      	movs	r1, #1
 80054cc:	6838      	ldr	r0, [r7, #0]
 80054ce:	f000 fb6d 	bl	8005bac <prvAddCurrentTaskToDelayedList>
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000017c 	.word	0x2000017c

080054e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60fb      	str	r3, [r7, #12]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3318      	adds	r3, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe ff5f 	bl	80043d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005518:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <xTaskRemoveFromEventList+0xb0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11c      	bne.n	800555a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3304      	adds	r3, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe ff56 	bl	80043d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	2201      	movs	r2, #1
 8005530:	409a      	lsls	r2, r3
 8005532:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <xTaskRemoveFromEventList+0xb4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	4a16      	ldr	r2, [pc, #88]	@ (8005594 <xTaskRemoveFromEventList+0xb4>)
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4a13      	ldr	r2, [pc, #76]	@ (8005598 <xTaskRemoveFromEventList+0xb8>)
 800554a:	441a      	add	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7fe fee2 	bl	800431c <vListInsertEnd>
 8005558:	e005      	b.n	8005566 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3318      	adds	r3, #24
 800555e:	4619      	mov	r1, r3
 8005560:	480e      	ldr	r0, [pc, #56]	@ (800559c <xTaskRemoveFromEventList+0xbc>)
 8005562:	f7fe fedb 	bl	800431c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	4b0d      	ldr	r3, [pc, #52]	@ (80055a0 <xTaskRemoveFromEventList+0xc0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	429a      	cmp	r2, r3
 8005572:	d905      	bls.n	8005580 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005578:	4b0a      	ldr	r3, [pc, #40]	@ (80055a4 <xTaskRemoveFromEventList+0xc4>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e001      	b.n	8005584 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005584:	697b      	ldr	r3, [r7, #20]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200002a4 	.word	0x200002a4
 8005594:	20000284 	.word	0x20000284
 8005598:	20000180 	.word	0x20000180
 800559c:	2000023c 	.word	0x2000023c
 80055a0:	2000017c 	.word	0x2000017c
 80055a4:	20000290 	.word	0x20000290

080055a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055b0:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <vTaskInternalSetTimeOutState+0x24>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <vTaskInternalSetTimeOutState+0x28>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	605a      	str	r2, [r3, #4]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	20000294 	.word	0x20000294
 80055d0:	20000280 	.word	0x20000280

080055d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	613b      	str	r3, [r7, #16]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60fb      	str	r3, [r7, #12]
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	e7fd      	b.n	8005616 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800561a:	f000 fc5d 	bl	8005ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800561e:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <xTaskCheckForTimeOut+0xc0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d102      	bne.n	800563e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	e023      	b.n	8005686 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b15      	ldr	r3, [pc, #84]	@ (8005698 <xTaskCheckForTimeOut+0xc4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d007      	beq.n	800565a <xTaskCheckForTimeOut+0x86>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	e015      	b.n	8005686 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	d20b      	bcs.n	800567c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ff99 	bl	80055a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e004      	b.n	8005686 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005686:	f000 fc59 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 800568a:	69fb      	ldr	r3, [r7, #28]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000280 	.word	0x20000280
 8005698:	20000294 	.word	0x20000294

0800569c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056a0:	4b03      	ldr	r3, [pc, #12]	@ (80056b0 <vTaskMissedYield+0x14>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000290 	.word	0x20000290

080056b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056bc:	f000 f852 	bl	8005764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056c0:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <prvIdleTask+0x28>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d9f9      	bls.n	80056bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <prvIdleTask+0x2c>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056d8:	e7f0      	b.n	80056bc <prvIdleTask+0x8>
 80056da:	bf00      	nop
 80056dc:	20000180 	.word	0x20000180
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	e00c      	b.n	800570a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <prvInitialiseTaskLists+0x60>)
 80056fc:	4413      	add	r3, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fddf 	bl	80042c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3301      	adds	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d9ef      	bls.n	80056f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005710:	480d      	ldr	r0, [pc, #52]	@ (8005748 <prvInitialiseTaskLists+0x64>)
 8005712:	f7fe fdd6 	bl	80042c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005716:	480d      	ldr	r0, [pc, #52]	@ (800574c <prvInitialiseTaskLists+0x68>)
 8005718:	f7fe fdd3 	bl	80042c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800571c:	480c      	ldr	r0, [pc, #48]	@ (8005750 <prvInitialiseTaskLists+0x6c>)
 800571e:	f7fe fdd0 	bl	80042c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005722:	480c      	ldr	r0, [pc, #48]	@ (8005754 <prvInitialiseTaskLists+0x70>)
 8005724:	f7fe fdcd 	bl	80042c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005728:	480b      	ldr	r0, [pc, #44]	@ (8005758 <prvInitialiseTaskLists+0x74>)
 800572a:	f7fe fdca 	bl	80042c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800572e:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <prvInitialiseTaskLists+0x78>)
 8005730:	4a05      	ldr	r2, [pc, #20]	@ (8005748 <prvInitialiseTaskLists+0x64>)
 8005732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005734:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <prvInitialiseTaskLists+0x7c>)
 8005736:	4a05      	ldr	r2, [pc, #20]	@ (800574c <prvInitialiseTaskLists+0x68>)
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000180 	.word	0x20000180
 8005748:	2000020c 	.word	0x2000020c
 800574c:	20000220 	.word	0x20000220
 8005750:	2000023c 	.word	0x2000023c
 8005754:	20000250 	.word	0x20000250
 8005758:	20000268 	.word	0x20000268
 800575c:	20000234 	.word	0x20000234
 8005760:	20000238 	.word	0x20000238

08005764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800576a:	e019      	b.n	80057a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800576c:	f000 fbb4 	bl	8005ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005770:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <prvCheckTasksWaitingTermination+0x50>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fe2a 	bl	80043d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <prvCheckTasksWaitingTermination+0x54>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3b01      	subs	r3, #1
 8005788:	4a0b      	ldr	r2, [pc, #44]	@ (80057b8 <prvCheckTasksWaitingTermination+0x54>)
 800578a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <prvCheckTasksWaitingTermination+0x58>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <prvCheckTasksWaitingTermination+0x58>)
 8005794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005796:	f000 fbd1 	bl	8005f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f810 	bl	80057c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057a0:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <prvCheckTasksWaitingTermination+0x58>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e1      	bne.n	800576c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000250 	.word	0x20000250
 80057b8:	2000027c 	.word	0x2000027c
 80057bc:	20000264 	.word	0x20000264

080057c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	334c      	adds	r3, #76	@ 0x4c
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fe9b 	bl	8006508 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd6e 	bl	80062b8 <vPortFree>
			vPortFree( pxTCB );
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd6b 	bl	80062b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <prvResetNextTaskUnblockTime+0x38>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <prvResetNextTaskUnblockTime+0x3c>)
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005804:	e008      	b.n	8005818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005806:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <prvResetNextTaskUnblockTime+0x38>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4a04      	ldr	r2, [pc, #16]	@ (8005828 <prvResetNextTaskUnblockTime+0x3c>)
 8005816:	6013      	str	r3, [r2, #0]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000234 	.word	0x20000234
 8005828:	2000029c 	.word	0x2000029c

0800582c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005832:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <xTaskGetSchedulerState+0x34>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800583a:	2301      	movs	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	e008      	b.n	8005852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <xTaskGetSchedulerState+0x38>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005848:	2302      	movs	r3, #2
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e001      	b.n	8005852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005852:	687b      	ldr	r3, [r7, #4]
	}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000288 	.word	0x20000288
 8005864:	200002a4 	.word	0x200002a4

08005868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d05e      	beq.n	800593c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005882:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <xTaskPriorityInherit+0xe0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	429a      	cmp	r2, r3
 800588a:	d24e      	bcs.n	800592a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db06      	blt.n	80058a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005894:	4b2c      	ldr	r3, [pc, #176]	@ (8005948 <xTaskPriorityInherit+0xe0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	f1c3 0207 	rsb	r2, r3, #7
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4a26      	ldr	r2, [pc, #152]	@ (800594c <xTaskPriorityInherit+0xe4>)
 80058b4:	4413      	add	r3, r2
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d12f      	bne.n	800591a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3304      	adds	r3, #4
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fd89 	bl	80043d6 <uxListRemove>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	2201      	movs	r2, #1
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43da      	mvns	r2, r3
 80058d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005950 <xTaskPriorityInherit+0xe8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4013      	ands	r3, r2
 80058dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <xTaskPriorityInherit+0xe8>)
 80058de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058e0:	4b19      	ldr	r3, [pc, #100]	@ (8005948 <xTaskPriorityInherit+0xe0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	2201      	movs	r2, #1
 80058f0:	409a      	lsls	r2, r3
 80058f2:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <xTaskPriorityInherit+0xe8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <xTaskPriorityInherit+0xe8>)
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a10      	ldr	r2, [pc, #64]	@ (800594c <xTaskPriorityInherit+0xe4>)
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7fe fd02 	bl	800431c <vListInsertEnd>
 8005918:	e004      	b.n	8005924 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800591a:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <xTaskPriorityInherit+0xe0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e008      	b.n	800593c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <xTaskPriorityInherit+0xe0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d201      	bcs.n	800593c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800593c:	68fb      	ldr	r3, [r7, #12]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2000017c 	.word	0x2000017c
 800594c:	20000180 	.word	0x20000180
 8005950:	20000284 	.word	0x20000284

08005954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d070      	beq.n	8005a4c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800596a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a58 <xTaskPriorityDisinherit+0x104>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	429a      	cmp	r2, r3
 8005972:	d00b      	beq.n	800598c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60bb      	str	r3, [r7, #8]
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	429a      	cmp	r2, r3
 80059c0:	d044      	beq.n	8005a4c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d140      	bne.n	8005a4c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fd01 	bl	80043d6 <uxListRemove>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d115      	bne.n	8005a06 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059de:	491f      	ldr	r1, [pc, #124]	@ (8005a5c <xTaskPriorityDisinherit+0x108>)
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xTaskPriorityDisinherit+0xb2>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	2201      	movs	r2, #1
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43da      	mvns	r2, r3
 80059fc:	4b18      	ldr	r3, [pc, #96]	@ (8005a60 <xTaskPriorityDisinherit+0x10c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4013      	ands	r3, r2
 8005a02:	4a17      	ldr	r2, [pc, #92]	@ (8005a60 <xTaskPriorityDisinherit+0x10c>)
 8005a04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f1c3 0207 	rsb	r2, r3, #7
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	2201      	movs	r2, #1
 8005a20:	409a      	lsls	r2, r3
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <xTaskPriorityDisinherit+0x10c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	4a0d      	ldr	r2, [pc, #52]	@ (8005a60 <xTaskPriorityDisinherit+0x10c>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4a08      	ldr	r2, [pc, #32]	@ (8005a5c <xTaskPriorityDisinherit+0x108>)
 8005a3a:	441a      	add	r2, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7fe fc6a 	bl	800431c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a4c:	697b      	ldr	r3, [r7, #20]
	}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000017c 	.word	0x2000017c
 8005a5c:	20000180 	.word	0x20000180
 8005a60:	20000284 	.word	0x20000284

08005a64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d079      	beq.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d902      	bls.n	8005aac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e002      	b.n	8005ab2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d059      	beq.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d154      	bne.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d10b      	bne.n	8005ae8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60bb      	str	r3, [r7, #8]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db04      	blt.n	8005b06 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f1c3 0207 	rsb	r2, r3, #7
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a19      	ldr	r2, [pc, #100]	@ (8005b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b16:	4413      	add	r3, r2
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d129      	bne.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fc58 	bl	80043d6 <uxListRemove>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	2201      	movs	r2, #1
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43da      	mvns	r2, r3
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	4a10      	ldr	r2, [pc, #64]	@ (8005b80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	2201      	movs	r2, #1
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	4a0b      	ldr	r2, [pc, #44]	@ (8005b80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a06      	ldr	r2, [pc, #24]	@ (8005b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b62:	441a      	add	r2, r3
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7fe fbd6 	bl	800431c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b70:	bf00      	nop
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	2000017c 	.word	0x2000017c
 8005b7c:	20000180 	.word	0x20000180
 8005b80:	20000284 	.word	0x20000284

08005b84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b88:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b96:	3201      	adds	r2, #1
 8005b98:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005b9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
	}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	2000017c 	.word	0x2000017c

08005bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bb6:	4b29      	ldr	r3, [pc, #164]	@ (8005c5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bbc:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fc07 	bl	80043d6 <uxListRemove>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bce:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43da      	mvns	r2, r3
 8005bdc:	4b21      	ldr	r3, [pc, #132]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4013      	ands	r3, r2
 8005be2:	4a20      	ldr	r2, [pc, #128]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005be4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d10a      	bne.n	8005c04 <prvAddCurrentTaskToDelayedList+0x58>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	481a      	ldr	r0, [pc, #104]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bfe:	f7fe fb8d 	bl	800431c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c02:	e026      	b.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c0c:	4b14      	ldr	r3, [pc, #80]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d209      	bcs.n	8005c30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c1c:	4b13      	ldr	r3, [pc, #76]	@ (8005c6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fe fb9b 	bl	8004364 <vListInsert>
}
 8005c2e:	e010      	b.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c30:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f7fe fb91 	bl	8004364 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d202      	bcs.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c4c:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6013      	str	r3, [r2, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000280 	.word	0x20000280
 8005c60:	2000017c 	.word	0x2000017c
 8005c64:	20000284 	.word	0x20000284
 8005c68:	20000268 	.word	0x20000268
 8005c6c:	20000238 	.word	0x20000238
 8005c70:	20000234 	.word	0x20000234
 8005c74:	2000029c 	.word	0x2000029c

08005c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b04      	subs	r3, #4
 8005c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b04      	subs	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 0201 	bic.w	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8005cdc <pxPortInitialiseStack+0x64>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3b14      	subs	r3, #20
 8005cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f06f 0202 	mvn.w	r2, #2
 8005cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b20      	subs	r3, #32
 8005ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	08005ce1 	.word	0x08005ce1

08005ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cea:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <prvTaskExitError+0x58>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d00b      	beq.n	8005d0c <prvTaskExitError+0x2c>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <prvTaskExitError+0x28>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d20:	bf00      	nop
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0fc      	beq.n	8005d22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000018 	.word	0x20000018
 8005d3c:	00000000 	.word	0x00000000

08005d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <pxCurrentTCBConst2>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	f380 8809 	msr	PSP, r0
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	4770      	bx	lr
 8005d5c:	f3af 8000 	nop.w

08005d60 <pxCurrentTCBConst2>:
 8005d60:	2000017c 	.word	0x2000017c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d68:	4808      	ldr	r0, [pc, #32]	@ (8005d8c <prvPortStartFirstTask+0x24>)
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f380 8808 	msr	MSP, r0
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8814 	msr	CONTROL, r0
 8005d7a:	b662      	cpsie	i
 8005d7c:	b661      	cpsie	f
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	df00      	svc	0
 8005d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed08 	.word	0xe000ed08

08005d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <xPortStartScheduler+0x124>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a47      	ldr	r2, [pc, #284]	@ (8005eb8 <xPortStartScheduler+0x128>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10b      	bne.n	8005db8 <xPortStartScheduler+0x28>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005db8:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <xPortStartScheduler+0x124>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ebc <xPortStartScheduler+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10b      	bne.n	8005dda <xPortStartScheduler+0x4a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	613b      	str	r3, [r7, #16]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dda:	4b39      	ldr	r3, [pc, #228]	@ (8005ec0 <xPortStartScheduler+0x130>)
 8005ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	22ff      	movs	r2, #255	@ 0xff
 8005dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b31      	ldr	r3, [pc, #196]	@ (8005ec4 <xPortStartScheduler+0x134>)
 8005e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e08:	e009      	b.n	8005e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b80      	cmp	r3, #128	@ 0x80
 8005e28:	d0ef      	beq.n	8005e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1c3 0307 	rsb	r3, r3, #7
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00b      	beq.n	8005e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e60:	4a19      	ldr	r2, [pc, #100]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a16      	ldr	r2, [pc, #88]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e84:	f000 f8da 	bl	800603c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <xPortStartScheduler+0x140>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e8e:	f000 f8f9 	bl	8006084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <xPortStartScheduler+0x144>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed4 <xPortStartScheduler+0x144>)
 8005e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e9e:	f7ff ff63 	bl	8005d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ea2:	f7ff fa93 	bl	80053cc <vTaskSwitchContext>
	prvTaskExitError();
 8005ea6:	f7ff ff1b 	bl	8005ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	e000ed00 	.word	0xe000ed00
 8005eb8:	410fc271 	.word	0x410fc271
 8005ebc:	410fc270 	.word	0x410fc270
 8005ec0:	e000e400 	.word	0xe000e400
 8005ec4:	200002a8 	.word	0x200002a8
 8005ec8:	200002ac 	.word	0x200002ac
 8005ecc:	e000ed20 	.word	0xe000ed20
 8005ed0:	20000018 	.word	0x20000018
 8005ed4:	e000ef34 	.word	0xe000ef34

08005ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	607b      	str	r3, [r7, #4]
}
 8005ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005efc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d110      	bne.n	8005f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <vPortEnterCritical+0x60>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	603b      	str	r3, [r7, #0]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <vPortEnterCritical+0x4a>
	}
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000018 	.word	0x20000018
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f42:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <vPortExitCritical+0x26>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	e7fd      	b.n	8005f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f62:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f6c:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <vPortExitCritical+0x44>
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	20000018 	.word	0x20000018

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f01e 0f10 	tst.w	lr, #16
 8005fa0:	bf08      	it	eq
 8005fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fb4:	f380 8811 	msr	BASEPRI, r0
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f7ff fa04 	bl	80053cc <vTaskSwitchContext>
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f380 8811 	msr	BASEPRI, r0
 8005fcc:	bc09      	pop	{r0, r3}
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd6:	f01e 0f10 	tst.w	lr, #16
 8005fda:	bf08      	it	eq
 8005fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fe0:	f380 8809 	msr	PSP, r0
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst>:
 8005ff0:	2000017c 	.word	0x2000017c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop

08005ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006012:	f7ff f921 	bl	8005258 <xTaskIncrementTick>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <SysTick_Handler+0x40>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <vPortSetupTimerInterrupt+0x38>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <vPortSetupTimerInterrupt+0x3c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <vPortSetupTimerInterrupt+0x40>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <vPortSetupTimerInterrupt+0x44>)
 800605a:	3b01      	subs	r3, #1
 800605c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800605e:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	e000e010 	.word	0xe000e010
 8006074:	e000e018 	.word	0xe000e018
 8006078:	2000000c 	.word	0x2000000c
 800607c:	10624dd3 	.word	0x10624dd3
 8006080:	e000e014 	.word	0xe000e014

08006084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006094 <vPortEnableVFP+0x10>
 8006088:	6801      	ldr	r1, [r0, #0]
 800608a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800608e:	6001      	str	r1, [r0, #0]
 8006090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006092:	bf00      	nop
 8006094:	e000ed88 	.word	0xe000ed88

08006098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800609e:	f3ef 8305 	mrs	r3, IPSR
 80060a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b0f      	cmp	r3, #15
 80060a8:	d915      	bls.n	80060d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060aa:	4a18      	ldr	r2, [pc, #96]	@ (800610c <vPortValidateInterruptPriority+0x74>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060b4:	4b16      	ldr	r3, [pc, #88]	@ (8006110 <vPortValidateInterruptPriority+0x78>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	7afa      	ldrb	r2, [r7, #11]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d20b      	bcs.n	80060d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <vPortValidateInterruptPriority+0x7c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060de:	4b0e      	ldr	r3, [pc, #56]	@ (8006118 <vPortValidateInterruptPriority+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90b      	bls.n	80060fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	603b      	str	r3, [r7, #0]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vPortValidateInterruptPriority+0x62>
	}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e3f0 	.word	0xe000e3f0
 8006110:	200002a8 	.word	0x200002a8
 8006114:	e000ed0c 	.word	0xe000ed0c
 8006118:	200002ac 	.word	0x200002ac

0800611c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006128:	f7fe ffea 	bl	8005100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800612c:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <pvPortMalloc+0x184>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006134:	f000 f924 	bl	8006380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006138:	4b5a      	ldr	r3, [pc, #360]	@ (80062a4 <pvPortMalloc+0x188>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 8095 	bne.w	8006270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800614c:	2208      	movs	r2, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d015      	beq.n	800618a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	3308      	adds	r3, #8
 8006166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <pvPortMalloc+0x6e>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	617b      	str	r3, [r7, #20]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d06f      	beq.n	8006270 <pvPortMalloc+0x154>
 8006190:	4b45      	ldr	r3, [pc, #276]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d86a      	bhi.n	8006270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800619a:	4b44      	ldr	r3, [pc, #272]	@ (80062ac <pvPortMalloc+0x190>)
 800619c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800619e:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <pvPortMalloc+0x190>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a4:	e004      	b.n	80061b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d903      	bls.n	80061c2 <pvPortMalloc+0xa6>
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f1      	bne.n	80061a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061c2:	4b37      	ldr	r3, [pc, #220]	@ (80062a0 <pvPortMalloc+0x184>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d051      	beq.n	8006270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2208      	movs	r2, #8
 80061d2:	4413      	add	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	1ad2      	subs	r2, r2, r3
 80061e6:	2308      	movs	r3, #8
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d920      	bls.n	8006230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <pvPortMalloc+0xfc>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800622a:	69b8      	ldr	r0, [r7, #24]
 800622c:	f000 f90a 	bl	8006444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	4a1b      	ldr	r2, [pc, #108]	@ (80062a8 <pvPortMalloc+0x18c>)
 800623c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b1b      	ldr	r3, [pc, #108]	@ (80062b0 <pvPortMalloc+0x194>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d203      	bcs.n	8006252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800624a:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <pvPortMalloc+0x18c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <pvPortMalloc+0x194>)
 8006250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <pvPortMalloc+0x188>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	431a      	orrs	r2, r3
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <pvPortMalloc+0x198>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	4a11      	ldr	r2, [pc, #68]	@ (80062b4 <pvPortMalloc+0x198>)
 800626e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006270:	f7fe ff54 	bl	800511c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <pvPortMalloc+0x17a>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	e7fd      	b.n	8006292 <pvPortMalloc+0x176>
	return pvReturn;
 8006296:	69fb      	ldr	r3, [r7, #28]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3728      	adds	r7, #40	@ 0x28
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200042b8 	.word	0x200042b8
 80062a4:	200042cc 	.word	0x200042cc
 80062a8:	200042bc 	.word	0x200042bc
 80062ac:	200042b0 	.word	0x200042b0
 80062b0:	200042c0 	.word	0x200042c0
 80062b4:	200042c4 	.word	0x200042c4

080062b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062ca:	2308      	movs	r3, #8
 80062cc:	425b      	negs	r3, r3
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	4b25      	ldr	r3, [pc, #148]	@ (8006374 <vPortFree+0xbc>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <vPortFree+0x46>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <vPortFree+0x66>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60bb      	str	r3, [r7, #8]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	4b14      	ldr	r3, [pc, #80]	@ (8006374 <vPortFree+0xbc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01e      	beq.n	800636a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11a      	bne.n	800636a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b0e      	ldr	r3, [pc, #56]	@ (8006374 <vPortFree+0xbc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	43db      	mvns	r3, r3
 800633e:	401a      	ands	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006344:	f7fe fedc 	bl	8005100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <vPortFree+0xc0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4413      	add	r3, r2
 8006352:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <vPortFree+0xc0>)
 8006354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006356:	6938      	ldr	r0, [r7, #16]
 8006358:	f000 f874 	bl	8006444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vPortFree+0xc4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	4a06      	ldr	r2, [pc, #24]	@ (800637c <vPortFree+0xc4>)
 8006364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006366:	f7fe fed9 	bl	800511c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200042cc 	.word	0x200042cc
 8006378:	200042bc 	.word	0x200042bc
 800637c:	200042c8 	.word	0x200042c8

08006380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006386:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800638a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800638c:	4b27      	ldr	r3, [pc, #156]	@ (800642c <prvHeapInit+0xac>)
 800638e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3307      	adds	r3, #7
 800639e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	4a1f      	ldr	r2, [pc, #124]	@ (800642c <prvHeapInit+0xac>)
 80063b0:	4413      	add	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <prvHeapInit+0xb0>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063be:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <prvHeapInit+0xb0>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063cc:	2208      	movs	r2, #8
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <prvHeapInit+0xb4>)
 80063e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063e2:	4b14      	ldr	r3, [pc, #80]	@ (8006434 <prvHeapInit+0xb4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063ea:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <prvHeapInit+0xb4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006400:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <prvHeapInit+0xb4>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <prvHeapInit+0xb8>)
 800640e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <prvHeapInit+0xbc>)
 8006416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <prvHeapInit+0xc0>)
 800641a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	200002b0 	.word	0x200002b0
 8006430:	200042b0 	.word	0x200042b0
 8006434:	200042b8 	.word	0x200042b8
 8006438:	200042c0 	.word	0x200042c0
 800643c:	200042bc 	.word	0x200042bc
 8006440:	200042cc 	.word	0x200042cc

08006444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800644c:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <prvInsertBlockIntoFreeList+0xac>)
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e002      	b.n	8006458 <prvInsertBlockIntoFreeList+0x14>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d8f7      	bhi.n	8006452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4413      	add	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d108      	bne.n	8006486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	441a      	add	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d118      	bne.n	80064cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <prvInsertBlockIntoFreeList+0xb0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d00d      	beq.n	80064c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	441a      	add	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e008      	b.n	80064d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <prvInsertBlockIntoFreeList+0xb0>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e003      	b.n	80064d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d002      	beq.n	80064e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	200042b0 	.word	0x200042b0
 80064f4:	200042b8 	.word	0x200042b8

080064f8 <memset>:
 80064f8:	4402      	add	r2, r0
 80064fa:	4603      	mov	r3, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d100      	bne.n	8006502 <memset+0xa>
 8006500:	4770      	bx	lr
 8006502:	f803 1b01 	strb.w	r1, [r3], #1
 8006506:	e7f9      	b.n	80064fc <memset+0x4>

08006508 <_reclaim_reent>:
 8006508:	4b2d      	ldr	r3, [pc, #180]	@ (80065c0 <_reclaim_reent+0xb8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4283      	cmp	r3, r0
 800650e:	b570      	push	{r4, r5, r6, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	d053      	beq.n	80065bc <_reclaim_reent+0xb4>
 8006514:	69c3      	ldr	r3, [r0, #28]
 8006516:	b31b      	cbz	r3, 8006560 <_reclaim_reent+0x58>
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	b163      	cbz	r3, 8006536 <_reclaim_reent+0x2e>
 800651c:	2500      	movs	r5, #0
 800651e:	69e3      	ldr	r3, [r4, #28]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	5959      	ldr	r1, [r3, r5]
 8006524:	b9b1      	cbnz	r1, 8006554 <_reclaim_reent+0x4c>
 8006526:	3504      	adds	r5, #4
 8006528:	2d80      	cmp	r5, #128	@ 0x80
 800652a:	d1f8      	bne.n	800651e <_reclaim_reent+0x16>
 800652c:	69e3      	ldr	r3, [r4, #28]
 800652e:	4620      	mov	r0, r4
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	f000 f87b 	bl	800662c <_free_r>
 8006536:	69e3      	ldr	r3, [r4, #28]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	b111      	cbz	r1, 8006542 <_reclaim_reent+0x3a>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f875 	bl	800662c <_free_r>
 8006542:	69e3      	ldr	r3, [r4, #28]
 8006544:	689d      	ldr	r5, [r3, #8]
 8006546:	b15d      	cbz	r5, 8006560 <_reclaim_reent+0x58>
 8006548:	4629      	mov	r1, r5
 800654a:	4620      	mov	r0, r4
 800654c:	682d      	ldr	r5, [r5, #0]
 800654e:	f000 f86d 	bl	800662c <_free_r>
 8006552:	e7f8      	b.n	8006546 <_reclaim_reent+0x3e>
 8006554:	680e      	ldr	r6, [r1, #0]
 8006556:	4620      	mov	r0, r4
 8006558:	f000 f868 	bl	800662c <_free_r>
 800655c:	4631      	mov	r1, r6
 800655e:	e7e1      	b.n	8006524 <_reclaim_reent+0x1c>
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	b111      	cbz	r1, 800656a <_reclaim_reent+0x62>
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f861 	bl	800662c <_free_r>
 800656a:	69e1      	ldr	r1, [r4, #28]
 800656c:	b111      	cbz	r1, 8006574 <_reclaim_reent+0x6c>
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f85c 	bl	800662c <_free_r>
 8006574:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006576:	b111      	cbz	r1, 800657e <_reclaim_reent+0x76>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 f857 	bl	800662c <_free_r>
 800657e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006580:	b111      	cbz	r1, 8006588 <_reclaim_reent+0x80>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f852 	bl	800662c <_free_r>
 8006588:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800658a:	b111      	cbz	r1, 8006592 <_reclaim_reent+0x8a>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f84d 	bl	800662c <_free_r>
 8006592:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006594:	b111      	cbz	r1, 800659c <_reclaim_reent+0x94>
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f848 	bl	800662c <_free_r>
 800659c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800659e:	b111      	cbz	r1, 80065a6 <_reclaim_reent+0x9e>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f843 	bl	800662c <_free_r>
 80065a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065a8:	b111      	cbz	r1, 80065b0 <_reclaim_reent+0xa8>
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f83e 	bl	800662c <_free_r>
 80065b0:	6a23      	ldr	r3, [r4, #32]
 80065b2:	b11b      	cbz	r3, 80065bc <_reclaim_reent+0xb4>
 80065b4:	4620      	mov	r0, r4
 80065b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ba:	4718      	bx	r3
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop
 80065c0:	2000001c 	.word	0x2000001c

080065c4 <__libc_init_array>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4d0d      	ldr	r5, [pc, #52]	@ (80065fc <__libc_init_array+0x38>)
 80065c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006600 <__libc_init_array+0x3c>)
 80065ca:	1b64      	subs	r4, r4, r5
 80065cc:	10a4      	asrs	r4, r4, #2
 80065ce:	2600      	movs	r6, #0
 80065d0:	42a6      	cmp	r6, r4
 80065d2:	d109      	bne.n	80065e8 <__libc_init_array+0x24>
 80065d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006604 <__libc_init_array+0x40>)
 80065d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006608 <__libc_init_array+0x44>)
 80065d8:	f000 f87e 	bl	80066d8 <_init>
 80065dc:	1b64      	subs	r4, r4, r5
 80065de:	10a4      	asrs	r4, r4, #2
 80065e0:	2600      	movs	r6, #0
 80065e2:	42a6      	cmp	r6, r4
 80065e4:	d105      	bne.n	80065f2 <__libc_init_array+0x2e>
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ec:	4798      	blx	r3
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7ee      	b.n	80065d0 <__libc_init_array+0xc>
 80065f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f6:	4798      	blx	r3
 80065f8:	3601      	adds	r6, #1
 80065fa:	e7f2      	b.n	80065e2 <__libc_init_array+0x1e>
 80065fc:	08006780 	.word	0x08006780
 8006600:	08006780 	.word	0x08006780
 8006604:	08006780 	.word	0x08006780
 8006608:	08006784 	.word	0x08006784

0800660c <__retarget_lock_acquire_recursive>:
 800660c:	4770      	bx	lr

0800660e <__retarget_lock_release_recursive>:
 800660e:	4770      	bx	lr

08006610 <memcpy>:
 8006610:	440a      	add	r2, r1
 8006612:	4291      	cmp	r1, r2
 8006614:	f100 33ff 	add.w	r3, r0, #4294967295
 8006618:	d100      	bne.n	800661c <memcpy+0xc>
 800661a:	4770      	bx	lr
 800661c:	b510      	push	{r4, lr}
 800661e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006626:	4291      	cmp	r1, r2
 8006628:	d1f9      	bne.n	800661e <memcpy+0xe>
 800662a:	bd10      	pop	{r4, pc}

0800662c <_free_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	2900      	cmp	r1, #0
 8006632:	d041      	beq.n	80066b8 <_free_r+0x8c>
 8006634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006638:	1f0c      	subs	r4, r1, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfb8      	it	lt
 800663e:	18e4      	addlt	r4, r4, r3
 8006640:	f000 f83e 	bl	80066c0 <__malloc_lock>
 8006644:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <_free_r+0x90>)
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	b933      	cbnz	r3, 8006658 <_free_r+0x2c>
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6014      	str	r4, [r2, #0]
 800664e:	4628      	mov	r0, r5
 8006650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006654:	f000 b83a 	b.w	80066cc <__malloc_unlock>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d908      	bls.n	800666e <_free_r+0x42>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	1821      	adds	r1, r4, r0
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1809      	addeq	r1, r1, r0
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	e7ed      	b.n	800664a <_free_r+0x1e>
 800666e:	461a      	mov	r2, r3
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b10b      	cbz	r3, 8006678 <_free_r+0x4c>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d9fa      	bls.n	800666e <_free_r+0x42>
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	1850      	adds	r0, r2, r1
 800667c:	42a0      	cmp	r0, r4
 800667e:	d10b      	bne.n	8006698 <_free_r+0x6c>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	4401      	add	r1, r0
 8006684:	1850      	adds	r0, r2, r1
 8006686:	4283      	cmp	r3, r0
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	d1e0      	bne.n	800664e <_free_r+0x22>
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	6053      	str	r3, [r2, #4]
 8006692:	4408      	add	r0, r1
 8006694:	6010      	str	r0, [r2, #0]
 8006696:	e7da      	b.n	800664e <_free_r+0x22>
 8006698:	d902      	bls.n	80066a0 <_free_r+0x74>
 800669a:	230c      	movs	r3, #12
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	e7d6      	b.n	800664e <_free_r+0x22>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf04      	itt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	bf04      	itt	eq
 80066b0:	1809      	addeq	r1, r1, r0
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	6054      	str	r4, [r2, #4]
 80066b6:	e7ca      	b.n	800664e <_free_r+0x22>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	2000440c 	.word	0x2000440c

080066c0 <__malloc_lock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	@ (80066c8 <__malloc_lock+0x8>)
 80066c2:	f7ff bfa3 	b.w	800660c <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	20004408 	.word	0x20004408

080066cc <__malloc_unlock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	@ (80066d4 <__malloc_unlock+0x8>)
 80066ce:	f7ff bf9e 	b.w	800660e <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	20004408 	.word	0x20004408

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
