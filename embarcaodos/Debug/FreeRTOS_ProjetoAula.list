
FreeRTOS_ProjetoAula.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f80  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005160  08005160  00006160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d8  080051d8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080051e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f98  2000006c  0800524c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001004  0800524c  00008004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017393  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003302  00000000  00000000  0001e42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00021738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104e  00000000  00000000  00022c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ec9  00000000  00000000  00023c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016667  00000000  00000000  00026b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd10  00000000  00000000  0003d1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aeb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b08  00000000  00000000  0010aefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00110a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005148 	.word	0x08005148

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005148 	.word	0x08005148

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
	uint16_t pin;
	TickType_t time;
}led_t;


void led_task (void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		HAL_GPIO_TogglePin(led->port, led->pin);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f000 fe02 	bl	800116c <HAL_GPIO_TogglePin>
		vTaskDelay(led->time);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fd97 	bl	80040a0 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port, led->pin);
 8000572:	bf00      	nop
 8000574:	e7f0      	b.n	8000558 <led_task+0xc>
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa84 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82d 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8c1 	bl	800070c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800058a:	f000 f875 	bl	8000678 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  static led_t led = {.port = GPIOA, .pin = GPIO_PIN_5, .time = 500};

  (void)xTaskCreate(led_task, "NAME", 256, &led, 7, NULL);
 800058e:	2300      	movs	r3, #0
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2307      	movs	r3, #7
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <main+0x54>)
 8000598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800059c:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <main+0x58>)
 800059e:	480d      	ldr	r0, [pc, #52]	@ (80005d4 <main+0x5c>)
 80005a0:	f003 fc32 	bl	8003e08 <xTaskCreate>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <main+0x60>)
 80005a6:	1d3c      	adds	r4, r7, #4
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fb37 	bl	8003c2a <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <main+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f003 fb2b 	bl	8003c1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0x4e>
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	08005160 	.word	0x08005160
 80005d4:	0800054d 	.word	0x0800054d
 80005d8:	08005174 	.word	0x08005174
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2238      	movs	r2, #56	@ 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fcc8 	bl	8004f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 fdcc 	bl	80011a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2340      	movs	r3, #64	@ 0x40
 8000614:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000622:	2355      	movs	r3, #85	@ 0x55
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe66 	bl	8001308 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000642:	f000 f8bb 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2104      	movs	r1, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f964 	bl	800192c <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066a:	f000 f8a7 	bl	80007bc <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	@ 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800067e:	4a22      	ldr	r2, [pc, #136]	@ (8000708 <MX_LPUART1_UART_Init+0x90>)
 8000680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f002 f89a 	bl	80027f4 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f879 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	f003 f9c2 	bl	8003a56 <HAL_UARTEx_SetTxFifoThreshold>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006d8:	f000 f870 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	f003 f9f7 	bl	8003ad2 <HAL_UARTEx_SetRxFifoThreshold>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006ea:	f000 f867 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f003 f978 	bl	80039e4 <HAL_UARTEx_DisableFifoMode>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006fa:	f000 f85f 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000088 	.word	0x20000088
 8000708:	40008000 	.word	0x40008000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_GPIO_Init+0x78>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <MX_GPIO_Init+0x78>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_GPIO_Init+0x78>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_GPIO_Init+0x78>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <MX_GPIO_Init+0x78>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_GPIO_Init+0x78>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f000 fcef 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800075e:	2320      	movs	r3, #32
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f000 fb5e 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f003 fa71 	bl	8003c78 <osDelay>
 8000796:	e7fb      	b.n	8000790 <StartDefaultTask+0x8>

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007aa:	f000 f987 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_MspInit+0x50>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a11      	ldr	r2, [pc, #68]	@ (8000818 <HAL_MspInit+0x50>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x50>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_MspInit+0x50>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <HAL_MspInit+0x50>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_MspInit+0x50>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fa2f 	bl	8000c68 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800080a:	f000 fd6d 	bl	80012e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	@ 0x68
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	2244      	movs	r2, #68	@ 0x44
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fba1 	bl	8004f84 <memset>
  if(huart->Instance==LPUART1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a23      	ldr	r2, [pc, #140]	@ (80008d4 <HAL_UART_MspInit+0xb8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d13e      	bne.n	80008ca <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800084c:	2320      	movs	r3, #32
 800084e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fab5 	bl	8001dc8 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000864:	f7ff ffaa 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 800086a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800086c:	4a1a      	ldr	r2, [pc, #104]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 8000876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_UART_MspInit+0xbc>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000898:	230c      	movs	r3, #12
 800089a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008a8:	230c      	movs	r3, #12
 80008aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f000 fabf 	bl	8000e38 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2105      	movs	r1, #5
 80008be:	205b      	movs	r0, #91	@ 0x5b
 80008c0:	f000 f9d2 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008c4:	205b      	movs	r0, #91	@ 0x5b
 80008c6:	f000 f9e9 	bl	8000c9c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80008ca:	bf00      	nop
 80008cc:	3768      	adds	r7, #104	@ 0x68
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40008000 	.word	0x40008000
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ec:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <HAL_InitTick+0xc4>)
 80008ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f0:	4a2b      	ldr	r2, [pc, #172]	@ (80009a0 <HAL_InitTick+0xc4>)
 80008f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <HAL_InitTick+0xc4>)
 80008fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 020c 	add.w	r2, r7, #12
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f9e2 	bl	8001cd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000914:	f001 f9ca 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8000918:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091c:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <HAL_InitTick+0xc8>)
 800091e:	fba2 2303 	umull	r2, r3, r2, r3
 8000922:	0c9b      	lsrs	r3, r3, #18
 8000924:	3b01      	subs	r3, #1
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <HAL_InitTick+0xcc>)
 800092a:	4a20      	ldr	r2, [pc, #128]	@ (80009ac <HAL_InitTick+0xd0>)
 800092c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <HAL_InitTick+0xcc>)
 8000930:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <HAL_InitTick+0xcc>)
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_InitTick+0xcc>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_InitTick+0xcc>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <HAL_InitTick+0xcc>)
 800094a:	f001 fc2d 	bl	80021a8 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800095c:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <HAL_InitTick+0xcc>)
 800095e:	f001 fc85 	bl	800226c <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000970:	2019      	movs	r0, #25
 8000972:	f000 f993 	bl	8000c9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2019      	movs	r0, #25
 8000982:	f000 f971 	bl	8000c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0xd4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000998:	4618      	mov	r0, r3
 800099a:	3730      	adds	r7, #48	@ 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	20000120 	.word	0x20000120
 80009ac:	40012c00 	.word	0x40012c00
 80009b0:	20000010 	.word	0x20000010

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009f2:	f001 fca5 	bl	8002340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000120 	.word	0x20000120

08000a00 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <LPUART1_IRQHandler+0x10>)
 8000a06:	f001 ff45 	bl	8002894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000088 	.word	0x20000088

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff ffea 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a66:	f004 faf3 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fd85 	bl	8000578 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a7c:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 8000a80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a84:	20001004 	.word	0x20001004

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8dc 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff ff1e 	bl	80008dc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fe8c 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	2000016c 	.word	0x2000016c
 8000adc:	20000014 	.word	0x20000014

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000016c 	.word	0x2000016c

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff4c 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c76:	f7ff ff63 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	6978      	ldr	r0, [r7, #20]
 8000c82:	f7ff ffb3 	bl	8000bec <NVIC_EncodePriority>
 8000c86:	4602      	mov	r2, r0
 8000c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff82 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff56 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d005      	beq.n	8000cdc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e037      	b.n	8000d4c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 020e 	bic.w	r2, r2, #14
 8000cea:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cfa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d28:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d40:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d4a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d00d      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e047      	b.n	8000e2e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 020e 	bic.w	r2, r2, #14
 8000dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f003 021f 	and.w	r2, r3, #31
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00c      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e0c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
    }
  }
  return status;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e46:	e15a      	b.n	80010fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 814c 	beq.w	80010f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80a6 	beq.w	80010f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fac:	4b5b      	ldr	r3, [pc, #364]	@ (800111c <HAL_GPIO_Init+0x2e4>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <HAL_GPIO_Init+0x2e4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb8:	4b58      	ldr	r3, [pc, #352]	@ (800111c <HAL_GPIO_Init+0x2e4>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc4:	4a56      	ldr	r2, [pc, #344]	@ (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fee:	d01f      	beq.n	8001030 <HAL_GPIO_Init+0x1f8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8001124 <HAL_GPIO_Init+0x2ec>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d019      	beq.n	800102c <HAL_GPIO_Init+0x1f4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	@ (8001128 <HAL_GPIO_Init+0x2f0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1f0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <HAL_GPIO_Init+0x2f4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1ec>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a49      	ldr	r2, [pc, #292]	@ (8001130 <HAL_GPIO_Init+0x2f8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1e8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <HAL_GPIO_Init+0x2fc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1e4>
 8001018:	2305      	movs	r3, #5
 800101a:	e00a      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 800101c:	2306      	movs	r3, #6
 800101e:	e008      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001020:	2304      	movs	r3, #4
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001024:	2303      	movs	r3, #3
 8001026:	e004      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001028:	2302      	movs	r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001030:	2300      	movs	r3, #0
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	4093      	lsls	r3, r2
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001042:	4937      	ldr	r1, [pc, #220]	@ (8001120 <HAL_GPIO_Init+0x2e8>)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001050:	4b39      	ldr	r3, [pc, #228]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001074:	4a30      	ldr	r2, [pc, #192]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_GPIO_Init+0x300>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <HAL_GPIO_Init+0x300>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_GPIO_Init+0x300>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <HAL_GPIO_Init+0x300>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_GPIO_Init+0x300>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f2:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <HAL_GPIO_Init+0x300>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	f47f ae9d 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	48000c00 	.word	0x48000c00
 8001130:	48001000 	.word	0x48001000
 8001134:	48001400 	.word	0x48001400
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e002      	b.n	8001160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43d9      	mvns	r1, r3
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	400b      	ands	r3, r1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d141      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b4b      	ldr	r3, [pc, #300]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ba:	d131      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011bc:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c2:	4a46      	ldr	r2, [pc, #280]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011d4:	4a41      	ldr	r2, [pc, #260]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011dc:	4b40      	ldr	r3, [pc, #256]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2232      	movs	r2, #50	@ 0x32
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	e002      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001206:	d102      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d158      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e057      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001220:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001226:	4a2d      	ldr	r2, [pc, #180]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800122c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001230:	e04d      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001260:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	@ 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a6:	d112      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e011      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012bc:	e007      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007000 	.word	0x40007000
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e2fe      	b.n	8001918 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d075      	beq.n	8001412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b97      	ldr	r3, [pc, #604]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b94      	ldr	r3, [pc, #592]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x3e>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x44>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b8d      	ldr	r3, [pc, #564]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d05b      	beq.n	8001410 <HAL_RCC_OscConfig+0x108>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d157      	bne.n	8001410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2d9      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x74>
 800136e:	4b85      	ldr	r3, [pc, #532]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a84      	ldr	r2, [pc, #528]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7e      	ldr	r2, [pc, #504]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b7c      	ldr	r3, [pc, #496]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7b      	ldr	r2, [pc, #492]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 80013a0:	4b78      	ldr	r3, [pc, #480]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a77      	ldr	r2, [pc, #476]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b75      	ldr	r3, [pc, #468]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a74      	ldr	r2, [pc, #464]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb8e 	bl	8000ae0 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb8a 	bl	8000ae0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e29e      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc0>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb7a 	bl	8000ae0 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb76 	bl	8000ae0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e28a      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b60      	ldr	r3, [pc, #384]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0xe8>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b59      	ldr	r3, [pc, #356]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b56      	ldr	r3, [pc, #344]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x136>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x13c>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11f      	bne.n	8001484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b4f      	ldr	r3, [pc, #316]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x154>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e25d      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4946      	ldr	r1, [pc, #280]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b45      	ldr	r3, [pc, #276]	@ (8001588 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa31 	bl	80008dc <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d043      	beq.n	8001508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e249      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a3c      	ldr	r2, [pc, #240]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb22 	bl	8000ae0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb1e 	bl	8000ae0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e232      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	492d      	ldr	r1, [pc, #180]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e01a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fafe 	bl	8000ae0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fafa 	bl	8000ae0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e20e      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1e0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d041      	beq.n	800159a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fad7 	bl	8000ae0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fad3 	bl	8000ae0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1e7      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ef      	beq.n	8001536 <HAL_RCC_OscConfig+0x22e>
 8001556:	e020      	b.n	800159a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff faba 	bl	8000ae0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156e:	e00d      	b.n	800158c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fab6 	bl	8000ae0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d906      	bls.n	800158c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1ca      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b8c      	ldr	r3, [pc, #560]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ac:	4b84      	ldr	r3, [pc, #528]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x2b4>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2b6>
 80015bc:	2300      	movs	r3, #0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b7f      	ldr	r3, [pc, #508]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a7e      	ldr	r2, [pc, #504]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b7c      	ldr	r3, [pc, #496]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4b79      	ldr	r3, [pc, #484]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4b76      	ldr	r3, [pc, #472]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa73 	bl	8000ae0 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fa6f 	bl	8000ae0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e183      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_RCC_OscConfig+0x32e>
 8001624:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a65      	ldr	r2, [pc, #404]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001634:	e024      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d110      	bne.n	8001660 <HAL_RCC_OscConfig+0x358>
 800163e:	4b60      	ldr	r3, [pc, #384]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001644:	4a5e      	ldr	r2, [pc, #376]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164e:	4b5c      	ldr	r3, [pc, #368]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001654:	4a5a      	ldr	r2, [pc, #360]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165e:	e00f      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001660:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	4a56      	ldr	r2, [pc, #344]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001676:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fa2a 	bl	8000ae0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fa26 	bl	8000ae0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e138      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b46      	ldr	r3, [pc, #280]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ed      	beq.n	8001690 <HAL_RCC_OscConfig+0x388>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa13 	bl	8000ae0 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa0f 	bl	8000ae0 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e121      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ed      	bne.n	80016be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b35      	ldr	r3, [pc, #212]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	4a34      	ldr	r2, [pc, #208]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03c      	beq.n	800177a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01c      	beq.n	8001742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800170e:	4a2c      	ldr	r2, [pc, #176]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff f9e2 	bl	8000ae0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001720:	f7ff f9de 	bl	8000ae0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0f2      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ef      	beq.n	8001720 <HAL_RCC_OscConfig+0x418>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff f9c5 	bl	8000ae0 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff f9c1 	bl	8000ae0 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0d5      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80c9 	beq.w	8001916 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b0c      	cmp	r3, #12
 800178e:	f000 8083 	beq.w	8001898 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d15e      	bne.n	8001858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f99b 	bl	8000ae0 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f997 	bl	8000ae0 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d905      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0ab      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b55      	ldr	r3, [pc, #340]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b52      	ldr	r3, [pc, #328]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <HAL_RCC_OscConfig+0x61c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6a11      	ldr	r1, [r2, #32]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80017ee:	0212      	lsls	r2, r2, #8
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	0552      	lsls	r2, r2, #21
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	3a01      	subs	r2, #1
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800180e:	06d2      	lsls	r2, r2, #27
 8001810:	430a      	orrs	r2, r1
 8001812:	4943      	ldr	r1, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001824:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a3d      	ldr	r2, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f956 	bl	8000ae0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f952 	bl	8000ae0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e066      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x530>
 8001856:	e05e      	b.n	8001916 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff f93c 	bl	8000ae0 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f938 	bl	8000ae0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04c      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4924      	ldr	r1, [pc, #144]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_RCC_OscConfig+0x620>)
 8001892:	4013      	ands	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
 8001896:	e03e      	b.n	8001916 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e039      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d12c      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	3b01      	subs	r3, #1
 80018c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d123      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11b      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d113      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	019f800c 	.word	0x019f800c
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e11e      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b91      	ldr	r3, [pc, #580]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b8e      	ldr	r3, [pc, #568]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 020f 	bic.w	r2, r3, #15
 800195a:	498c      	ldr	r1, [pc, #560]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b8a      	ldr	r3, [pc, #552]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e106      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d073      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d129      	bne.n	80019dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	4b81      	ldr	r3, [pc, #516]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0f4      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001998:	f000 f9d0 	bl	8001d3c <RCC_GetSysClockFreqFromPLLSource>
 800199c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001b94 <HAL_RCC_ClockConfig+0x268>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d93f      	bls.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d033      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12f      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019c6:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ce:	4a70      	ldr	r2, [pc, #448]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e024      	b.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0c6      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0be      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a04:	f000 f8ce 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4a61      	ldr	r2, [pc, #388]	@ (8001b94 <HAL_RCC_ClockConfig+0x268>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d909      	bls.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a12:	4b5f      	ldr	r3, [pc, #380]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4957      	ldr	r1, [pc, #348]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a38:	f7ff f852 	bl	8000ae0 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f84e 	bl	8000ae0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e095      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d023      	beq.n	8001abc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a42      	ldr	r2, [pc, #264]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a98:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4936      	ldr	r1, [pc, #216]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
 8001aba:	e008      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b80      	cmp	r3, #128	@ 0x80
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001acc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ace:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d21d      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 020f 	bic.w	r2, r3, #15
 8001ae4:	4929      	ldr	r1, [pc, #164]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aec:	f7fe fff8 	bl	8000ae0 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe fff4 	bl	8000ae0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03b      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1ed      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4917      	ldr	r1, [pc, #92]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490f      	ldr	r1, [pc, #60]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b56:	f000 f825 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <HAL_RCC_ClockConfig+0x26c>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe feae 	bl	80008dc <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	04c4b400 	.word	0x04c4b400
 8001b98:	08005190 	.word	0x08005190
 8001b9c:	2000000c 	.word	0x2000000c
 8001ba0:	20000010 	.word	0x20000010

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e047      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	e03e      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d136      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d10c      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c02:	68d2      	ldr	r2, [r2, #12]
 8001c04:	0a12      	lsrs	r2, r2, #8
 8001c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
      break;
 8001c10:	e00c      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	0a12      	lsrs	r2, r2, #8
 8001c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0e5b      	lsrs	r3, r3, #25
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e001      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c4c:	693b      	ldr	r3, [r7, #16]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	02dc6c00 	.word	0x02dc6c00

08001c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4904      	ldr	r1, [pc, #16]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	080051a0 	.word	0x080051a0

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb0:	f7ff ffda 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0adb      	lsrs	r3, r3, #11
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4904      	ldr	r1, [pc, #16]	@ (8001cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	080051a0 	.word	0x080051a0

08001cd8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_RCC_GetClockConfig+0x60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 020f 	and.w	r2, r3, #15
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40022000 	.word	0x40022000

08001d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d10c      	bne.n	8001d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d6a:	68d2      	ldr	r2, [r2, #12]
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
    break;
 8001d78:	e00c      	b.n	8001d94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4a0e      	ldr	r2, [pc, #56]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d84:	68d2      	ldr	r2, [r2, #12]
 8001d86:	0a12      	lsrs	r2, r2, #8
 8001d88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
    break;
 8001d92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0e5b      	lsrs	r3, r3, #25
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	02dc6c00 	.word	0x02dc6c00
 8001dc4:	00f42400 	.word	0x00f42400

08001dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8098 	beq.w	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b40      	ldr	r3, [pc, #256]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a39      	ldr	r2, [pc, #228]	@ (8001efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e1e:	f7fe fe5f 	bl	8000ae0 <HAL_GetTick>
 8001e22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e24:	e009      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7fe fe5b 	bl	8000ae0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d902      	bls.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	74fb      	strb	r3, [r7, #19]
        break;
 8001e38:	e005      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ef      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d159      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01e      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d019      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fe1b 	bl	8000ae0 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe fe17 	bl	8000ae0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d902      	bls.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8001ec4:	e006      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ec      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ef0:	e008      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	74bb      	strb	r3, [r7, #18]
 8001ef6:	e005      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f04:	7c7b      	ldrb	r3, [r7, #17]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4ba6      	ldr	r3, [pc, #664]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	4aa5      	ldr	r2, [pc, #660]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f22:	4ba0      	ldr	r3, [pc, #640]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f28:	f023 0203 	bic.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	499c      	ldr	r1, [pc, #624]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f44:	4b97      	ldr	r3, [pc, #604]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	f023 020c 	bic.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4994      	ldr	r1, [pc, #592]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f66:	4b8f      	ldr	r3, [pc, #572]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	498b      	ldr	r1, [pc, #556]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f88:	4b86      	ldr	r3, [pc, #536]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	4983      	ldr	r1, [pc, #524]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001faa:	4b7e      	ldr	r3, [pc, #504]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	497a      	ldr	r1, [pc, #488]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fcc:	4b75      	ldr	r3, [pc, #468]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	4972      	ldr	r1, [pc, #456]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fee:	4b6d      	ldr	r3, [pc, #436]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4969      	ldr	r1, [pc, #420]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002010:	4b64      	ldr	r3, [pc, #400]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4961      	ldr	r1, [pc, #388]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002032:	4b5c      	ldr	r3, [pc, #368]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	4958      	ldr	r1, [pc, #352]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4b53      	ldr	r3, [pc, #332]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	4950      	ldr	r1, [pc, #320]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002072:	d105      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a4a      	ldr	r2, [pc, #296]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800207e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800208c:	4b45      	ldr	r3, [pc, #276]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	4942      	ldr	r1, [pc, #264]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020aa:	d105      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ac:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020c4:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4934      	ldr	r1, [pc, #208]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e2:	d105      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e4:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020fc:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	4926      	ldr	r1, [pc, #152]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800211a:	d105      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002126:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	4918      	ldr	r1, [pc, #96]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217a:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002198:	7cbb      	ldrb	r3, [r7, #18]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e049      	b.n	800224e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f841 	bl	8002256 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f000 fa22 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e04a      	b.n	800231a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a21      	ldr	r2, [pc, #132]	@ (8002328 <HAL_TIM_Base_Start_IT+0xbc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d018      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <HAL_TIM_Base_Start_IT+0xc0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1c      	ldr	r2, [pc, #112]	@ (8002330 <HAL_TIM_Base_Start_IT+0xc4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002334 <HAL_TIM_Base_Start_IT+0xc8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x6c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_TIM_Base_Start_IT+0xcc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d115      	bne.n	8002304 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <HAL_TIM_Base_Start_IT+0xd0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d015      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0xaa>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f0:	d011      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	e008      	b.n	8002316 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e000      	b.n	8002318 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002316:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800
 8002334:	40013400 	.word	0x40013400
 8002338:	40014000 	.word	0x40014000
 800233c:	00010007 	.word	0x00010007

08002340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f931 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f923 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f934 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0204 	mvn.w	r2, #4
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f90b 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8fd 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f90e 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8e5 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8d7 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f8e8 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2208      	movs	r2, #8
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8bf 	bl	80025f2 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8b1 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8c2 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0201 	mvn.w	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe f976 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80024d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f951 	bl	800277c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f949 	bl	8002790 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00c      	beq.n	8002522 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800251a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f87c 	bl	800261a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0220 	mvn.w	r2, #32
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f911 	bl	8002768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00c      	beq.n	800256a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f91d 	bl	80027a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f915 	bl	80027b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80025aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f90d 	bl	80027cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00c      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80025ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f905 	bl	80027e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a42      	ldr	r2, [pc, #264]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00f      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264e:	d00b      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <TIM_Base_SetConfig+0x120>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3e      	ldr	r2, [pc, #248]	@ (8002754 <TIM_Base_SetConfig+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a33      	ldr	r2, [pc, #204]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01b      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002688:	d017      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a30      	ldr	r2, [pc, #192]	@ (8002750 <TIM_Base_SetConfig+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2f      	ldr	r2, [pc, #188]	@ (8002754 <TIM_Base_SetConfig+0x124>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00f      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2e      	ldr	r2, [pc, #184]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	@ (800275c <TIM_Base_SetConfig+0x12c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002760 <TIM_Base_SetConfig+0x130>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <TIM_Base_SetConfig+0x134>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d108      	bne.n	80026cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a16      	ldr	r2, [pc, #88]	@ (800274c <TIM_Base_SetConfig+0x11c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <TIM_Base_SetConfig+0x128>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a16      	ldr	r2, [pc, #88]	@ (800275c <TIM_Base_SetConfig+0x12c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <TIM_Base_SetConfig+0x130>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0xe8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <TIM_Base_SetConfig+0x134>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
  }
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40013400 	.word	0x40013400
 800275c:	40014000 	.word	0x40014000
 8002760:	40014400 	.word	0x40014400
 8002764:	40014800 	.word	0x40014800

08002768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e042      	b.n	800288c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fd ffff 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	@ 0x24
 8002822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fe56 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fb87 	bl	8002f58 <UART_SetConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e01b      	b.n	800288c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fed5 	bl	8003634 <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ba      	sub	sp, #232	@ 0xe8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80028be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80028c2:	4013      	ands	r3, r2
 80028c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80028c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11b      	bne.n	8002908 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8300 	beq.w	8002efe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
      }
      return;
 8002906:	e2fa      	b.n	8002efe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8123 	beq.w	8002b58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002912:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002916:	4b8d      	ldr	r3, [pc, #564]	@ (8002b4c <HAL_UART_IRQHandler+0x2b8>)
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800291e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002922:	4b8b      	ldr	r3, [pc, #556]	@ (8002b50 <HAL_UART_IRQHandler+0x2bc>)
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8116 	beq.w	8002b58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d011      	beq.n	800295c <HAL_UART_IRQHandler+0xc8>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800295c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d011      	beq.n	800298c <HAL_UART_IRQHandler+0xf8>
 8002968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2202      	movs	r2, #2
 800297a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f043 0204 	orr.w	r2, r3, #4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d011      	beq.n	80029bc <HAL_UART_IRQHandler+0x128>
 8002998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2204      	movs	r2, #4
 80029aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80029d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80029d8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b4c <HAL_UART_IRQHandler+0x2b8>)
 80029da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	f043 0208 	orr.w	r2, r3, #8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <HAL_UART_IRQHandler+0x196>
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8266 	beq.w	8002f02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d013      	beq.n	8002a6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d054      	beq.n	8002b38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fee7 	bl	8003862 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9e:	2b40      	cmp	r3, #64	@ 0x40
 8002aa0:	d146      	bne.n	8002b30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ace:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1d9      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002afe:	4a15      	ldr	r2, [pc, #84]	@ (8002b54 <HAL_UART_IRQHandler+0x2c0>)
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe f92e 	bl	8000d6a <HAL_DMA_Abort_IT>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d019      	beq.n	8002b48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002b22:	4610      	mov	r0, r2
 8002b24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b26:	e00f      	b.n	8002b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f9ff 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2e:	e00b      	b.n	8002b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f9fb 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b36:	e007      	b.n	8002b48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9f7 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002b46:	e1dc      	b.n	8002f02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	bf00      	nop
    return;
 8002b4a:	e1da      	b.n	8002f02 <HAL_UART_IRQHandler+0x66e>
 8002b4c:	10000001 	.word	0x10000001
 8002b50:	04000120 	.word	0x04000120
 8002b54:	0800392f 	.word	0x0800392f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 8170 	bne.w	8002e42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8169 	beq.w	8002e42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8162 	beq.w	8002e42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b40      	cmp	r3, #64	@ 0x40
 8002b92:	f040 80d8 	bne.w	8002d46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80af 	beq.w	8002d0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f080 80a7 	bcs.w	8002d0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8087 	bne.w	8002cea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1da      	bne.n	8002bdc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3308      	adds	r3, #8
 8002c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e1      	bne.n	8002c26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3308      	adds	r3, #8
 8002c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e3      	bne.n	8002c62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb8:	f023 0310 	bic.w	r3, r3, #16
 8002cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ccc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e4      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd ffe7 	bl	8000cb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f91b 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d0a:	e0fc      	b.n	8002f06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d16:	429a      	cmp	r2, r3
 8002d18:	f040 80f5 	bne.w	8002f06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 80eb 	bne.w	8002f06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8fe 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
      return;
 8002d44:	e0df      	b.n	8002f06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80d1 	beq.w	8002f0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80cc 	beq.w	8002f0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e4      	bne.n	8002d72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3308      	adds	r3, #8
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	623b      	str	r3, [r7, #32]
   return(result);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e1      	bne.n	8002da8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f023 0310 	bic.w	r3, r3, #16
 8002e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	617b      	str	r3, [r7, #20]
   return(result);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e4      	bne.n	8002df8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f880 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e40:	e063      	b.n	8002f0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <HAL_UART_IRQHandler+0x5d8>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fd9f 	bl	80039a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e6a:	e051      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03a      	beq.n	8002f0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    }
    return;
 8002ea0:	e035      	b.n	8002f0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x62e>
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fd49 	bl	8003952 <UART_EndTransmit_IT>
    return;
 8002ec0:	e026      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x64e>
 8002ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fd78 	bl	80039d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ee0:	e016      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_UART_IRQHandler+0x67c>
 8002eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0c      	bge.n	8002f10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fd60 	bl	80039bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002efc:	e008      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8002efe:	bf00      	nop
 8002f00:	e006      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f02:	bf00      	nop
 8002f04:	e004      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f0e:	bf00      	nop
  }
}
 8002f10:	37e8      	adds	r7, #232	@ 0xe8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop

08002f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b08c      	sub	sp, #48	@ 0x30
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4bab      	ldr	r3, [pc, #684]	@ (8003234 <UART_SetConfig+0x2dc>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4aa0      	ldr	r2, [pc, #640]	@ (8003238 <UART_SetConfig+0x2e0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002fce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	f023 010f 	bic.w	r1, r3, #15
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a91      	ldr	r2, [pc, #580]	@ (800323c <UART_SetConfig+0x2e4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d125      	bne.n	8003048 <UART_SetConfig+0xf0>
 8002ffc:	4b90      	ldr	r3, [pc, #576]	@ (8003240 <UART_SetConfig+0x2e8>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b03      	cmp	r3, #3
 8003008:	d81a      	bhi.n	8003040 <UART_SetConfig+0xe8>
 800300a:	a201      	add	r2, pc, #4	@ (adr r2, 8003010 <UART_SetConfig+0xb8>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003021 	.word	0x08003021
 8003014:	08003031 	.word	0x08003031
 8003018:	08003029 	.word	0x08003029
 800301c:	08003039 	.word	0x08003039
 8003020:	2301      	movs	r3, #1
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003026:	e0d6      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003028:	2302      	movs	r3, #2
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302e:	e0d2      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003030:	2304      	movs	r3, #4
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003036:	e0ce      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003038:	2308      	movs	r3, #8
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303e:	e0ca      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003040:	2310      	movs	r3, #16
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003046:	e0c6      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7d      	ldr	r2, [pc, #500]	@ (8003244 <UART_SetConfig+0x2ec>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d138      	bne.n	80030c4 <UART_SetConfig+0x16c>
 8003052:	4b7b      	ldr	r3, [pc, #492]	@ (8003240 <UART_SetConfig+0x2e8>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d82d      	bhi.n	80030bc <UART_SetConfig+0x164>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0x110>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030bd 	.word	0x080030bd
 8003074:	080030bd 	.word	0x080030bd
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030bd 	.word	0x080030bd
 8003080:	080030bd 	.word	0x080030bd
 8003084:	080030bd 	.word	0x080030bd
 8003088:	080030a5 	.word	0x080030a5
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030bd 	.word	0x080030bd
 8003098:	080030b5 	.word	0x080030b5
 800309c:	2300      	movs	r3, #0
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a2:	e098      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030aa:	e094      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b2:	e090      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030b4:	2308      	movs	r3, #8
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	e08c      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c2:	e088      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003248 <UART_SetConfig+0x2f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d125      	bne.n	800311a <UART_SetConfig+0x1c2>
 80030ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003240 <UART_SetConfig+0x2e8>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030d8:	2b30      	cmp	r3, #48	@ 0x30
 80030da:	d016      	beq.n	800310a <UART_SetConfig+0x1b2>
 80030dc:	2b30      	cmp	r3, #48	@ 0x30
 80030de:	d818      	bhi.n	8003112 <UART_SetConfig+0x1ba>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d00a      	beq.n	80030fa <UART_SetConfig+0x1a2>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d814      	bhi.n	8003112 <UART_SetConfig+0x1ba>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <UART_SetConfig+0x19a>
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d008      	beq.n	8003102 <UART_SetConfig+0x1aa>
 80030f0:	e00f      	b.n	8003112 <UART_SetConfig+0x1ba>
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f8:	e06d      	b.n	80031d6 <UART_SetConfig+0x27e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003100:	e069      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003102:	2304      	movs	r3, #4
 8003104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003108:	e065      	b.n	80031d6 <UART_SetConfig+0x27e>
 800310a:	2308      	movs	r3, #8
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003110:	e061      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003112:	2310      	movs	r3, #16
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003118:	e05d      	b.n	80031d6 <UART_SetConfig+0x27e>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4b      	ldr	r2, [pc, #300]	@ (800324c <UART_SetConfig+0x2f4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d125      	bne.n	8003170 <UART_SetConfig+0x218>
 8003124:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <UART_SetConfig+0x2e8>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800312e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003130:	d016      	beq.n	8003160 <UART_SetConfig+0x208>
 8003132:	2bc0      	cmp	r3, #192	@ 0xc0
 8003134:	d818      	bhi.n	8003168 <UART_SetConfig+0x210>
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d00a      	beq.n	8003150 <UART_SetConfig+0x1f8>
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d814      	bhi.n	8003168 <UART_SetConfig+0x210>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <UART_SetConfig+0x1f0>
 8003142:	2b40      	cmp	r3, #64	@ 0x40
 8003144:	d008      	beq.n	8003158 <UART_SetConfig+0x200>
 8003146:	e00f      	b.n	8003168 <UART_SetConfig+0x210>
 8003148:	2300      	movs	r3, #0
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314e:	e042      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003150:	2302      	movs	r3, #2
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003156:	e03e      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003158:	2304      	movs	r3, #4
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315e:	e03a      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003160:	2308      	movs	r3, #8
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e036      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e032      	b.n	80031d6 <UART_SetConfig+0x27e>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a30      	ldr	r2, [pc, #192]	@ (8003238 <UART_SetConfig+0x2e0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d12a      	bne.n	80031d0 <UART_SetConfig+0x278>
 800317a:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <UART_SetConfig+0x2e8>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003184:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003188:	d01a      	beq.n	80031c0 <UART_SetConfig+0x268>
 800318a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800318e:	d81b      	bhi.n	80031c8 <UART_SetConfig+0x270>
 8003190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003194:	d00c      	beq.n	80031b0 <UART_SetConfig+0x258>
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319a:	d815      	bhi.n	80031c8 <UART_SetConfig+0x270>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <UART_SetConfig+0x250>
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a4:	d008      	beq.n	80031b8 <UART_SetConfig+0x260>
 80031a6:	e00f      	b.n	80031c8 <UART_SetConfig+0x270>
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e012      	b.n	80031d6 <UART_SetConfig+0x27e>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e00e      	b.n	80031d6 <UART_SetConfig+0x27e>
 80031b8:	2304      	movs	r3, #4
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031be:	e00a      	b.n	80031d6 <UART_SetConfig+0x27e>
 80031c0:	2308      	movs	r3, #8
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c6:	e006      	b.n	80031d6 <UART_SetConfig+0x27e>
 80031c8:	2310      	movs	r3, #16
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ce:	e002      	b.n	80031d6 <UART_SetConfig+0x27e>
 80031d0:	2310      	movs	r3, #16
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <UART_SetConfig+0x2e0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	f040 80a8 	bne.w	8003332 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d834      	bhi.n	8003254 <UART_SetConfig+0x2fc>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0x298>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003215 	.word	0x08003215
 80031f4:	08003255 	.word	0x08003255
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003223 	.word	0x08003223
 8003204:	08003255 	.word	0x08003255
 8003208:	08003255 	.word	0x08003255
 800320c:	08003255 	.word	0x08003255
 8003210:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7fe fd34 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321a:	e021      	b.n	8003260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <UART_SetConfig+0x2f8>)
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003220:	e01e      	b.n	8003260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe fcbf 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003228:	e01a      	b.n	8003260 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003230:	e016      	b.n	8003260 <UART_SetConfig+0x308>
 8003232:	bf00      	nop
 8003234:	cfff69f3 	.word	0xcfff69f3
 8003238:	40008000 	.word	0x40008000
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	40004800 	.word	0x40004800
 800324c:	40004c00 	.word	0x40004c00
 8003250:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800325e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 812a 	beq.w	80034bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	4a9e      	ldr	r2, [pc, #632]	@ (80034e8 <UART_SetConfig+0x590>)
 800326e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003272:	461a      	mov	r2, r3
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d305      	bcc.n	8003298 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	429a      	cmp	r2, r3
 8003296:	d903      	bls.n	80032a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800329e:	e10d      	b.n	80034bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	2200      	movs	r2, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	60fa      	str	r2, [r7, #12]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	4a8e      	ldr	r2, [pc, #568]	@ (80034e8 <UART_SetConfig+0x590>)
 80032ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032c2:	f7fc ffad 	bl	8000220 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	020b      	lsls	r3, r1, #8
 80032d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032dc:	0202      	lsls	r2, r0, #8
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	6849      	ldr	r1, [r1, #4]
 80032e2:	0849      	lsrs	r1, r1, #1
 80032e4:	2000      	movs	r0, #0
 80032e6:	460c      	mov	r4, r1
 80032e8:	4605      	mov	r5, r0
 80032ea:	eb12 0804 	adds.w	r8, r2, r4
 80032ee:	eb43 0905 	adc.w	r9, r3, r5
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	469a      	mov	sl, r3
 80032fa:	4693      	mov	fp, r2
 80032fc:	4652      	mov	r2, sl
 80032fe:	465b      	mov	r3, fp
 8003300:	4640      	mov	r0, r8
 8003302:	4649      	mov	r1, r9
 8003304:	f7fc ff8c 	bl	8000220 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003316:	d308      	bcc.n	800332a <UART_SetConfig+0x3d2>
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800331e:	d204      	bcs.n	800332a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e0c8      	b.n	80034bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003330:	e0c4      	b.n	80034bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333a:	d167      	bne.n	800340c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800333c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x43e>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <UART_SetConfig+0x3f4>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fc86 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003376:	e014      	b.n	80033a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fc98 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 800337c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800337e:	e010      	b.n	80033a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b5a      	ldr	r3, [pc, #360]	@ (80034ec <UART_SetConfig+0x594>)
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003384:	e00d      	b.n	80033a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fc0d 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 800338a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800338c:	e009      	b.n	80033a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003394:	e005      	b.n	80033a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8089 	beq.w	80034bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <UART_SetConfig+0x590>)
 80033b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b4:	461a      	mov	r2, r3
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033bc:	005a      	lsls	r2, r3, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	441a      	add	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	d916      	bls.n	8003404 <UART_SetConfig+0x4ac>
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033dc:	d212      	bcs.n	8003404 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f023 030f 	bic.w	r3, r3, #15
 80033e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	8bfb      	ldrh	r3, [r7, #30]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	8bfa      	ldrh	r2, [r7, #30]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e05b      	b.n	80034bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800340a:	e057      	b.n	80034bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800340c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003410:	2b08      	cmp	r3, #8
 8003412:	d828      	bhi.n	8003466 <UART_SetConfig+0x50e>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <UART_SetConfig+0x4c4>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fc1e 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8003444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe fc30 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <UART_SetConfig+0x594>)
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7fe fba5 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 800345a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003470:	bf00      	nop
    }

    if (pclk != 0U)
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	2b00      	cmp	r3, #0
 8003476:	d021      	beq.n	80034bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <UART_SetConfig+0x590>)
 800347e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003482:	461a      	mov	r2, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	fbb3 f2f2 	udiv	r2, r3, r2
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	441a      	add	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	d909      	bls.n	80034b6 <UART_SetConfig+0x55e>
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a8:	d205      	bcs.n	80034b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	e002      	b.n	80034bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2201      	movs	r2, #1
 80034c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2200      	movs	r2, #0
 80034d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80034d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3730      	adds	r7, #48	@ 0x30
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	080051a8 	.word	0x080051a8
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd fa4c 	bl	8000ae0 <HAL_GetTick>
 8003648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12f      	bne.n	80036b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88e 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d022      	beq.n	80036b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003686:	653b      	str	r3, [r7, #80]	@ 0x50
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e063      	b.n	8003780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d149      	bne.n	800375a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	2200      	movs	r2, #0
 80036d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f857 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03c      	beq.n	800375a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	623b      	str	r3, [r7, #32]
   return(result);
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e6      	bne.n	80036e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3308      	adds	r3, #8
 8003718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	60fb      	str	r3, [r7, #12]
   return(result);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	617b      	str	r3, [r7, #20]
   return(result);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e5      	bne.n	8003712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e012      	b.n	8003780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3758      	adds	r7, #88	@ 0x58
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003798:	e04f      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037a0:	d04b      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fd f99d 	bl	8000ae0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e04e      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d037      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b80      	cmp	r3, #128	@ 0x80
 80037ce:	d034      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	d031      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d110      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2208      	movs	r2, #8
 80037ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f838 	bl	8003862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2208      	movs	r2, #8
 80037f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e029      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003814:	d111      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f81e 	bl	8003862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0a0      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003862:	b480      	push	{r7}
 8003864:	b095      	sub	sp, #84	@ 0x54
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003888:	643b      	str	r3, [r7, #64]	@ 0x40
 800388a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e6      	bne.n	800386a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3308      	adds	r3, #8
 80038be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e3      	bne.n	800389c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d118      	bne.n	800390e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f023 0310 	bic.w	r3, r3, #16
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	613b      	str	r3, [r7, #16]
   return(result);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e6      	bne.n	80038dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003922:	bf00      	nop
 8003924:	3754      	adds	r7, #84	@ 0x54
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff faf1 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b088      	sub	sp, #32
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	60bb      	str	r3, [r7, #8]
   return(result);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	613b      	str	r3, [r7, #16]
   return(result);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e6      	bne.n	800395a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fabc 	bl	8002f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UARTEx_DisableFifoMode+0x16>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e027      	b.n	8003a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2224      	movs	r2, #36	@ 0x24
 8003a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e02d      	b.n	8003aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	@ 0x24
 8003a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f850 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e02d      	b.n	8003b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	@ 0x24
 8003af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f812 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b70:	e031      	b.n	8003bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b72:	2308      	movs	r3, #8
 8003b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b76:	2308      	movs	r3, #8
 8003b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	0e5b      	lsrs	r3, r3, #25
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	0f5b      	lsrs	r3, r3, #29
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	7b3a      	ldrb	r2, [r7, #12]
 8003b9e:	4911      	ldr	r1, [pc, #68]	@ (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ba6:	7b3a      	ldrb	r2, [r7, #12]
 8003ba8:	490f      	ldr	r1, [pc, #60]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x98>)
 8003baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	7b7a      	ldrb	r2, [r7, #13]
 8003bbc:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003bbe:	5c8a      	ldrb	r2, [r1, r2]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bc4:	7b7a      	ldrb	r2, [r7, #13]
 8003bc6:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x98>)
 8003bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	080051c0 	.word	0x080051c0
 8003be8:	080051c8 	.word	0x080051c8

08003bec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfe:	2b84      	cmp	r3, #132	@ 0x84
 8003c00:	d005      	beq.n	8003c0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c20:	f000 fa74 	bl	800410c <vTaskStartScheduler>
  
  return osOK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af02      	add	r7, sp, #8
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685c      	ldr	r4, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c40:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ffcf 	bl	8003bec <makeFreeRtosPriority>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	9200      	str	r2, [sp, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 f8d2 	bl	8003e08 <xTaskCreate>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <osDelay+0x16>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e000      	b.n	8003c90 <osDelay+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fa05 	bl	80040a0 <vTaskDelay>
  
  return osOK;
 8003c96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f103 0208 	add.w	r2, r3, #8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f103 0208 	add.w	r2, r3, #8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f103 0208 	add.w	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d58:	d103      	bne.n	8003d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e00c      	b.n	8003d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3308      	adds	r3, #8
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e002      	b.n	8003d70 <vListInsert+0x2e>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d2f6      	bcs.n	8003d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6892      	ldr	r2, [r2, #8]
 8003dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d103      	bne.n	8003de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fec3 	bl	8004ba8 <pvPortMalloc>
 8003e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e2a:	20a0      	movs	r0, #160	@ 0xa0
 8003e2c:	f000 febc 	bl	8004ba8 <pvPortMalloc>
 8003e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3e:	e005      	b.n	8003e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f000 ff7f 	bl	8004d44 <vPortFree>
 8003e46:	e001      	b.n	8003e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f80f 	bl	8003e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6e:	69f8      	ldr	r0, [r7, #28]
 8003e70:	f000 f8ac 	bl	8003fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e002      	b.n	8003e80 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e80:	69bb      	ldr	r3, [r7, #24]
	}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01f      	beq.n	8003f1c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e012      	b.n	8003f08 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	7819      	ldrb	r1, [r3, #0]
 8003eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3334      	adds	r3, #52	@ 0x34
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	d9e9      	bls.n	8003ee2 <prvInitialiseNewTask+0x56>
 8003f0e:	e000      	b.n	8003f12 <prvInitialiseNewTask+0x86>
			{
				break;
 8003f10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f1a:	e003      	b.n	8003f24 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d901      	bls.n	8003f2e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	3304      	adds	r3, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fecb 	bl	8003ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	3318      	adds	r3, #24
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fec6 	bl	8003ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	f1c3 0207 	rsb	r2, r3, #7
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	334c      	adds	r3, #76	@ 0x4c
 8003f7e:	224c      	movs	r2, #76	@ 0x4c
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fffe 	bl	8004f84 <memset>
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc0 <prvInitialiseNewTask+0x134>)
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc4 <prvInitialiseNewTask+0x138>)
 8003f92:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc8 <prvInitialiseNewTask+0x13c>)
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	f000 fbf2 	bl	8004788 <pxPortInitialiseStack>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000ec4 	.word	0x20000ec4
 8003fc4:	20000f2c 	.word	0x20000f2c
 8003fc8:	20000f94 	.word	0x20000f94

08003fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fd4:	f000 fd08 	bl	80049e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004084 <prvAddNewTaskToReadyList+0xb8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	4a29      	ldr	r2, [pc, #164]	@ (8004084 <prvAddNewTaskToReadyList+0xb8>)
 8003fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <prvAddNewTaskToReadyList+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fea:	4a27      	ldr	r2, [pc, #156]	@ (8004088 <prvAddNewTaskToReadyList+0xbc>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ff0:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <prvAddNewTaskToReadyList+0xb8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d110      	bne.n	800401a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ff8:	f000 fabc 	bl	8004574 <prvInitialiseTaskLists>
 8003ffc:	e00d      	b.n	800401a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <prvAddNewTaskToReadyList+0xc0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <prvAddNewTaskToReadyList+0xbc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	429a      	cmp	r2, r3
 8004012:	d802      	bhi.n	800401a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <prvAddNewTaskToReadyList+0xbc>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <prvAddNewTaskToReadyList+0xc4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <prvAddNewTaskToReadyList+0xc4>)
 8004022:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	2201      	movs	r2, #1
 800402a:	409a      	lsls	r2, r3
 800402c:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <prvAddNewTaskToReadyList+0xc8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <prvAddNewTaskToReadyList+0xc8>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a15      	ldr	r2, [pc, #84]	@ (8004098 <prvAddNewTaskToReadyList+0xcc>)
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f7ff fe54 	bl	8003cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004052:	f000 fcfb 	bl	8004a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <prvAddNewTaskToReadyList+0xc0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <prvAddNewTaskToReadyList+0xbc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d207      	bcs.n	800407c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800406c:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <prvAddNewTaskToReadyList+0xd0>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000270 	.word	0x20000270
 8004088:	20000170 	.word	0x20000170
 800408c:	2000027c 	.word	0x2000027c
 8004090:	2000028c 	.word	0x2000028c
 8004094:	20000278 	.word	0x20000278
 8004098:	20000174 	.word	0x20000174
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040b2:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <vTaskDelay+0x64>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <vTaskDelay+0x32>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	60bb      	str	r3, [r7, #8]
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	e7fd      	b.n	80040ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040d2:	f000 f86d 	bl	80041b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 faef 	bl	80046bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040de:	f000 f875 	bl	80041cc <xTaskResumeAll>
 80040e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040ea:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <vTaskDelay+0x68>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000298 	.word	0x20000298
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004112:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <vTaskStartScheduler+0x84>)
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	2300      	movs	r3, #0
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2300      	movs	r3, #0
 800411c:	2280      	movs	r2, #128	@ 0x80
 800411e:	491d      	ldr	r1, [pc, #116]	@ (8004194 <vTaskStartScheduler+0x88>)
 8004120:	481d      	ldr	r0, [pc, #116]	@ (8004198 <vTaskStartScheduler+0x8c>)
 8004122:	f7ff fe71 	bl	8003e08 <xTaskCreate>
 8004126:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d11b      	bne.n	8004166 <vTaskStartScheduler+0x5a>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	60bb      	str	r3, [r7, #8]
}
 8004140:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004142:	4b16      	ldr	r3, [pc, #88]	@ (800419c <vTaskStartScheduler+0x90>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	334c      	adds	r3, #76	@ 0x4c
 8004148:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <vTaskStartScheduler+0x94>)
 800414a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <vTaskStartScheduler+0x98>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <vTaskStartScheduler+0x9c>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800415a:	4b14      	ldr	r3, [pc, #80]	@ (80041ac <vTaskStartScheduler+0xa0>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004160:	f000 fb9e 	bl	80048a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004164:	e00f      	b.n	8004186 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800416c:	d10b      	bne.n	8004186 <vTaskStartScheduler+0x7a>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <vTaskStartScheduler+0x76>
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000294 	.word	0x20000294
 8004194:	08005188 	.word	0x08005188
 8004198:	08004545 	.word	0x08004545
 800419c:	20000170 	.word	0x20000170
 80041a0:	2000001c 	.word	0x2000001c
 80041a4:	20000290 	.word	0x20000290
 80041a8:	2000027c 	.word	0x2000027c
 80041ac:	20000274 	.word	0x20000274

080041b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <vTaskSuspendAll+0x18>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a03      	ldr	r2, [pc, #12]	@ (80041c8 <vTaskSuspendAll+0x18>)
 80041bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000298 	.word	0x20000298

080041cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041da:	4b42      	ldr	r3, [pc, #264]	@ (80042e4 <xTaskResumeAll+0x118>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <xTaskResumeAll+0x2e>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	603b      	str	r3, [r7, #0]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041fa:	f000 fbf5 	bl	80049e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041fe:	4b39      	ldr	r3, [pc, #228]	@ (80042e4 <xTaskResumeAll+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	4a37      	ldr	r2, [pc, #220]	@ (80042e4 <xTaskResumeAll+0x118>)
 8004206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004208:	4b36      	ldr	r3, [pc, #216]	@ (80042e4 <xTaskResumeAll+0x118>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d161      	bne.n	80042d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <xTaskResumeAll+0x11c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05d      	beq.n	80042d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004218:	e02e      	b.n	8004278 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421a:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <xTaskResumeAll+0x120>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3318      	adds	r3, #24
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fdc4 	bl	8003db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fdbf 	bl	8003db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	4b2c      	ldr	r3, [pc, #176]	@ (80042f0 <xTaskResumeAll+0x124>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <xTaskResumeAll+0x124>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <xTaskResumeAll+0x128>)
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7ff fd4b 	bl	8003cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4b23      	ldr	r3, [pc, #140]	@ (80042f8 <xTaskResumeAll+0x12c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004272:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <xTaskResumeAll+0x130>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004278:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <xTaskResumeAll+0x120>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cc      	bne.n	800421a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004286:	f000 f9f9 	bl	800467c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <xTaskResumeAll+0x134>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004296:	f000 f837 	bl	8004308 <xTaskIncrementTick>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042a0:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <xTaskResumeAll+0x130>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f1      	bne.n	8004296 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <xTaskResumeAll+0x134>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <xTaskResumeAll+0x130>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <xTaskResumeAll+0x138>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042d4:	f000 fbba 	bl	8004a4c <vPortExitCritical>

	return xAlreadyYielded;
 80042d8:	68bb      	ldr	r3, [r7, #8]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000298 	.word	0x20000298
 80042e8:	20000270 	.word	0x20000270
 80042ec:	20000230 	.word	0x20000230
 80042f0:	20000278 	.word	0x20000278
 80042f4:	20000174 	.word	0x20000174
 80042f8:	20000170 	.word	0x20000170
 80042fc:	20000284 	.word	0x20000284
 8004300:	20000280 	.word	0x20000280
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004312:	4b4f      	ldr	r3, [pc, #316]	@ (8004450 <xTaskIncrementTick+0x148>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 808f 	bne.w	800443a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800431c:	4b4d      	ldr	r3, [pc, #308]	@ (8004454 <xTaskIncrementTick+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004324:	4a4b      	ldr	r2, [pc, #300]	@ (8004454 <xTaskIncrementTick+0x14c>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d121      	bne.n	8004374 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004330:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <xTaskIncrementTick+0x4a>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	e7fd      	b.n	800434e <xTaskIncrementTick+0x46>
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	4b40      	ldr	r3, [pc, #256]	@ (800445c <xTaskIncrementTick+0x154>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3e      	ldr	r2, [pc, #248]	@ (8004458 <xTaskIncrementTick+0x150>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4a3e      	ldr	r2, [pc, #248]	@ (800445c <xTaskIncrementTick+0x154>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <xTaskIncrementTick+0x158>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a3c      	ldr	r2, [pc, #240]	@ (8004460 <xTaskIncrementTick+0x158>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	f000 f984 	bl	800467c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <xTaskIncrementTick+0x15c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	429a      	cmp	r2, r3
 800437c:	d348      	bcc.n	8004410 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437e:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004388:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <xTaskIncrementTick+0x15c>)
 800438a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800438e:	601a      	str	r2, [r3, #0]
					break;
 8004390:	e03e      	b.n	8004410 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d203      	bcs.n	80043b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004464 <xTaskIncrementTick+0x15c>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043b0:	e02e      	b.n	8004410 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fcfc 	bl	8003db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3318      	adds	r3, #24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fcf3 	bl	8003db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	2201      	movs	r2, #1
 80043d4:	409a      	lsls	r2, r3
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <xTaskIncrementTick+0x160>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <xTaskIncrementTick+0x160>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4a1f      	ldr	r2, [pc, #124]	@ (800446c <xTaskIncrementTick+0x164>)
 80043ee:	441a      	add	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7ff fc7f 	bl	8003cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <xTaskIncrementTick+0x168>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	429a      	cmp	r2, r3
 8004408:	d3b9      	bcc.n	800437e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440e:	e7b6      	b.n	800437e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <xTaskIncrementTick+0x168>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4915      	ldr	r1, [pc, #84]	@ (800446c <xTaskIncrementTick+0x164>)
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d901      	bls.n	800442c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <xTaskIncrementTick+0x16c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e004      	b.n	8004444 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <xTaskIncrementTick+0x170>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <xTaskIncrementTick+0x170>)
 8004442:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004444:	697b      	ldr	r3, [r7, #20]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000298 	.word	0x20000298
 8004454:	20000274 	.word	0x20000274
 8004458:	20000228 	.word	0x20000228
 800445c:	2000022c 	.word	0x2000022c
 8004460:	20000288 	.word	0x20000288
 8004464:	20000290 	.word	0x20000290
 8004468:	20000278 	.word	0x20000278
 800446c:	20000174 	.word	0x20000174
 8004470:	20000170 	.word	0x20000170
 8004474:	20000284 	.word	0x20000284
 8004478:	20000280 	.word	0x20000280

0800447c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004482:	4b2a      	ldr	r3, [pc, #168]	@ (800452c <vTaskSwitchContext+0xb0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800448a:	4b29      	ldr	r3, [pc, #164]	@ (8004530 <vTaskSwitchContext+0xb4>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004490:	e045      	b.n	800451e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004492:	4b27      	ldr	r3, [pc, #156]	@ (8004530 <vTaskSwitchContext+0xb4>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004498:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <vTaskSwitchContext+0xb8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f1c3 031f 	rsb	r3, r3, #31
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	4922      	ldr	r1, [pc, #136]	@ (8004538 <vTaskSwitchContext+0xbc>)
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <vTaskSwitchContext+0x5e>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vTaskSwitchContext+0x5a>
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <vTaskSwitchContext+0xbc>)
 80044e6:	4413      	add	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3308      	adds	r3, #8
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d104      	bne.n	800450a <vTaskSwitchContext+0x8e>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <vTaskSwitchContext+0xc0>)
 8004512:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <vTaskSwitchContext+0xc0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	334c      	adds	r3, #76	@ 0x4c
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vTaskSwitchContext+0xc4>)
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000298 	.word	0x20000298
 8004530:	20000284 	.word	0x20000284
 8004534:	20000278 	.word	0x20000278
 8004538:	20000174 	.word	0x20000174
 800453c:	20000170 	.word	0x20000170
 8004540:	2000001c 	.word	0x2000001c

08004544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800454c:	f000 f852 	bl	80045f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004550:	4b06      	ldr	r3, [pc, #24]	@ (800456c <prvIdleTask+0x28>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d9f9      	bls.n	800454c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <prvIdleTask+0x2c>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004568:	e7f0      	b.n	800454c <prvIdleTask+0x8>
 800456a:	bf00      	nop
 800456c:	20000174 	.word	0x20000174
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	e00c      	b.n	800459a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <prvInitialiseTaskLists+0x60>)
 800458c:	4413      	add	r3, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fb86 	bl	8003ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3301      	adds	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d9ef      	bls.n	8004580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045a0:	480d      	ldr	r0, [pc, #52]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045a2:	f7ff fb7d 	bl	8003ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045a6:	480d      	ldr	r0, [pc, #52]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045a8:	f7ff fb7a 	bl	8003ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ac:	480c      	ldr	r0, [pc, #48]	@ (80045e0 <prvInitialiseTaskLists+0x6c>)
 80045ae:	f7ff fb77 	bl	8003ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045b2:	480c      	ldr	r0, [pc, #48]	@ (80045e4 <prvInitialiseTaskLists+0x70>)
 80045b4:	f7ff fb74 	bl	8003ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045b8:	480b      	ldr	r0, [pc, #44]	@ (80045e8 <prvInitialiseTaskLists+0x74>)
 80045ba:	f7ff fb71 	bl	8003ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <prvInitialiseTaskLists+0x78>)
 80045c0:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <prvInitialiseTaskLists+0x64>)
 80045c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <prvInitialiseTaskLists+0x7c>)
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <prvInitialiseTaskLists+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000174 	.word	0x20000174
 80045d8:	20000200 	.word	0x20000200
 80045dc:	20000214 	.word	0x20000214
 80045e0:	20000230 	.word	0x20000230
 80045e4:	20000244 	.word	0x20000244
 80045e8:	2000025c 	.word	0x2000025c
 80045ec:	20000228 	.word	0x20000228
 80045f0:	2000022c 	.word	0x2000022c

080045f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fa:	e019      	b.n	8004630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045fc:	f000 f9f4 	bl	80049e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <prvCheckTasksWaitingTermination+0x50>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fbd1 	bl	8003db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <prvCheckTasksWaitingTermination+0x54>)
 800461a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004626:	f000 fa11 	bl	8004a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f810 	bl	8004650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <prvCheckTasksWaitingTermination+0x58>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e1      	bne.n	80045fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000244 	.word	0x20000244
 8004648:	20000270 	.word	0x20000270
 800464c:	20000258 	.word	0x20000258

08004650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	334c      	adds	r3, #76	@ 0x4c
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fc99 	bl	8004f94 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb6c 	bl	8004d44 <vPortFree>
			vPortFree( pxTCB );
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fb69 	bl	8004d44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <prvResetNextTaskUnblockTime+0x38>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800468c:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <prvResetNextTaskUnblockTime+0x3c>)
 800468e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004692:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004694:	e008      	b.n	80046a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <prvResetNextTaskUnblockTime+0x38>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a04      	ldr	r2, [pc, #16]	@ (80046b8 <prvResetNextTaskUnblockTime+0x3c>)
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000228 	.word	0x20000228
 80046b8:	20000290 	.word	0x20000290

080046bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <prvAddCurrentTaskToDelayedList+0xb0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046cc:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fb6e 	bl	8003db4 <uxListRemove>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2201      	movs	r2, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4013      	ands	r3, r2
 80046f2:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046fc:	d10a      	bne.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	481a      	ldr	r0, [pc, #104]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800470e:	f7ff faf4 	bl	8003cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004712:	e026      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d209      	bcs.n	8004740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <prvAddCurrentTaskToDelayedList+0xc0>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7ff fb02 	bl	8003d42 <vListInsert>
}
 800473e:	e010      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7ff faf8 	bl	8003d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d202      	bcs.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6013      	str	r3, [r2, #0]
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000274 	.word	0x20000274
 8004770:	20000170 	.word	0x20000170
 8004774:	20000278 	.word	0x20000278
 8004778:	2000025c 	.word	0x2000025c
 800477c:	2000022c 	.word	0x2000022c
 8004780:	20000228 	.word	0x20000228
 8004784:	20000290 	.word	0x20000290

08004788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3b04      	subs	r3, #4
 8004798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b04      	subs	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3b04      	subs	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047b8:	4a0c      	ldr	r2, [pc, #48]	@ (80047ec <pxPortInitialiseStack+0x64>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b14      	subs	r3, #20
 80047c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f06f 0202 	mvn.w	r2, #2
 80047d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b20      	subs	r3, #32
 80047dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	080047f1 	.word	0x080047f1

080047f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <prvTaskExitError+0x58>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004802:	d00b      	beq.n	800481c <prvTaskExitError+0x2c>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <prvTaskExitError+0x28>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60bb      	str	r3, [r7, #8]
}
 800482e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004830:	bf00      	nop
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0fc      	beq.n	8004832 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000018 	.word	0x20000018
 800484c:	00000000 	.word	0x00000000

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	4770      	bx	lr
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst2>:
 8004870:	20000170 	.word	0x20000170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004878:	4808      	ldr	r0, [pc, #32]	@ (800489c <prvPortStartFirstTask+0x24>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8814 	msr	CONTROL, r0
 800488a:	b662      	cpsie	i
 800488c:	b661      	cpsie	f
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	df00      	svc	0
 8004898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800489a:	bf00      	nop
 800489c:	e000ed08 	.word	0xe000ed08

080048a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048a6:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <xPortStartScheduler+0x124>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a47      	ldr	r2, [pc, #284]	@ (80049c8 <xPortStartScheduler+0x128>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10b      	bne.n	80048c8 <xPortStartScheduler+0x28>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048c8:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <xPortStartScheduler+0x124>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3f      	ldr	r2, [pc, #252]	@ (80049cc <xPortStartScheduler+0x12c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10b      	bne.n	80048ea <xPortStartScheduler+0x4a>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	613b      	str	r3, [r7, #16]
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	e7fd      	b.n	80048e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048ea:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <xPortStartScheduler+0x130>)
 80048ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	22ff      	movs	r2, #255	@ 0xff
 80048fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <xPortStartScheduler+0x134>)
 8004910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004914:	2207      	movs	r2, #7
 8004916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004918:	e009      	b.n	800492e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800491a:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <xPortStartScheduler+0x138>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	4a2d      	ldr	r2, [pc, #180]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d0ef      	beq.n	800491a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800493a:	4b27      	ldr	r3, [pc, #156]	@ (80049d8 <xPortStartScheduler+0x138>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1c3 0307 	rsb	r3, r3, #7
 8004942:	2b04      	cmp	r3, #4
 8004944:	d00b      	beq.n	800495e <xPortStartScheduler+0xbe>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60bb      	str	r3, [r7, #8]
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800495e:	4b1e      	ldr	r3, [pc, #120]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004968:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <xPortStartScheduler+0x138>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004970:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800497c:	4b17      	ldr	r3, [pc, #92]	@ (80049dc <xPortStartScheduler+0x13c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <xPortStartScheduler+0x13c>)
 8004982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004988:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <xPortStartScheduler+0x13c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <xPortStartScheduler+0x13c>)
 800498e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004994:	f000 f8da 	bl	8004b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <xPortStartScheduler+0x140>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800499e:	f000 f8f9 	bl	8004b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <xPortStartScheduler+0x144>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <xPortStartScheduler+0x144>)
 80049a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049ae:	f7ff ff63 	bl	8004878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049b2:	f7ff fd63 	bl	800447c <vTaskSwitchContext>
	prvTaskExitError();
 80049b6:	f7ff ff1b 	bl	80047f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	410fc271 	.word	0x410fc271
 80049cc:	410fc270 	.word	0x410fc270
 80049d0:	e000e400 	.word	0xe000e400
 80049d4:	2000029c 	.word	0x2000029c
 80049d8:	200002a0 	.word	0x200002a0
 80049dc:	e000ed20 	.word	0xe000ed20
 80049e0:	20000018 	.word	0x20000018
 80049e4:	e000ef34 	.word	0xe000ef34

080049e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a02:	4b10      	ldr	r3, [pc, #64]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d110      	bne.n	8004a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <vPortEnterCritical+0x60>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	603b      	str	r3, [r7, #0]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <vPortEnterCritical+0x4a>
	}
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000018 	.word	0x20000018
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a52:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <vPortExitCritical+0x26>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <vPortExitCritical+0x44>
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000018 	.word	0x20000018

08004aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004aa0:	f3ef 8009 	mrs	r0, PSP
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <pxCurrentTCBConst>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f01e 0f10 	tst.w	lr, #16
 8004ab0:	bf08      	it	eq
 8004ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ac4:	f380 8811 	msr	BASEPRI, r0
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f7ff fcd4 	bl	800447c <vTaskSwitchContext>
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f380 8811 	msr	BASEPRI, r0
 8004adc:	bc09      	pop	{r0, r3}
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae6:	f01e 0f10 	tst.w	lr, #16
 8004aea:	bf08      	it	eq
 8004aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004af0:	f380 8809 	msr	PSP, r0
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst>:
 8004b00:	20000170 	.word	0x20000170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f7ff fbf1 	bl	8004308 <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <SysTick_Handler+0x40>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a09      	ldr	r2, [pc, #36]	@ (8004b90 <vPortSetupTimerInterrupt+0x44>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010
 8004b84:	e000e018 	.word	0xe000e018
 8004b88:	2000000c 	.word	0x2000000c
 8004b8c:	10624dd3 	.word	0x10624dd3
 8004b90:	e000e014 	.word	0xe000e014

08004b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ba4 <vPortEnableVFP+0x10>
 8004b98:	6801      	ldr	r1, [r0, #0]
 8004b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b9e:	6001      	str	r1, [r0, #0]
 8004ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ba2:	bf00      	nop
 8004ba4:	e000ed88 	.word	0xe000ed88

08004ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	@ 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb4:	f7ff fafc 	bl	80041b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bb8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d2c <pvPortMalloc+0x184>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bc0:	f000 f924 	bl	8004e0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d30 <pvPortMalloc+0x188>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8095 	bne.w	8004cfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01e      	beq.n	8004c16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bd8:	2208      	movs	r2, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d015      	beq.n	8004c16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <pvPortMalloc+0x6e>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	617b      	str	r3, [r7, #20]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06f      	beq.n	8004cfc <pvPortMalloc+0x154>
 8004c1c:	4b45      	ldr	r3, [pc, #276]	@ (8004d34 <pvPortMalloc+0x18c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d86a      	bhi.n	8004cfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c26:	4b44      	ldr	r3, [pc, #272]	@ (8004d38 <pvPortMalloc+0x190>)
 8004c28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c2a:	4b43      	ldr	r3, [pc, #268]	@ (8004d38 <pvPortMalloc+0x190>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c30:	e004      	b.n	8004c3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d903      	bls.n	8004c4e <pvPortMalloc+0xa6>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f1      	bne.n	8004c32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c4e:	4b37      	ldr	r3, [pc, #220]	@ (8004d2c <pvPortMalloc+0x184>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d051      	beq.n	8004cfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	4413      	add	r3, r2
 8004c60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	2308      	movs	r3, #8
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d920      	bls.n	8004cbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <pvPortMalloc+0xfc>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	613b      	str	r3, [r7, #16]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cb6:	69b8      	ldr	r0, [r7, #24]
 8004cb8:	f000 f90a 	bl	8004ed0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d34 <pvPortMalloc+0x18c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <pvPortMalloc+0x18c>)
 8004cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cca:	4b1a      	ldr	r3, [pc, #104]	@ (8004d34 <pvPortMalloc+0x18c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <pvPortMalloc+0x194>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d203      	bcs.n	8004cde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cd6:	4b17      	ldr	r3, [pc, #92]	@ (8004d34 <pvPortMalloc+0x18c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <pvPortMalloc+0x194>)
 8004cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <pvPortMalloc+0x188>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cf2:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <pvPortMalloc+0x198>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4a11      	ldr	r2, [pc, #68]	@ (8004d40 <pvPortMalloc+0x198>)
 8004cfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cfc:	f7ff fa66 	bl	80041cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <pvPortMalloc+0x17a>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <pvPortMalloc+0x176>
	return pvReturn;
 8004d22:	69fb      	ldr	r3, [r7, #28]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	@ 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000eac 	.word	0x20000eac
 8004d30:	20000ec0 	.word	0x20000ec0
 8004d34:	20000eb0 	.word	0x20000eb0
 8004d38:	20000ea4 	.word	0x20000ea4
 8004d3c:	20000eb4 	.word	0x20000eb4
 8004d40:	20000eb8 	.word	0x20000eb8

08004d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04f      	beq.n	8004df6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d56:	2308      	movs	r3, #8
 8004d58:	425b      	negs	r3, r3
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <vPortFree+0xbc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <vPortFree+0x46>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <vPortFree+0x66>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60bb      	str	r3, [r7, #8]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	4b14      	ldr	r3, [pc, #80]	@ (8004e00 <vPortFree+0xbc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01e      	beq.n	8004df6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11a      	bne.n	8004df6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <vPortFree+0xbc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	401a      	ands	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dd0:	f7ff f9ee 	bl	80041b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <vPortFree+0xc0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <vPortFree+0xc0>)
 8004de0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004de2:	6938      	ldr	r0, [r7, #16]
 8004de4:	f000 f874 	bl	8004ed0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004de8:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <vPortFree+0xc4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a06      	ldr	r2, [pc, #24]	@ (8004e08 <vPortFree+0xc4>)
 8004df0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004df2:	f7ff f9eb 	bl	80041cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000ec0 	.word	0x20000ec0
 8004e04:	20000eb0 	.word	0x20000eb0
 8004e08:	20000ebc 	.word	0x20000ebc

08004e0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e18:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <prvHeapInit+0xac>)
 8004e1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <prvHeapInit+0xac>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e44:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <prvHeapInit+0xb0>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <prvHeapInit+0xb0>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4413      	add	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <prvHeapInit+0xb4>)
 8004e6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <prvHeapInit+0xb4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e76:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <prvHeapInit+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <prvHeapInit+0xb4>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <prvHeapInit+0xb8>)
 8004e9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <prvHeapInit+0xbc>)
 8004ea2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ea4:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <prvHeapInit+0xc0>)
 8004ea6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	200002a4 	.word	0x200002a4
 8004ebc:	20000ea4 	.word	0x20000ea4
 8004ec0:	20000eac 	.word	0x20000eac
 8004ec4:	20000eb4 	.word	0x20000eb4
 8004ec8:	20000eb0 	.word	0x20000eb0
 8004ecc:	20000ec0 	.word	0x20000ec0

08004ed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <prvInsertBlockIntoFreeList+0xac>)
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e002      	b.n	8004ee4 <prvInsertBlockIntoFreeList+0x14>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d8f7      	bhi.n	8004ede <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d108      	bne.n	8004f12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	441a      	add	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d118      	bne.n	8004f58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <prvInsertBlockIntoFreeList+0xb0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d00d      	beq.n	8004f4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e008      	b.n	8004f60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <prvInsertBlockIntoFreeList+0xb0>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e003      	b.n	8004f60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d002      	beq.n	8004f6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000ea4 	.word	0x20000ea4
 8004f80:	20000eac 	.word	0x20000eac

08004f84 <memset>:
 8004f84:	4402      	add	r2, r0
 8004f86:	4603      	mov	r3, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d100      	bne.n	8004f8e <memset+0xa>
 8004f8c:	4770      	bx	lr
 8004f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f92:	e7f9      	b.n	8004f88 <memset+0x4>

08004f94 <_reclaim_reent>:
 8004f94:	4b2d      	ldr	r3, [pc, #180]	@ (800504c <_reclaim_reent+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	b570      	push	{r4, r5, r6, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	d053      	beq.n	8005048 <_reclaim_reent+0xb4>
 8004fa0:	69c3      	ldr	r3, [r0, #28]
 8004fa2:	b31b      	cbz	r3, 8004fec <_reclaim_reent+0x58>
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	b163      	cbz	r3, 8004fc2 <_reclaim_reent+0x2e>
 8004fa8:	2500      	movs	r5, #0
 8004faa:	69e3      	ldr	r3, [r4, #28]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	5959      	ldr	r1, [r3, r5]
 8004fb0:	b9b1      	cbnz	r1, 8004fe0 <_reclaim_reent+0x4c>
 8004fb2:	3504      	adds	r5, #4
 8004fb4:	2d80      	cmp	r5, #128	@ 0x80
 8004fb6:	d1f8      	bne.n	8004faa <_reclaim_reent+0x16>
 8004fb8:	69e3      	ldr	r3, [r4, #28]
 8004fba:	4620      	mov	r0, r4
 8004fbc:	68d9      	ldr	r1, [r3, #12]
 8004fbe:	f000 f86d 	bl	800509c <_free_r>
 8004fc2:	69e3      	ldr	r3, [r4, #28]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	b111      	cbz	r1, 8004fce <_reclaim_reent+0x3a>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 f867 	bl	800509c <_free_r>
 8004fce:	69e3      	ldr	r3, [r4, #28]
 8004fd0:	689d      	ldr	r5, [r3, #8]
 8004fd2:	b15d      	cbz	r5, 8004fec <_reclaim_reent+0x58>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	682d      	ldr	r5, [r5, #0]
 8004fda:	f000 f85f 	bl	800509c <_free_r>
 8004fde:	e7f8      	b.n	8004fd2 <_reclaim_reent+0x3e>
 8004fe0:	680e      	ldr	r6, [r1, #0]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 f85a 	bl	800509c <_free_r>
 8004fe8:	4631      	mov	r1, r6
 8004fea:	e7e1      	b.n	8004fb0 <_reclaim_reent+0x1c>
 8004fec:	6961      	ldr	r1, [r4, #20]
 8004fee:	b111      	cbz	r1, 8004ff6 <_reclaim_reent+0x62>
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 f853 	bl	800509c <_free_r>
 8004ff6:	69e1      	ldr	r1, [r4, #28]
 8004ff8:	b111      	cbz	r1, 8005000 <_reclaim_reent+0x6c>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 f84e 	bl	800509c <_free_r>
 8005000:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005002:	b111      	cbz	r1, 800500a <_reclaim_reent+0x76>
 8005004:	4620      	mov	r0, r4
 8005006:	f000 f849 	bl	800509c <_free_r>
 800500a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800500c:	b111      	cbz	r1, 8005014 <_reclaim_reent+0x80>
 800500e:	4620      	mov	r0, r4
 8005010:	f000 f844 	bl	800509c <_free_r>
 8005014:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005016:	b111      	cbz	r1, 800501e <_reclaim_reent+0x8a>
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f83f 	bl	800509c <_free_r>
 800501e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005020:	b111      	cbz	r1, 8005028 <_reclaim_reent+0x94>
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f83a 	bl	800509c <_free_r>
 8005028:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800502a:	b111      	cbz	r1, 8005032 <_reclaim_reent+0x9e>
 800502c:	4620      	mov	r0, r4
 800502e:	f000 f835 	bl	800509c <_free_r>
 8005032:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005034:	b111      	cbz	r1, 800503c <_reclaim_reent+0xa8>
 8005036:	4620      	mov	r0, r4
 8005038:	f000 f830 	bl	800509c <_free_r>
 800503c:	6a23      	ldr	r3, [r4, #32]
 800503e:	b11b      	cbz	r3, 8005048 <_reclaim_reent+0xb4>
 8005040:	4620      	mov	r0, r4
 8005042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005046:	4718      	bx	r3
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	bf00      	nop
 800504c:	2000001c 	.word	0x2000001c

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4d0d      	ldr	r5, [pc, #52]	@ (8005088 <__libc_init_array+0x38>)
 8005054:	4c0d      	ldr	r4, [pc, #52]	@ (800508c <__libc_init_array+0x3c>)
 8005056:	1b64      	subs	r4, r4, r5
 8005058:	10a4      	asrs	r4, r4, #2
 800505a:	2600      	movs	r6, #0
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	4d0b      	ldr	r5, [pc, #44]	@ (8005090 <__libc_init_array+0x40>)
 8005062:	4c0c      	ldr	r4, [pc, #48]	@ (8005094 <__libc_init_array+0x44>)
 8005064:	f000 f870 	bl	8005148 <_init>
 8005068:	1b64      	subs	r4, r4, r5
 800506a:	10a4      	asrs	r4, r4, #2
 800506c:	2600      	movs	r6, #0
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	080051d8 	.word	0x080051d8
 800508c:	080051d8 	.word	0x080051d8
 8005090:	080051d8 	.word	0x080051d8
 8005094:	080051dc 	.word	0x080051dc

08005098 <__retarget_lock_acquire_recursive>:
 8005098:	4770      	bx	lr

0800509a <__retarget_lock_release_recursive>:
 800509a:	4770      	bx	lr

0800509c <_free_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4605      	mov	r5, r0
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d041      	beq.n	8005128 <_free_r+0x8c>
 80050a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a8:	1f0c      	subs	r4, r1, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfb8      	it	lt
 80050ae:	18e4      	addlt	r4, r4, r3
 80050b0:	f000 f83e 	bl	8005130 <__malloc_lock>
 80050b4:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <_free_r+0x90>)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	b933      	cbnz	r3, 80050c8 <_free_r+0x2c>
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	4628      	mov	r0, r5
 80050c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050c4:	f000 b83a 	b.w	800513c <__malloc_unlock>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d908      	bls.n	80050de <_free_r+0x42>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	1821      	adds	r1, r4, r0
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1809      	addeq	r1, r1, r0
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	e7ed      	b.n	80050ba <_free_r+0x1e>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x4c>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x42>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x6c>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	4401      	add	r1, r0
 80050f4:	1850      	adds	r0, r2, r1
 80050f6:	4283      	cmp	r3, r0
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1e0      	bne.n	80050be <_free_r+0x22>
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6053      	str	r3, [r2, #4]
 8005102:	4408      	add	r0, r1
 8005104:	6010      	str	r0, [r2, #0]
 8005106:	e7da      	b.n	80050be <_free_r+0x22>
 8005108:	d902      	bls.n	8005110 <_free_r+0x74>
 800510a:	230c      	movs	r3, #12
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	e7d6      	b.n	80050be <_free_r+0x22>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	bf04      	itt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	bf04      	itt	eq
 8005120:	1809      	addeq	r1, r1, r0
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	6054      	str	r4, [r2, #4]
 8005126:	e7ca      	b.n	80050be <_free_r+0x22>
 8005128:	bd38      	pop	{r3, r4, r5, pc}
 800512a:	bf00      	nop
 800512c:	20001000 	.word	0x20001000

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	@ (8005138 <__malloc_lock+0x8>)
 8005132:	f7ff bfb1 	b.w	8005098 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	20000ffc 	.word	0x20000ffc

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	@ (8005144 <__malloc_unlock+0x8>)
 800513e:	f7ff bfac 	b.w	800509a <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	20000ffc 	.word	0x20000ffc

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
