
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00006800  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a74  08006a74  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a74  08006a74  00007a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a7c  08006a7c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a7c  08006a7c  00007a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a80  08006a80  00007a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006a84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ac  20000070  08006af4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000441c  08006af4  0000841c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bce  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  00020c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112a  00000000  00000000  000258b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003196  00000000  00000000  000269e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001882d  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce379  00000000  00000000  000423a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011071e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd0  00000000  00000000  00110764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  00116734  2**0
=======
  1 .text         0000c4dc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800c6c0  0800c6c0  0000d6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800caf4  0800caf4  0000daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cafc  0800cafc  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb00  0800cb00  0000db00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800cb04  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cb0  200001ec  0800ccf0  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e9c  0800ccf0  0000ee9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5b8  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f43  00000000  00000000  0002c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001518  00000000  00000000  00032248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049df  00000000  00000000  00033760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d80c  00000000  00000000  0003813f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e606c  00000000  00000000  0005594b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b9b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008590  00000000  00000000  0013b9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00143f8c  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000200:	080069c8 	.word	0x080069c8
=======
 8000200:	0800c6a4 	.word	0x0800c6a4
>>>>>>> Stashed changes

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000218:	20000074 	.word	0x20000074
 800021c:	080069c8 	.word	0x080069c8
=======
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800c6a4 	.word	0x0800c6a4
>>>>>>> Stashed changes

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <led_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void led_task(void *args){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	60fb      	str	r3, [r7, #12]

	while(1){
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
<<<<<<< Updated upstream
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <led_task+0x34>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f04f 31ff 	mov.w	r1, #4294967295
 8000560:	4618      	mov	r0, r3
 8000562:	f004 fa37 	bl	80049d4 <xQueueSemaphoreTake>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d1f5      	bne.n	8000558 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	889b      	ldrh	r3, [r3, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f000 ff68 	bl	800144c <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 800057c:	e7ec      	b.n	8000558 <led_task+0xc>
 800057e:	bf00      	nop
 8000580:	20000124 	.word	0x20000124
=======
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <led_task+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 fdbb 	bl	8007ab4 <xQueueSemaphoreTake>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1f5      	bne.n	8000f30 <led_task+0xc>
			HAL_GPIO_TogglePin(led->port, led->pin);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4610      	mov	r0, r2
 8000f50:	f002 ffce 	bl	8003ef0 <HAL_GPIO_TogglePin>
		if(xSemaphoreTake(lSemaphore,portMAX_DELAY)==pdTRUE){
 8000f54:	e7ec      	b.n	8000f30 <led_task+0xc>
 8000f56:	bf00      	nop
 8000f58:	20000358 	.word	0x20000358
>>>>>>> Stashed changes

08000f5c <button_task>:
		}
	}
}

void button_task(void *args){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

	while(1){

		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
<<<<<<< Updated upstream
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <button_task+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fa1d 	bl	80049d4 <xQueueSemaphoreTake>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f5      	bne.n	800058c <button_task+0x8>
			vTaskDelay(50);
 80005a0:	2032      	movs	r0, #50	@ 0x32
 80005a2:	f004 fd75 	bl	8005090 <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <button_task+0x68>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f004 f87e 	bl	80046b0 <xQueueGenericSend>
=======
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <button_task+0x84>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fda1 	bl	8007ab4 <xQueueSemaphoreTake>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d1f5      	bne.n	8000f64 <button_task+0x8>
			vTaskDelay(50);
 8000f78:	2032      	movs	r0, #50	@ 0x32
 8000f7a:	f007 f91f 	bl	80081bc <vTaskDelay>
			xSemaphoreGive(lSemaphore);
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <button_task+0x88>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	f006 fb20 	bl	80075cc <xQueueGenericSend>
>>>>>>> Stashed changes
			if(sinal==1){
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <button_task+0x8c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10e      	bne.n	8000fb2 <button_task+0x56>
				sinal=0;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <button_task+0x8c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor desligado!\n\r";
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <button_task+0x90>)
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <button_task+0x94>)
 8000f9e:	601a      	str	r2, [r3, #0]
				vTaskSuspend(xecg_task);
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <button_task+0x98>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f007 f93f 	bl	8008228 <vTaskSuspend>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000faa:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <button_task+0x9c>)
 8000fac:	f004 f898 	bl	80050e0 <HAL_TIM_Base_Stop_IT>
 8000fb0:	e012      	b.n	8000fd8 <button_task+0x7c>
			}else{
				sinal=1;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <button_task+0x8c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
				Sstring = (uint8_t *) "Sensor ligado!\n\r";
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <button_task+0x90>)
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <button_task+0xa0>)
 8000fbc:	601a      	str	r2, [r3, #0]
				vTaskResume(xuart_task);
<<<<<<< Updated upstream
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <button_task+0x7c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fe54 	bl	8005288 <vTaskResume>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e0:	2028      	movs	r0, #40	@ 0x28
 80005e2:	f000 fcbd 	bl	8000f60 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 80005e6:	e7d1      	b.n	800058c <button_task+0x8>
 80005e8:	20000120 	.word	0x20000120
 80005ec:	20000124 	.word	0x20000124
 80005f0:	20000134 	.word	0x20000134
 80005f4:	20000000 	.word	0x20000000
 80005f8:	080069e0 	.word	0x080069e0
 80005fc:	080069f4 	.word	0x080069f4
 8000600:	20000130 	.word	0x20000130
=======
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <button_task+0xa4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 f9f6 	bl	80083b4 <vTaskResume>
				vTaskResume(xecg_task);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <button_task+0x98>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 f9f1 	bl	80083b4 <vTaskResume>
				HAL_TIM_Base_Start_IT(&htim3);
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <button_task+0x9c>)
 8000fd4:	f004 f81a 	bl	800500c <HAL_TIM_Base_Start_IT>
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd8:	2028      	movs	r0, #40	@ 0x28
 8000fda:	f002 fd13 	bl	8003a04 <HAL_NVIC_EnableIRQ>
		if(xSemaphoreTake(bSemaphore,portMAX_DELAY)==pdTRUE){
 8000fde:	e7c1      	b.n	8000f64 <button_task+0x8>
 8000fe0:	20000354 	.word	0x20000354
 8000fe4:	20000358 	.word	0x20000358
 8000fe8:	20000374 	.word	0x20000374
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	0800c6c0 	.word	0x0800c6c0
 8000ff4:	2000036c 	.word	0x2000036c
 8000ff8:	20000308 	.word	0x20000308
 8000ffc:	0800c6d4 	.word	0x0800c6d4
 8001000:	20000370 	.word	0x20000370
>>>>>>> Stashed changes

08001004 <uart_task>:
		}
	}
}

void uart_task(void *argument){
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b0a5      	sub	sp, #148	@ 0x94
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
	char uart_buffer[100];
	ecg_data_t ecg_data;

	while(1){

		if(sinal==0){
 800100c:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <uart_task+0xdc>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d124      	bne.n	800105e <uart_task+0x5a>
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
<<<<<<< Updated upstream
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <uart_task+0xa0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f9d9 	bl	80049d4 <xQueueSemaphoreTake>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1f1      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <uart_task+0xa4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2213      	movs	r2, #19
 800062e:	4619      	mov	r1, r3
 8000630:	481e      	ldr	r0, [pc, #120]	@ (80006ac <uart_task+0xa8>)
 8000632:	f002 fab7 	bl	8002ba4 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <uart_task+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f9c8 	bl	80049d4 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <uart_task+0xa0>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	f004 f82f 	bl	80046b0 <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <uart_task+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fd50 	bl	80050fc <vTaskSuspend>
 800065c:	e7d6      	b.n	800060c <uart_task+0x8>
			}
		}else{
			if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <uart_task+0xa0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f04f 31ff 	mov.w	r1, #4294967295
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f9b4 	bl	80049d4 <xQueueSemaphoreTake>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1cc      	bne.n	800060c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 16);
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <uart_task+0xa4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2210      	movs	r2, #16
 8000678:	4619      	mov	r1, r3
 800067a:	480c      	ldr	r0, [pc, #48]	@ (80006ac <uart_task+0xa8>)
 800067c:	f002 fa92 	bl	8002ba4 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <uart_task+0xac>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f04f 31ff 	mov.w	r1, #4294967295
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f9a3 	bl	80049d4 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 800068e:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <uart_task+0xa0>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f004 f80a 	bl	80046b0 <xQueueGenericSend>
		if(sinal==0){
 800069c:	e7b6      	b.n	800060c <uart_task+0x8>
 800069e:	bf00      	nop
 80006a0:	20000134 	.word	0x20000134
 80006a4:	2000012c 	.word	0x2000012c
 80006a8:	20000000 	.word	0x20000000
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	20000128 	.word	0x20000128
 80006b4:	20000130 	.word	0x20000130
=======
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <uart_task+0xe0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fd49 	bl	8007ab4 <xQueueSemaphoreTake>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1f1      	bne.n	800100c <uart_task+0x8>
				HAL_UART_Transmit_IT(&hlpuart1, Sstring, 19);
 8001028:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <uart_task+0xe4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2213      	movs	r2, #19
 800102e:	4619      	mov	r1, r3
 8001030:	482e      	ldr	r0, [pc, #184]	@ (80010ec <uart_task+0xe8>)
 8001032:	f004 fd45 	bl	8005ac0 <HAL_UART_Transmit_IT>
				xSemaphoreTake(sUART, portMAX_DELAY);
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <uart_task+0xec>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 31ff 	mov.w	r1, #4294967295
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fd38 	bl	8007ab4 <xQueueSemaphoreTake>
				xSemaphoreGive(mUART);
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <uart_task+0xe0>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	f006 fabd 	bl	80075cc <xQueueGenericSend>
				vTaskSuspend(xuart_task);
 8001052:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <uart_task+0xf0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f007 f8e6 	bl	8008228 <vTaskSuspend>
 800105c:	e7d6      	b.n	800100c <uart_task+0x8>
			}
		}else{
			if(xQueueReceive(ecgQueue, &ecg_data, pdMS_TO_TICKS(100)) == pdPASS){
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <uart_task+0xf4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 010c 	add.w	r1, r7, #12
 8001066:	2264      	movs	r2, #100	@ 0x64
 8001068:	4618      	mov	r0, r3
 800106a:	f006 fc41 	bl	80078f0 <xQueueReceive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d1cb      	bne.n	800100c <uart_task+0x8>
				if(xSemaphoreTake(mUART,portMAX_DELAY)== pdTRUE){
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <uart_task+0xe0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	4618      	mov	r0, r3
 800107e:	f006 fd19 	bl	8007ab4 <xQueueSemaphoreTake>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d1c1      	bne.n	800100c <uart_task+0x8>
					int len = snprintf(uart_buffer, sizeof(uart_buffer),"ECG: %d, %.3fV, %lu ms\n\r",ecg_data.valor, ecg_data.tensao, ecg_data.timestamp);
 8001088:	89bb      	ldrh	r3, [r7, #12]
 800108a:	461c      	mov	r4, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa82 	bl	8000598 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	6979      	ldr	r1, [r7, #20]
 800109a:	f107 0018 	add.w	r0, r7, #24
 800109e:	9102      	str	r1, [sp, #8]
 80010a0:	e9cd 2300 	strd	r2, r3, [sp]
 80010a4:	4623      	mov	r3, r4
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <uart_task+0xf8>)
 80010a8:	2164      	movs	r1, #100	@ 0x64
 80010aa:	f009 f955 	bl	800a358 <sniprintf>
 80010ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
					HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)uart_buffer, len);
 80010b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4619      	mov	r1, r3
 80010ba:	480c      	ldr	r0, [pc, #48]	@ (80010ec <uart_task+0xe8>)
 80010bc:	f004 fd00 	bl	8005ac0 <HAL_UART_Transmit_IT>
					xSemaphoreTake(sUART, portMAX_DELAY);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <uart_task+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fcf3 	bl	8007ab4 <xQueueSemaphoreTake>
					xSemaphoreGive(mUART);
 80010ce:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <uart_task+0xe0>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	f006 fa78 	bl	80075cc <xQueueGenericSend>
		if(sinal==0){
 80010dc:	e796      	b.n	800100c <uart_task+0x8>
 80010de:	bf00      	nop
 80010e0:	20000374 	.word	0x20000374
 80010e4:	20000360 	.word	0x20000360
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000274 	.word	0x20000274
 80010f0:	2000035c 	.word	0x2000035c
 80010f4:	20000370 	.word	0x20000370
 80010f8:	20000368 	.word	0x20000368
 80010fc:	0800c6e8 	.word	0x0800c6e8
>>>>>>> Stashed changes

08001100 <ecg_task>:
			}
		}
	}
}

void ecg_task(void *args){
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	ecg_data_t ecg_data;
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(ECG_SAMPLE_PERIOD_MS);
 8001108:	2304      	movs	r3, #4
 800110a:	61fb      	str	r3, [r7, #28]

<<<<<<< Updated upstream
	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_UART_TxCpltCallback+0x3c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f107 020c 	add.w	r2, r7, #12
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f8f0 	bl	80048b4 <xQueueGiveFromISR>
=======
	xLastWakeTime = xTaskGetTickCount();
 800110c:	f007 faae 	bl	800866c <xTaskGetTickCount>
 8001110:	61b8      	str	r0, [r7, #24]
>>>>>>> Stashed changes

	while(1){
		// Aguarda sinal do timer para fazer amostragem
		if(xSemaphoreTake(adcSemaphore, portMAX_DELAY) == pdTRUE){
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <ecg_task+0xac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fcca 	bl	8007ab4 <xQueueSemaphoreTake>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1f5      	bne.n	8001112 <ecg_task+0x12>
			// Inicia conversão ADC
			HAL_ADC_Start(&hadc1);
 8001126:	4822      	ldr	r0, [pc, #136]	@ (80011b0 <ecg_task+0xb0>)
 8001128:	f001 fab6 	bl	8002698 <HAL_ADC_Start>

			// Aguarda conversão completar
			if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 800112c:	210a      	movs	r1, #10
 800112e:	4820      	ldr	r0, [pc, #128]	@ (80011b0 <ecg_task+0xb0>)
 8001130:	f001 fba2 	bl	8002878 <HAL_ADC_PollForConversion>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d134      	bne.n	80011a4 <ecg_task+0xa4>
				// Lê o valor do ADC
				ecg_data.valor = HAL_ADC_GetValue(&hadc1);
 800113a:	481d      	ldr	r0, [pc, #116]	@ (80011b0 <ecg_task+0xb0>)
 800113c:	f001 fc74 	bl	8002a28 <HAL_ADC_GetValue>
 8001140:	4603      	mov	r3, r0
 8001142:	b29b      	uxth	r3, r3
 8001144:	81bb      	strh	r3, [r7, #12]
				ecg_data.tensao = (ecg_data.valor * ADC_VREF) / ADC_RESOLUTION;
 8001146:	89bb      	ldrh	r3, [r7, #12]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80011b4 <ecg_task+0xb4>
 8001154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001158:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80011b8 <ecg_task+0xb8>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	edc7 7a04 	vstr	s15, [r7, #16]
				ecg_data.timestamp = xTaskGetTickCount();
 8001164:	f007 fa82 	bl	800866c <xTaskGetTickCount>
 8001168:	4603      	mov	r3, r0
 800116a:	617b      	str	r3, [r7, #20]

				// Aplica filtro simples
				ecg_data.tensao = apply_simple_filter(ecg_data.tensao);
 800116c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	f000 f824 	bl	80011c0 <apply_simple_filter>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	edc7 7a04 	vstr	s15, [r7, #16]

				// Adiciona ao buffer circular
				add_to_ecg_buffer(&ecg_data);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f85f 	bl	8001248 <add_to_ecg_buffer>

				// Envia dados para a fila (não bloqueia se fila estiver cheia)
				xQueueSend(ecgQueue, &ecg_data, 0);
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <ecg_task+0xbc>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f107 010c 	add.w	r1, r7, #12
 8001192:	2300      	movs	r3, #0
 8001194:	2200      	movs	r2, #0
 8001196:	f006 fa19 	bl	80075cc <xQueueGenericSend>

				// Processa os dados (detecção de picos, etc.)
				process_ecg_data(&ecg_data);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f898 	bl	80012d4 <process_ecg_data>
			}

			HAL_ADC_Stop(&hadc1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <ecg_task+0xb0>)
 80011a6:	f001 fb33 	bl	8002810 <HAL_ADC_Stop>
		if(xSemaphoreTake(adcSemaphore, portMAX_DELAY) == pdTRUE){
 80011aa:	e7b2      	b.n	8001112 <ecg_task+0x12>
 80011ac:	20000364 	.word	0x20000364
 80011b0:	20000208 	.word	0x20000208
 80011b4:	40533333 	.word	0x40533333
 80011b8:	45800000 	.word	0x45800000
 80011bc:	20000368 	.word	0x20000368

080011c0 <apply_simple_filter>:
		}
	}
}
<<<<<<< Updated upstream
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000128 	.word	0x20000128
 80006f8:	e000ed04 	.word	0xe000ed04
=======
>>>>>>> Stashed changes

float apply_simple_filter(float input){
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filter_buffer[8] = {0};
	static uint8_t filter_index = 0;
	float sum = 0;
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]

	filter_buffer[filter_index] = input;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <apply_simple_filter+0x80>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <apply_simple_filter+0x84>)
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
	filter_index = (filter_index + 1) % 8;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <apply_simple_filter+0x80>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	425a      	negs	r2, r3
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	f002 0207 	and.w	r2, r2, #7
 80011ee:	bf58      	it	pl
 80011f0:	4253      	negpl	r3, r2
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <apply_simple_filter+0x80>)
 80011f6:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 8; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	e00e      	b.n	800121c <apply_simple_filter+0x5c>
		sum += filter_buffer[i];
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <apply_simple_filter+0x84>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ed97 7a03 	vldr	s14, [r7, #12]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < 8; i++){
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b07      	cmp	r3, #7
 8001220:	dded      	ble.n	80011fe <apply_simple_filter+0x3e>
	}

	return sum / 8.0f;
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800122a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800122e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20001b7e 	.word	0x20001b7e
 8001244:	20001b80 	.word	0x20001b80

08001248 <add_to_ecg_buffer>:

void add_to_ecg_buffer(ecg_data_t *data){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	ecg_buffer[buffer_head] = *data;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <add_to_ecg_buffer+0x7c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <add_to_ecg_buffer+0x80>)
 8001258:	460b      	mov	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	440b      	add	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	ca07      	ldmia	r2, {r0, r1, r2}
 8001266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	buffer_head = (buffer_head + 1) % ECG_BUFFER_SIZE;
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <add_to_ecg_buffer+0x7c>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	425a      	negs	r2, r3
 8001272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800127a:	bf58      	it	pl
 800127c:	4253      	negpl	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <add_to_ecg_buffer+0x7c>)
 8001282:	801a      	strh	r2, [r3, #0]

	if(buffer_count < ECG_BUFFER_SIZE){
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <add_to_ecg_buffer+0x84>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800128c:	d206      	bcs.n	800129c <add_to_ecg_buffer+0x54>
		buffer_count++;
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <add_to_ecg_buffer+0x84>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <add_to_ecg_buffer+0x84>)
 8001298:	801a      	strh	r2, [r3, #0]
	}else{
		buffer_tail = (buffer_tail + 1) % ECG_BUFFER_SIZE;
	}
}
 800129a:	e00c      	b.n	80012b6 <add_to_ecg_buffer+0x6e>
		buffer_tail = (buffer_tail + 1) % ECG_BUFFER_SIZE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <add_to_ecg_buffer+0x88>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	425a      	negs	r2, r3
 80012a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012ac:	bf58      	it	pl
 80012ae:	4253      	negpl	r3, r2
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <add_to_ecg_buffer+0x88>)
 80012b4:	801a      	strh	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20001b78 	.word	0x20001b78
 80012c8:	20000378 	.word	0x20000378
 80012cc:	20001b7c 	.word	0x20001b7c
 80012d0:	20001b7a 	.word	0x20001b7a

080012d4 <process_ecg_data>:

void process_ecg_data(ecg_data_t *data){
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

	// Exemplo simples: detecta se o sinal está acima de um threshold
	static float threshold = 1.8f; // Ajuste conforme necessário
	static uint32_t last_peak_time = 0;

	if(data->tensao > threshold){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	ed93 7a01 	vldr	s14, [r3, #4]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <process_ecg_data+0x48>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dc00      	bgt.n	80012f4 <process_ecg_data+0x20>
		if(current_time - last_peak_time > pdMS_TO_TICKS(300)){ // Evita dupla detecção
			last_peak_time = current_time;
			// Pico detectado - pode calcular BPM aqui
		}
	}
}
 80012f2:	e00c      	b.n	800130e <process_ecg_data+0x3a>
		uint32_t current_time = data->timestamp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	60fb      	str	r3, [r7, #12]
		if(current_time - last_peak_time > pdMS_TO_TICKS(300)){ // Evita dupla detecção
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <process_ecg_data+0x4c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001306:	d902      	bls.n	800130e <process_ecg_data+0x3a>
			last_peak_time = current_time;
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <process_ecg_data+0x4c>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6013      	str	r3, [r2, #0]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	20001ba0 	.word	0x20001ba0

08001324 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	signed portBASE_TYPE pxHigherPriorityTaskWokenTX = pdFALSE;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(sUART, &pxHigherPriorityTaskWokenTX);
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_TxCpltCallback+0x3c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f006 fa48 	bl	80077d0 <xQueueGiveFromISR>

	if (pxHigherPriorityTaskWokenTX == pdTRUE)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_UART_TxCpltCallback+0x32>
	{
		portYIELD();
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <HAL_UART_TxCpltCallback+0x40>)
 8001348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	f3bf 8f6f 	isb	sy
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000035c 	.word	0x2000035c
 8001364:	e000ed04 	.word	0xe000ed04

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af02      	add	r7, sp, #8
=======
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000702:	f000 fb00 	bl	8000d06 <HAL_Init>
=======
 800136e:	f000 fd5e 	bl	8001e2e <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000706:	f000 f85d 	bl	80007c4 <SystemClock_Config>
=======
 8001372:	f000 f88b 	bl	800148c <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 800070a:	f000 f8ef 	bl	80008ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800070e:	f000 f8a3 	bl	8000858 <MX_LPUART1_UART_Init>
=======
 8001376:	f000 f9e3 	bl	8001740 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800137a:	f000 f949 	bl	8001610 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800137e:	f000 f991 	bl	80016a4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001382:	f000 f8cd 	bl	8001520 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001386:	217f      	movs	r1, #127	@ 0x7f
 8001388:	482e      	ldr	r0, [pc, #184]	@ (8001444 <main+0xdc>)
 800138a:	f002 f93f 	bl	800360c <HAL_ADCEx_Calibration_Start>
>>>>>>> Stashed changes
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
<<<<<<< Updated upstream
 8000712:	2203      	movs	r2, #3
 8000714:	2100      	movs	r1, #0
 8000716:	2001      	movs	r0, #1
 8000718:	f003 ff42 	bl	80045a0 <xQueueGenericCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a1d      	ldr	r2, [pc, #116]	@ (8000794 <main+0x98>)
 8000720:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 8000722:	2203      	movs	r2, #3
 8000724:	2100      	movs	r1, #0
 8000726:	2001      	movs	r0, #1
 8000728:	f003 ff3a 	bl	80045a0 <xQueueGenericCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <main+0x9c>)
 8000730:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 8000732:	2203      	movs	r2, #3
 8000734:	2100      	movs	r1, #0
 8000736:	2001      	movs	r0, #1
 8000738:	f003 ff32 	bl	80045a0 <xQueueGenericCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <main+0xa0>)
 8000740:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 8000742:	2001      	movs	r0, #1
 8000744:	f003 ff9c 	bl	8004680 <xQueueCreateMutex>
 8000748:	4603      	mov	r3, r0
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <main+0xa4>)
 800074c:	6013      	str	r3, [r2, #0]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
=======
 800138e:	2203      	movs	r2, #3
 8001390:	2100      	movs	r1, #0
 8001392:	2001      	movs	r0, #1
 8001394:	f006 f892 	bl	80074bc <xQueueGenericCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a2b      	ldr	r2, [pc, #172]	@ (8001448 <main+0xe0>)
 800139c:	6013      	str	r3, [r2, #0]
  lSemaphore = xSemaphoreCreateBinary();
 800139e:	2203      	movs	r2, #3
 80013a0:	2100      	movs	r1, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f006 f88a 	bl	80074bc <xQueueGenericCreate>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a28      	ldr	r2, [pc, #160]	@ (800144c <main+0xe4>)
 80013ac:	6013      	str	r3, [r2, #0]
  sUART = xSemaphoreCreateBinary();
 80013ae:	2203      	movs	r2, #3
 80013b0:	2100      	movs	r1, #0
 80013b2:	2001      	movs	r0, #1
 80013b4:	f006 f882 	bl	80074bc <xQueueGenericCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a25      	ldr	r2, [pc, #148]	@ (8001450 <main+0xe8>)
 80013bc:	6013      	str	r3, [r2, #0]
  mUART = xSemaphoreCreateMutex();
 80013be:	2001      	movs	r0, #1
 80013c0:	f006 f8ec 	bl	800759c <xQueueCreateMutex>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <main+0xec>)
 80013c8:	6013      	str	r3, [r2, #0]
  adcSemaphore = xSemaphoreCreateBinary();
 80013ca:	2203      	movs	r2, #3
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f006 f874 	bl	80074bc <xQueueGenericCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <main+0xf0>)
 80013d8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  ecgQueue = xQueueCreate(32, sizeof(ecg_data_t));
 80013da:	2200      	movs	r2, #0
 80013dc:	210c      	movs	r1, #12
 80013de:	2020      	movs	r0, #32
 80013e0:	f006 f86c 	bl	80074bc <xQueueGenericCreate>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <main+0xf4>)
 80013e8:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
>>>>>>> Stashed changes

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	(void)xTaskCreate(led_task, "led_task", 128, &led, 2, NULL);
<<<<<<< Updated upstream
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2302      	movs	r3, #2
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <main+0xa8>)
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	4913      	ldr	r1, [pc, #76]	@ (80007a8 <main+0xac>)
 800075c:	4813      	ldr	r0, [pc, #76]	@ (80007ac <main+0xb0>)
 800075e:	f004 fb4b 	bl	8004df8 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, &xuart_task);
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <main+0xb4>)
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	4911      	ldr	r1, [pc, #68]	@ (80007b4 <main+0xb8>)
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <main+0xbc>)
 8000772:	f004 fb41 	bl	8004df8 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, NULL);
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2303      	movs	r3, #3
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	490e      	ldr	r1, [pc, #56]	@ (80007bc <main+0xc0>)
 8000784:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <main+0xc4>)
 8000786:	f004 fb37 	bl	8004df8 <xTaskCreate>
=======
 80013ea:	2300      	movs	r3, #0
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2302      	movs	r3, #2
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <main+0xf8>)
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	491b      	ldr	r1, [pc, #108]	@ (8001464 <main+0xfc>)
 80013f8:	481b      	ldr	r0, [pc, #108]	@ (8001468 <main+0x100>)
 80013fa:	f006 fd93 	bl	8007f24 <xTaskCreate>
	(void)xTaskCreate(uart_task, "uart_task", 128, NULL, 1, &xuart_task);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <main+0x104>)
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2301      	movs	r3, #1
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	4919      	ldr	r1, [pc, #100]	@ (8001470 <main+0x108>)
 800140c:	4819      	ldr	r0, [pc, #100]	@ (8001474 <main+0x10c>)
 800140e:	f006 fd89 	bl	8007f24 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 128, NULL, 3, NULL);
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2303      	movs	r3, #3
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	2280      	movs	r2, #128	@ 0x80
 800141e:	4916      	ldr	r1, [pc, #88]	@ (8001478 <main+0x110>)
 8001420:	4816      	ldr	r0, [pc, #88]	@ (800147c <main+0x114>)
 8001422:	f006 fd7f 	bl	8007f24 <xTaskCreate>
	(void)xTaskCreate(ecg_task, "ecg_task", 256, NULL, 4, &xecg_task);
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <main+0x118>)
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2304      	movs	r3, #4
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001434:	4913      	ldr	r1, [pc, #76]	@ (8001484 <main+0x11c>)
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <main+0x120>)
 8001438:	f006 fd74 	bl	8007f24 <xTaskCreate>
>>>>>>> Stashed changes
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< Updated upstream
 800078a:	f003 fde3 	bl	8004354 <osKernelStart>
=======
 800143c:	f005 ff18 	bl	8007270 <osKernelStart>
>>>>>>> Stashed changes

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< Updated upstream
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <main+0x92>
 8000792:	bf00      	nop
 8000794:	20000120 	.word	0x20000120
 8000798:	20000124 	.word	0x20000124
 800079c:	20000128 	.word	0x20000128
 80007a0:	2000012c 	.word	0x2000012c
 80007a4:	20000004 	.word	0x20000004
 80007a8:	08006a08 	.word	0x08006a08
 80007ac:	0800054d 	.word	0x0800054d
 80007b0:	20000130 	.word	0x20000130
 80007b4:	08006a14 	.word	0x08006a14
 80007b8:	08000605 	.word	0x08000605
 80007bc:	08006a20 	.word	0x08006a20
 80007c0:	08000585 	.word	0x08000585

080007c4 <SystemClock_Config>:
=======
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <main+0xd8>
 8001444:	20000208 	.word	0x20000208
 8001448:	20000354 	.word	0x20000354
 800144c:	20000358 	.word	0x20000358
 8001450:	2000035c 	.word	0x2000035c
 8001454:	20000360 	.word	0x20000360
 8001458:	20000364 	.word	0x20000364
 800145c:	20000368 	.word	0x20000368
 8001460:	20000008 	.word	0x20000008
 8001464:	0800c704 	.word	0x0800c704
 8001468:	08000f25 	.word	0x08000f25
 800146c:	20000370 	.word	0x20000370
 8001470:	0800c710 	.word	0x0800c710
 8001474:	08001005 	.word	0x08001005
 8001478:	0800c71c 	.word	0x0800c71c
 800147c:	08000f5d 	.word	0x08000f5d
 8001480:	2000036c 	.word	0x2000036c
 8001484:	0800c728 	.word	0x0800c728
 8001488:	08001101 	.word	0x08001101

0800148c <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	@ 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2238      	movs	r2, #56	@ 0x38
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 f808 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
=======
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	@ 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	2238      	movs	r2, #56	@ 0x38
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f008 ffd5 	bl	800a44a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
<<<<<<< Updated upstream
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 fe62 	bl	80014b0 <HAL_PWREx_ControlVoltageScaling>
=======
 80014ae:	2000      	movs	r0, #0
 80014b0:	f002 fd50 	bl	8003f54 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< Updated upstream
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	2303      	movs	r3, #3
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007fe:	2306      	movs	r3, #6
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000802:	2355      	movs	r3, #85	@ 0x55
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fefe 	bl	8001618 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000822:	f000 f901 	bl	8000a28 <Error_Handler>
=======
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014be:	2302      	movs	r3, #2
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c2:	2303      	movs	r3, #3
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014c6:	2306      	movs	r3, #6
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ca:	2355      	movs	r3, #85	@ 0x55
 80014cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fdec 	bl	80040bc <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014ea:	f000 f9e7 	bl	80018bc <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000826:	230f      	movs	r3, #15
 8000828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2104      	movs	r1, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f9fc 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800084a:	f000 f8ed 	bl	8000a28 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	@ 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_LPUART1_UART_Init>:
=======
 80014ee:	230f      	movs	r3, #15
 80014f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2303      	movs	r3, #3
 80014f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2104      	movs	r1, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f8ea 	bl	80046e0 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001512:	f000 f9d3 	bl	80018bc <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3750      	adds	r7, #80	@ 0x50
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	@ 0x30
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2220      	movs	r2, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f008 ff86 	bl	800a44a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800153e:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001540:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001544:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001548:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800154c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001554:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_ADC1_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001560:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001568:	2204      	movs	r2, #4
 800156a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800156c:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_ADC1_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <MX_ADC1_Init+0xe8>)
 800157a:	2201      	movs	r2, #1
 800157c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001588:	2200      	movs	r2, #0
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <MX_ADC1_Init+0xe8>)
 800158e:	2200      	movs	r2, #0
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_ADC1_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800159a:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_ADC1_Init+0xe8>)
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_ADC1_Init+0xe8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a8:	4817      	ldr	r0, [pc, #92]	@ (8001608 <MX_ADC1_Init+0xe8>)
 80015aa:	f000 fef1 	bl	8002390 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015b4:	f000 f982 	bl	80018bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_ADC1_Init+0xe8>)
 80015c4:	f002 f884 	bl	80036d0 <HAL_ADCEx_MultiModeConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015ce:	f000 f975 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_ADC1_Init+0xec>)
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d6:	2306      	movs	r3, #6
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015de:	237f      	movs	r3, #127	@ 0x7f
 80015e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e2:	2304      	movs	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <MX_ADC1_Init+0xe8>)
 80015f0:	f001 fa28 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015fa:	f000 f95f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	@ 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000208 	.word	0x20000208
 800160c:	04300002 	.word	0x04300002

08001610 <MX_LPUART1_UART_Init>:
>>>>>>> Stashed changes
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
<<<<<<< Updated upstream
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
=======
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
<<<<<<< Updated upstream
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800085e:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <MX_LPUART1_UART_Init+0x90>)
 8000860:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800089c:	f002 f932 	bl	8002b04 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f8bf 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008ae:	f003 fc86 	bl	80041be <HAL_UARTEx_SetTxFifoThreshold>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008b8:	f000 f8b6 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	f003 fcbb 	bl	800423a <HAL_UARTEx_SetRxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008ca:	f000 f8ad 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	f003 fc3c 	bl	800414c <HAL_UARTEx_DisableFifoMode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008da:	f000 f8a5 	bl	8000a28 <Error_Handler>
=======
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001616:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <MX_LPUART1_UART_Init+0x90>)
 8001618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001652:	4812      	ldr	r0, [pc, #72]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001654:	f004 f9e4 	bl	8005a20 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f92d 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001666:	f005 fd38 	bl	80070da <HAL_UARTEx_SetTxFifoThreshold>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001670:	f000 f924 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4809      	ldr	r0, [pc, #36]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001678:	f005 fd6d 	bl	8007156 <HAL_UARTEx_SetRxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001682:	f000 f91b 	bl	80018bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_LPUART1_UART_Init+0x8c>)
 8001688:	f005 fcee 	bl	8007068 <HAL_UARTEx_DisableFifoMode>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001692:	f000 f913 	bl	80018bc <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
<<<<<<< Updated upstream
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	40008000 	.word	0x40008000

080008ec <MX_GPIO_Init>:
=======
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000274 	.word	0x20000274
 80016a0:	40008000 	.word	0x40008000

080016a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <MX_TIM3_Init+0x98>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1699;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016ca:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016d8:	2263      	movs	r2, #99	@ 0x63
 80016da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e8:	4813      	ldr	r0, [pc, #76]	@ (8001738 <MX_TIM3_Init+0x94>)
 80016ea:	f003 fc37 	bl	8004f5c <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016f4:	f000 f8e2 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <MX_TIM3_Init+0x94>)
 8001706:	f003 fe69 	bl	80053dc <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001710:	f000 f8d4 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_TIM3_Init+0x94>)
 8001722:	f004 f8b5 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800172c:	f000 f8c6 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000308 	.word	0x20000308
 800173c:	40000400 	.word	0x40000400

08001740 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
=======
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 8000902:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_GPIO_Init+0xbc>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f000 fd63 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	480f      	ldr	r0, [pc, #60]	@ (80009ac <MX_GPIO_Init+0xc0>)
 800096e:	f000 fbd3 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000972:	2320      	movs	r3, #32
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098c:	f000 fbc4 	bl	8001118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2105      	movs	r1, #5
 8000994:	2028      	movs	r0, #40	@ 0x28
 8000996:	f000 fac9 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099a:	2028      	movs	r0, #40	@ 0x28
 800099c:	f000 fae0 	bl	8000f60 <HAL_NVIC_EnableIRQ>
=======
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <MX_GPIO_Init+0xbc>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <MX_GPIO_Init+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <MX_GPIO_Init+0xbc>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_GPIO_Init+0xbc>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2120      	movs	r1, #32
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a6:	f002 fb8b 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80017aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b6:	2302      	movs	r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	480f      	ldr	r0, [pc, #60]	@ (8001800 <MX_GPIO_Init+0xc0>)
 80017c2:	f002 f9fb 	bl	8003bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017c6:	2320      	movs	r3, #32
 80017c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e0:	f002 f9ec 	bl	8003bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2105      	movs	r1, #5
 80017e8:	2028      	movs	r0, #40	@ 0x28
 80017ea:	f002 f8f1 	bl	80039d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ee:	2028      	movs	r0, #40	@ 0x28
 80017f0:	f002 f908 	bl	8003a04 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800

080009b0 <HAL_GPIO_EXTI_Callback>:
=======
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000800 	.word	0x48000800

08001804 <HAL_GPIO_EXTI_Callback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009c4:	d115      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f000 fad8 	bl	8000f7c <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_GPIO_EXTI_Callback+0x4c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f107 020c 	add.w	r2, r7, #12
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 ff6c 	bl	80048b4 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <HAL_GPIO_EXTI_Callback+0x42>
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x50>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
	}
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000120 	.word	0x20000120
 8000a00:	e000ed04 	.word	0xe000ed04

08000a04 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == Button_Pin)
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001818:	d115      	bne.n	8001846 <HAL_GPIO_EXTI_Callback+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800181a:	2028      	movs	r0, #40	@ 0x28
 800181c:	f002 f900 	bl	8003a20 <HAL_NVIC_DisableIRQ>
		xSemaphoreGiveFromISR(bSemaphore, &xHigherPriorityTaskWoken);
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f107 020c 	add.w	r2, r7, #12
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f005 ffd0 	bl	80077d0 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_EXTI_Callback+0x42>
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x50>)
 8001838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	f3bf 8f6f 	isb	sy
	}
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000354 	.word	0x20000354
 8001854:	e000ed04 	.word	0xe000ed04

08001858 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
=======
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
<<<<<<< Updated upstream
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a16:	f000 f98f 	bl	8000d38 <HAL_IncTick>
=======
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a11      	ldr	r2, [pc, #68]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800186a:	f000 faf9 	bl	8001e60 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d114      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
	  // Sinaliza para a task do ECG fazer uma amostragem
	  xSemaphoreGiveFromISR(adcSemaphore, &xHigherPriorityTaskWoken);
 800187c:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f107 020c 	add.w	r2, r7, #12
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f005 ffa2 	bl	80077d0 <xQueueGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <Error_Handler>:
=======
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400
 80018b4:	20000364 	.word	0x20000364
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
=======
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
=======
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
=======
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <Error_Handler+0x8>

080018c8 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
=======
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x50>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
=======
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_MspInit+0x50>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d2:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_MspInit+0x50>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_MspInit+0x50>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_MspInit+0x50>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_MspInit+0x50>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x50>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	f06f 0001 	mvn.w	r0, #1
 8000a72:	f000 fa5b 	bl	8000f2c <HAL_NVIC_SetPriority>
=======
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f002 f863 	bl	80039d0 <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< Updated upstream
 8000a76:	f000 fdbf 	bl	80015f8 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 800190a:	f002 fbc7 	bl	800409c <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_UART_MspInit>:
=======
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09a      	sub	sp, #104	@ 0x68
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2244      	movs	r2, #68	@ 0x44
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f008 fd84 	bl	800a44a <memset>
  if(hadc->Instance==ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800194a:	d134      	bne.n	80019b6 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800194c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001950:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001952:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f90d 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001968:	f7ff ffa8 	bl	80018bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 8001972:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_ADC_MspInit+0xa4>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199c:	2301      	movs	r3, #1
 800199e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a0:	2303      	movs	r3, #3
 80019a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b2:	f002 f903 	bl	8003bbc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3768      	adds	r7, #104	@ 0x68
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_UART_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	@ 0x68
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2244      	movs	r2, #68	@ 0x44
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fe9d 	bl	80067e8 <memset>
  if(huart->Instance==LPUART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a23      	ldr	r2, [pc, #140]	@ (8000b40 <HAL_UART_MspInit+0xb8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d13e      	bne.n	8000b36 <HAL_UART_MspInit+0xae>
=======
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09a      	sub	sp, #104	@ 0x68
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2244      	movs	r2, #68	@ 0x44
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f008 fd30 	bl	800a44a <memset>
  if(huart->Instance==LPUART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a23      	ldr	r2, [pc, #140]	@ (8001a7c <HAL_UART_MspInit+0xb8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d13e      	bne.n	8001a72 <HAL_UART_MspInit+0xae>
>>>>>>> Stashed changes

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
<<<<<<< Updated upstream
 8000ab8:	2320      	movs	r3, #32
 8000aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fb07 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff ffaa 	bl	8000a28 <Error_Handler>
=======
 80019f4:	2320      	movs	r3, #32
 80019f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 f8bb 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a0c:	f7ff ff56 	bl	80018bc <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0xbc>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
=======
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_UART_MspInit+0xbc>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 8000b04:	230c      	movs	r3, #12
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f000 faf9 	bl	8001118 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	205b      	movs	r0, #91	@ 0x5b
 8000b2c:	f000 f9fe 	bl	8000f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b30:	205b      	movs	r0, #91	@ 0x5b
 8000b32:	f000 fa15 	bl	8000f60 <HAL_NVIC_EnableIRQ>
=======
 8001a40:	230c      	movs	r3, #12
 8001a42:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a50:	230c      	movs	r3, #12
 8001a52:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5e:	f002 f8ad 	bl	8003bbc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	205b      	movs	r0, #91	@ 0x5b
 8001a68:	f001 ffb2 	bl	80039d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a6c:	205b      	movs	r0, #91	@ 0x5b
 8001a6e:	f001 ffc9 	bl	8003a04 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8000b36:	bf00      	nop
 8000b38:	3768      	adds	r7, #104	@ 0x68
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40008000 	.word	0x40008000
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
=======
 8001a72:	bf00      	nop
 8001a74:	3768      	adds	r7, #104	@ 0x68
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40008000 	.word	0x40008000
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x44>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d113      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_TIM_Base_MspInit+0x48>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_TIM_Base_MspInit+0x48>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	201d      	movs	r0, #29
 8001ab4:	f001 ff8c 	bl	80039d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f001 ffa3 	bl	8003a04 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b64:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <HAL_InitTick+0xc4>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 020c 	add.w	r2, r7, #12
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fa34 	bl	8001fe8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b80:	f001 fa1c 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8000b84:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	3b01      	subs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b96:	4a20      	ldr	r2, [pc, #128]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b98:	601a      	str	r2, [r3, #0]
=======
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <HAL_InitTick+0xc4>)
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b94 <HAL_InitTick+0xc4>)
 8001ae6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_InitTick+0xc4>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 ffc2 	bl	8004a8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b08:	f002 ffaa 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 8001b0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b10:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_InitTick+0xc8>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ba0 <HAL_InitTick+0xd0>)
 8001b20:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000bb4:	4817      	ldr	r0, [pc, #92]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bb6:	f001 fc7f 	bl	80024b8 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11b      	bne.n	8000c00 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000bca:	f001 fcd7 	bl	800257c <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bdc:	2019      	movs	r0, #25
 8000bde:	f000 f9bf 	bl	8000f60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d808      	bhi.n	8000bfa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2019      	movs	r0, #25
 8000bee:	f000 f99d 	bl	8000f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <HAL_InitTick+0xb8>
=======
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b3c:	4817      	ldr	r0, [pc, #92]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b3e:	f003 fa0d 	bl	8004f5c <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d11b      	bne.n	8001b88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b50:	4812      	ldr	r0, [pc, #72]	@ (8001b9c <HAL_InitTick+0xcc>)
 8001b52:	f003 fa5b 	bl	800500c <HAL_TIM_Base_Start_IT>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b64:	2019      	movs	r0, #25
 8001b66:	f001 ff4d 	bl	8003a04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d808      	bhi.n	8001b82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	2019      	movs	r0, #25
 8001b76:	f001 ff2b 	bl	80039d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_InitTick+0xd4>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e002      	b.n	8001b88 <HAL_InitTick+0xb8>
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
=======
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
>>>>>>> Stashed changes
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	@ 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20000138 	.word	0x20000138
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	20000014 	.word	0x20000014

08000c20 <NMI_Handler>:
=======
 8001b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3730      	adds	r7, #48	@ 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	431bde83 	.word	0x431bde83
 8001b9c:	20001ba4 	.word	0x20001ba4
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	20000018 	.word	0x20000018

08001ba8 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
=======
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <NMI_Handler+0x4>

08000c28 <HardFault_Handler>:
=======
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <NMI_Handler+0x4>

08001bb0 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
=======
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:
=======
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
=======
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <MemManage_Handler+0x4>

08000c38 <BusFault_Handler>:
=======
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <MemManage_Handler+0x4>

08001bc0 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
=======
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:
=======
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
=======
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c48 <DebugMon_Handler>:
=======
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bd0 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
=======
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <TIM1_UP_TIM16_IRQHandler>:
=======
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
=======
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c5e:	f001 fcf7 	bl	8002650 <HAL_TIM_IRQHandler>
=======
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001be6:	f003 faaa 	bl	800513e <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000138 	.word	0x20000138

08000c6c <EXTI15_10_IRQHandler>:
=======
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001ba4 	.word	0x20001ba4

08001bf4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <TIM3_IRQHandler+0x10>)
 8001bfa:	f003 faa0 	bl	800513e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000308 	.word	0x20000308

08001c08 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
=======
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
<<<<<<< Updated upstream
 8000c70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c74:	f000 fc04 	bl	8001480 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001c0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c10:	f002 f988 	bl	8003f24 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LPUART1_IRQHandler>:
=======
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LPUART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
=======
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
<<<<<<< Updated upstream
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <LPUART1_IRQHandler+0x10>)
 8000c82:	f002 f823 	bl	8002ccc <HAL_UART_IRQHandler>
=======
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <LPUART1_IRQHandler+0x10>)
 8001c1e:	f003 ffe3 	bl	8005be8 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
<<<<<<< Updated upstream
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000008c 	.word	0x2000008c

08000c90 <SystemInit>:
=======
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000274 	.word	0x20000274

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f008 fcb1 	bl	800a5ac <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f008 fc16 	bl	800a5ac <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20008000 	.word	0x20008000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20001bf0 	.word	0x20001bf0
 8001db4:	20003ea0 	.word	0x20003ea0

08001db8 <SystemInit>:
>>>>>>> Stashed changes
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:
=======
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< Updated upstream
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f005 fde7 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fd09 	bl	80006fc <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf8:	08006a84 	.word	0x08006a84
  ldr r2, =_sbss
 8000cfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d00:	2000441c 	.word	0x2000441c

08000d04 <ADC1_2_IRQHandler>:
=======
 8001ddc:	480d      	ldr	r0, [pc, #52]	@ (8001e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f008 fbd5 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7ff faab 	bl	8001368 <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   r0, =_estack
 8001e14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e20:	0800cb04 	.word	0x0800cb04
  ldr r2, =_sbss
 8001e24:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e28:	20003e9c 	.word	0x20003e9c

08001e2c <ADC1_2_IRQHandler>:
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
=======
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_2_IRQHandler>

08001e2e <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
=======
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f900 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff ff16 	bl	8000b48 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
=======
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f001 fdbe 	bl	80039ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f7ff fe46 	bl	8001ad0 <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	e001      	b.n	8001e54 <HAL_Init+0x26>
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
 8000d28:	f7ff fe84 	bl	8000a34 <HAL_MspInit>
=======
 8001e50:	f7ff fd3a 	bl	80018c8 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
 8000d2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_IncTick>:
=======
 8001e54:	79fb      	ldrb	r3, [r7, #7]

}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_IncTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20000184 	.word	0x20000184
 8000d58:	20000018 	.word	0x20000018

08000d5c <HAL_GetTick>:
=======
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_IncTick+0x1c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a03      	ldr	r2, [pc, #12]	@ (8001e7c <HAL_IncTick+0x1c>)
 8001e70:	6013      	str	r3, [r2, #0]
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	20001bf4 	.word	0x20001bf4
 8001e80:	2000001c 	.word	0x2000001c

08001e84 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000184 	.word	0x20000184

08000d74 <__NVIC_SetPriorityGrouping>:
=======
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20001bf4 	.word	0x20001bf4

08001e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3360      	adds	r3, #96	@ 0x60
 8001f16:	461a      	mov	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <LL_ADC_SetOffset+0x44>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	03fff000 	.word	0x03fff000

08001f4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3360      	adds	r3, #96	@ 0x60
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3360      	adds	r3, #96	@ 0x60
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3360      	adds	r3, #96	@ 0x60
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3360      	adds	r3, #96	@ 0x60
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	615a      	str	r2, [r3, #20]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3330      	adds	r3, #48	@ 0x30
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	211f      	movs	r1, #31
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 011f 	and.w	r1, r3, #31
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3314      	adds	r3, #20
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0e5b      	lsrs	r3, r3, #25
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2107      	movs	r1, #7
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	401a      	ands	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	0d1b      	lsrs	r3, r3, #20
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0318 	and.w	r3, r3, #24
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002138:	40d9      	lsrs	r1, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	400b      	ands	r3, r1
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	431a      	orrs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	0007ffff 	.word	0x0007ffff

0800215c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 031f 	and.w	r3, r3, #31
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6093      	str	r3, [r2, #8]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021cc:	d101      	bne.n	80021d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800221c:	d101      	bne.n	8002222 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800226c:	f043 0202 	orr.w	r2, r3, #2
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <LL_ADC_IsEnabled+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_IsEnabled+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d101      	bne.n	80022be <LL_ADC_IsDisableOngoing+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_IsDisableOngoing+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d101      	bne.n	8002334 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002352:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b08      	cmp	r3, #8
 800237c:	d101      	bne.n	8002382 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e167      	b.n	800267a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff faaf 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fef1 	bl	80021b8 <LL_ADC_IsDeepPowerDownEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fed7 	bl	8002194 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff0c 	bl	8002208 <LL_ADC_IsInternalRegulatorEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fef0 	bl	80021e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002400:	4ba0      	ldr	r3, [pc, #640]	@ (8002684 <HAL_ADC_Init+0x2f4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	4aa0      	ldr	r2, [pc, #640]	@ (8002688 <HAL_ADC_Init+0x2f8>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002414:	e002      	b.n	800241c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f9      	bne.n	8002416 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff feee 	bl	8002208 <LL_ADC_IsInternalRegulatorEnabled>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	f043 0210 	orr.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff62 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 8002458:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8100 	bne.w	8002668 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 80fc 	bne.w	8002668 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002478:	f043 0202 	orr.w	r2, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fefb 	bl	8002280 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002490:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002494:	f7ff fef4 	bl	8002280 <LL_ADC_IsEnabled>
 8002498:	4604      	mov	r4, r0
 800249a:	487c      	ldr	r0, [pc, #496]	@ (800268c <HAL_ADC_Init+0x2fc>)
 800249c:	f7ff fef0 	bl	8002280 <LL_ADC_IsEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4323      	orrs	r3, r4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4878      	ldr	r0, [pc, #480]	@ (8002690 <HAL_ADC_Init+0x300>)
 80024b0:	f7ff fcf4 	bl	8001e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7f5b      	ldrb	r3, [r3, #29]
 80024b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	045b      	lsls	r3, r3, #17
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b60      	ldr	r3, [pc, #384]	@ (8002694 <HAL_ADC_Init+0x304>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff15 	bl	800236a <LL_ADC_INJ_IsConversionOngoing>
 8002540:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d16d      	bne.n	8002624 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d16a      	bne.n	8002624 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002552:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800255a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800256a:	f023 0302 	bic.w	r3, r3, #2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800258e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002598:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800259c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6911      	ldr	r1, [r2, #16]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025ae:	e013      	b.n	80025d8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d118      	bne.n	8002614 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002604:	430a      	orrs	r2, r1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e007      	b.n	8002624 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10c      	bne.n	8002646 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f023 010f 	bic.w	r1, r3, #15
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
 8002644:	e007      	b.n	8002656 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 020f 	bic.w	r2, r2, #15
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002666:	e007      	b.n	8002678 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002678:	7ffb      	ldrb	r3, [r7, #31]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}
 8002682:	bf00      	nop
 8002684:	20000014 	.word	0x20000014
 8002688:	053e2d63 	.word	0x053e2d63
 800268c:	50000100 	.word	0x50000100
 8002690:	50000300 	.word	0x50000300
 8002694:	fff04007 	.word	0xfff04007

08002698 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a0:	4859      	ldr	r0, [pc, #356]	@ (8002808 <HAL_ADC_Start+0x170>)
 80026a2:	f7ff fd5b 	bl	800215c <LL_ADC_GetMultimode>
 80026a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe35 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 809f 	bne.w	80027f8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_Start+0x30>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e09a      	b.n	80027fe <HAL_ADC_Start+0x166>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fe63 	bl	800339c <ADC_Enable>
 80026d6:	4603      	mov	r3, r0
 80026d8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 8086 	bne.w	80027ee <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a44      	ldr	r2, [pc, #272]	@ (800280c <HAL_ADC_Start+0x174>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d002      	beq.n	8002706 <HAL_ADC_Start+0x6e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e001      	b.n	800270a <HAL_ADC_Start+0x72>
 8002706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	4293      	cmp	r3, r2
 8002710:	d002      	beq.n	8002718 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002730:	d106      	bne.n	8002740 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002736:	f023 0206 	bic.w	r2, r3, #6
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	661a      	str	r2, [r3, #96]	@ 0x60
 800273e:	e002      	b.n	8002746 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	221c      	movs	r2, #28
 800274c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2c      	ldr	r2, [pc, #176]	@ (800280c <HAL_ADC_Start+0x174>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d002      	beq.n	8002766 <HAL_ADC_Start+0xce>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e001      	b.n	800276a <HAL_ADC_Start+0xd2>
 8002766:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	4293      	cmp	r3, r2
 8002770:	d008      	beq.n	8002784 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d002      	beq.n	8002784 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b09      	cmp	r3, #9
 8002782:	d114      	bne.n	80027ae <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800279a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fd90 	bl	80022cc <LL_ADC_REG_StartConversion>
 80027ac:	e026      	b.n	80027fc <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <HAL_ADC_Start+0x174>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d002      	beq.n	80027ca <HAL_ADC_Start+0x132>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e001      	b.n	80027ce <HAL_ADC_Start+0x136>
 80027ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027ce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00f      	beq.n	80027fc <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027ec:	e006      	b.n	80027fc <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80027f6:	e001      	b.n	80027fc <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	50000300 	.word	0x50000300
 800280c:	50000100 	.word	0x50000100

08002810 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Stop+0x16>
 8002822:	2302      	movs	r3, #2
 8002824:	e023      	b.n	800286e <HAL_ADC_Stop+0x5e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800282e:	2103      	movs	r1, #3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fcf7 	bl	8003224 <ADC_ConversionStop>
 8002836:	4603      	mov	r3, r0
 8002838:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fe31 	bl	80034a8 <ADC_Disable>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002882:	4867      	ldr	r0, [pc, #412]	@ (8002a20 <HAL_ADC_PollForConversion+0x1a8>)
 8002884:	f7ff fc6a 	bl	800215c <LL_ADC_GetMultimode>
 8002888:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d102      	bne.n	8002898 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002892:	2308      	movs	r3, #8
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e02a      	b.n	80028ee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d002      	beq.n	80028aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d111      	bne.n	80028ce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0a6      	b.n	8002a16 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028c8:	2304      	movs	r3, #4
 80028ca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028cc:	e00f      	b.n	80028ee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028ce:	4854      	ldr	r0, [pc, #336]	@ (8002a20 <HAL_ADC_PollForConversion+0x1a8>)
 80028d0:	f7ff fc52 	bl	8002178 <LL_ADC_GetMultiDMATransfer>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e095      	b.n	8002a16 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ea:	2304      	movs	r3, #4
 80028ec:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ee:	f7ff fac9 	bl	8001e84 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f4:	e021      	b.n	800293a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d01d      	beq.n	800293a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028fe:	f7ff fac1 	bl	8001e84 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <HAL_ADC_PollForConversion+0x9c>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d112      	bne.n	800293a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e06d      	b.n	8002a16 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0d6      	beq.n	80028f6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fb71 	bl	8002040 <LL_ADC_REG_IsTriggerSourceSWStart>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01c      	beq.n	800299e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7f5b      	ldrb	r3, [r3, #29]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d111      	bne.n	800299e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a20      	ldr	r2, [pc, #128]	@ (8002a24 <HAL_ADC_PollForConversion+0x1ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_PollForConversion+0x136>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e001      	b.n	80029b2 <HAL_ADC_PollForConversion+0x13a>
 80029ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d008      	beq.n	80029cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d002      	beq.n	80029cc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d104      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e00d      	b.n	80029f2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <HAL_ADC_PollForConversion+0x1ac>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x16e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e001      	b.n	80029ea <HAL_ADC_PollForConversion+0x172>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029ea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d104      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2208      	movs	r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e008      	b.n	8002a14 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	220c      	movs	r2, #12
 8002a12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	50000300 	.word	0x50000300
 8002a24:	50000100 	.word	0x50000100

08002a28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0b6      	sub	sp, #216	@ 0xd8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x22>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e3c8      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x7b4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fc52 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 83ad 	bne.w	80031da <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff faea 	bl	8002066 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc40 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc60 	bl	800236a <LL_ADC_INJ_IsConversionOngoing>
 8002aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 81d9 	bne.w	8002e6a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 81d4 	bne.w	8002e6a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aca:	d10f      	bne.n	8002aec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7ff faf1 	bl	80020be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fa98 	bl	800201a <LL_ADC_SetSamplingTimeCommonConfig>
 8002aea:	e00e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f7ff fae0 	bl	80020be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fa88 	bl	800201a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d022      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6919      	ldr	r1, [r3, #16]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b3c:	f7ff f9e2 	bl	8001f04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6919      	ldr	r1, [r3, #16]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f7ff fa2e 	bl	8001fae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x124>
 8002b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b66:	e000      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x126>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7ff fa3a 	bl	8001fe4 <LL_ADC_SetOffsetSaturation>
 8002b70:	e17b      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f9e7 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x15a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f9dc 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	e01e      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x198>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f9d1 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e004      	b.n	8002bda <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x1b0>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	e018      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1e2>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e004      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d106      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f9a0 	bl	8001f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f984 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x220>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f979 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	e01e      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x25e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f96e 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e004      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x276>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	e018      	b.n	8002cec <HAL_ADC_ConfigChannel+0x2a8>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f93d 	bl	8001f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f921 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x2e6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f916 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	e01e      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x324>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f90b 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e004      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x33c>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0e9b      	lsrs	r3, r3, #26
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	e016      	b.n	8002dae <HAL_ADC_ConfigChannel+0x36a>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e004      	b.n	8002dae <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2102      	movs	r1, #2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f8dc 	bl	8001f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8c0 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x3a8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2103      	movs	r1, #3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f8b5 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	e017      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x3d8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2103      	movs	r1, #3
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f8aa 	bl	8001f4c <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e06:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e003      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x3f0>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	e011      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x414>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2103      	movs	r1, #3
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f887 	bl	8001f78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fa06 	bl	8002280 <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 8140 	bne.w	80030fc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f7ff f943 	bl	8002114 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	4a8f      	ldr	r2, [pc, #572]	@ (80030d0 <HAL_ADC_ConfigChannel+0x68c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	f040 8131 	bne.w	80030fc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x47e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	bf94      	ite	ls
 8002eba:	2301      	movls	r3, #1
 8002ebc:	2300      	movhi	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e019      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x4b2>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002eda:	2320      	movs	r3, #32
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d079      	beq.n	8002fee <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x4d2>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f14:	e015      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x4fe>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e003      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	069b      	lsls	r3, r3, #26
 8002f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x51e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	e017      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x54e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	ea42 0103 	orr.w	r1, r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x574>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	051b      	lsls	r3, r3, #20
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_ConfigChannel+0x5a6>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fea:	430b      	orrs	r3, r1
 8002fec:	e081      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_ADC_ConfigChannel+0x5c6>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	3301      	adds	r3, #1
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003008:	e015      	b.n	8003036 <HAL_ADC_ConfigChannel+0x5f2>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e003      	b.n	800302e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x612>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0e9b      	lsrs	r3, r3, #26
 8003048:	3301      	adds	r3, #1
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	e017      	b.n	8003086 <HAL_ADC_ConfigChannel+0x642>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	61fb      	str	r3, [r7, #28]
  return result;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800306e:	2320      	movs	r3, #32
 8003070:	e003      	b.n	800307a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	ea42 0103 	orr.w	r1, r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x66e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	3301      	adds	r3, #1
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	e01e      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x6ac>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	613b      	str	r3, [r7, #16]
  return result;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e006      	b.n	80030dc <HAL_ADC_ConfigChannel+0x698>
 80030ce:	bf00      	nop
 80030d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	3b1e      	subs	r3, #30
 80030ea:	051b      	lsls	r3, r3, #20
 80030ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fe ffe1 	bl	80020be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <HAL_ADC_ConfigChannel+0x7bc>)
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d071      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003108:	483e      	ldr	r0, [pc, #248]	@ (8003204 <HAL_ADC_ConfigChannel+0x7c0>)
 800310a:	f7fe feed 	bl	8001ee8 <LL_ADC_GetCommonPathInternalCh>
 800310e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3c      	ldr	r2, [pc, #240]	@ (8003208 <HAL_ADC_ConfigChannel+0x7c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x6e2>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	@ (800320c <HAL_ADC_ConfigChannel+0x7c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d127      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800312a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800313a:	d157      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800313c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003144:	4619      	mov	r1, r3
 8003146:	482f      	ldr	r0, [pc, #188]	@ (8003204 <HAL_ADC_ConfigChannel+0x7c0>)
 8003148:	f7fe febb 	bl	8001ec2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800314c:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <HAL_ADC_ConfigChannel+0x7cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <HAL_ADC_ConfigChannel+0x7d0>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003166:	e002      	b.n	800316e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003174:	e03a      	b.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a27      	ldr	r2, [pc, #156]	@ (8003218 <HAL_ADC_ConfigChannel+0x7d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d113      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_ADC_ConfigChannel+0x7d8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02a      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319e:	4619      	mov	r1, r3
 80031a0:	4818      	ldr	r0, [pc, #96]	@ (8003204 <HAL_ADC_ConfigChannel+0x7c0>)
 80031a2:	f7fe fe8e 	bl	8001ec2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a6:	e021      	b.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <HAL_ADC_ConfigChannel+0x7dc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d11c      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_ADC_ConfigChannel+0x7d8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d011      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031d0:	4619      	mov	r1, r3
 80031d2:	480c      	ldr	r0, [pc, #48]	@ (8003204 <HAL_ADC_ConfigChannel+0x7c0>)
 80031d4:	f7fe fe75 	bl	8001ec2 <LL_ADC_SetCommonPathInternalCh>
 80031d8:	e008      	b.n	80031ec <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	37d8      	adds	r7, #216	@ 0xd8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	80080000 	.word	0x80080000
 8003204:	50000300 	.word	0x50000300
 8003208:	c3210000 	.word	0xc3210000
 800320c:	90c00010 	.word	0x90c00010
 8003210:	20000014 	.word	0x20000014
 8003214:	053e2d63 	.word	0x053e2d63
 8003218:	c7520000 	.word	0xc7520000
 800321c:	50000100 	.word	0x50000100
 8003220:	cb840000 	.word	0xcb840000

08003224 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f86e 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 8003240:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f88f 	bl	800236a <LL_ADC_INJ_IsConversionOngoing>
 800324c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8098 	beq.w	800338c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02a      	beq.n	80032c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7f5b      	ldrb	r3, [r3, #29]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d126      	bne.n	80032c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7f1b      	ldrb	r3, [r3, #28]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d122      	bne.n	80032c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800327e:	e014      	b.n	80032aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	4a45      	ldr	r2, [pc, #276]	@ (8003398 <ADC_ConversionStop+0x174>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d90d      	bls.n	80032a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e074      	b.n	800338e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	3301      	adds	r3, #1
 80032a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b40      	cmp	r3, #64	@ 0x40
 80032b6:	d1e3      	bne.n	8003280 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2240      	movs	r2, #64	@ 0x40
 80032be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d014      	beq.n	80032f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f826 	bl	800231c <LL_ADC_REG_IsConversionOngoing>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ffe3 	bl	80022a6 <LL_ADC_IsDisableOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f802 	bl	80022f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d014      	beq.n	8003320 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f835 	bl	800236a <LL_ADC_INJ_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe ffcb 	bl	80022a6 <LL_ADC_IsDisableOngoing>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f811 	bl	8002342 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d005      	beq.n	8003332 <ADC_ConversionStop+0x10e>
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d105      	bne.n	8003338 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800332c:	230c      	movs	r3, #12
 800332e:	617b      	str	r3, [r7, #20]
        break;
 8003330:	e005      	b.n	800333e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003332:	2308      	movs	r3, #8
 8003334:	617b      	str	r3, [r7, #20]
        break;
 8003336:	e002      	b.n	800333e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003338:	2304      	movs	r3, #4
 800333a:	617b      	str	r3, [r7, #20]
        break;
 800333c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800333e:	f7fe fda1 	bl	8001e84 <HAL_GetTick>
 8003342:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003344:	e01b      	b.n	800337e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003346:	f7fe fd9d 	bl	8001e84 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b05      	cmp	r3, #5
 8003352:	d914      	bls.n	800337e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1dc      	bne.n	8003346 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	a33fffff 	.word	0xa33fffff

0800339c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe ff67 	bl	8002280 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d169      	bne.n	800348c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <ADC_Enable+0xfc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e055      	b.n	800348e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff22 	bl	8002230 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033ec:	482b      	ldr	r0, [pc, #172]	@ (800349c <ADC_Enable+0x100>)
 80033ee:	f7fe fd7b 	bl	8001ee8 <LL_ADC_GetCommonPathInternalCh>
 80033f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <ADC_Enable+0x104>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <ADC_Enable+0x108>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003416:	e002      	b.n	800341e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003424:	f7fe fd2e 	bl	8001e84 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342a:	e028      	b.n	800347e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe ff25 	bl	8002280 <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fef5 	bl	8002230 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003446:	f7fe fd1d 	bl	8001e84 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d914      	bls.n	800347e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d00d      	beq.n	800347e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e007      	b.n	800348e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d1cf      	bne.n	800342c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	8000003f 	.word	0x8000003f
 800349c:	50000300 	.word	0x50000300
 80034a0:	20000014 	.word	0x20000014
 80034a4:	053e2d63 	.word	0x053e2d63

080034a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fef6 	bl	80022a6 <LL_ADC_IsDisableOngoing>
 80034ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fedd 	bl	8002280 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d047      	beq.n	800355c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d144      	bne.n	800355c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030d 	and.w	r3, r3, #13
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10c      	bne.n	80034fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe feb7 	bl	8002258 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2203      	movs	r2, #3
 80034f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034f2:	f7fe fcc7 	bl	8001e84 <HAL_GetTick>
 80034f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f8:	e029      	b.n	800354e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e023      	b.n	800355e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003516:	f7fe fcb5 	bl	8001e84 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d914      	bls.n	800354e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	f043 0210 	orr.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003542:	f043 0201 	orr.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e007      	b.n	800355e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1dc      	bne.n	8003516 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <LL_ADC_IsEnabled>:
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <LL_ADC_IsEnabled+0x18>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <LL_ADC_IsEnabled+0x1a>
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_StartCalibration>:
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800359e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_IsCalibrationOnGoing>:
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035d2:	d101      	bne.n	80035d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d101      	bne.n	80035fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_ADCEx_Calibration_Start+0x1c>
 8003624:	2302      	movs	r3, #2
 8003626:	e04d      	b.n	80036c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff39 	bl	80034a8 <ADC_Disable>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d136      	bne.n	80036ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff96 	bl	800358c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003660:	e014      	b.n	800368c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <HAL_ADCEx_Calibration_Start+0xc0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d90d      	bls.n	800368c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	f023 0312 	bic.w	r3, r3, #18
 8003678:	f043 0210 	orr.w	r2, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e01b      	b.n	80036c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff94 	bl	80035be <LL_ADC_IsCalibrationOnGoing>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e2      	bne.n	8003662 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	f023 0303 	bic.w	r3, r3, #3
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036ac:	e005      	b.n	80036ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b2:	f043 0210 	orr.w	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	0004de01 	.word	0x0004de01

080036d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b0a1      	sub	sp, #132	@ 0x84
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e08b      	b.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036f6:	2300      	movs	r3, #0
 80036f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036fa:	2300      	movs	r3, #0
 80036fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003706:	d102      	bne.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003708:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	e001      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e06a      	b.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff57 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 8003738:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff51 	bl	80035e6 <LL_ADC_REG_IsConversionOngoing>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14c      	bne.n	80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800374a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800374c:	2b00      	cmp	r3, #0
 800374e:	d149      	bne.n	80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003750:	4b30      	ldr	r3, [pc, #192]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003752:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800375c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800376e:	035b      	lsls	r3, r3, #13
 8003770:	430b      	orrs	r3, r1
 8003772:	431a      	orrs	r2, r3
 8003774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003776:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003778:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800377c:	f7ff fef3 	bl	8003566 <LL_ADC_IsEnabled>
 8003780:	4604      	mov	r4, r0
 8003782:	4823      	ldr	r0, [pc, #140]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003784:	f7ff feef 	bl	8003566 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	4323      	orrs	r3, r4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d133      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6811      	ldr	r1, [r2, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037aa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	e024      	b.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037be:	f7ff fed2 	bl	8003566 <LL_ADC_IsEnabled>
 80037c2:	4604      	mov	r4, r0
 80037c4:	4812      	ldr	r0, [pc, #72]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037c6:	f7ff fece 	bl	8003566 <LL_ADC_IsEnabled>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4323      	orrs	r3, r4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d112      	bne.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037da:	f023 030f 	bic.w	r3, r3, #15
 80037de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037e2:	e009      	b.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037f6:	e000      	b.n	80037fa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003802:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003806:	4618      	mov	r0, r3
 8003808:	3784      	adds	r7, #132	@ 0x84
 800380a:	46bd      	mov	sp, r7
 800380c:	bd90      	pop	{r4, r7, pc}
 800380e:	bf00      	nop
 8003810:	50000100 	.word	0x50000100
 8003814:	50000300 	.word	0x50000300

08003818 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
=======
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
=======
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_DisableIRQ>:
=======
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	@ (80038b4 <__NVIC_EnableIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db12      	blt.n	8000e4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	490a      	ldr	r1, [pc, #40]	@ (8000e58 <__NVIC_DisableIRQ+0x44>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	3320      	adds	r3, #32
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e40:	f3bf 8f4f 	dsb	sy
}
 8000e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e46:	f3bf 8f6f 	isb	sy
}
 8000e4a:	bf00      	nop
=======
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db12      	blt.n	80038f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	490a      	ldr	r1, [pc, #40]	@ (80038fc <__NVIC_DisableIRQ+0x44>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	3320      	adds	r3, #32
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038e4:	f3bf 8f4f 	dsb	sy
}
 80038e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ea:	f3bf 8f6f 	isb	sy
}
 80038ee:	bf00      	nop
>>>>>>> Stashed changes
    __DSB();
    __ISB();
  }
}
<<<<<<< Updated upstream
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
=======
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100

08003900 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db0a      	blt.n	800392a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	490c      	ldr	r1, [pc, #48]	@ (800394c <__NVIC_SetPriority+0x4c>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	440b      	add	r3, r1
 8003924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
=======
 8003928:	e00a      	b.n	8003940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4908      	ldr	r1, [pc, #32]	@ (8003950 <__NVIC_SetPriority+0x50>)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	3b04      	subs	r3, #4
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	440b      	add	r3, r1
 800393e:	761a      	strb	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000e100 	.word	0xe000e100
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
=======
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	@ 0x24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f1c3 0307 	rsb	r3, r3, #7
 800396e:	2b04      	cmp	r3, #4
 8003970:	bf28      	it	cs
 8003972:	2304      	movcs	r3, #4
 8003974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3304      	adds	r3, #4
 800397a:	2b06      	cmp	r3, #6
 800397c:	d902      	bls.n	8003984 <NVIC_EncodePriority+0x30>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b03      	subs	r3, #3
 8003982:	e000      	b.n	8003986 <NVIC_EncodePriority+0x32>
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	401a      	ands	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800399c:	f04f 31ff 	mov.w	r1, #4294967295
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43d9      	mvns	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	4313      	orrs	r3, r2
         );
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	@ 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
=======
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff28 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
=======
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff28 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
=======
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8000f3a:	f7ff ff3f 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f7ff ffb3 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff82 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_EnableIRQ>:
=======
 80039de:	f7ff ff3f 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	6978      	ldr	r0, [r7, #20]
 80039ea:	f7ff ffb3 	bl	8003954 <NVIC_EncodePriority>
 80039ee:	4602      	mov	r2, r0
 80039f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff82 	bl	8003900 <__NVIC_SetPriority>
}
 80039fc:	bf00      	nop
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
=======
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff32 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_DisableIRQ>:
=======
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff32 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_NVIC_DisableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
=======
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
<<<<<<< Updated upstream
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff42 	bl	8000e14 <__NVIC_DisableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort>:
=======
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff42 	bl	80038b8 <__NVIC_DisableIRQ>
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e037      	b.n	800102c <HAL_DMA_Abort+0x94>
=======
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d005      	beq.n	8003a60 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2204      	movs	r2, #4
 8003a58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e037      	b.n	8003ad0 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fda:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001008:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <HAL_DMA_Abort+0x94>
=======
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 020e 	bic.w	r2, r2, #14
 8003a6e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_DMA_Abort+0x94>
>>>>>>> Stashed changes
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001020:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800102a:	605a      	str	r2, [r3, #4]
=======
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ace:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_DMA_Abort_IT>:
=======
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d00d      	beq.n	800107e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e047      	b.n	800110e <HAL_DMA_Abort_IT+0xc4>
=======
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d00d      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e047      	b.n	8003bb2 <HAL_DMA_Abort_IT+0xc4>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< Updated upstream
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020e 	bic.w	r2, r2, #14
 800108c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f003 021f 	and.w	r2, r3, #31
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_DMA_Abort_IT+0xa4>
=======
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020e 	bic.w	r2, r2, #14
 8003b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f003 021f 	and.w	r2, r3, #31
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <HAL_DMA_Abort_IT+0xa4>
>>>>>>> Stashed changes
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< Updated upstream
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010ec:	605a      	str	r2, [r3, #4]
=======
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b90:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< Updated upstream
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
    }
  }
  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_GPIO_Init>:
=======
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
    }
  }
  return status;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
=======
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< Updated upstream
 8001126:	e15a      	b.n	80013de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2101      	movs	r1, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 814c 	beq.w	80013d8 <HAL_GPIO_Init+0x2c0>
=======
 8003bca:	e15a      	b.n	8003e82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 814c 	beq.w	8003e7c <HAL_GPIO_Init+0x2c0>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< Updated upstream
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d005      	beq.n	8001158 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	2b02      	cmp	r3, #2
 8001156:	d130      	bne.n	80011ba <HAL_GPIO_Init+0xa2>
=======
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d005      	beq.n	8003bfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d130      	bne.n	8003c5e <HAL_GPIO_Init+0xa2>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118e:	2201      	movs	r2, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 0201 	and.w	r2, r3, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d017      	beq.n	80011f6 <HAL_GPIO_Init+0xde>
=======
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c32:	2201      	movs	r2, #1
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 0201 	and.w	r2, r3, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d017      	beq.n	8003c9a <HAL_GPIO_Init+0xde>
>>>>>>> Stashed changes
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
=======
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d123      	bne.n	800124a <HAL_GPIO_Init+0x132>
=======
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d123      	bne.n	8003cee <HAL_GPIO_Init+0x132>
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	08da      	lsrs	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3208      	adds	r2, #8
 8003cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	08da      	lsrs	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	6939      	ldr	r1, [r7, #16]
 8003cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0203 	and.w	r2, r3, #3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]
=======
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0203 	and.w	r2, r3, #3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< Updated upstream
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80a6 	beq.w	80013d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	4b5b      	ldr	r3, [pc, #364]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001290:	4a5a      	ldr	r2, [pc, #360]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6613      	str	r3, [r2, #96]	@ 0x60
 8001298:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <HAL_GPIO_Init+0x2e4>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a4:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <HAL_GPIO_Init+0x2e8>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ce:	d01f      	beq.n	8001310 <HAL_GPIO_Init+0x1f8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x2ec>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <HAL_GPIO_Init+0x1f4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4b      	ldr	r2, [pc, #300]	@ (8001408 <HAL_GPIO_Init+0x2f0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <HAL_GPIO_Init+0x1f0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <HAL_GPIO_Init+0x2f4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <HAL_GPIO_Init+0x2f8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a48      	ldr	r2, [pc, #288]	@ (8001414 <HAL_GPIO_Init+0x2fc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_Init+0x1e4>
 80012f8:	2305      	movs	r3, #5
 80012fa:	e00a      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 80012fc:	2306      	movs	r3, #6
 80012fe:	e008      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001300:	2304      	movs	r3, #4
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001304:	2303      	movs	r3, #3
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1fa>
 8001310:	2300      	movs	r3, #0
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001322:	4937      	ldr	r1, [pc, #220]	@ (8001400 <HAL_GPIO_Init+0x2e8>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001354:	4a30      	ldr	r2, [pc, #192]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <HAL_GPIO_Init+0x300>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137e:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001384:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_GPIO_Init+0x300>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d2:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <HAL_GPIO_Init+0x300>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6013      	str	r3, [r2, #0]
=======
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80a6 	beq.w	8003e7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d30:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea0 <HAL_GPIO_Init+0x2e4>)
 8003d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d34:	4a5a      	ldr	r2, [pc, #360]	@ (8003ea0 <HAL_GPIO_Init+0x2e4>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d3c:	4b58      	ldr	r3, [pc, #352]	@ (8003ea0 <HAL_GPIO_Init+0x2e4>)
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d48:	4a56      	ldr	r2, [pc, #344]	@ (8003ea4 <HAL_GPIO_Init+0x2e8>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d72:	d01f      	beq.n	8003db4 <HAL_GPIO_Init+0x1f8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea8 <HAL_GPIO_Init+0x2ec>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d019      	beq.n	8003db0 <HAL_GPIO_Init+0x1f4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a4b      	ldr	r2, [pc, #300]	@ (8003eac <HAL_GPIO_Init+0x2f0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_GPIO_Init+0x1f0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb0 <HAL_GPIO_Init+0x2f4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <HAL_GPIO_Init+0x1ec>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a49      	ldr	r2, [pc, #292]	@ (8003eb4 <HAL_GPIO_Init+0x2f8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <HAL_GPIO_Init+0x1e8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a48      	ldr	r2, [pc, #288]	@ (8003eb8 <HAL_GPIO_Init+0x2fc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_GPIO_Init+0x1e4>
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	e00a      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003da0:	2306      	movs	r3, #6
 8003da2:	e008      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e006      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003da8:	2303      	movs	r3, #3
 8003daa:	e004      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e002      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <HAL_GPIO_Init+0x1fa>
 8003db4:	2300      	movs	r3, #0
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	f002 0203 	and.w	r2, r2, #3
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	4093      	lsls	r3, r2
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc6:	4937      	ldr	r1, [pc, #220]	@ (8003ea4 <HAL_GPIO_Init+0x2e8>)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd4:	4b39      	ldr	r3, [pc, #228]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df8:	4a30      	ldr	r2, [pc, #192]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e22:	4a26      	ldr	r2, [pc, #152]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e28:	4b24      	ldr	r3, [pc, #144]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e76:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <HAL_GPIO_Init+0x300>)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f47f ae9d 	bne.w	8001128 <HAL_GPIO_Init+0x10>
  }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	48000800 	.word	0x48000800
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48001000 	.word	0x48001000
 8001414:	48001400 	.word	0x48001400
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
=======
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f ae9d 	bne.w	8003bcc <HAL_GPIO_Init+0x10>
  }
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	48000400 	.word	0x48000400
 8003eac:	48000800 	.word	0x48000800
 8003eb0:	48000c00 	.word	0x48000c00
 8003eb4:	48001000 	.word	0x48001000
 8003eb8:	48001400 	.word	0x48001400
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
=======
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
=======
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 8001438:	e002      	b.n	8001440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_TogglePin>:
=======
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
=======
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< Updated upstream
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43d9      	mvns	r1, r3
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43d9      	mvns	r1, r3
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	400b      	ands	r3, r1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa86 	bl	80009b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_PWREx_ControlVoltageScaling>:
=======
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3a:	4a05      	ldr	r2, [pc, #20]	@ (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fc5e 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
=======
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d141      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014be:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ca:	d131      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014cc:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d2:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	4b43      	ldr	r3, [pc, #268]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e4:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ec:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2232      	movs	r2, #50	@ 0x32
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a3f      	ldr	r2, [pc, #252]	@ (80015f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9b      	lsrs	r3, r3, #18
 80014fe:	3301      	adds	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001502:	e002      	b.n	800150a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3b01      	subs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001516:	d102      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f2      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151e:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d158      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e057      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d141      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f62:	4b4b      	ldr	r3, [pc, #300]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6e:	d131      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f70:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f76:	4a46      	ldr	r2, [pc, #280]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f80:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f88:	4a41      	ldr	r2, [pc, #260]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b40      	ldr	r3, [pc, #256]	@ (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2232      	movs	r2, #50	@ 0x32
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa6:	e002      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	4b38      	ldr	r3, [pc, #224]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f2      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d158      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e057      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 8001530:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001536:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800153c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001540:	e04d      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001548:	d141      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001556:	d131      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001570:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2232      	movs	r2, #50	@ 0x32
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158e:	e002      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a2:	d102      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f2      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d112      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e011      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fda:	4a2d      	ldr	r2, [pc, #180]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fe4:	e04d      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004002:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004014:	4a1e      	ldr	r2, [pc, #120]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	@ 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d112      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e011      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015cc:	e007      	b.n	80015de <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004066:	4a0a      	ldr	r2, [pc, #40]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004070:	e007      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015dc:	6013      	str	r3, [r2, #0]
=======
 8004072:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407a:	4a05      	ldr	r2, [pc, #20]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004080:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40007000 	.word	0x40007000
 80015f0:	20000010 	.word	0x20000010
 80015f4:	431bde83 	.word	0x431bde83

080015f8 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40007000 	.word	0x40007000
 8004094:	20000014 	.word	0x20000014
 8004098:	431bde83 	.word	0x431bde83

0800409c <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> Stashed changes
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< Updated upstream
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001606:	6093      	str	r3, [r2, #8]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000

08001618 <HAL_RCC_OscConfig>:
=======
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
=======
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e2fe      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e2fe      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d075      	beq.n	8001722 <HAL_RCC_OscConfig+0x10a>
=======
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d075      	beq.n	80041c6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 8001636:	4b97      	ldr	r3, [pc, #604]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001640:	4b94      	ldr	r3, [pc, #592]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x3e>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d002      	beq.n	800165c <HAL_RCC_OscConfig+0x44>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d10b      	bne.n	8001674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4b8d      	ldr	r3, [pc, #564]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d05b      	beq.n	8001720 <HAL_RCC_OscConfig+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d157      	bne.n	8001720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e2d9      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 80040da:	4b97      	ldr	r3, [pc, #604]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b94      	ldr	r3, [pc, #592]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x3e>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_OscConfig+0x44>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	4b8d      	ldr	r3, [pc, #564]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d05b      	beq.n	80041c4 <HAL_RCC_OscConfig+0x108>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d157      	bne.n	80041c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e2d9      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x74>
 800167e:	4b85      	ldr	r3, [pc, #532]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a84      	ldr	r2, [pc, #528]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xb0>
 80016b0:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a74      	ldr	r2, [pc, #464]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb44 	bl	8000d5c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb40 	bl	8000d5c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e29e      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xc0>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
=======
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d106      	bne.n	8004130 <HAL_RCC_OscConfig+0x74>
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a84      	ldr	r2, [pc, #528]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e01d      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b7f      	ldr	r3, [pc, #508]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7e      	ldr	r2, [pc, #504]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b7c      	ldr	r3, [pc, #496]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7b      	ldr	r2, [pc, #492]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004154:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a77      	ldr	r2, [pc, #476]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800415a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4b75      	ldr	r3, [pc, #468]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a74      	ldr	r2, [pc, #464]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800416a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd fe86 	bl	8001e84 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800417c:	f7fd fe82 	bl	8001e84 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	@ 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e29e      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0xc0>
 800419a:	e014      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80016f8:	f7ff fb30 	bl	8000d5c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fb2c 	bl	8000d5c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	@ 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e28a      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001712:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0xe8>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
=======
 800419c:	f7fd fe72 	bl	8001e84 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fd fe6e 	bl	8001e84 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	@ 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e28a      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0xe8>
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d075      	beq.n	800181a <HAL_RCC_OscConfig+0x202>
=======
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
 800172e:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b0c      	cmp	r3, #12
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x136>
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d002      	beq.n	8001754 <HAL_RCC_OscConfig+0x13c>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d11f      	bne.n	8001794 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x154>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e25d      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 80041d2:	4b59      	ldr	r3, [pc, #356]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x136>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x13c>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11f      	bne.n	8004238 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x154>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e25d      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800176c:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	4946      	ldr	r1, [pc, #280]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001780:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <HAL_RCC_OscConfig+0x280>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9df 	bl	8000b48 <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d043      	beq.n	8001818 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e249      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	4946      	ldr	r1, [pc, #280]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004224:	4b45      	ldr	r3, [pc, #276]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd fc51 	bl	8001ad0 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d043      	beq.n	80042bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e249      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fad8 	bl	8000d5c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fad4 	bl	8000d5c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e232      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x198>
=======
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3c      	ldr	r2, [pc, #240]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fe1a 	bl	8001e84 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004254:	f7fd fe16 	bl	8001e84 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e232      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x198>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	492d      	ldr	r1, [pc, #180]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x202>
=======
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	492d      	ldr	r1, [pc, #180]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
 8004286:	e01a      	b.n	80042be <HAL_RCC_OscConfig+0x202>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fab4 	bl	8000d5c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fab0 	bl	8000d5c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e20e      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1e0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	bf00      	nop
=======
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd fdf6 	bl	8001e84 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429c:	f7fd fdf2 	bl	8001e84 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e20e      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ae:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1e0>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042bc:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d041      	beq.n	80018aa <HAL_RCC_OscConfig+0x292>
=======
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d041      	beq.n	800434e <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01c      	beq.n	8001868 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001834:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa8d 	bl	8000d5c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fa89 	bl	8000d5c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1e7      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ef      	beq.n	8001846 <HAL_RCC_OscConfig+0x22e>
 8001866:	e020      	b.n	80018aa <HAL_RCC_OscConfig+0x292>
=======
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01c      	beq.n	800430c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d2:	4b19      	ldr	r3, [pc, #100]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d8:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fdcf 	bl	8001e84 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fd fdcb 	bl	8001e84 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1e7      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ef      	beq.n	80042ea <HAL_RCC_OscConfig+0x22e>
 800430a:	e020      	b.n	800434e <HAL_RCC_OscConfig+0x292>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x27c>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa70 	bl	8000d5c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187e:	e00d      	b.n	800189c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fa6c 	bl	8000d5c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d906      	bls.n	800189c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1ca      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ea      	bne.n	8001880 <HAL_RCC_OscConfig+0x268>
=======
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fd fdb2 	bl	8001e84 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004322:	e00d      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004324:	f7fd fdae 	bl	8001e84 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d906      	bls.n	8004340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1ca      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004340:	4b8c      	ldr	r3, [pc, #560]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ea      	bne.n	8004324 <HAL_RCC_OscConfig+0x268>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80a6 	beq.w	8001a04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
=======
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80a6 	beq.w	80044a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< Updated upstream
 80018bc:	4b84      	ldr	r3, [pc, #528]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x2b4>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x2b6>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018de:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	4b79      	ldr	r3, [pc, #484]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018fa:	4b76      	ldr	r3, [pc, #472]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a75      	ldr	r2, [pc, #468]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fa29 	bl	8000d5c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fa25 	bl	8000d5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e183      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad4 <HAL_RCC_OscConfig+0x4bc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x2f6>
=======
 8004360:	4b84      	ldr	r3, [pc, #528]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x2b4>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x2b6>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	4b7f      	ldr	r3, [pc, #508]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	4a7e      	ldr	r2, [pc, #504]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004380:	6593      	str	r3, [r2, #88]	@ 0x58
 8004382:	4b7c      	ldr	r3, [pc, #496]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	4b79      	ldr	r3, [pc, #484]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439e:	4b76      	ldr	r3, [pc, #472]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fd fd6b 	bl	8001e84 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fd fd67 	bl	8001e84 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e183      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0x32e>
 8001934:	4b66      	ldr	r3, [pc, #408]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193a:	4a65      	ldr	r2, [pc, #404]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001944:	e024      	b.n	8001990 <HAL_RCC_OscConfig+0x378>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d110      	bne.n	8001970 <HAL_RCC_OscConfig+0x358>
 800194e:	4b60      	ldr	r3, [pc, #384]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001954:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001964:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800196e:	e00f      	b.n	8001990 <HAL_RCC_OscConfig+0x378>
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001976:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001980:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001986:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d016      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9e0 	bl	8000d5c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9dc 	bl	8000d5c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e138      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b6:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ed      	beq.n	80019a0 <HAL_RCC_OscConfig+0x388>
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x3da>
=======
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x32e>
 80043d8:	4b66      	ldr	r3, [pc, #408]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e8:	e024      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d110      	bne.n	8004414 <HAL_RCC_OscConfig+0x358>
 80043f2:	4b60      	ldr	r3, [pc, #384]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f043 0304 	orr.w	r3, r3, #4
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004402:	4b5c      	ldr	r3, [pc, #368]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	4a5a      	ldr	r2, [pc, #360]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 8004414:	4b57      	ldr	r3, [pc, #348]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004424:	4b53      	ldr	r3, [pc, #332]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	4a52      	ldr	r2, [pc, #328]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd fd22 	bl	8001e84 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	e00a      	b.n	800445a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fd fd1e 	bl	8001e84 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e138      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445a:	4b46      	ldr	r3, [pc, #280]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ed      	beq.n	8004444 <HAL_RCC_OscConfig+0x388>
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x3da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80019c6:	f7ff f9c9 	bl	8000d5c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff f9c5 	bl	8000d5c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e121      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ed      	bne.n	80019ce <HAL_RCC_OscConfig+0x3b6>
=======
 800446a:	f7fd fd0b 	bl	8001e84 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd fd07 	bl	8001e84 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e121      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004488:	4b3a      	ldr	r3, [pc, #232]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ed      	bne.n	8004472 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	4a34      	ldr	r2, [pc, #208]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b35      	ldr	r3, [pc, #212]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x472>
=======
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03c      	beq.n	800452e <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f998 	bl	8000d5c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a30:	f7ff f994 	bl	8000d5c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0f2      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ef      	beq.n	8001a30 <HAL_RCC_OscConfig+0x418>
 8001a50:	e01b      	b.n	8001a8a <HAL_RCC_OscConfig+0x472>
=======
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd fcda 	bl	8001e84 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d4:	f7fd fcd6 	bl	8001e84 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0f2      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e6:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCC_OscConfig+0x418>
 80044f4:	e01b      	b.n	800452e <HAL_RCC_OscConfig+0x472>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f97b 	bl	8000d5c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7ff f977 	bl	8000d5c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0d5      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ef      	bne.n	8001a6a <HAL_RCC_OscConfig+0x452>
=======
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd fcbd 	bl	8001e84 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450e:	f7fd fcb9 	bl	8001e84 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0d5      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004520:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ef      	bne.n	800450e <HAL_RCC_OscConfig+0x452>
>>>>>>> Stashed changes

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80c9 	beq.w	8001c26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	f000 8083 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d15e      	bne.n	8001b68 <HAL_RCC_OscConfig+0x550>
=======
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80c9 	beq.w	80046ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b0c      	cmp	r3, #12
 8004542:	f000 8083 	beq.w	800464c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d15e      	bne.n	800460c <HAL_RCC_OscConfig+0x550>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f951 	bl	8000d5c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abc:	e00c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f94d 	bl	8000d5c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d905      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0ab      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ec      	bne.n	8001abe <HAL_RCC_OscConfig+0x4a6>
=======
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fc93 	bl	8001e84 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	e00c      	b.n	800457c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fc8f 	bl	8001e84 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d905      	bls.n	800457c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0ab      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b55      	ldr	r3, [pc, #340]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ec      	bne.n	8004562 <HAL_RCC_OscConfig+0x4a6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8001ae4:	4b52      	ldr	r3, [pc, #328]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <HAL_RCC_OscConfig+0x61c>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a11      	ldr	r1, [r2, #32]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001afe:	0212      	lsls	r2, r2, #8
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b06:	0852      	lsrs	r2, r2, #1
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	0552      	lsls	r2, r2, #21
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b12:	0852      	lsrs	r2, r2, #1
 8001b14:	3a01      	subs	r2, #1
 8001b16:	0652      	lsls	r2, r2, #25
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b1e:	06d2      	lsls	r2, r2, #27
 8001b20:	430a      	orrs	r2, r1
 8001b22:	4943      	ldr	r1, [pc, #268]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
=======
 8004588:	4b52      	ldr	r3, [pc, #328]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b52      	ldr	r3, [pc, #328]	@ (80046d8 <HAL_RCC_OscConfig+0x61c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6a11      	ldr	r1, [r2, #32]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4943      	ldr	r1, [pc, #268]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8001b28:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b34:	4b3e      	ldr	r3, [pc, #248]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a3d      	ldr	r2, [pc, #244]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f90c 	bl	8000d5c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f908 	bl	8000d5c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e066      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x530>
 8001b66:	e05e      	b.n	8001c26 <HAL_RCC_OscConfig+0x60e>
=======
 80045cc:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a40      	ldr	r2, [pc, #256]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a3d      	ldr	r2, [pc, #244]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fc4e 	bl	8001e84 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fc4a 	bl	8001e84 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e066      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b35      	ldr	r3, [pc, #212]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x530>
 800460a:	e05e      	b.n	80046ca <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f8f2 	bl	8000d5c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7ff f8ee 	bl	8000d5c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04c      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x564>
=======
 800460c:	4b31      	ldr	r3, [pc, #196]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd fc34 	bl	8001e84 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fc30 	bl	8001e84 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04c      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004632:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x564>
>>>>>>> Stashed changes
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
<<<<<<< Updated upstream
 8001b9a:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4924      	ldr	r1, [pc, #144]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001ba0:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
 8001ba6:	e03e      	b.n	8001c26 <HAL_RCC_OscConfig+0x60e>
=======
 800463e:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	4924      	ldr	r1, [pc, #144]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <HAL_RCC_OscConfig+0x620>)
 8004646:	4013      	ands	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
 800464a:	e03e      	b.n	80046ca <HAL_RCC_OscConfig+0x60e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e039      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e039      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d12c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d123      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d113      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x610>
=======
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d12c      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d123      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11b      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d113      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	3b01      	subs	r3, #1
 80046c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
>>>>>>> Stashed changes
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	019f800c 	.word	0x019f800c
 8001c38:	feeefffc 	.word	0xfeeefffc

08001c3c <HAL_RCC_ClockConfig>:
=======
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	019f800c 	.word	0x019f800c
 80046dc:	feeefffc 	.word	0xfeeefffc

080046e0 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e11e      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e11e      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001c54:	4b91      	ldr	r3, [pc, #580]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d910      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b8e      	ldr	r3, [pc, #568]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	498c      	ldr	r1, [pc, #560]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
=======
 80046f8:	4b91      	ldr	r3, [pc, #580]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b8e      	ldr	r3, [pc, #568]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	498c      	ldr	r1, [pc, #560]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8001c72:	4b8a      	ldr	r3, [pc, #552]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e106      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8004716:	4b8a      	ldr	r3, [pc, #552]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e106      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d073      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x13c>
=======
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d073      	beq.n	800481c <HAL_RCC_ClockConfig+0x13c>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d129      	bne.n	8001cec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c98:	4b81      	ldr	r3, [pc, #516]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0f4      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d129      	bne.n	8004790 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473c:	4b81      	ldr	r3, [pc, #516]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0f4      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< Updated upstream
 8001ca8:	f000 f9d0 	bl	800204c <RCC_GetSysClockFreqFromPLLSource>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea4 <HAL_RCC_ClockConfig+0x268>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d93f      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d033      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d12f      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cd6:	4b72      	ldr	r3, [pc, #456]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cde:	4a70      	ldr	r2, [pc, #448]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e024      	b.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
=======
 800474c:	f000 f9d0 	bl	8004af0 <RCC_GetSysClockFreqFromPLLSource>
 8004750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_RCC_ClockConfig+0x268>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d93f      	bls.n	80047da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800475a:	4b7a      	ldr	r3, [pc, #488]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d033      	beq.n	80047da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004776:	2b00      	cmp	r3, #0
 8004778:	d12f      	bne.n	80047da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800477a:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e024      	b.n	80047da <HAL_RCC_ClockConfig+0xfa>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0c6      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0c6      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
 8001d04:	4b66      	ldr	r3, [pc, #408]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0be      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
=======
 80047a8:	4b66      	ldr	r3, [pc, #408]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0be      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
>>>>>>> Stashed changes
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< Updated upstream
 8001d14:	f000 f8ce 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4a61      	ldr	r2, [pc, #388]	@ (8001ea4 <HAL_RCC_ClockConfig+0x268>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d909      	bls.n	8001d36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	617b      	str	r3, [r7, #20]
=======
 80047b8:	f000 f8ce 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4a61      	ldr	r2, [pc, #388]	@ (8004948 <HAL_RCC_ClockConfig+0x268>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d909      	bls.n	80047da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ce:	4a5d      	ldr	r2, [pc, #372]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4957      	ldr	r1, [pc, #348]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7ff f808 	bl	8000d5c <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f804 	bl	8000d5c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e095      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x114>
=======
 80047da:	4b5a      	ldr	r3, [pc, #360]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4957      	ldr	r1, [pc, #348]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fd fb4a 	bl	8001e84 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd fb46 	bl	8001e84 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e095      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b4e      	ldr	r3, [pc, #312]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x114>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d023      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x190>
=======
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d023      	beq.n	8004870 <HAL_RCC_ClockConfig+0x190>
>>>>>>> Stashed changes
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a42      	ldr	r2, [pc, #264]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001db0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001db6:	6093      	str	r3, [r2, #8]
=======
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004834:	4b43      	ldr	r3, [pc, #268]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a42      	ldr	r2, [pc, #264]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800483a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800483e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800484c:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004854:	4a3b      	ldr	r2, [pc, #236]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800485a:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8001db8:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4936      	ldr	r1, [pc, #216]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
 8001dca:	e008      	b.n	8001dde <HAL_RCC_ClockConfig+0x1a2>
=======
 800485c:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4936      	ldr	r1, [pc, #216]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	e008      	b.n	8004882 <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> Stashed changes
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b80      	cmp	r3, #128	@ 0x80
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ddc:	6093      	str	r3, [r2, #8]
=======
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d105      	bne.n	8004882 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4a32      	ldr	r2, [pc, #200]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800487c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004880:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8001dde:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d21d      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 020f 	bic.w	r2, r3, #15
 8001df4:	4929      	ldr	r1, [pc, #164]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
=======
 8004882:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d21d      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 020f 	bic.w	r2, r3, #15
 8004898:	4929      	ldr	r1, [pc, #164]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8001dfc:	f7fe ffae 	bl	8000d5c <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe ffaa 	bl	8000d5c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e03b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1ed      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x1c8>
=======
 80048a0:	f7fd faf0 	bl	8001e84 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd faec 	bl	8001e84 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e03b      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1ed      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4917      	ldr	r1, [pc, #92]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
=======
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4917      	ldr	r1, [pc, #92]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490f      	ldr	r1, [pc, #60]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
=======
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f6:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	490f      	ldr	r1, [pc, #60]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
 8001e66:	f000 f825 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <HAL_RCC_ClockConfig+0x264>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <HAL_RCC_ClockConfig+0x26c>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_RCC_ClockConfig+0x270>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_RCC_ClockConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe5c 	bl	8000b48 <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	04c4b400 	.word	0x04c4b400
 8001ea8:	08006a34 	.word	0x08006a34
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000014 	.word	0x20000014

08001eb4 <HAL_RCC_GetSysClockFreq>:
=======
 800490a:	f000 f825 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	490c      	ldr	r1, [pc, #48]	@ (800494c <HAL_RCC_ClockConfig+0x26c>)
 800491c:	5ccb      	ldrb	r3, [r1, r3]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x270>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800492a:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x274>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd f8ce 	bl	8001ad0 <HAL_InitTick>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40022000 	.word	0x40022000
 8004944:	40021000 	.word	0x40021000
 8004948:	04c4b400 	.word	0x04c4b400
 800494c:	0800c73c 	.word	0x0800c73c
 8004950:	20000014 	.word	0x20000014
 8004954:	20000018 	.word	0x20000018

08004958 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
=======
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< Updated upstream
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e047      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e03e      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d136      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xa4>
=======
 800495e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d102      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e047      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004970:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d102      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800497c:	4b26      	ldr	r3, [pc, #152]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e03e      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d136      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3301      	adds	r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f12:	68d2      	ldr	r2, [r2, #12]
 8001f14:	0a12      	lsrs	r2, r2, #8
 8001f16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
      break;
 8001f20:	e00c      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
=======
 800498e:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3301      	adds	r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	68d2      	ldr	r2, [r2, #12]
 80049b8:	0a12      	lsrs	r2, r2, #8
 80049ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	617b      	str	r3, [r7, #20]
      break;
 80049c4:	e00c      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	0a12      	lsrs	r2, r2, #8
 8001f30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0e5b      	lsrs	r3, r3, #25
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e001      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa8>
=======
 80049c6:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	4a10      	ldr	r2, [pc, #64]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	0a12      	lsrs	r2, r2, #8
 80049d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
      break;
 80049de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	0e5b      	lsrs	r3, r3, #25
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	3301      	adds	r3, #1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e001      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> Stashed changes
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< Updated upstream
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f5c:	693b      	ldr	r3, [r7, #16]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	016e3600 	.word	0x016e3600

08001f78 <HAL_RCC_GetHCLKFreq>:
=======
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a00:	693b      	ldr	r3, [r7, #16]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	016e3600 	.word	0x016e3600

08004a1c <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000010 	.word	0x20000010

08001f90 <HAL_RCC_GetPCLK1Freq>:
=======
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000014 	.word	0x20000014

08004a34 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	08006a44 	.word	0x08006a44

08001fbc <HAL_RCC_GetPCLK2Freq>:
=======
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a38:	f7ff fff0 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4904      	ldr	r1, [pc, #16]	@ (8004a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	0800c74c 	.word	0x0800c74c

08004a60 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc0:	f7ff ffda 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4904      	ldr	r1, [pc, #16]	@ (8001fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08006a44 	.word	0x08006a44

08001fe8 <HAL_RCC_GetClockConfig>:
=======
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a64:	f7ff ffda 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0adb      	lsrs	r3, r3, #11
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800c74c 	.word	0x0800c74c

08004a8c <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
=======
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< Updated upstream
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_GetClockConfig+0x5c>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_RCC_GetClockConfig+0x60>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <RCC_GetSysClockFreqFromPLLSource>:
=======
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	220f      	movs	r2, #15
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0203 	and.w	r2, r3, #3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <HAL_RCC_GetClockConfig+0x60>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40022000 	.word	0x40022000

08004af0 <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
=======
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d10c      	bne.n	800208a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207a:	68d2      	ldr	r2, [r2, #12]
 800207c:	0a12      	lsrs	r2, r2, #8
 800207e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
    break;
 8002088:	e00c      	b.n	80020a4 <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 8004af6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d10c      	bne.n	8004b2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b14:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b1e:	68d2      	ldr	r2, [r2, #12]
 8004b20:	0a12      	lsrs	r2, r2, #8
 8004b22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
    break;
 8004b2c:	e00c      	b.n	8004b48 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< Updated upstream
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	0a12      	lsrs	r2, r2, #8
 8002098:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
    break;
 80020a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0e5b      	lsrs	r3, r3, #25
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020be:	687b      	ldr	r3, [r7, #4]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40021000 	.word	0x40021000
 80020d0:	016e3600 	.word	0x016e3600
 80020d4:	00f42400 	.word	0x00f42400

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004b2e:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	4a0e      	ldr	r2, [pc, #56]	@ (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b38:	68d2      	ldr	r2, [r2, #12]
 8004b3a:	0a12      	lsrs	r2, r2, #8
 8004b3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]
    break;
 8004b46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	0e5b      	lsrs	r3, r3, #25
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b62:	687b      	ldr	r3, [r7, #4]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40021000 	.word	0x40021000
 8004b74:	016e3600 	.word	0x016e3600
 8004b78:	00f42400 	.word	0x00f42400

08004b7c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74bb      	strb	r3, [r7, #18]
=======
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b84:	2300      	movs	r3, #0
 8004b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< Updated upstream
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8098 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	747b      	strb	r3, [r7, #17]
=======
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8098 	beq.w	8004cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	@ 0x58
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	747b      	strb	r3, [r7, #17]
=======
 8004b9e:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	4b40      	ldr	r3, [pc, #256]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	4a3f      	ldr	r2, [pc, #252]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	747b      	strb	r3, [r7, #17]
>>>>>>> Stashed changes
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< Updated upstream
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a39      	ldr	r2, [pc, #228]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212e:	f7fe fe15 	bl	8000d5c <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002134:	e009      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fe11 	bl	8000d5c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d902      	bls.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	74fb      	strb	r3, [r7, #19]
        break;
 8002148:	e005      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214a:	4b30      	ldr	r3, [pc, #192]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ef      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8004bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a39      	ldr	r2, [pc, #228]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd2:	f7fd f957 	bl	8001e84 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd8:	e009      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fd f953 	bl	8001e84 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d902      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	74fb      	strb	r3, [r7, #19]
        break;
 8004bec:	e005      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bee:	4b30      	ldr	r3, [pc, #192]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0ef      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> Stashed changes
      }
    }

    if(ret == HAL_OK)
<<<<<<< Updated upstream
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d159      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002166:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01e      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d159      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c00:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d019      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c1c:	4b23      	ldr	r3, [pc, #140]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c28:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c38:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c48:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> Stashed changes
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< Updated upstream
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fdd1 	bl	8000d5c <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fdcd 	bl	8000d5c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd f913 	bl	8001e84 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	e00b      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd f90f 	bl	8001e84 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d902      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	74fb      	strb	r3, [r7, #19]
            break;
 8004c78:	e006      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ec      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> Stashed changes
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< Updated upstream
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4903      	ldr	r1, [pc, #12]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002200:	e008      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< Updated upstream
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	74bb      	strb	r3, [r7, #18]
 8002206:	e005      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
=======
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	74bb      	strb	r3, [r7, #18]
 8004caa:	e005      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< Updated upstream
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	74bb      	strb	r3, [r7, #18]
=======
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
>>>>>>> Stashed changes
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002214:	7c7b      	ldrb	r3, [r7, #17]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4ba6      	ldr	r3, [pc, #664]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	4aa5      	ldr	r2, [pc, #660]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8004cb8:	7c7b      	ldrb	r3, [r7, #17]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	4aa5      	ldr	r2, [pc, #660]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8002232:	4ba0      	ldr	r3, [pc, #640]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	499c      	ldr	r1, [pc, #624]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004cd6:	4ba0      	ldr	r3, [pc, #640]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cdc:	f023 0203 	bic.w	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	499c      	ldr	r1, [pc, #624]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8002254:	4b97      	ldr	r3, [pc, #604]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 020c 	bic.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4994      	ldr	r1, [pc, #592]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004cf8:	4b97      	ldr	r3, [pc, #604]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 020c 	bic.w	r2, r3, #12
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4994      	ldr	r1, [pc, #592]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8002276:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	498b      	ldr	r1, [pc, #556]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	498b      	ldr	r1, [pc, #556]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 8002298:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	4983      	ldr	r1, [pc, #524]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004d3c:	4b86      	ldr	r3, [pc, #536]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	4983      	ldr	r1, [pc, #524]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< Updated upstream
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< Updated upstream
 80022ba:	4b7e      	ldr	r3, [pc, #504]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	497a      	ldr	r1, [pc, #488]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	497a      	ldr	r1, [pc, #488]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 80022dc:	4b75      	ldr	r3, [pc, #468]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4972      	ldr	r1, [pc, #456]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004d80:	4b75      	ldr	r3, [pc, #468]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4972      	ldr	r1, [pc, #456]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80022fe:	4b6d      	ldr	r3, [pc, #436]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4969      	ldr	r1, [pc, #420]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004da2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4969      	ldr	r1, [pc, #420]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 8002320:	4b64      	ldr	r3, [pc, #400]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4961      	ldr	r1, [pc, #388]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004dc4:	4b64      	ldr	r3, [pc, #400]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4961      	ldr	r1, [pc, #388]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 8002342:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	4958      	ldr	r1, [pc, #352]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8004de6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	4958      	ldr	r1, [pc, #352]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> Stashed changes
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< Updated upstream
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
=======
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	4950      	ldr	r1, [pc, #320]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238e:	60d3      	str	r3, [r2, #12]
=======
 8004e08:	4b53      	ldr	r3, [pc, #332]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	4950      	ldr	r1, [pc, #320]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e28:	4b4b      	ldr	r3, [pc, #300]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e32:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< Updated upstream
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
=======
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 800239c:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	4942      	ldr	r1, [pc, #264]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
=======
 8004e40:	4b45      	ldr	r3, [pc, #276]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4942      	ldr	r1, [pc, #264]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b3d      	ldr	r3, [pc, #244]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a3c      	ldr	r2, [pc, #240]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< Updated upstream
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< Updated upstream
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4934      	ldr	r1, [pc, #208]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
=======
 8004e78:	4b37      	ldr	r3, [pc, #220]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	4934      	ldr	r1, [pc, #208]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< Updated upstream
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241a:	4926      	ldr	r1, [pc, #152]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
=======
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb0:	4b29      	ldr	r3, [pc, #164]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebe:	4926      	ldr	r1, [pc, #152]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b21      	ldr	r3, [pc, #132]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< Updated upstream
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	4918      	ldr	r1, [pc, #96]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
=======
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	4918      	ldr	r1, [pc, #96]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b13      	ldr	r3, [pc, #76]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a12      	ldr	r2, [pc, #72]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< Updated upstream
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
=======
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< Updated upstream
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	490a      	ldr	r1, [pc, #40]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
=======
 8004f20:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	490a      	ldr	r1, [pc, #40]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a04      	ldr	r2, [pc, #16]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4a:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< Updated upstream
 80024a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_Init>:
=======
 8004f4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000

08004f5c <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
=======
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e049      	b.n	8005002 <HAL_TIM_Base_Init+0xa6>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f841 	bl	8002566 <HAL_TIM_Base_MspInit>
=======
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fd7e 	bl	8001a84 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fa22 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_TIM_Base_Start_IT>:
=======
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fb40 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
=======
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e04a      	b.n	800262a <HAL_TIM_Base_Start_IT+0xae>
=======
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04a      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xae>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_TIM_Base_Start_IT+0xbc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d013      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <HAL_TIM_Base_Start_IT+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <HAL_TIM_Base_Start_IT+0xc4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_TIM_Base_Start_IT+0xc8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x6c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_TIM_Base_Start_IT+0xcc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d115      	bne.n	8002614 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_TIM_Base_Start_IT+0xd0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d015      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002600:	d011      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002612:	e008      	b.n	8002626 <HAL_TIM_Base_Start_IT+0xaa>
=======
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a21      	ldr	r2, [pc, #132]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x6c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x6c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <HAL_TIM_Base_Start_IT+0xc0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x6c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x6c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x6c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <HAL_TIM_Base_Start_IT+0xd0>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xaa>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xaa>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e000      	b.n	8002628 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	bf00      	nop
=======
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800
 8002644:	40013400 	.word	0x40013400
 8002648:	40014000 	.word	0x40014000
 800264c:	00010007 	.word	0x00010007

08002650 <HAL_TIM_IRQHandler>:
=======
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	00010007 	.word	0x00010007

080050e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <HAL_TIM_Base_Stop_IT+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_TIM_Base_Stop_IT+0x48>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0202 	mvn.w	r2, #2
 8002684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x52>
=======
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01b      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0202 	mvn.w	r2, #2
 8005172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_IRQHandler+0x52>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f931 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x5e>
=======
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fa2b 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 800518e:	e005      	b.n	800519c <HAL_TIM_IRQHandler+0x5e>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f923 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f934 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
=======
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fa1d 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa2e 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< Updated upstream
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0204 	mvn.w	r2, #4
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x9e>
=======
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01b      	beq.n	80051ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f06f 0204 	mvn.w	r2, #4
 80051be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f90b 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xaa>
=======
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fa05 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 80051da:	e005      	b.n	80051e8 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8fd 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f90e 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
=======
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f9f7 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa08 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< Updated upstream
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d020      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xea>
=======
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01b      	beq.n	800523a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0208 	mvn.w	r2, #8
 800520a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_TIM_IRQHandler+0xea>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8e5 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xf6>
=======
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9df 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8005226:	e005      	b.n	8005234 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8d7 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8e8 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
=======
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9d1 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9e2 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< Updated upstream
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2208      	movs	r2, #8
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x136>
=======
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0210 	mvn.w	r2, #16
 8005256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2208      	movs	r2, #8
 800525c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_TIM_IRQHandler+0x136>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8bf 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x142>
=======
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9b9 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8005272:	e005      	b.n	8005280 <HAL_TIM_IRQHandler+0x142>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8b1 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8c2 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
=======
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f9ab 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9bc 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< Updated upstream
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0201 	mvn.w	r2, #1
 80027b4:	611a      	str	r2, [r3, #16]
=======
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0201 	mvn.w	r2, #1
 80052a2:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f924 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
=======
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fc fad7 	bl	8001858 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
<<<<<<< Updated upstream
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80027e2:	611a      	str	r2, [r3, #16]
=======
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052d0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f951 	bl	8002a8c <HAL_TIMEx_BreakCallback>
=======
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fb68 	bl	80059a8 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< Updated upstream
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002806:	611a      	str	r2, [r3, #16]
=======
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00c      	beq.n	80052fc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052f4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f949 	bl	8002aa0 <HAL_TIMEx_Break2Callback>
=======
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fb60 	bl	80059bc <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< Updated upstream
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00c      	beq.n	8002832 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800282a:	611a      	str	r2, [r3, #16]
=======
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005318:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f87c 	bl	800292a <HAL_TIM_TriggerCallback>
=======
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f976 	bl	800560c <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< Updated upstream
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0220 	mvn.w	r2, #32
 800284e:	611a      	str	r2, [r3, #16]
=======
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0220 	mvn.w	r2, #32
 800533c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f911 	bl	8002a78 <HAL_TIMEx_CommutCallback>
=======
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb28 	bl	8005994 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
<<<<<<< Updated upstream
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002872:	611a      	str	r2, [r3, #16]
=======
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005360:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
<<<<<<< Updated upstream
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f91d 	bl	8002ab4 <HAL_TIMEx_EncoderIndexCallback>
=======
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fb34 	bl	80059d0 <HAL_TIMEx_EncoderIndexCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
<<<<<<< Updated upstream
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00c      	beq.n	800289e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002896:	611a      	str	r2, [r3, #16]
=======
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005384:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
<<<<<<< Updated upstream
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f915 	bl	8002ac8 <HAL_TIMEx_DirectionChangeCallback>
=======
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fb2c 	bl	80059e4 <HAL_TIMEx_DirectionChangeCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
<<<<<<< Updated upstream
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80028ba:	611a      	str	r2, [r3, #16]
=======
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80053a8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
<<<<<<< Updated upstream
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f90d 	bl	8002adc <HAL_TIMEx_IndexErrorCallback>
=======
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fb24 	bl	80059f8 <HAL_TIMEx_IndexErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
<<<<<<< Updated upstream
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80028de:	611a      	str	r2, [r3, #16]
=======
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80053cc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
<<<<<<< Updated upstream
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f905 	bl	8002af0 <HAL_TIMEx_TransitionErrorCallback>
=======
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb1c 	bl	8005a0c <HAL_TIMEx_TransitionErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIM_ConfigClockSource+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0de      	b.n	80055b6 <HAL_TIM_ConfigClockSource+0x1da>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005416:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800541a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a63      	ldr	r2, [pc, #396]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 80a9 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 8005438:	4a61      	ldr	r2, [pc, #388]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f200 80ae 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 8005440:	4a60      	ldr	r2, [pc, #384]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f000 80a1 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 8005448:	4a5e      	ldr	r2, [pc, #376]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f200 80a6 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 8005450:	4a5d      	ldr	r2, [pc, #372]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f000 8099 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 8005458:	4a5b      	ldr	r2, [pc, #364]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f200 809e 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 8005460:	4a5a      	ldr	r2, [pc, #360]	@ (80055cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f000 8091 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 8005468:	4a58      	ldr	r2, [pc, #352]	@ (80055cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f200 8096 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 8005470:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005474:	f000 8089 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 8005478:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800547c:	f200 808e 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005484:	d03e      	beq.n	8005504 <HAL_TIM_ConfigClockSource+0x128>
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548a:	f200 8087 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005492:	f000 8086 	beq.w	80055a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800549a:	d87f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 800549c:	2b70      	cmp	r3, #112	@ 0x70
 800549e:	d01a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0xfa>
 80054a0:	2b70      	cmp	r3, #112	@ 0x70
 80054a2:	d87b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054a4:	2b60      	cmp	r3, #96	@ 0x60
 80054a6:	d050      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x16e>
 80054a8:	2b60      	cmp	r3, #96	@ 0x60
 80054aa:	d877      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054ac:	2b50      	cmp	r3, #80	@ 0x50
 80054ae:	d03c      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x14e>
 80054b0:	2b50      	cmp	r3, #80	@ 0x50
 80054b2:	d873      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d058      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x18e>
 80054b8:	2b40      	cmp	r3, #64	@ 0x40
 80054ba:	d86f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054bc:	2b30      	cmp	r3, #48	@ 0x30
 80054be:	d064      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d86b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d060      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d867      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05c      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d05a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1ae>
 80054d4:	e062      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	f000 f9b3 	bl	8005850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	609a      	str	r2, [r3, #8]
      break;
 8005502:	e04f      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	f000 f99c 	bl	8005850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e03c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	461a      	mov	r2, r3
 8005538:	f000 f90e 	bl	8005758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2150      	movs	r1, #80	@ 0x50
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f967 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 8005548:	e02c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005556:	461a      	mov	r2, r3
 8005558:	f000 f92d 	bl	80057b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2160      	movs	r1, #96	@ 0x60
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f957 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 8005568:	e01c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	461a      	mov	r2, r3
 8005578:	f000 f8ee 	bl	8005758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2140      	movs	r1, #64	@ 0x40
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f947 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 8005588:	e00c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f000 f93e 	bl	8005816 <TIM_ITRx_SetConfig>
      break;
 800559a:	e003      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
      break;
 80055a0:	e000      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80055a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	00100070 	.word	0x00100070
 80055c4:	00100040 	.word	0x00100040
 80055c8:	00100030 	.word	0x00100030
 80055cc:	00100020 	.word	0x00100020

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
=======
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_IC_CaptureCallback>:
=======
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
=======
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
=======
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_TriggerCallback>:
=======
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
=======
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
=======
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00f      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295e:	d00b      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3f      	ldr	r2, [pc, #252]	@ (8002a60 <TIM_Base_SetConfig+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a64 <TIM_Base_SetConfig+0x124>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <TIM_Base_SetConfig+0x38>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3d      	ldr	r2, [pc, #244]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a33      	ldr	r2, [pc, #204]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01b      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002998:	d017      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <TIM_Base_SetConfig+0x120>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <TIM_Base_SetConfig+0x124>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00f      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0x8a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
=======
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a42      	ldr	r2, [pc, #264]	@ (800573c <TIM_Base_SetConfig+0x11c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3f      	ldr	r2, [pc, #252]	@ (8005740 <TIM_Base_SetConfig+0x120>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3e      	ldr	r2, [pc, #248]	@ (8005744 <TIM_Base_SetConfig+0x124>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3d      	ldr	r2, [pc, #244]	@ (8005748 <TIM_Base_SetConfig+0x128>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a33      	ldr	r2, [pc, #204]	@ (800573c <TIM_Base_SetConfig+0x11c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a30      	ldr	r2, [pc, #192]	@ (8005740 <TIM_Base_SetConfig+0x120>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2f      	ldr	r2, [pc, #188]	@ (8005744 <TIM_Base_SetConfig+0x124>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2e      	ldr	r2, [pc, #184]	@ (8005748 <TIM_Base_SetConfig+0x128>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2c      	ldr	r2, [pc, #176]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <TIM_Base_SetConfig+0x11c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00f      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <TIM_Base_SetConfig+0x128>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a16      	ldr	r2, [pc, #88]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a15      	ldr	r2, [pc, #84]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0xe8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d103      	bne.n	8002a30 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a16      	ldr	r2, [pc, #88]	@ (800573c <TIM_Base_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00f      	beq.n	8005708 <TIM_Base_SetConfig+0xe8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <TIM_Base_SetConfig+0x128>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_Base_SetConfig+0xe8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a16      	ldr	r2, [pc, #88]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_Base_SetConfig+0xe8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0xe8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	40014400 	.word	0x40014400
 8002a74:	40014800 	.word	0x40014800

08002a78 <HAL_TIMEx_CommutCallback>:
=======
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]
  }
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800

08005758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b087      	sub	sp, #28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f023 0210 	bic.w	r2, r3, #16
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800582c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	f043 0307 	orr.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	021a      	lsls	r2, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	431a      	orrs	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e065      	b.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1b      	ldr	r2, [pc, #108]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591e:	d013      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a17      	ldr	r2, [pc, #92]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a12      	ldr	r2, [pc, #72]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10c      	bne.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40014000 	.word	0x40014000

08005994 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
=======
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_BreakCallback>:
=======
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
=======
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIMEx_Break2Callback>:
=======
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
=======
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIMEx_EncoderIndexCallback>:
=======
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> Stashed changes
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
=======
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_DirectionChangeCallback>:
=======
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> Stashed changes
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
=======
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIMEx_IndexErrorCallback>:
=======
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
=======
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_TransitionErrorCallback>:
=======
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> Stashed changes
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
=======
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_UART_Init>:
=======
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e042      	b.n	8002b9c <HAL_UART_Init+0x98>
=======
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e042      	b.n	8005ab8 <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7fd ffad 	bl	8000a88 <HAL_UART_MspInit>
=======
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fb ffbd 	bl	80019c4 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
=======
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	@ 0x24
 8005a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< Updated upstream
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fee0 	bl	8003914 <UART_AdvFeatureConfig>
=======
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fee0 	bl	8006830 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< Updated upstream
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fc11 	bl	800337c <UART_SetConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e01b      	b.n	8002b9c <HAL_UART_Init+0x98>
=======
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc11 	bl	8006298 <UART_SetConfig>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e01b      	b.n	8005ab8 <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 ff5f 	bl	8003a58 <UART_CheckIdleState>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Transmit_IT>:
=======
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff5f 	bl	8006974 <UART_CheckIdleState>
 8005ab6:	4603      	mov	r3, r0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8002ba4:	b480      	push	{r7}
 8002ba6:	b091      	sub	sp, #68	@ 0x44
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d178      	bne.n	8002cae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Transmit_IT+0x24>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e071      	b.n	8002cb0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	@ 0x21
 8002bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c00:	d12a      	bne.n	8002c58 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0a:	d107      	bne.n	8002c1c <HAL_UART_Transmit_IT+0x78>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a29      	ldr	r2, [pc, #164]	@ (8002cbc <HAL_UART_Transmit_IT+0x118>)
 8002c18:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c1a:	e002      	b.n	8002c22 <HAL_UART_Transmit_IT+0x7e>
=======
 8005ac0:	b480      	push	{r7}
 8005ac2:	b091      	sub	sp, #68	@ 0x44
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	2b20      	cmp	r3, #32
 8005ad6:	d178      	bne.n	8005bca <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_UART_Transmit_IT+0x24>
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e071      	b.n	8005bcc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2221      	movs	r2, #33	@ 0x21
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1c:	d12a      	bne.n	8005b74 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	d107      	bne.n	8005b38 <HAL_UART_Transmit_IT+0x78>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a29      	ldr	r2, [pc, #164]	@ (8005bd8 <HAL_UART_Transmit_IT+0x118>)
 8005b34:	679a      	str	r2, [r3, #120]	@ 0x78
 8005b36:	e002      	b.n	8005b3e <HAL_UART_Transmit_IT+0x7e>
>>>>>>> Stashed changes
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
<<<<<<< Updated upstream
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <HAL_UART_Transmit_IT+0x11c>)
 8002c20:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a28      	ldr	r2, [pc, #160]	@ (8005bdc <HAL_UART_Transmit_IT+0x11c>)
 8005b3c:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
<<<<<<< Updated upstream
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c42:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b60:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 8002c46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <HAL_UART_Transmit_IT+0x7e>
 8002c56:	e028      	b.n	8002caa <HAL_UART_Transmit_IT+0x106>
=======
 8005b62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <HAL_UART_Transmit_IT+0x7e>
 8005b72:	e028      	b.n	8005bc6 <HAL_UART_Transmit_IT+0x106>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< Updated upstream
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c60:	d107      	bne.n	8002c72 <HAL_UART_Transmit_IT+0xce>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_UART_Transmit_IT+0x120>)
 8002c6e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c70:	e002      	b.n	8002c78 <HAL_UART_Transmit_IT+0xd4>
=======
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7c:	d107      	bne.n	8005b8e <HAL_UART_Transmit_IT+0xce>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <HAL_UART_Transmit_IT+0x120>)
 8005b8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8005b8c:	e002      	b.n	8005b94 <HAL_UART_Transmit_IT+0xd4>
>>>>>>> Stashed changes
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
<<<<<<< Updated upstream
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_UART_Transmit_IT+0x124>)
 8002c76:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <HAL_UART_Transmit_IT+0x124>)
 8005b92:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
<<<<<<< Updated upstream
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e6      	bne.n	8002c78 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit_IT+0x10c>
=======
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb2:	623b      	str	r3, [r7, #32]
 8005bb4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	69f9      	ldr	r1, [r7, #28]
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e6      	bne.n	8005b94 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <HAL_UART_Transmit_IT+0x10c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3744      	adds	r7, #68	@ 0x44
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	08003fd1 	.word	0x08003fd1
 8002cc0:	08003ef1 	.word	0x08003ef1
 8002cc4:	08003e2f 	.word	0x08003e2f
 8002cc8:	08003d77 	.word	0x08003d77

08002ccc <HAL_UART_IRQHandler>:
=======
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3744      	adds	r7, #68	@ 0x44
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	08006eed 	.word	0x08006eed
 8005bdc:	08006e0d 	.word	0x08006e0d
 8005be0:	08006d4b 	.word	0x08006d4b
 8005be4:	08006c93 	.word	0x08006c93

08005be8 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	@ 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b0ba      	sub	sp, #232	@ 0xe8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 8002cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002cf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11b      	bne.n	8002d40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8300 	beq.w	8003336 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
      }
      return;
 8002d3e:	e2fa      	b.n	8003336 <HAL_UART_IRQHandler+0x66a>
=======
 8005c0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c16:	4013      	ands	r3, r2
 8005c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11b      	bne.n	8005c5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8300 	beq.w	8006252 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      }
      return;
 8005c5a:	e2fa      	b.n	8006252 <HAL_UART_IRQHandler+0x66a>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 8002d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8123 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <HAL_UART_IRQHandler+0x2bc>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8116 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8005c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8123 	beq.w	8005eac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ea0 <HAL_UART_IRQHandler+0x2b8>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c76:	4b8b      	ldr	r3, [pc, #556]	@ (8005ea4 <HAL_UART_IRQHandler+0x2bc>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8116 	beq.w	8005eac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xc8>
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d011      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8005cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d011      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xf8>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
 8002dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2204      	movs	r2, #4
 8002de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d011      	beq.n	8005d10 <HAL_UART_IRQHandler+0x128>
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 8002df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002e10:	4b5c      	ldr	r3, [pc, #368]	@ (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002e12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f043 0208 	orr.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea0 <HAL_UART_IRQHandler+0x2b8>)
 8005d2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_UART_IRQHandler+0x196>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d74:	f043 0220 	orr.w	r2, r3, #32
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8266 	beq.w	800333a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
=======
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8266 	beq.w	8006256 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d013      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d054      	beq.n	8002f70 <HAL_UART_IRQHandler+0x2a4>
=======
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d054      	beq.n	8005e8c <HAL_UART_IRQHandler+0x2a4>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fedd 	bl	8003c86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d146      	bne.n	8002f68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_UART_IRQHandler+0x294>
=======
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fedd 	bl	8006ba2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b40      	cmp	r3, #64	@ 0x40
 8005df4:	d146      	bne.n	8005e84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1d9      	bne.n	8005df6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_UART_IRQHandler+0x294>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_UART_IRQHandler+0x2c0>)
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f882 	bl	800104a <HAL_DMA_Abort_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d019      	beq.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5e:	e00f      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <HAL_UART_IRQHandler+0x2c0>)
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd fe46 	bl	8003aee <HAL_DMA_Abort_IT>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d019      	beq.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005e76:	4610      	mov	r0, r2
 8005e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	e00f      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9f5 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f66:	e00b      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f9f5 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e82:	e00b      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9f1 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6e:	e007      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
=======
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f9f1 	bl	800626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8a:	e007      	b.n	8005e9c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9ed 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002f7e:	e1dc      	b.n	800333a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	bf00      	nop
    return;
 8002f82:	e1da      	b.n	800333a <HAL_UART_IRQHandler+0x66e>
 8002f84:	10000001 	.word	0x10000001
 8002f88:	04000120 	.word	0x04000120
 8002f8c:	08003d53 	.word	0x08003d53
=======
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9ed 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e9a:	e1dc      	b.n	8006256 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	bf00      	nop
    return;
 8005e9e:	e1da      	b.n	8006256 <HAL_UART_IRQHandler+0x66e>
 8005ea0:	10000001 	.word	0x10000001
 8005ea4:	04000120 	.word	0x04000120
 8005ea8:	08006c6f 	.word	0x08006c6f
>>>>>>> Stashed changes

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8170 	bne.w	800327a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8169 	beq.w	800327a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8162 	beq.w	800327a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	f040 80d8 	bne.w	800317e <HAL_UART_IRQHandler+0x4b2>
=======
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 8170 	bne.w	8006196 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8169 	beq.w	8006196 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8162 	beq.w	8006196 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	f040 80d8 	bne.w	800609a <HAL_UART_IRQHandler+0x4b2>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80af 	beq.w	8003144 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002fec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f080 80a7 	bcs.w	8003144 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 8087 	bne.w	8003122 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003028:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800302c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800303e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003042:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800304a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1da      	bne.n	8003014 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800306e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3308      	adds	r3, #8
 800307e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003082:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003086:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800308a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e1      	bne.n	800305e <HAL_UART_IRQHandler+0x392>
=======
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80af 	beq.w	8006060 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	f080 80a7 	bcs.w	8006060 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 8087 	bne.w	800603e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1da      	bne.n	8005f30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e1      	bne.n	8005f7a <HAL_UART_IRQHandler+0x392>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3308      	adds	r3, #8
 80030ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e3      	bne.n	800309a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003102:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003104:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd ff3b 	bl	8000f98 <HAL_DMA_Abort>
=======
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e3      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800600a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006020:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800602c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e4      	bne.n	8005ffc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd fcff 	bl	8003a3c <HAL_DMA_Abort>
>>>>>>> Stashed changes
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003134:	b29b      	uxth	r3, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f911 	bl	8003364 <HAL_UARTEx_RxEventCallback>
=======
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f911 	bl	8006280 <HAL_UARTEx_RxEventCallback>
>>>>>>> Stashed changes
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
<<<<<<< Updated upstream
 8003142:	e0fc      	b.n	800333e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800314a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800314e:	429a      	cmp	r2, r3
 8003150:	f040 80f5 	bne.w	800333e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80eb 	bne.w	800333e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8f4 	bl	8003364 <HAL_UARTEx_RxEventCallback>
      return;
 800317c:	e0df      	b.n	800333e <HAL_UART_IRQHandler+0x672>
=======
 800605e:	e0fc      	b.n	800625a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800606a:	429a      	cmp	r2, r3
 800606c:	f040 80f5 	bne.w	800625a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	f040 80eb 	bne.w	800625a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8f4 	bl	8006280 <HAL_UARTEx_RxEventCallback>
      return;
 8006098:	e0df      	b.n	800625a <HAL_UART_IRQHandler+0x672>
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800318a:	b29b      	uxth	r3, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80d1 	beq.w	8003342 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80031a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80cc 	beq.w	8003342 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e4      	bne.n	80031aa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	623b      	str	r3, [r7, #32]
   return(result);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003208:	633a      	str	r2, [r7, #48]	@ 0x30
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800320e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e1      	bne.n	80031e0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	60fb      	str	r3, [r7, #12]
   return(result);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	617b      	str	r3, [r7, #20]
   return(result);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e4      	bne.n	8003230 <HAL_UART_IRQHandler+0x564>
=======
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80d1 	beq.w	800625e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80060bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80cc 	beq.w	800625e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	623b      	str	r3, [r7, #32]
   return(result);
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006124:	633a      	str	r2, [r7, #48]	@ 0x30
 8006126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800612a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	617b      	str	r3, [r7, #20]
   return(result);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e4      	bne.n	800614c <HAL_UART_IRQHandler+0x564>
>>>>>>> Stashed changes

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< Updated upstream
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 800326c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f876 	bl	8003364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003278:	e063      	b.n	8003342 <HAL_UART_IRQHandler+0x676>
=======
 8006188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f876 	bl	8006280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006194:	e063      	b.n	800625e <HAL_UART_IRQHandler+0x676>
>>>>>>> Stashed changes
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< Updated upstream
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x5d8>
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800329a:	621a      	str	r2, [r3, #32]
=======
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5d8>
 80061a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061b6:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< Updated upstream
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff37 	bl	8004110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032a2:	e051      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 ff37 	bl	800702c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061be:	e051      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< Updated upstream
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d014      	beq.n	80032da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d03a      	beq.n	8003346 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
    }
    return;
 80032d8:	e035      	b.n	8003346 <HAL_UART_IRQHandler+0x67a>
=======
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d03a      	beq.n	8006262 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
    }
    return;
 80061f4:	e035      	b.n	8006262 <HAL_UART_IRQHandler+0x67a>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_UART_IRQHandler+0x62e>
 80032e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fee1 	bl	80040ba <UART_EndTransmit_IT>
    return;
 80032f8:	e026      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <HAL_UART_IRQHandler+0x62e>
 8006202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fee1 	bl	8006fd6 <UART_EndTransmit_IT>
    return;
 8006214:	e026      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< Updated upstream
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_UART_IRQHandler+0x64e>
 8003306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800330a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_UART_IRQHandler+0x64e>
=======
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_UART_IRQHandler+0x64e>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006226:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_UART_IRQHandler+0x64e>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< Updated upstream
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 ff10 	bl	8004138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003318:	e016      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ff10 	bl	8007054 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006234:	e016      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< Updated upstream
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_UART_IRQHandler+0x67c>
 8003326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0c      	bge.n	8003348 <HAL_UART_IRQHandler+0x67c>
=======
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_UART_IRQHandler+0x67c>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006246:	2b00      	cmp	r3, #0
 8006248:	da0c      	bge.n	8006264 <HAL_UART_IRQHandler+0x67c>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< Updated upstream
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fef8 	bl	8004124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003334:	e008      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 8003336:	bf00      	nop
 8003338:	e006      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
    return;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
      return;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_UART_IRQHandler+0x67c>
    return;
 8003346:	bf00      	nop
  }
}
 8003348:	37e8      	adds	r7, #232	@ 0xe8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop

08003350 <HAL_UART_ErrorCallback>:
=======
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fef8 	bl	8007040 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006250:	e008      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 8006252:	bf00      	nop
 8006254:	e006      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
    return;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
      return;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_UART_IRQHandler+0x67c>
    return;
 8006262:	bf00      	nop
  }
}
 8006264:	37e8      	adds	r7, #232	@ 0xe8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop

0800626c <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
=======
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UARTEx_RxEventCallback>:
=======
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
=======
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <UART_SetConfig>:
=======
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b08c      	sub	sp, #48	@ 0x30
 8003382:	af00      	add	r7, sp, #0
 8003384:	6178      	str	r0, [r7, #20]
=======
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b08c      	sub	sp, #48	@ 0x30
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< Updated upstream
 8003386:	2300      	movs	r3, #0
 8003388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	431a      	orrs	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4bab      	ldr	r3, [pc, #684]	@ (8003658 <UART_SetConfig+0x2dc>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6013      	str	r3, [r2, #0]
=======
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4bab      	ldr	r3, [pc, #684]	@ (8006574 <UART_SetConfig+0x2dc>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
=======
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4aa0      	ldr	r2, [pc, #640]	@ (800365c <UART_SetConfig+0x2e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e4:	4313      	orrs	r3, r2
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80033f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6093      	str	r3, [r2, #8]
=======
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4aa0      	ldr	r2, [pc, #640]	@ (8006578 <UART_SetConfig+0x2e0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006300:	4313      	orrs	r3, r2
 8006302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800630e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006318:	430b      	orrs	r3, r1
 800631a:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< Updated upstream
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	f023 010f 	bic.w	r1, r3, #15
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a91      	ldr	r2, [pc, #580]	@ (8003660 <UART_SetConfig+0x2e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d125      	bne.n	800346c <UART_SetConfig+0xf0>
 8003420:	4b90      	ldr	r3, [pc, #576]	@ (8003664 <UART_SetConfig+0x2e8>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b03      	cmp	r3, #3
 800342c:	d81a      	bhi.n	8003464 <UART_SetConfig+0xe8>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <UART_SetConfig+0xb8>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	08003455 	.word	0x08003455
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345d 	.word	0x0800345d
 8003444:	2301      	movs	r3, #1
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344a:	e0d6      	b.n	80035fa <UART_SetConfig+0x27e>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003452:	e0d2      	b.n	80035fa <UART_SetConfig+0x27e>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345a:	e0ce      	b.n	80035fa <UART_SetConfig+0x27e>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003462:	e0ca      	b.n	80035fa <UART_SetConfig+0x27e>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800346a:	e0c6      	b.n	80035fa <UART_SetConfig+0x27e>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	@ (8003668 <UART_SetConfig+0x2ec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d138      	bne.n	80034e8 <UART_SetConfig+0x16c>
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <UART_SetConfig+0x2e8>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d82d      	bhi.n	80034e0 <UART_SetConfig+0x164>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <UART_SetConfig+0x110>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034e1 	.word	0x080034e1
 8003494:	080034e1 	.word	0x080034e1
 8003498:	080034e1 	.word	0x080034e1
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034e1 	.word	0x080034e1
 80034a4:	080034e1 	.word	0x080034e1
 80034a8:	080034e1 	.word	0x080034e1
 80034ac:	080034c9 	.word	0x080034c9
 80034b0:	080034e1 	.word	0x080034e1
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034d9 	.word	0x080034d9
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c6:	e098      	b.n	80035fa <UART_SetConfig+0x27e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	e094      	b.n	80035fa <UART_SetConfig+0x27e>
 80034d0:	2304      	movs	r3, #4
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d6:	e090      	b.n	80035fa <UART_SetConfig+0x27e>
 80034d8:	2308      	movs	r3, #8
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034de:	e08c      	b.n	80035fa <UART_SetConfig+0x27e>
 80034e0:	2310      	movs	r3, #16
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e6:	e088      	b.n	80035fa <UART_SetConfig+0x27e>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5f      	ldr	r2, [pc, #380]	@ (800366c <UART_SetConfig+0x2f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d125      	bne.n	800353e <UART_SetConfig+0x1c2>
 80034f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003664 <UART_SetConfig+0x2e8>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034fc:	2b30      	cmp	r3, #48	@ 0x30
 80034fe:	d016      	beq.n	800352e <UART_SetConfig+0x1b2>
 8003500:	2b30      	cmp	r3, #48	@ 0x30
 8003502:	d818      	bhi.n	8003536 <UART_SetConfig+0x1ba>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d00a      	beq.n	800351e <UART_SetConfig+0x1a2>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d814      	bhi.n	8003536 <UART_SetConfig+0x1ba>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <UART_SetConfig+0x19a>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d008      	beq.n	8003526 <UART_SetConfig+0x1aa>
 8003514:	e00f      	b.n	8003536 <UART_SetConfig+0x1ba>
 8003516:	2300      	movs	r3, #0
 8003518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351c:	e06d      	b.n	80035fa <UART_SetConfig+0x27e>
 800351e:	2302      	movs	r3, #2
 8003520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003524:	e069      	b.n	80035fa <UART_SetConfig+0x27e>
 8003526:	2304      	movs	r3, #4
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352c:	e065      	b.n	80035fa <UART_SetConfig+0x27e>
 800352e:	2308      	movs	r3, #8
 8003530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003534:	e061      	b.n	80035fa <UART_SetConfig+0x27e>
 8003536:	2310      	movs	r3, #16
 8003538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353c:	e05d      	b.n	80035fa <UART_SetConfig+0x27e>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4b      	ldr	r2, [pc, #300]	@ (8003670 <UART_SetConfig+0x2f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d125      	bne.n	8003594 <UART_SetConfig+0x218>
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <UART_SetConfig+0x2e8>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003552:	2bc0      	cmp	r3, #192	@ 0xc0
 8003554:	d016      	beq.n	8003584 <UART_SetConfig+0x208>
 8003556:	2bc0      	cmp	r3, #192	@ 0xc0
 8003558:	d818      	bhi.n	800358c <UART_SetConfig+0x210>
 800355a:	2b80      	cmp	r3, #128	@ 0x80
 800355c:	d00a      	beq.n	8003574 <UART_SetConfig+0x1f8>
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d814      	bhi.n	800358c <UART_SetConfig+0x210>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <UART_SetConfig+0x1f0>
 8003566:	2b40      	cmp	r3, #64	@ 0x40
 8003568:	d008      	beq.n	800357c <UART_SetConfig+0x200>
 800356a:	e00f      	b.n	800358c <UART_SetConfig+0x210>
 800356c:	2300      	movs	r3, #0
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003572:	e042      	b.n	80035fa <UART_SetConfig+0x27e>
 8003574:	2302      	movs	r3, #2
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357a:	e03e      	b.n	80035fa <UART_SetConfig+0x27e>
 800357c:	2304      	movs	r3, #4
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003582:	e03a      	b.n	80035fa <UART_SetConfig+0x27e>
 8003584:	2308      	movs	r3, #8
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358a:	e036      	b.n	80035fa <UART_SetConfig+0x27e>
 800358c:	2310      	movs	r3, #16
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003592:	e032      	b.n	80035fa <UART_SetConfig+0x27e>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	@ (800365c <UART_SetConfig+0x2e0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12a      	bne.n	80035f4 <UART_SetConfig+0x278>
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <UART_SetConfig+0x2e8>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ac:	d01a      	beq.n	80035e4 <UART_SetConfig+0x268>
 80035ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035b2:	d81b      	bhi.n	80035ec <UART_SetConfig+0x270>
 80035b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035b8:	d00c      	beq.n	80035d4 <UART_SetConfig+0x258>
 80035ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035be:	d815      	bhi.n	80035ec <UART_SetConfig+0x270>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <UART_SetConfig+0x250>
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c8:	d008      	beq.n	80035dc <UART_SetConfig+0x260>
 80035ca:	e00f      	b.n	80035ec <UART_SetConfig+0x270>
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035d2:	e012      	b.n	80035fa <UART_SetConfig+0x27e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035da:	e00e      	b.n	80035fa <UART_SetConfig+0x27e>
 80035dc:	2304      	movs	r3, #4
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035e2:	e00a      	b.n	80035fa <UART_SetConfig+0x27e>
 80035e4:	2308      	movs	r3, #8
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	e006      	b.n	80035fa <UART_SetConfig+0x27e>
 80035ec:	2310      	movs	r3, #16
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f2:	e002      	b.n	80035fa <UART_SetConfig+0x27e>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <UART_SetConfig+0x2e0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 80a8 	bne.w	8003756 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003606:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800360a:	2b08      	cmp	r3, #8
 800360c:	d834      	bhi.n	8003678 <UART_SetConfig+0x2fc>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <UART_SetConfig+0x298>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003639 	.word	0x08003639
 8003618:	08003679 	.word	0x08003679
 800361c:	08003641 	.word	0x08003641
 8003620:	08003679 	.word	0x08003679
 8003624:	08003647 	.word	0x08003647
 8003628:	08003679 	.word	0x08003679
 800362c:	08003679 	.word	0x08003679
 8003630:	08003679 	.word	0x08003679
 8003634:	0800364f 	.word	0x0800364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fcaa 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800363e:	e021      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <UART_SetConfig+0x2f8>)
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003644:	e01e      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7fe fc35 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800364c:	e01a      	b.n	8003684 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003654:	e016      	b.n	8003684 <UART_SetConfig+0x308>
 8003656:	bf00      	nop
 8003658:	cfff69f3 	.word	0xcfff69f3
 800365c:	40008000 	.word	0x40008000
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	40004800 	.word	0x40004800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003682:	bf00      	nop
=======
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	f023 010f 	bic.w	r1, r3, #15
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a91      	ldr	r2, [pc, #580]	@ (800657c <UART_SetConfig+0x2e4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d125      	bne.n	8006388 <UART_SetConfig+0xf0>
 800633c:	4b90      	ldr	r3, [pc, #576]	@ (8006580 <UART_SetConfig+0x2e8>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b03      	cmp	r3, #3
 8006348:	d81a      	bhi.n	8006380 <UART_SetConfig+0xe8>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <UART_SetConfig+0xb8>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	08006371 	.word	0x08006371
 8006358:	08006369 	.word	0x08006369
 800635c:	08006379 	.word	0x08006379
 8006360:	2301      	movs	r3, #1
 8006362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006366:	e0d6      	b.n	8006516 <UART_SetConfig+0x27e>
 8006368:	2302      	movs	r3, #2
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636e:	e0d2      	b.n	8006516 <UART_SetConfig+0x27e>
 8006370:	2304      	movs	r3, #4
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006376:	e0ce      	b.n	8006516 <UART_SetConfig+0x27e>
 8006378:	2308      	movs	r3, #8
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637e:	e0ca      	b.n	8006516 <UART_SetConfig+0x27e>
 8006380:	2310      	movs	r3, #16
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006386:	e0c6      	b.n	8006516 <UART_SetConfig+0x27e>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7d      	ldr	r2, [pc, #500]	@ (8006584 <UART_SetConfig+0x2ec>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d138      	bne.n	8006404 <UART_SetConfig+0x16c>
 8006392:	4b7b      	ldr	r3, [pc, #492]	@ (8006580 <UART_SetConfig+0x2e8>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b0c      	cmp	r3, #12
 800639e:	d82d      	bhi.n	80063fc <UART_SetConfig+0x164>
 80063a0:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <UART_SetConfig+0x110>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	080063fd 	.word	0x080063fd
 80063b4:	080063fd 	.word	0x080063fd
 80063b8:	080063ed 	.word	0x080063ed
 80063bc:	080063fd 	.word	0x080063fd
 80063c0:	080063fd 	.word	0x080063fd
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	080063fd 	.word	0x080063fd
 80063d8:	080063f5 	.word	0x080063f5
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e2:	e098      	b.n	8006516 <UART_SetConfig+0x27e>
 80063e4:	2302      	movs	r3, #2
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ea:	e094      	b.n	8006516 <UART_SetConfig+0x27e>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063f2:	e090      	b.n	8006516 <UART_SetConfig+0x27e>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fa:	e08c      	b.n	8006516 <UART_SetConfig+0x27e>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006402:	e088      	b.n	8006516 <UART_SetConfig+0x27e>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a5f      	ldr	r2, [pc, #380]	@ (8006588 <UART_SetConfig+0x2f0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d125      	bne.n	800645a <UART_SetConfig+0x1c2>
 800640e:	4b5c      	ldr	r3, [pc, #368]	@ (8006580 <UART_SetConfig+0x2e8>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006414:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006418:	2b30      	cmp	r3, #48	@ 0x30
 800641a:	d016      	beq.n	800644a <UART_SetConfig+0x1b2>
 800641c:	2b30      	cmp	r3, #48	@ 0x30
 800641e:	d818      	bhi.n	8006452 <UART_SetConfig+0x1ba>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d00a      	beq.n	800643a <UART_SetConfig+0x1a2>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d814      	bhi.n	8006452 <UART_SetConfig+0x1ba>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <UART_SetConfig+0x19a>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d008      	beq.n	8006442 <UART_SetConfig+0x1aa>
 8006430:	e00f      	b.n	8006452 <UART_SetConfig+0x1ba>
 8006432:	2300      	movs	r3, #0
 8006434:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006438:	e06d      	b.n	8006516 <UART_SetConfig+0x27e>
 800643a:	2302      	movs	r3, #2
 800643c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006440:	e069      	b.n	8006516 <UART_SetConfig+0x27e>
 8006442:	2304      	movs	r3, #4
 8006444:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006448:	e065      	b.n	8006516 <UART_SetConfig+0x27e>
 800644a:	2308      	movs	r3, #8
 800644c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006450:	e061      	b.n	8006516 <UART_SetConfig+0x27e>
 8006452:	2310      	movs	r3, #16
 8006454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006458:	e05d      	b.n	8006516 <UART_SetConfig+0x27e>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a4b      	ldr	r2, [pc, #300]	@ (800658c <UART_SetConfig+0x2f4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d125      	bne.n	80064b0 <UART_SetConfig+0x218>
 8006464:	4b46      	ldr	r3, [pc, #280]	@ (8006580 <UART_SetConfig+0x2e8>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800646e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006470:	d016      	beq.n	80064a0 <UART_SetConfig+0x208>
 8006472:	2bc0      	cmp	r3, #192	@ 0xc0
 8006474:	d818      	bhi.n	80064a8 <UART_SetConfig+0x210>
 8006476:	2b80      	cmp	r3, #128	@ 0x80
 8006478:	d00a      	beq.n	8006490 <UART_SetConfig+0x1f8>
 800647a:	2b80      	cmp	r3, #128	@ 0x80
 800647c:	d814      	bhi.n	80064a8 <UART_SetConfig+0x210>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <UART_SetConfig+0x1f0>
 8006482:	2b40      	cmp	r3, #64	@ 0x40
 8006484:	d008      	beq.n	8006498 <UART_SetConfig+0x200>
 8006486:	e00f      	b.n	80064a8 <UART_SetConfig+0x210>
 8006488:	2300      	movs	r3, #0
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800648e:	e042      	b.n	8006516 <UART_SetConfig+0x27e>
 8006490:	2302      	movs	r3, #2
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006496:	e03e      	b.n	8006516 <UART_SetConfig+0x27e>
 8006498:	2304      	movs	r3, #4
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800649e:	e03a      	b.n	8006516 <UART_SetConfig+0x27e>
 80064a0:	2308      	movs	r3, #8
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a6:	e036      	b.n	8006516 <UART_SetConfig+0x27e>
 80064a8:	2310      	movs	r3, #16
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	e032      	b.n	8006516 <UART_SetConfig+0x27e>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a30      	ldr	r2, [pc, #192]	@ (8006578 <UART_SetConfig+0x2e0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d12a      	bne.n	8006510 <UART_SetConfig+0x278>
 80064ba:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <UART_SetConfig+0x2e8>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064c8:	d01a      	beq.n	8006500 <UART_SetConfig+0x268>
 80064ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064ce:	d81b      	bhi.n	8006508 <UART_SetConfig+0x270>
 80064d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064d4:	d00c      	beq.n	80064f0 <UART_SetConfig+0x258>
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064da:	d815      	bhi.n	8006508 <UART_SetConfig+0x270>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <UART_SetConfig+0x250>
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e4:	d008      	beq.n	80064f8 <UART_SetConfig+0x260>
 80064e6:	e00f      	b.n	8006508 <UART_SetConfig+0x270>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ee:	e012      	b.n	8006516 <UART_SetConfig+0x27e>
 80064f0:	2302      	movs	r3, #2
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f6:	e00e      	b.n	8006516 <UART_SetConfig+0x27e>
 80064f8:	2304      	movs	r3, #4
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fe:	e00a      	b.n	8006516 <UART_SetConfig+0x27e>
 8006500:	2308      	movs	r3, #8
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006506:	e006      	b.n	8006516 <UART_SetConfig+0x27e>
 8006508:	2310      	movs	r3, #16
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800650e:	e002      	b.n	8006516 <UART_SetConfig+0x27e>
 8006510:	2310      	movs	r3, #16
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <UART_SetConfig+0x2e0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	f040 80a8 	bne.w	8006672 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006526:	2b08      	cmp	r3, #8
 8006528:	d834      	bhi.n	8006594 <UART_SetConfig+0x2fc>
 800652a:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <UART_SetConfig+0x298>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	08006555 	.word	0x08006555
 8006534:	08006595 	.word	0x08006595
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006595 	.word	0x08006595
 8006540:	08006563 	.word	0x08006563
 8006544:	08006595 	.word	0x08006595
 8006548:	08006595 	.word	0x08006595
 800654c:	08006595 	.word	0x08006595
 8006550:	0800656b 	.word	0x0800656b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe fa6e 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8006558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800655a:	e021      	b.n	80065a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <UART_SetConfig+0x2f8>)
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006560:	e01e      	b.n	80065a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fe f9f9 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8006566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006568:	e01a      	b.n	80065a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006570:	e016      	b.n	80065a0 <UART_SetConfig+0x308>
 8006572:	bf00      	nop
 8006574:	cfff69f3 	.word	0xcfff69f3
 8006578:	40008000 	.word	0x40008000
 800657c:	40013800 	.word	0x40013800
 8006580:	40021000 	.word	0x40021000
 8006584:	40004400 	.word	0x40004400
 8006588:	40004800 	.word	0x40004800
 800658c:	40004c00 	.word	0x40004c00
 8006590:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800659e:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< Updated upstream
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 812a 	beq.w	80038e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	4a9e      	ldr	r2, [pc, #632]	@ (800390c <UART_SetConfig+0x590>)
 8003692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	fbb3 f3f2 	udiv	r3, r3, r2
 800369e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d305      	bcc.n	80036bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d903      	bls.n	80036c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036c2:	e10d      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 812a 	beq.w	80067fc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	4a9e      	ldr	r2, [pc, #632]	@ (8006828 <UART_SetConfig+0x590>)
 80065ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	4613      	mov	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4413      	add	r3, r2
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d305      	bcc.n	80065d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d903      	bls.n	80065e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065de:	e10d      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< Updated upstream
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	2200      	movs	r2, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	60fa      	str	r2, [r7, #12]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	4a8e      	ldr	r2, [pc, #568]	@ (800390c <UART_SetConfig+0x590>)
 80036d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e6:	f7fc fd9b 	bl	8000220 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	020b      	lsls	r3, r1, #8
 80036fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003700:	0202      	lsls	r2, r0, #8
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	6849      	ldr	r1, [r1, #4]
 8003706:	0849      	lsrs	r1, r1, #1
 8003708:	2000      	movs	r0, #0
 800370a:	460c      	mov	r4, r1
 800370c:	4605      	mov	r5, r0
 800370e:	eb12 0804 	adds.w	r8, r2, r4
 8003712:	eb43 0905 	adc.w	r9, r3, r5
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	469a      	mov	sl, r3
 800371e:	4693      	mov	fp, r2
 8003720:	4652      	mov	r2, sl
 8003722:	465b      	mov	r3, fp
 8003724:	4640      	mov	r0, r8
 8003726:	4649      	mov	r1, r9
 8003728:	f7fc fd7a 	bl	8000220 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800373a:	d308      	bcc.n	800374e <UART_SetConfig+0x3d2>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003742:	d204      	bcs.n	800374e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e0c8      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	2200      	movs	r2, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	60fa      	str	r2, [r7, #12]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	4a8e      	ldr	r2, [pc, #568]	@ (8006828 <UART_SetConfig+0x590>)
 80065ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2200      	movs	r2, #0
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006602:	f7fa faf9 	bl	8000bf8 <__aeabi_uldivmod>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	020b      	lsls	r3, r1, #8
 8006618:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800661c:	0202      	lsls	r2, r0, #8
 800661e:	6979      	ldr	r1, [r7, #20]
 8006620:	6849      	ldr	r1, [r1, #4]
 8006622:	0849      	lsrs	r1, r1, #1
 8006624:	2000      	movs	r0, #0
 8006626:	460c      	mov	r4, r1
 8006628:	4605      	mov	r5, r0
 800662a:	eb12 0804 	adds.w	r8, r2, r4
 800662e:	eb43 0905 	adc.w	r9, r3, r5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	469a      	mov	sl, r3
 800663a:	4693      	mov	fp, r2
 800663c:	4652      	mov	r2, sl
 800663e:	465b      	mov	r3, fp
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fa fad8 	bl	8000bf8 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4613      	mov	r3, r2
 800664e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006656:	d308      	bcc.n	800666a <UART_SetConfig+0x3d2>
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800665e:	d204      	bcs.n	800666a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	60da      	str	r2, [r3, #12]
 8006668:	e0c8      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< Updated upstream
 800374e:	2301      	movs	r3, #1
 8003750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003754:	e0c4      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 800666a:	2301      	movs	r3, #1
 800666c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006670:	e0c4      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< Updated upstream
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375e:	d167      	bne.n	8003830 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x43e>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <UART_SetConfig+0x3f4>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fbfc 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fc0e 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037a2:	e010      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <UART_SetConfig+0x594>)
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fb83 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 80037ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b0:	e009      	b.n	80037c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037c4:	bf00      	nop
=======
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800667a:	d167      	bne.n	800674c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800667c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006680:	2b08      	cmp	r3, #8
 8006682:	d828      	bhi.n	80066d6 <UART_SetConfig+0x43e>
 8006684:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <UART_SetConfig+0x3f4>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c7 	.word	0x080066c7
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066d7 	.word	0x080066d7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b0:	f7fe f9c0 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 80066b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066b6:	e014      	b.n	80066e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fe f9d2 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066be:	e010      	b.n	80066e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b5a      	ldr	r3, [pc, #360]	@ (800682c <UART_SetConfig+0x594>)
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066c4:	e00d      	b.n	80066e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe f947 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80066ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066cc:	e009      	b.n	80066e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066d4:	e005      	b.n	80066e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066e0:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< Updated upstream
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8089 	beq.w	80038e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	4a4e      	ldr	r2, [pc, #312]	@ (800390c <UART_SetConfig+0x590>)
 80037d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d8:	461a      	mov	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	441a      	add	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d916      	bls.n	8003828 <UART_SetConfig+0x4ac>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d212      	bcs.n	8003828 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f023 030f 	bic.w	r3, r3, #15
 800380a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	b29a      	uxth	r2, r3
 8003818:	8bfb      	ldrh	r3, [r7, #30]
 800381a:	4313      	orrs	r3, r2
 800381c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	8bfa      	ldrh	r2, [r7, #30]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e05b      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8089 	beq.w	80067fc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	4a4e      	ldr	r2, [pc, #312]	@ (8006828 <UART_SetConfig+0x590>)
 80066f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066fc:	005a      	lsls	r2, r3, #1
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	441a      	add	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	fbb2 f3f3 	udiv	r3, r2, r3
 800670e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d916      	bls.n	8006744 <UART_SetConfig+0x4ac>
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800671c:	d212      	bcs.n	8006744 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f023 030f 	bic.w	r3, r3, #15
 8006726:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	b29b      	uxth	r3, r3
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	b29a      	uxth	r2, r3
 8006734:	8bfb      	ldrh	r3, [r7, #30]
 8006736:	4313      	orrs	r3, r2
 8006738:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	8bfa      	ldrh	r2, [r7, #30]
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	e05b      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 8003828:	2301      	movs	r3, #1
 800382a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800382e:	e057      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 8006744:	2301      	movs	r3, #1
 8006746:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800674a:	e057      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8003830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003834:	2b08      	cmp	r3, #8
 8003836:	d828      	bhi.n	800388a <UART_SetConfig+0x50e>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x4c4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003875 	.word	0x08003875
 800384c:	0800388b 	.word	0x0800388b
 8003850:	0800387b 	.word	0x0800387b
 8003854:	0800388b 	.word	0x0800388b
 8003858:	0800388b 	.word	0x0800388b
 800385c:	0800388b 	.word	0x0800388b
 8003860:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fb94 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800386a:	e014      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7fe fba6 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 8003870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003872:	e010      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <UART_SetConfig+0x594>)
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe fb1b 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 800387e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003880:	e009      	b.n	8003896 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003888:	e005      	b.n	8003896 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003894:	bf00      	nop
    }

    if (pclk != 0U)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d021      	beq.n	80038e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <UART_SetConfig+0x590>)
 80038a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	441a      	add	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2b0f      	cmp	r3, #15
 80038c4:	d909      	bls.n	80038da <UART_SetConfig+0x55e>
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d205      	bcs.n	80038da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e002      	b.n	80038e0 <UART_SetConfig+0x564>
=======
 800674c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006750:	2b08      	cmp	r3, #8
 8006752:	d828      	bhi.n	80067a6 <UART_SetConfig+0x50e>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x4c4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fe f958 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8006784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006786:	e014      	b.n	80067b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fe f96a 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 800678c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800678e:	e010      	b.n	80067b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b26      	ldr	r3, [pc, #152]	@ (800682c <UART_SetConfig+0x594>)
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe f8df 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 800679a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067b0:	bf00      	nop
    }

    if (pclk != 0U)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d021      	beq.n	80067fc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006828 <UART_SetConfig+0x590>)
 80067be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	441a      	add	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d909      	bls.n	80067f6 <UART_SetConfig+0x55e>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d205      	bcs.n	80067f6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	e002      	b.n	80067fc <UART_SetConfig+0x564>
>>>>>>> Stashed changes
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< Updated upstream
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> Stashed changes
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< Updated upstream
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2200      	movs	r2, #0
 80038f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	@ 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	08006a4c 	.word	0x08006a4c
 8003910:	00f42400 	.word	0x00f42400

08003914 <UART_AdvFeatureConfig>:
=======
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2201      	movs	r2, #1
 8006800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2201      	movs	r2, #1
 8006808:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006818:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800681c:	4618      	mov	r0, r3
 800681e:	3730      	adds	r7, #48	@ 0x30
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006826:	bf00      	nop
 8006828:	0800c754 	.word	0x0800c754
 800682c:	00f42400 	.word	0x00f42400

08006830 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
=======
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
=======
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
=======
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
=======
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
=======
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
=======
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
=======
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01a      	beq.n	8003a2a <UART_AdvFeatureConfig+0x116>
=======
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a12:	d10a      	bne.n	8003a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
=======
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692e:	d10a      	bne.n	8006946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <UART_CheckIdleState>:
=======
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b098      	sub	sp, #96	@ 0x60
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
=======
 8006974:	b580      	push	{r7, lr}
 8006976:	b098      	sub	sp, #96	@ 0x60
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a68:	f7fd f978 	bl	8000d5c <HAL_GetTick>
 8003a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d12f      	bne.n	8003adc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f88e 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d022      	beq.n	8003adc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e063      	b.n	8003ba4 <UART_CheckIdleState+0x14c>
=======
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006984:	f7fb fa7e 	bl	8001e84 <HAL_GetTick>
 8006988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d12f      	bne.n	80069f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f88e 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d022      	beq.n	80069f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e063      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d149      	bne.n	8003b7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f857 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <UART_CheckIdleState+0x126>
=======
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d149      	bne.n	8006a9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f857 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d03c      	beq.n	8006a9a <UART_CheckIdleState+0x126>
>>>>>>> Stashed changes
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< Updated upstream
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	623b      	str	r3, [r7, #32]
   return(result);
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3308      	adds	r3, #8
 8003b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b56:	61fa      	str	r2, [r7, #28]
 8003b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	617b      	str	r3, [r7, #20]
   return(result);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e5      	bne.n	8003b36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e012      	b.n	8003ba4 <UART_CheckIdleState+0x14c>
=======
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69b9      	ldr	r1, [r7, #24]
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e012      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
>>>>>>> Stashed changes
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3758      	adds	r7, #88	@ 0x58
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_WaitOnFlagUntilTimeout>:
=======
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3758      	adds	r7, #88	@ 0x58
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e04f      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d04b      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fd f8c9 	bl	8000d5c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e04e      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d037      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d034      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d031      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d110      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]
=======
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad8:	e04f      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d04b      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae2:	f7fb f9cf 	bl	8001e84 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e04e      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d037      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d034      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b40      	cmp	r3, #64	@ 0x40
 8006b14:	d031      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d110      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f838 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e029      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c38:	d111      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c42:	621a      	str	r2, [r3, #32]
=======
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f838 	bl	8006ba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2208      	movs	r2, #8
 8006b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e029      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b54:	d111      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b5e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f81e 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d0a0      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f81e 	bl	8006ba2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00f      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4013      	ands	r3, r2
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d0a0      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndRxTransfer>:
=======
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003c86:	b480      	push	{r7}
 8003c88:	b095      	sub	sp, #84	@ 0x54
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ce4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e3      	bne.n	8003cc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d118      	bne.n	8003d32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0310 	bic.w	r3, r3, #16
 8003d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6979      	ldr	r1, [r7, #20]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_EndRxTransfer+0x7a>
=======
 8006ba2:	b480      	push	{r7}
 8006ba4:	b095      	sub	sp, #84	@ 0x54
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d118      	bne.n	8006c4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	613b      	str	r3, [r7, #16]
   return(result);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <UART_EndRxTransfer+0x7a>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d46:	bf00      	nop
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <UART_DMAAbortOnError>:
=======
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c62:	bf00      	nop
 8006c64:	3754      	adds	r7, #84	@ 0x54
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
=======
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff faf1 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_TxISR_8BIT>:
=======
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff faf1 	bl	800626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_TxISR_8BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003d76:	b480      	push	{r7}
 8003d78:	b08f      	sub	sp, #60	@ 0x3c
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d14c      	bne.n	8003e22 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d132      	bne.n	8003dfa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e6      	bne.n	8003d94 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e6      	bne.n	8003dc6 <UART_TxISR_8BIT+0x50>
=======
 8006c92:	b480      	push	{r7}
 8006c94:	b08f      	sub	sp, #60	@ 0x3c
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	2b21      	cmp	r3, #33	@ 0x21
 8006ca2:	d14c      	bne.n	8006d3e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d132      	bne.n	8006d16 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_TxISR_8BIT+0x50>
>>>>>>> Stashed changes
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 8003df8:	e013      	b.n	8003e22 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003e22:	bf00      	nop
 8003e24:	373c      	adds	r7, #60	@ 0x3c
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_TxISR_16BIT>:
=======
 8006d14:	e013      	b.n	8006d3e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006d3e:	bf00      	nop
 8006d40:	373c      	adds	r7, #60	@ 0x3c
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <UART_TxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003e2e:	b480      	push	{r7}
 8003e30:	b091      	sub	sp, #68	@ 0x44
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
=======
 8006d4a:	b480      	push	{r7}
 8006d4c:	b091      	sub	sp, #68	@ 0x44
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	2b21      	cmp	r3, #33	@ 0x21
 8003e3e:	d151      	bne.n	8003ee4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d132      	bne.n	8003eb2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e6      	bne.n	8003e7e <UART_TxISR_16BIT+0x50>
=======
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d58:	2b21      	cmp	r3, #33	@ 0x21
 8006d5a:	d151      	bne.n	8006e00 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d132      	bne.n	8006dce <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	623b      	str	r3, [r7, #32]
   return(result);
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e6      	bne.n	8006d68 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e6      	bne.n	8006d9a <UART_TxISR_16BIT+0x50>
>>>>>>> Stashed changes
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< Updated upstream
 8003eb0:	e018      	b.n	8003ee4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003ee4:	bf00      	nop
 8003ee6:	3744      	adds	r7, #68	@ 0x44
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_TxISR_8BIT_FIFOEN>:
=======
 8006dcc:	e018      	b.n	8006e00 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006e00:	bf00      	nop
 8006e02:	3744      	adds	r7, #68	@ 0x44
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_TxISR_8BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003ef0:	b480      	push	{r7}
 8003ef2:	b091      	sub	sp, #68	@ 0x44
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
=======
 8006e0c:	b480      	push	{r7}
 8006e0e:	b091      	sub	sp, #68	@ 0x44
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efe:	2b21      	cmp	r3, #33	@ 0x21
 8003f00:	d160      	bne.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003f0a:	e057      	b.n	8003fbc <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d133      	bne.n	8003f80 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	623b      	str	r3, [r7, #32]
   return(result);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f38:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	617b      	str	r3, [r7, #20]
   return(result);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f7e:	e021      	b.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003fbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1a4      	bne.n	8003f0c <UART_TxISR_8BIT_FIFOEN+0x1c>
=======
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1a:	2b21      	cmp	r3, #33	@ 0x21
 8006e1c:	d160      	bne.n	8006ee0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006e26:	e057      	b.n	8006ed8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d133      	bne.n	8006e9c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	623b      	str	r3, [r7, #32]
   return(result);
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e54:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	617b      	str	r3, [r7, #20]
   return(result);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e6      	bne.n	8006e68 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006e9a:	e021      	b.n	8006ee0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d013      	beq.n	8006ed2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ed2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ed8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1a4      	bne.n	8006e28 <UART_TxISR_8BIT_FIFOEN+0x1c>
>>>>>>> Stashed changes
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< Updated upstream
 8003fc2:	e7ff      	b.n	8003fc4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003fc4:	bf00      	nop
 8003fc6:	3744      	adds	r7, #68	@ 0x44
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_TxISR_16BIT_FIFOEN>:
=======
 8006ede:	e7ff      	b.n	8006ee0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006ee0:	bf00      	nop
 8006ee2:	3744      	adds	r7, #68	@ 0x44
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_TxISR_16BIT_FIFOEN>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003fd0:	b480      	push	{r7}
 8003fd2:	b091      	sub	sp, #68	@ 0x44
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
=======
 8006eec:	b480      	push	{r7}
 8006eee:	b091      	sub	sp, #68	@ 0x44
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	2b21      	cmp	r3, #33	@ 0x21
 8003fe0:	d165      	bne.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fe8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003fea:	e05c      	b.n	80040a6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d133      	bne.n	8004060 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	61fb      	str	r3, [r7, #28]
   return(result);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	60bb      	str	r3, [r7, #8]
   return(result);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e6      	bne.n	800402c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800405e:	e026      	b.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004082:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80040a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040a2:	3b01      	subs	r3, #1
 80040a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80040a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19f      	bne.n	8003fec <UART_TxISR_16BIT_FIFOEN+0x1c>
=======
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efa:	2b21      	cmp	r3, #33	@ 0x21
 8006efc:	d165      	bne.n	8006fca <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f06:	e05c      	b.n	8006fc2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d133      	bne.n	8006f7c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6979      	ldr	r1, [r7, #20]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006f7a:	e026      	b.n	8006fca <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa4:	1c9a      	adds	r2, r3, #2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d19f      	bne.n	8006f08 <UART_TxISR_16BIT_FIFOEN+0x1c>
>>>>>>> Stashed changes
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< Updated upstream
 80040ac:	e7ff      	b.n	80040ae <UART_TxISR_16BIT_FIFOEN+0xde>
 80040ae:	bf00      	nop
 80040b0:	3744      	adds	r7, #68	@ 0x44
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <UART_EndTransmit_IT>:
=======
 8006fc8:	e7ff      	b.n	8006fca <UART_TxISR_16BIT_FIFOEN+0xde>
 8006fca:	bf00      	nop
 8006fcc:	3744      	adds	r7, #68	@ 0x44
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	679a      	str	r2, [r3, #120]	@ 0x78
=======
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	613b      	str	r3, [r7, #16]
   return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	679a      	str	r2, [r3, #120]	@ 0x78
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fad8 	bl	80006b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UARTEx_WakeupCallback>:
=======
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fa f980 	bl	8001324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007024:	bf00      	nop
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_UARTEx_WakeupCallback>:
>>>>>>> Stashed changes
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
=======
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> Stashed changes
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
=======
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> Stashed changes
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
=======
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UARTEx_DisableFifoMode>:
=======
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> Stashed changes
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
=======
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_UARTEx_DisableFifoMode+0x16>
 800415e:	2302      	movs	r3, #2
 8004160:	e027      	b.n	80041b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	@ 0x24
 800416e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UARTEx_DisableFifoMode+0x16>
 800707a:	2302      	movs	r3, #2
 800707c:	e027      	b.n	80070ce <HAL_UARTEx_DisableFifoMode+0x66>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2224      	movs	r2, #36	@ 0x24
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
=======
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e02d      	b.n	8004232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2224      	movs	r2, #36	@ 0x24
 80041e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f850 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UARTEx_SetRxFifoThreshold>:
=======
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e02d      	b.n	800714e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2224      	movs	r2, #36	@ 0x24
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f850 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> Stashed changes
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< Updated upstream
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
=======
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800424e:	2302      	movs	r3, #2
 8004250:	e02d      	b.n	80042ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	@ 0x24
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f812 	bl	80042b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <UARTEx_SetNbDataToProcess>:
=======
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800716a:	2302      	movs	r3, #2
 800716c:	e02d      	b.n	80071ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2224      	movs	r2, #36	@ 0x24
 800717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f812 	bl	80071d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <UARTEx_SetNbDataToProcess>:
>>>>>>> Stashed changes
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
=======
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< Updated upstream
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> Stashed changes
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< Updated upstream
 80042d8:	e031      	b.n	800433e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042da:	2308      	movs	r3, #8
 80042dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042de:	2308      	movs	r3, #8
 80042e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0f5b      	lsrs	r3, r3, #29
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	7b3a      	ldrb	r2, [r7, #12]
 8004306:	4911      	ldr	r1, [pc, #68]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004308:	5c8a      	ldrb	r2, [r1, r2]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800430e:	7b3a      	ldrb	r2, [r7, #12]
 8004310:	490f      	ldr	r1, [pc, #60]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004314:	fb93 f3f2 	sdiv	r3, r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	7b7a      	ldrb	r2, [r7, #13]
 8004324:	4909      	ldr	r1, [pc, #36]	@ (800434c <UARTEx_SetNbDataToProcess+0x94>)
 8004326:	5c8a      	ldrb	r2, [r1, r2]
 8004328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800432c:	7b7a      	ldrb	r2, [r7, #13]
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <UARTEx_SetNbDataToProcess+0x98>)
 8004330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004332:	fb93 f3f2 	sdiv	r3, r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	08006a64 	.word	0x08006a64
 8004350:	08006a6c 	.word	0x08006a6c

08004354 <osKernelStart>:
=======
 80071f4:	e031      	b.n	800725a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071f6:	2308      	movs	r3, #8
 80071f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071fa:	2308      	movs	r3, #8
 80071fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	0e5b      	lsrs	r3, r3, #25
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0f5b      	lsrs	r3, r3, #29
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	7b3a      	ldrb	r2, [r7, #12]
 8007222:	4911      	ldr	r1, [pc, #68]	@ (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007224:	5c8a      	ldrb	r2, [r1, r2]
 8007226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800722a:	7b3a      	ldrb	r2, [r7, #12]
 800722c:	490f      	ldr	r1, [pc, #60]	@ (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800722e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007230:	fb93 f3f2 	sdiv	r3, r3, r2
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	7b7a      	ldrb	r2, [r7, #13]
 8007240:	4909      	ldr	r1, [pc, #36]	@ (8007268 <UARTEx_SetNbDataToProcess+0x94>)
 8007242:	5c8a      	ldrb	r2, [r1, r2]
 8007244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007248:	7b7a      	ldrb	r2, [r7, #13]
 800724a:	4908      	ldr	r1, [pc, #32]	@ (800726c <UARTEx_SetNbDataToProcess+0x98>)
 800724c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800724e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	0800c76c 	.word	0x0800c76c
 800726c:	0800c774 	.word	0x0800c774

08007270 <osKernelStart>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< Updated upstream
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004358:	f000 fff4 	bl	8005344 <vTaskStartScheduler>
  
  return osOK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	bd80      	pop	{r7, pc}

08004362 <vListInitialise>:
=======
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007274:	f001 f8fc 	bl	8008470 <vTaskStartScheduler>
  
  return osOK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	bd80      	pop	{r7, pc}

0800727e <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
=======
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f103 0208 	add.w	r2, r3, #8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
=======
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f103 0208 	add.w	r2, r3, #8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	609a      	str	r2, [r3, #8]
=======
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f04f 32ff 	mov.w	r2, #4294967295
 8007296:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f103 0208 	add.w	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 0208 	add.w	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
=======
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f103 0208 	add.w	r2, r3, #8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f103 0208 	add.w	r2, r3, #8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <vListInitialiseItem>:
=======
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]
=======
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <vListInsertEnd>:
=======
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
=======
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	609a      	str	r2, [r3, #8]
=======
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <vListInsert>:
=======
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60bb      	str	r3, [r7, #8]
=======
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e00c      	b.n	800443e <vListInsert+0x3a>
=======
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d103      	bne.n	8007340 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e00c      	b.n	800735a <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3308      	adds	r3, #8
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e002      	b.n	8004432 <vListInsert+0x2e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d2f6      	bcs.n	800442c <vListInsert+0x28>
=======
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3308      	adds	r3, #8
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e002      	b.n	800734e <vListInsert+0x2e>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	429a      	cmp	r2, r3
 8007358:	d2f6      	bcs.n	8007348 <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	605a      	str	r2, [r3, #4]
=======
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <uxListRemove>:
=======
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6892      	ldr	r2, [r2, #8]
 800448c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6852      	ldr	r2, [r2, #4]
 8004496:	605a      	str	r2, [r3, #4]
=======
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6892      	ldr	r2, [r2, #8]
 80073a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6852      	ldr	r2, [r2, #4]
 80073b2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d103      	bne.n	80044aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]
=======
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d103      	bne.n	80073c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <xQueueGenericReset>:
=======
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xQueueGenericReset+0x2c>
=======
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <xQueueGenericReset+0x2c>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60bb      	str	r3, [r7, #8]
=======
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< Updated upstream
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044f8:	f001 fe66 	bl	80061c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	68f9      	ldr	r1, [r7, #12]
 8004506:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	441a      	add	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	3b01      	subs	r3, #1
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	441a      	add	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22ff      	movs	r2, #255	@ 0xff
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	22ff      	movs	r2, #255	@ 0xff
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d114      	bne.n	8004578 <xQueueGenericReset+0xac>
=======
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007414:	f001 ff78 	bl	8009308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	68f9      	ldr	r1, [r7, #12]
 8007422:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	441a      	add	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007444:	3b01      	subs	r3, #1
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800744a:	fb01 f303 	mul.w	r3, r1, r3
 800744e:	441a      	add	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	22ff      	movs	r2, #255	@ 0xff
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	22ff      	movs	r2, #255	@ 0xff
 8007460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d114      	bne.n	8007494 <xQueueGenericReset+0xac>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f934 	bl	80057c8 <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <xQueueGenericReset+0xd0>)
 8004568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	e009      	b.n	800458c <xQueueGenericReset+0xc0>
=======
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01a      	beq.n	80074a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3310      	adds	r3, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fa4c 	bl	8008914 <xTaskRemoveFromEventList>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d012      	beq.n	80074a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007482:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <xQueueGenericReset+0xd0>)
 8007484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	e009      	b.n	80074a8 <xQueueGenericReset+0xc0>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3310      	adds	r3, #16
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fef0 	bl	8004362 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3324      	adds	r3, #36	@ 0x24
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff feeb 	bl	8004362 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800458c:	f001 fe4e 	bl	800622c <vPortExitCritical>
=======
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3310      	adds	r3, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fef0 	bl	800727e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3324      	adds	r3, #36	@ 0x24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff feeb 	bl	800727e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074a8:	f001 ff60 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 8004590:	2301      	movs	r3, #1
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <xQueueGenericCreate>:
=======
 80074ac:	2301      	movs	r3, #1
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
=======
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	@ 0x28
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xQueueGenericCreate+0x2c>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xQueueGenericCreate+0x28>
=======
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueGenericCreate+0x28>
>>>>>>> Stashed changes

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	61fb      	str	r3, [r7, #28]
=======
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< Updated upstream
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3348      	adds	r3, #72	@ 0x48
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 ff16 	bl	800640c <pvPortMalloc>
 80045e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <xQueueGenericCreate+0x64>
=======
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3348      	adds	r3, #72	@ 0x48
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 f828 	bl	800954c <pvPortMalloc>
 80074fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00d      	beq.n	8007520 <xQueueGenericCreate+0x64>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3348      	adds	r3, #72	@ 0x48
 80045f0:	617b      	str	r3, [r7, #20]
=======
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3348      	adds	r3, #72	@ 0x48
 800750c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 80045f2:	79fa      	ldrb	r2, [r7, #7]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f805 	bl	800460e <prvInitialiseNewQueue>
=======
 800750e:	79fa      	ldrb	r2, [r7, #7]
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f805 	bl	800752a <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 8004604:	69bb      	ldr	r3, [r7, #24]
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <prvInitialiseNewQueue>:
=======
 8007520:	69bb      	ldr	r3, [r7, #24]
	}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	70fb      	strb	r3, [r7, #3]
=======
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <prvInitialiseNewQueue+0x1c>
=======
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e002      	b.n	8004630 <prvInitialiseNewQueue+0x22>
=======
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e002      	b.n	800754c <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
=======
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800463c:	2101      	movs	r1, #1
 800463e:	69b8      	ldr	r0, [r7, #24]
 8004640:	f7ff ff44 	bl	80044cc <xQueueGenericReset>
=======
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007558:	2101      	movs	r1, #1
 800755a:	69b8      	ldr	r0, [r7, #24]
 800755c:	f7ff ff44 	bl	80073e8 <xQueueGenericReset>
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <prvInitialiseMutex>:
=======
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <prvInitialiseMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< Updated upstream
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <prvInitialiseMutex+0x2c>
=======
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00e      	beq.n	8007594 <prvInitialiseMutex+0x2c>
>>>>>>> Stashed changes
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< Updated upstream
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]
=======
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 800466c:	2300      	movs	r3, #0
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f81c 	bl	80046b0 <xQueueGenericSend>
=======
 8007588:	2300      	movs	r3, #0
 800758a:	2200      	movs	r2, #0
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f81c 	bl	80075cc <xQueueGenericSend>
>>>>>>> Stashed changes
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< Updated upstream
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <xQueueCreateMutex>:
=======
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <xQueueCreateMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	461a      	mov	r2, r3
 8004696:	6939      	ldr	r1, [r7, #16]
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f7ff ff81 	bl	80045a0 <xQueueGenericCreate>
 800469e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ffd3 	bl	800464c <prvInitialiseMutex>

		return xNewQueue;
 80046a6:	68fb      	ldr	r3, [r7, #12]
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xQueueGenericSend>:
=======
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	461a      	mov	r2, r3
 80075b2:	6939      	ldr	r1, [r7, #16]
 80075b4:	6978      	ldr	r0, [r7, #20]
 80075b6:	f7ff ff81 	bl	80074bc <xQueueGenericCreate>
 80075ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ffd3 	bl	8007568 <prvInitialiseMutex>

		return xNewQueue;
 80075c2:	68fb      	ldr	r3, [r7, #12]
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericSend+0x34>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x42>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <xQueueGenericSend+0x46>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueGenericSend+0x48>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <xQueueGenericSend+0x64>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d103      	bne.n	8004722 <xQueueGenericSend+0x72>
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <xQueueGenericSend+0x76>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueGenericSend+0x78>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xQueueGenericSend+0x94>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	623b      	str	r3, [r7, #32]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004744:	f001 f9e6 	bl	8005b14 <xTaskGetSchedulerState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <xQueueGenericSend+0xa4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueGenericSend+0xa8>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueGenericSend+0xaa>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <xQueueGenericSend+0xc6>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61fb      	str	r3, [r7, #28]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <xQueueGenericSend+0xc2>
=======
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08e      	sub	sp, #56	@ 0x38
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075da:	2300      	movs	r3, #0
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <xQueueGenericSend+0x34>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	e7fd      	b.n	80075fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <xQueueGenericSend+0x42>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <xQueueGenericSend+0x46>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <xQueueGenericSend+0x48>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10b      	bne.n	8007630 <xQueueGenericSend+0x64>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d103      	bne.n	800763e <xQueueGenericSend+0x72>
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <xQueueGenericSend+0x76>
 800763e:	2301      	movs	r3, #1
 8007640:	e000      	b.n	8007644 <xQueueGenericSend+0x78>
 8007642:	2300      	movs	r3, #0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <xQueueGenericSend+0x94>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	623b      	str	r3, [r7, #32]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007660:	f001 fafe 	bl	8008c60 <xTaskGetSchedulerState>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <xQueueGenericSend+0xa4>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xQueueGenericSend+0xa8>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <xQueueGenericSend+0xaa>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xQueueGenericSend+0xc6>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xQueueGenericSend+0xc2>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8004776:	f001 fd27 	bl	80061c8 <vPortEnterCritical>
=======
 8007692:	f001 fe39 	bl	8009308 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <xQueueGenericSend+0xdc>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d129      	bne.n	80047e0 <xQueueGenericSend+0x130>
=======
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <xQueueGenericSend+0xdc>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d129      	bne.n	80076fc <xQueueGenericSend+0x130>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004792:	f000 fa47 	bl	8004c24 <prvCopyDataToQueue>
 8004796:	62f8      	str	r0, [r7, #44]	@ 0x2c
=======
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076ae:	f000 fb29 	bl	8007d04 <prvCopyDataToQueue>
 80076b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	3324      	adds	r3, #36	@ 0x24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f80f 	bl	80057c8 <xTaskRemoveFromEventList>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <xQueueGenericSend+0x128>
=======
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d010      	beq.n	80076de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	3324      	adds	r3, #36	@ 0x24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 f927 	bl	8008914 <xTaskRemoveFromEventList>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d013      	beq.n	80076f4 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80047b0:	4b3f      	ldr	r3, [pc, #252]	@ (80048b0 <xQueueGenericSend+0x200>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	e00a      	b.n	80047d8 <xQueueGenericSend+0x128>
=======
 80076cc:	4b3f      	ldr	r3, [pc, #252]	@ (80077cc <xQueueGenericSend+0x200>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	e00a      	b.n	80076f4 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <xQueueGenericSend+0x128>
=======
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 80047c8:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <xQueueGenericSend+0x200>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
=======
 80076e4:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <xQueueGenericSend+0x200>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 80047d8:	f001 fd28 	bl	800622c <vPortExitCritical>
				return pdPASS;
 80047dc:	2301      	movs	r3, #1
 80047de:	e063      	b.n	80048a8 <xQueueGenericSend+0x1f8>
=======
 80076f4:	f001 fe3a 	bl	800936c <vPortExitCritical>
				return pdPASS;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e063      	b.n	80077c4 <xQueueGenericSend+0x1f8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <xQueueGenericSend+0x13e>
=======
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <xQueueGenericSend+0x13e>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 80047e6:	f001 fd21 	bl	800622c <vPortExitCritical>
=======
 8007702:	f001 fe33 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 80047ea:	2300      	movs	r3, #0
 80047ec:	e05c      	b.n	80048a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <xQueueGenericSend+0x152>
=======
 8007706:	2300      	movs	r3, #0
 8007708:	e05c      	b.n	80077c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800770a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770c:	2b00      	cmp	r3, #0
 800770e:	d106      	bne.n	800771e <xQueueGenericSend+0x152>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f849 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	4618      	mov	r0, r3
 8007716:	f001 f961 	bl	80089dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800771a:	2301      	movs	r3, #1
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004802:	f001 fd13 	bl	800622c <vPortExitCritical>
=======
 800771e:	f001 fe25 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8004806:	f000 fdef 	bl	80053e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800480a:	f001 fcdd 	bl	80061c8 <vPortEnterCritical>
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004814:	b25b      	sxtb	r3, r3
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d103      	bne.n	8004824 <xQueueGenericSend+0x174>
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800482a:	b25b      	sxtb	r3, r3
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d103      	bne.n	800483a <xQueueGenericSend+0x18a>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800483a:	f001 fcf7 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800483e:	1d3a      	adds	r2, r7, #4
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f838 	bl	80058bc <xTaskCheckForTimeOut>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d124      	bne.n	800489c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004852:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004854:	f000 fab8 	bl	8004dc8 <prvIsQueueFull>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	3310      	adds	r3, #16
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 ff88 	bl	800577c <vTaskPlaceOnEventList>
=======
 8007722:	f000 fef7 	bl	8008514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007726:	f001 fdef 	bl	8009308 <vPortEnterCritical>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007730:	b25b      	sxtb	r3, r3
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d103      	bne.n	8007740 <xQueueGenericSend+0x174>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007746:	b25b      	sxtb	r3, r3
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d103      	bne.n	8007756 <xQueueGenericSend+0x18a>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007756:	f001 fe09 	bl	800936c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800775a:	1d3a      	adds	r2, r7, #4
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f950 	bl	8008a08 <xTaskCheckForTimeOut>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d124      	bne.n	80077b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800776e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007770:	f000 fbc0 	bl	8007ef4 <prvIsQueueFull>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d018      	beq.n	80077ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	3310      	adds	r3, #16
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f001 f8a0 	bl	80088c8 <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800486c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800486e:	f000 fa43 	bl	8004cf8 <prvUnlockQueue>
=======
 8007788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800778a:	f000 fb4b 	bl	8007e24 <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 8004872:	f000 fdc7 	bl	8005404 <xTaskResumeAll>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f af7c 	bne.w	8004776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800487e:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <xQueueGenericSend+0x200>)
 8004880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	e772      	b.n	8004776 <xQueueGenericSend+0xc6>
=======
 800778e:	f000 fecf 	bl	8008530 <xTaskResumeAll>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f af7c 	bne.w	8007692 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800779a:	4b0c      	ldr	r3, [pc, #48]	@ (80077cc <xQueueGenericSend+0x200>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	e772      	b.n	8007692 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004892:	f000 fa31 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004896:	f000 fdb5 	bl	8005404 <xTaskResumeAll>
 800489a:	e76c      	b.n	8004776 <xQueueGenericSend+0xc6>
=======
 80077ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ae:	f000 fb39 	bl	8007e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077b2:	f000 febd 	bl	8008530 <xTaskResumeAll>
 80077b6:	e76c      	b.n	8007692 <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800489c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800489e:	f000 fa2b 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048a2:	f000 fdaf 	bl	8005404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3738      	adds	r7, #56	@ 0x38
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <xQueueGiveFromISR>:
=======
 80077b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ba:	f000 fb33 	bl	8007e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077be:	f000 feb7 	bl	8008530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3738      	adds	r7, #56	@ 0x38
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xQueueGiveFromISR>:
>>>>>>> Stashed changes
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< Updated upstream
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	@ 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	633b      	str	r3, [r7, #48]	@ 0x30
=======
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	@ 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30
>>>>>>> Stashed changes
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
<<<<<<< Updated upstream
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xQueueGiveFromISR+0x28>
=======
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xQueueGiveFromISR+0x28>
>>>>>>> Stashed changes

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< Updated upstream
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xQueueGiveFromISR+0x48>
=======
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	61fb      	str	r3, [r7, #28]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <xQueueGiveFromISR+0x48>
>>>>>>> Stashed changes

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
<<<<<<< Updated upstream
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <xQueueGiveFromISR+0x5c>
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <xQueueGiveFromISR+0x60>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <xQueueGiveFromISR+0x62>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	61bb      	str	r3, [r7, #24]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <xQueueGiveFromISR+0x7a>
=======
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <xQueueGiveFromISR+0x5c>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <xQueueGiveFromISR+0x60>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <xQueueGiveFromISR+0x62>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	61bb      	str	r3, [r7, #24]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <xQueueGiveFromISR+0x7a>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 8004932:	f001 fd29 	bl	8006388 <vPortValidateInterruptPriority>
=======
 800784e:	f001 fe3b 	bl	80094c8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 8004936:	f3ef 8211 	mrs	r2, BASEPRI
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	617a      	str	r2, [r7, #20]
 800494c:	613b      	str	r3, [r7, #16]
=======
 8007852:	f3ef 8211 	mrs	r2, BASEPRI
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	617a      	str	r2, [r7, #20]
 8007868:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 800494e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 800786a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
<<<<<<< Updated upstream
 8004958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495e:	429a      	cmp	r2, r3
 8004960:	d22b      	bcs.n	80049ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
=======
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800787a:	429a      	cmp	r2, r3
 800787c:	d22b      	bcs.n	80078d6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
>>>>>>> Stashed changes
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 8004974:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d112      	bne.n	80049a4 <xQueueGiveFromISR+0xf0>
=======
 8007890:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d112      	bne.n	80078c0 <xQueueGiveFromISR+0xf0>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	3324      	adds	r3, #36	@ 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f000 ff1c 	bl	80057c8 <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00e      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
=======
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	3324      	adds	r3, #36	@ 0x24
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f834 	bl	8008914 <xTaskRemoveFromEventList>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <xQueueGiveFromISR+0x100>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e007      	b.n	80049b4 <xQueueGiveFromISR+0x100>
=======
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e007      	b.n	80078d0 <xQueueGiveFromISR+0x100>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 80049a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	b25a      	sxtb	r2, r3
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049b4:	2301      	movs	r3, #1
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b8:	e001      	b.n	80049be <xQueueGiveFromISR+0x10a>
=======
 80078c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c4:	3301      	adds	r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	b25a      	sxtb	r2, r3
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078d0:	2301      	movs	r3, #1
 80078d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d4:	e001      	b.n	80078da <xQueueGiveFromISR+0x10a>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c0:	60fb      	str	r3, [r7, #12]
=======
 80078d6:	2300      	movs	r3, #0
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f383 8811 	msr	BASEPRI, r3
=======
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< Updated upstream
 80049c8:	bf00      	nop
=======
 80078e4:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3738      	adds	r7, #56	@ 0x38
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
=======
 80078e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3738      	adds	r7, #56	@ 0x38
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <xQueueReceive>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	@ 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueSemaphoreTake+0x50>
=======
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08c      	sub	sp, #48	@ 0x30
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <xQueueReceive+0x32>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	623b      	str	r3, [r7, #32]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <xQueueReceive+0x40>
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <xQueueReceive+0x44>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <xQueueReceive+0x46>
 8007934:	2300      	movs	r3, #0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <xQueueReceive+0x62>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	61fb      	str	r3, [r7, #28]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <xQueueReceive+0x5e>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 8004a28:	f001 f874 	bl	8005b14 <xTaskGetSchedulerState>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <xQueueSemaphoreTake+0x64>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueSemaphoreTake+0x68>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueSemaphoreTake+0x6a>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	61bb      	str	r3, [r7, #24]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a5a:	f001 fbb5 	bl	80061c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <xQueueSemaphoreTake+0xe0>
=======
 8007952:	f001 f985 	bl	8008c60 <xTaskGetSchedulerState>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <xQueueReceive+0x72>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <xQueueReceive+0x76>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <xQueueReceive+0x78>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <xQueueReceive+0x94>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61bb      	str	r3, [r7, #24]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007984:	f001 fcc0 	bl	8009308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01f      	beq.n	80079d4 <xQueueReceive+0xe4>
>>>>>>> Stashed changes
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007998:	f000 fa1e 	bl	8007dd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	1e5a      	subs	r2, r3, #1
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	639a      	str	r2, [r3, #56]	@ 0x38

<<<<<<< Updated upstream
				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a7a:	f001 f9f7 	bl	8005e6c <pvTaskIncrementMutexHeldCount>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00f      	beq.n	8004aac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	3310      	adds	r3, #16
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fe99 	bl	80057c8 <xTaskRemoveFromEventList>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a9c:	4b54      	ldr	r3, [pc, #336]	@ (8004bf0 <xQueueSemaphoreTake+0x21c>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
=======
				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00f      	beq.n	80079cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	3310      	adds	r3, #16
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 ffaf 	bl	8008914 <xTaskRemoveFromEventList>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079bc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ab0 <xQueueReceive+0x1c0>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004aac:	f001 fbbe 	bl	800622c <vPortExitCritical>
				return pdPASS;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e098      	b.n	8004be6 <xQueueSemaphoreTake+0x212>
=======
 80079cc:	f001 fcce 	bl	800936c <vPortExitCritical>
				return pdPASS;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e069      	b.n	8007aa8 <xQueueReceive+0x1b8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d112      	bne.n	8004ae0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	617b      	str	r3, [r7, #20]
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	e7fd      	b.n	8004ad4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ad8:	f001 fba8 	bl	800622c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e082      	b.n	8004be6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <xQueueSemaphoreTake+0x120>
=======
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079da:	f001 fcc7 	bl	800936c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079de:	2300      	movs	r3, #0
 80079e0:	e062      	b.n	8007aa8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <xQueueReceive+0x106>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fed0 	bl	8005890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af0:	2301      	movs	r3, #1
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 80079e8:	f107 0310 	add.w	r3, r7, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fff5 	bl	80089dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079f2:	2301      	movs	r3, #1
 80079f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8004af4:	f001 fb9a 	bl	800622c <vPortExitCritical>
=======
 80079f6:	f001 fcb9 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 8004af8:	f000 fc76 	bl	80053e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004afc:	f001 fb64 	bl	80061c8 <vPortEnterCritical>
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d103      	bne.n	8004b16 <xQueueSemaphoreTake+0x142>
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <xQueueSemaphoreTake+0x158>
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b2c:	f001 fb7e 	bl	800622c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b30:	463a      	mov	r2, r7
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 febf 	bl	80058bc <xTaskCheckForTimeOut>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d132      	bne.n	8004baa <xQueueSemaphoreTake+0x1d6>
=======
 80079fa:	f000 fd8b 	bl	8008514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079fe:	f001 fc83 	bl	8009308 <vPortEnterCritical>
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a08:	b25b      	sxtb	r3, r3
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d103      	bne.n	8007a18 <xQueueReceive+0x128>
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d103      	bne.n	8007a2e <xQueueReceive+0x13e>
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a2e:	f001 fc9d 	bl	800936c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a32:	1d3a      	adds	r2, r7, #4
 8007a34:	f107 0310 	add.w	r3, r7, #16
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 ffe4 	bl	8008a08 <xTaskCheckForTimeOut>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d123      	bne.n	8007a8e <xQueueReceive+0x19e>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 8004b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b46:	f000 f929 	bl	8004d9c <prvIsQueueEmpty>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d026      	beq.n	8004b9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004b58:	f001 fb36 	bl	80061c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fff5 	bl	8005b50 <xTaskPriorityInherit>
 8004b66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004b68:	f001 fb60 	bl	800622c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	3324      	adds	r3, #36	@ 0x24
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fe01 	bl	800577c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b7c:	f000 f8bc 	bl	8004cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b80:	f000 fc40 	bl	8005404 <xTaskResumeAll>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f af67 	bne.w	8004a5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b8c:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <xQueueSemaphoreTake+0x21c>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	e75d      	b.n	8004a5a <xQueueSemaphoreTake+0x86>
=======
 8007a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a48:	f000 fa3e 	bl	8007ec8 <prvIsQueueEmpty>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d017      	beq.n	8007a82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	3324      	adds	r3, #36	@ 0x24
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 ff34 	bl	80088c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a62:	f000 f9df 	bl	8007e24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a66:	f000 fd63 	bl	8008530 <xTaskResumeAll>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d189      	bne.n	8007984 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a70:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <xQueueReceive+0x1c0>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	e780      	b.n	8007984 <xQueueReceive+0x94>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ba0:	f000 f8aa 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba4:	f000 fc2e 	bl	8005404 <xTaskResumeAll>
 8004ba8:	e757      	b.n	8004a5a <xQueueSemaphoreTake+0x86>
			}
=======
 8007a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a84:	f000 f9ce 	bl	8007e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a88:	f000 fd52 	bl	8008530 <xTaskResumeAll>
 8007a8c:	e77a      	b.n	8007984 <xQueueReceive+0x94>
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 8004baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bac:	f000 f8a4 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bb0:	f000 fc28 	bl	8005404 <xTaskResumeAll>
=======
 8007a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a90:	f000 f9c8 	bl	8007e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a94:	f000 fd4c 	bl	8008530 <xTaskResumeAll>
>>>>>>> Stashed changes

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 8004bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb6:	f000 f8f1 	bl	8004d9c <prvIsQueueEmpty>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f43f af4c 	beq.w	8004a5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004bc8:	f001 fafe 	bl	80061c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004bcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bce:	f000 f811 	bl	8004bf4 <prvGetDisinheritPriorityAfterTimeout>
 8004bd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 f8b6 	bl	8005d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004be0:	f001 fb24 	bl	800622c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004be4:	2300      	movs	r3, #0
=======
 8007a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a9a:	f000 fa15 	bl	8007ec8 <prvIsQueueEmpty>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f43f af6f 	beq.w	8007984 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007aa6:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 8004be6:	4618      	mov	r0, r3
 8004be8:	3738      	adds	r7, #56	@ 0x38
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <prvGetDisinheritPriorityAfterTimeout>:
=======
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	@ 0x38
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61fb      	str	r3, [r7, #28]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b08:	f001 f8aa 	bl	8008c60 <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xQueueSemaphoreTake+0x64>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <xQueueSemaphoreTake+0x68>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <xQueueSemaphoreTake+0x6a>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	61bb      	str	r3, [r7, #24]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b3a:	f001 fbe5 	bl	8009308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d024      	beq.n	8007b94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b5a:	f001 fa2d 	bl	8008fb8 <pvTaskIncrementMutexHeldCount>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00f      	beq.n	8007b8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	3310      	adds	r3, #16
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fecf 	bl	8008914 <xTaskRemoveFromEventList>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b7c:	4b54      	ldr	r3, [pc, #336]	@ (8007cd0 <xQueueSemaphoreTake+0x21c>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b8c:	f001 fbee 	bl	800936c <vPortExitCritical>
				return pdPASS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e098      	b.n	8007cc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d112      	bne.n	8007bc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bb8:	f001 fbd8 	bl	800936c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e082      	b.n	8007cc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff06 	bl	80089dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bd4:	f001 fbca 	bl	800936c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bd8:	f000 fc9c 	bl	8008514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bdc:	f001 fb94 	bl	8009308 <vPortEnterCritical>
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d103      	bne.n	8007bf6 <xQueueSemaphoreTake+0x142>
 8007bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bfc:	b25b      	sxtb	r3, r3
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d103      	bne.n	8007c0c <xQueueSemaphoreTake+0x158>
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c0c:	f001 fbae 	bl	800936c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c10:	463a      	mov	r2, r7
 8007c12:	f107 030c 	add.w	r3, r7, #12
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fef5 	bl	8008a08 <xTaskCheckForTimeOut>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d132      	bne.n	8007c8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c26:	f000 f94f 	bl	8007ec8 <prvIsQueueEmpty>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d026      	beq.n	8007c7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007c38:	f001 fb66 	bl	8009308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f82b 	bl	8008c9c <xTaskPriorityInherit>
 8007c46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007c48:	f001 fb90 	bl	800936c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	3324      	adds	r3, #36	@ 0x24
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fe37 	bl	80088c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c5c:	f000 f8e2 	bl	8007e24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c60:	f000 fc66 	bl	8008530 <xTaskResumeAll>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f47f af67 	bne.w	8007b3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c6c:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <xQueueSemaphoreTake+0x21c>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	e75d      	b.n	8007b3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c80:	f000 f8d0 	bl	8007e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c84:	f000 fc54 	bl	8008530 <xTaskResumeAll>
 8007c88:	e757      	b.n	8007b3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c8c:	f000 f8ca 	bl	8007e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c90:	f000 fc4e 	bl	8008530 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c96:	f000 f917 	bl	8007ec8 <prvIsQueueEmpty>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f43f af4c 	beq.w	8007b3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00d      	beq.n	8007cc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ca8:	f001 fb2e 	bl	8009308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cae:	f000 f811 	bl	8007cd4 <prvGetDisinheritPriorityAfterTimeout>
 8007cb2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f8ec 	bl	8008e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cc0:	f001 fb54 	bl	800936c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3738      	adds	r7, #56	@ 0x38
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< Updated upstream
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
=======
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< Updated upstream
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1c3 0307 	rsb	r3, r3, #7
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e001      	b.n	8004c16 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f1c3 0307 	rsb	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e001      	b.n	8007cf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< Updated upstream
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c16:	68fb      	ldr	r3, [r7, #12]
	}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <prvCopyDataToQueue>:
=======
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
=======
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <prvCopyDataToQueue+0x3a>
=======
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d14d      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fff4 	bl	8005c3c <xTaskPriorityDisinherit>
 8004c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e043      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d14d      	bne.n	8007dc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f82a 	bl	8008d88 <xTaskPriorityDisinherit>
 8007d34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	e043      	b.n	8007dc6 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d119      	bne.n	8004c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6858      	ldr	r0, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	f001 fe46 	bl	8006900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d32b      	bcc.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e026      	b.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d119      	bne.n	8007d78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6858      	ldr	r0, [r3, #4]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	f002 fc59 	bl	800a606 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	441a      	add	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d32b      	bcc.n	8007dc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]
 8007d76:	e026      	b.n	8007dc6 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68d8      	ldr	r0, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	f001 fe2c 	bl	8006900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d207      	bcs.n	8004cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	425b      	negs	r3, r3
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
=======
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	68d8      	ldr	r0, [r3, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d80:	461a      	mov	r2, r3
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	f002 fc3f 	bl	800a606 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d90:	425b      	negs	r3, r3
 8007d92:	441a      	add	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d207      	bcs.n	8007db4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dac:	425b      	negs	r3, r3
 8007dae:	441a      	add	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d105      	bne.n	8004ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <prvCopyDataToQueue+0xc2>
=======
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d105      	bne.n	8007dc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
=======
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvUnlockQueue>:
=======
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d018      	beq.n	8007e1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	441a      	add	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d303      	bcc.n	8007e0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68d9      	ldr	r1, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e14:	461a      	mov	r2, r3
 8007e16:	6838      	ldr	r0, [r7, #0]
 8007e18:	f002 fbf5 	bl	800a606 <memcpy>
>>>>>>> Stashed changes
	}
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
=======
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8004d00:	f001 fa62 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d0c:	e011      	b.n	8004d32 <prvUnlockQueue+0x3a>
=======
 8007e2c:	f001 fa6c 	bl	8009308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e38:	e011      	b.n	8007e5e <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3324      	adds	r3, #36	@ 0x24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd54 	bl	80057c8 <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <prvUnlockQueue+0x32>
=======
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d012      	beq.n	8007e68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3324      	adds	r3, #36	@ 0x24
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fd64 	bl	8008914 <xTaskRemoveFromEventList>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 8004d26:	f000 fe2d 	bl	8005984 <vTaskMissedYield>
=======
 8007e52:	f000 fe3d 	bl	8008ad0 <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dce9      	bgt.n	8004d0e <prvUnlockQueue+0x16>
 8004d3a:	e000      	b.n	8004d3e <prvUnlockQueue+0x46>
					break;
 8004d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	22ff      	movs	r2, #255	@ 0xff
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d46:	f001 fa71 	bl	800622c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d4a:	f001 fa3d 	bl	80061c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d56:	e011      	b.n	8004d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3310      	adds	r3, #16
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fd2f 	bl	80057c8 <xTaskRemoveFromEventList>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d70:	f000 fe08 	bl	8005984 <vTaskMissedYield>
=======
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dce9      	bgt.n	8007e3a <prvUnlockQueue+0x16>
 8007e66:	e000      	b.n	8007e6a <prvUnlockQueue+0x46>
					break;
 8007e68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	22ff      	movs	r2, #255	@ 0xff
 8007e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007e72:	f001 fa7b 	bl	800936c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e76:	f001 fa47 	bl	8009308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e82:	e011      	b.n	8007ea8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d012      	beq.n	8007eb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3310      	adds	r3, #16
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 fd3f 	bl	8008914 <xTaskRemoveFromEventList>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e9c:	f000 fe18 	bl	8008ad0 <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dce9      	bgt.n	8004d58 <prvUnlockQueue+0x60>
 8004d84:	e000      	b.n	8004d88 <prvUnlockQueue+0x90>
=======
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dce9      	bgt.n	8007e84 <prvUnlockQueue+0x60>
 8007eb0:	e000      	b.n	8007eb4 <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 8004d86:	bf00      	nop
=======
 8007eb2:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	22ff      	movs	r2, #255	@ 0xff
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d90:	f001 fa4c 	bl	800622c <vPortExitCritical>
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <prvIsQueueEmpty>:
=======
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	22ff      	movs	r2, #255	@ 0xff
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ebc:	f001 fa56 	bl	800936c <vPortExitCritical>
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da4:	f001 fa10 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e001      	b.n	8004dba <prvIsQueueEmpty+0x1e>
=======
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ed0:	f001 fa1a 	bl	8009308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e001      	b.n	8007ee6 <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dba:	f001 fa37 	bl	800622c <vPortExitCritical>

	return xReturn;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvIsQueueFull>:
=======
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ee6:	f001 fa41 	bl	800936c <vPortExitCritical>

	return xReturn;
 8007eea:	68fb      	ldr	r3, [r7, #12]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd0:	f001 f9fa 	bl	80061c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d102      	bne.n	8004de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e001      	b.n	8004dea <prvIsQueueFull+0x22>
=======
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007efc:	f001 fa04 	bl	8009308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d102      	bne.n	8007f12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e001      	b.n	8007f16 <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dea:	f001 fa1f 	bl	800622c <vPortExitCritical>

	return xReturn;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTaskCreate>:
=======
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f16:	f001 fa29 	bl	800936c <vPortExitCritical>

	return xReturn;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	@ 0x30
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80fb      	strh	r3, [r7, #6]
=======
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08c      	sub	sp, #48	@ 0x30
 8007f28:	af04      	add	r7, sp, #16
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fafd 	bl	800640c <pvPortMalloc>
 8004e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e1a:	20a0      	movs	r0, #160	@ 0xa0
 8004e1c:	f001 faf6 	bl	800640c <pvPortMalloc>
 8004e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e2e:	e005      	b.n	8004e3c <xTaskCreate+0x44>
=======
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fb07 	bl	800954c <pvPortMalloc>
 8007f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f46:	20a0      	movs	r0, #160	@ 0xa0
 8007f48:	f001 fb00 	bl	800954c <pvPortMalloc>
 8007f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f5a:	e005      	b.n	8007f68 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	f001 fbb9 	bl	80065a8 <vPortFree>
 8004e36:	e001      	b.n	8004e3c <xTaskCreate+0x44>
=======
 8007f5c:	6978      	ldr	r0, [r7, #20]
 8007f5e:	f001 fbc3 	bl	80096e8 <vPortFree>
 8007f62:	e001      	b.n	8007f68 <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
=======
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d013      	beq.n	8004e6a <xTaskCreate+0x72>
=======
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d013      	beq.n	8007f96 <xTaskCreate+0x72>
>>>>>>> Stashed changes
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f80f 	bl	8004e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e5e:	69f8      	ldr	r0, [r7, #28]
 8004e60:	f000 f8ac 	bl	8004fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e002      	b.n	8004e70 <xTaskCreate+0x78>
=======
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	2300      	movs	r3, #0
 8007f72:	9303      	str	r3, [sp, #12]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	9302      	str	r3, [sp, #8]
 8007f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f80f 	bl	8007fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f8a:	69f8      	ldr	r0, [r7, #28]
 8007f8c:	f000 f8ac 	bl	80080e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f90:	2301      	movs	r3, #1
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	e002      	b.n	8007f9c <xTaskCreate+0x78>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e70:	69bb      	ldr	r3, [r7, #24]
	}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <prvInitialiseNewTask>:
=======
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
	}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
=======
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	3b01      	subs	r3, #1
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <prvInitialiseNewTask+0x46>
=======
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f023 0307 	bic.w	r3, r3, #7
 8007fce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	617b      	str	r3, [r7, #20]
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	e7fd      	b.n	8007fee <prvInitialiseNewTask+0x46>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01f      	beq.n	8004f0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e012      	b.n	8004ef8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3334      	adds	r3, #52	@ 0x34
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	701a      	strb	r2, [r3, #0]
=======
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01f      	beq.n	8008038 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e012      	b.n	8008024 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	4413      	add	r3, r2
 8008004:	7819      	ldrb	r1, [r3, #0]
 8008006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	3334      	adds	r3, #52	@ 0x34
 800800e:	460a      	mov	r2, r1
 8008010:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b0f      	cmp	r3, #15
 8004efc:	d9e9      	bls.n	8004ed2 <prvInitialiseNewTask+0x56>
 8004efe:	e000      	b.n	8004f02 <prvInitialiseNewTask+0x86>
			{
				break;
 8004f00:	bf00      	nop
=======
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	4413      	add	r3, r2
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d006      	beq.n	800802c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	d9e9      	bls.n	8007ffe <prvInitialiseNewTask+0x56>
 800802a:	e000      	b.n	800802e <prvInitialiseNewTask+0x86>
			{
				break;
 800802c:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0a:	e003      	b.n	8004f14 <prvInitialiseNewTask+0x98>
=======
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008036:	e003      	b.n	8008040 <prvInitialiseNewTask+0x98>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
=======
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d901      	bls.n	8004f1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
=======
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	2b06      	cmp	r3, #6
 8008044:	d901      	bls.n	800804a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008046:	2306      	movs	r3, #6
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008054:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2200      	movs	r2, #0
 800805a:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fa34 	bl	80043a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fa2f 	bl	80043a2 <vListInitialiseItem>
=======
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	3304      	adds	r3, #4
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff f92c 	bl	80072be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	3318      	adds	r3, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff f927 	bl	80072be <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	f1c3 0207 	rsb	r2, r3, #7
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24
=======
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008074:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	f1c3 0207 	rsb	r2, r3, #7
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008084:	625a      	str	r2, [r3, #36]	@ 0x24
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
=======
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2200      	movs	r2, #0
 800808a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	2200      	movs	r2, #0
 8008092:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
>>>>>>> Stashed changes
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< Updated upstream
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	334c      	adds	r3, #76	@ 0x4c
 8004f6e:	224c      	movs	r2, #76	@ 0x4c
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fc38 	bl	80067e8 <memset>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <prvInitialiseNewTask+0x134>)
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb4 <prvInitialiseNewTask+0x138>)
 8004f82:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb8 <prvInitialiseNewTask+0x13c>)
 8004f88:	659a      	str	r2, [r3, #88]	@ 0x58
=======
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	334c      	adds	r3, #76	@ 0x4c
 800809a:	224c      	movs	r2, #76	@ 0x4c
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 f9d3 	bl	800a44a <memset>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	4a0d      	ldr	r2, [pc, #52]	@ (80080dc <prvInitialiseNewTask+0x134>)
 80080a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	4a0c      	ldr	r2, [pc, #48]	@ (80080e0 <prvInitialiseNewTask+0x138>)
 80080ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	4a0c      	ldr	r2, [pc, #48]	@ (80080e4 <prvInitialiseNewTask+0x13c>)
 80080b4:	659a      	str	r2, [r3, #88]	@ 0x58
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	69b8      	ldr	r0, [r7, #24]
 8004f90:	f000 ffe6 	bl	8005f60 <pxPortInitialiseStack>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	601a      	str	r2, [r3, #0]
=======
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	69b8      	ldr	r0, [r7, #24]
 80080bc:	f000 fff6 	bl	80090ac <pxPortInitialiseStack>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <prvInitialiseNewTask+0x12a>
=======
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <prvInitialiseNewTask+0x12a>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa4:	601a      	str	r2, [r3, #0]
=======
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 8004fa6:	bf00      	nop
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200042dc 	.word	0x200042dc
 8004fb4:	20004344 	.word	0x20004344
 8004fb8:	200043ac 	.word	0x200043ac

08004fbc <prvAddNewTaskToReadyList>:
=======
 80080d2:	bf00      	nop
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20003d50 	.word	0x20003d50
 80080e0:	20003db8 	.word	0x20003db8
 80080e4:	20003e20 	.word	0x20003e20

080080e8 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f001 f900 	bl	80061c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a29      	ldr	r2, [pc, #164]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
=======
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080f0:	f001 f90a 	bl	8009308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080f4:	4b2a      	ldr	r3, [pc, #168]	@ (80081a0 <prvAddNewTaskToReadyList+0xb8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a29      	ldr	r2, [pc, #164]	@ (80081a0 <prvAddNewTaskToReadyList+0xb8>)
 80080fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080fe:	4b29      	ldr	r3, [pc, #164]	@ (80081a4 <prvAddNewTaskToReadyList+0xbc>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
=======
 8008106:	4a27      	ldr	r2, [pc, #156]	@ (80081a4 <prvAddNewTaskToReadyList+0xbc>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800810c:	4b24      	ldr	r3, [pc, #144]	@ (80081a0 <prvAddNewTaskToReadyList+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d110      	bne.n	8008136 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 8004fe8:	f000 fcf0 	bl	80059cc <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
=======
 8008114:	f000 fd00 	bl	8008b18 <prvInitialiseTaskLists>
 8008118:	e00d      	b.n	8008136 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 8004fee:	4b23      	ldr	r3, [pc, #140]	@ (800507c <prvAddNewTaskToReadyList+0xc0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
=======
 800811a:	4b23      	ldr	r3, [pc, #140]	@ (80081a8 <prvAddNewTaskToReadyList+0xc0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008122:	4b20      	ldr	r3, [pc, #128]	@ (80081a4 <prvAddNewTaskToReadyList+0xbc>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	429a      	cmp	r2, r3
 800812e:	d802      	bhi.n	8008136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008130:	4a1c      	ldr	r2, [pc, #112]	@ (80081a4 <prvAddNewTaskToReadyList+0xbc>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800500a:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <prvAddNewTaskToReadyList+0xc4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1b      	ldr	r2, [pc, #108]	@ (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8005012:	6013      	str	r3, [r2, #0]
=======
 8008136:	4b1d      	ldr	r3, [pc, #116]	@ (80081ac <prvAddNewTaskToReadyList+0xc4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3301      	adds	r3, #1
 800813c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ac <prvAddNewTaskToReadyList+0xc4>)
 800813e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7ff f9bd 	bl	80043bc <vListInsertEnd>
=======
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	4b19      	ldr	r3, [pc, #100]	@ (80081b0 <prvAddNewTaskToReadyList+0xc8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4313      	orrs	r3, r2
 800814e:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <prvAddNewTaskToReadyList+0xc8>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <prvAddNewTaskToReadyList+0xcc>)
 8008160:	441a      	add	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f7ff f8b5 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005042:	f001 f8f3 	bl	800622c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <prvAddNewTaskToReadyList+0xc0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <prvAddNewTaskToReadyList+0xb0>
=======
 800816e:	f001 f8fd 	bl	800936c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008172:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <prvAddNewTaskToReadyList+0xc0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800504e:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	429a      	cmp	r2, r3
 800505a:	d207      	bcs.n	800506c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <prvAddNewTaskToReadyList+0xd0>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
=======
 800817a:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <prvAddNewTaskToReadyList+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d207      	bcs.n	8008198 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008188:	4b0b      	ldr	r3, [pc, #44]	@ (80081b8 <prvAddNewTaskToReadyList+0xd0>)
 800818a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000288 	.word	0x20000288
 8005078:	20000188 	.word	0x20000188
 800507c:	20000294 	.word	0x20000294
 8005080:	200002a4 	.word	0x200002a4
 8005084:	20000290 	.word	0x20000290
 8005088:	2000018c 	.word	0x2000018c
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <vTaskDelay>:
=======
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20001cf8 	.word	0x20001cf8
 80081a4:	20001bf8 	.word	0x20001bf8
 80081a8:	20001d04 	.word	0x20001d04
 80081ac:	20001d14 	.word	0x20001d14
 80081b0:	20001d00 	.word	0x20001d00
 80081b4:	20001bfc 	.word	0x20001bfc
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050a2:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <vTaskDelay+0x64>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <vTaskDelay+0x32>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050c2:	f000 f991 	bl	80053e8 <vTaskSuspendAll>
=======
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <vTaskDelay+0x64>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <vTaskDelay+0x32>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	e7fd      	b.n	80081ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081ee:	f000 f991 	bl	8008514 <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 80050c6:	2100      	movs	r1, #0
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fee3 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ce:	f000 f999 	bl	8005404 <xTaskResumeAll>
 80050d2:	60f8      	str	r0, [r7, #12]
=======
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fef3 	bl	8008fe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081fa:	f000 f999 	bl	8008530 <xTaskResumeAll>
 80081fe:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050da:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <vTaskDelay+0x68>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	f3bf 8f6f 	isb	sy
=======
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d107      	bne.n	8008216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008206:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <vTaskDelay+0x68>)
 8008208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200002b0 	.word	0x200002b0
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vTaskSuspend>:
=======
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20001d20 	.word	0x20001d20
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <vTaskSuspend>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
<<<<<<< Updated upstream
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005104:	f001 f860 	bl	80061c8 <vPortEnterCritical>
=======
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008230:	f001 f86a 	bl	8009308 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
<<<<<<< Updated upstream
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <vTaskSuspend+0x18>
 800510e:	4b3d      	ldr	r3, [pc, #244]	@ (8005204 <vTaskSuspend+0x108>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	e000      	b.n	8005116 <vTaskSuspend+0x1a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60fb      	str	r3, [r7, #12]
=======
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <vTaskSuspend+0x18>
 800823a:	4b3d      	ldr	r3, [pc, #244]	@ (8008330 <vTaskSuspend+0x108>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	e000      	b.n	8008242 <vTaskSuspend+0x1a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff f9aa 	bl	8004476 <uxListRemove>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d115      	bne.n	8005154 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4936      	ldr	r1, [pc, #216]	@ (8005208 <vTaskSuspend+0x10c>)
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vTaskSuspend+0x58>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	2201      	movs	r2, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43da      	mvns	r2, r3
 800514a:	4b30      	ldr	r3, [pc, #192]	@ (800520c <vTaskSuspend+0x110>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4013      	ands	r3, r2
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <vTaskSuspend+0x110>)
 8005152:	6013      	str	r3, [r2, #0]
=======
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff f8a2 	bl	8007392 <uxListRemove>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d115      	bne.n	8008280 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008258:	4936      	ldr	r1, [pc, #216]	@ (8008334 <vTaskSuspend+0x10c>)
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <vTaskSuspend+0x58>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	2201      	movs	r2, #1
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	43da      	mvns	r2, r3
 8008276:	4b30      	ldr	r3, [pc, #192]	@ (8008338 <vTaskSuspend+0x110>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4013      	ands	r3, r2
 800827c:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <vTaskSuspend+0x110>)
 800827e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3318      	adds	r3, #24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f988 	bl	8004476 <uxListRemove>
=======
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3318      	adds	r3, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff f880 	bl	8007392 <uxListRemove>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4828      	ldr	r0, [pc, #160]	@ (8005210 <vTaskSuspend+0x114>)
 800516e:	f7ff f925 	bl	80043bc <vListInsertEnd>
=======
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4828      	ldr	r0, [pc, #160]	@ (800833c <vTaskSuspend+0x114>)
 800829a:	f7ff f81d 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< Updated upstream
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d103      	bne.n	8005186 <vTaskSuspend+0x8a>
=======
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d103      	bne.n	80082b2 <vTaskSuspend+0x8a>
>>>>>>> Stashed changes
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< Updated upstream
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
=======
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
>>>>>>> Stashed changes
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005186:	f001 f851 	bl	800622c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <vTaskSuspend+0x118>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <vTaskSuspend+0xa2>
=======
 80082b2:	f001 f85b 	bl	800936c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80082b6:	4b22      	ldr	r3, [pc, #136]	@ (8008340 <vTaskSuspend+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <vTaskSuspend+0xa2>
>>>>>>> Stashed changes
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005192:	f001 f819 	bl	80061c8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005196:	f000 fc9d 	bl	8005ad4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800519a:	f001 f847 	bl	800622c <vPortExitCritical>
=======
 80082be:	f001 f823 	bl	8009308 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80082c2:	f000 fcad 	bl	8008c20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80082c6:	f001 f851 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
<<<<<<< Updated upstream
 800519e:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <vTaskSuspend+0x108>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d128      	bne.n	80051fa <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80051a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <vTaskSuspend+0x118>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d018      	beq.n	80051e2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80051b0:	4b19      	ldr	r3, [pc, #100]	@ (8005218 <vTaskSuspend+0x11c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <vTaskSuspend+0xd4>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60bb      	str	r3, [r7, #8]
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80051d0:	4b12      	ldr	r3, [pc, #72]	@ (800521c <vTaskSuspend+0x120>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
=======
 80082ca:	4b19      	ldr	r3, [pc, #100]	@ (8008330 <vTaskSuspend+0x108>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d128      	bne.n	8008326 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80082d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008340 <vTaskSuspend+0x118>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d018      	beq.n	800830e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80082dc:	4b19      	ldr	r3, [pc, #100]	@ (8008344 <vTaskSuspend+0x11c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <vTaskSuspend+0xd4>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	60bb      	str	r3, [r7, #8]
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80082fc:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <vTaskSuspend+0x120>)
 80082fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 80051e0:	e00b      	b.n	80051fa <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80051e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <vTaskSuspend+0x114>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005220 <vTaskSuspend+0x124>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <vTaskSuspend+0x108>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
	}
 80051f4:	e001      	b.n	80051fa <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80051f6:	f000 fa5d 	bl	80056b4 <vTaskSwitchContext>
	}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000188 	.word	0x20000188
 8005208:	2000018c 	.word	0x2000018c
 800520c:	20000290 	.word	0x20000290
 8005210:	20000274 	.word	0x20000274
 8005214:	20000294 	.word	0x20000294
 8005218:	200002b0 	.word	0x200002b0
 800521c:	e000ed04 	.word	0xe000ed04
 8005220:	20000288 	.word	0x20000288

08005224 <prvTaskIsTaskSuspended>:
=======
 800830c:	e00b      	b.n	8008326 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800830e:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <vTaskSuspend+0x114>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <vTaskSuspend+0x124>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d103      	bne.n	8008322 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800831a:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <vTaskSuspend+0x108>)
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
	}
 8008320:	e001      	b.n	8008326 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8008322:	f000 fa6d 	bl	8008800 <vTaskSwitchContext>
	}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20001bf8 	.word	0x20001bf8
 8008334:	20001bfc 	.word	0x20001bfc
 8008338:	20001d00 	.word	0x20001d00
 800833c:	20001ce4 	.word	0x20001ce4
 8008340:	20001d04 	.word	0x20001d04
 8008344:	20001d20 	.word	0x20001d20
 8008348:	e000ed04 	.word	0xe000ed04
 800834c:	20001cf8 	.word	0x20001cf8

08008350 <prvTaskIsTaskSuspended>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
<<<<<<< Updated upstream
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	613b      	str	r3, [r7, #16]
=======
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
<<<<<<< Updated upstream
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <prvTaskIsTaskSuspended+0x5c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10a      	bne.n	8005272 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <prvTaskIsTaskSuspended+0x60>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d005      	beq.n	8005272 <prvTaskIsTaskSuspended+0x4e>
=======
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10b      	bne.n	800837e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	4a0a      	ldr	r2, [pc, #40]	@ (80083ac <prvTaskIsTaskSuspended+0x5c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d10a      	bne.n	800839e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	4a08      	ldr	r2, [pc, #32]	@ (80083b0 <prvTaskIsTaskSuspended+0x60>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d005      	beq.n	800839e <prvTaskIsTaskSuspended+0x4e>
>>>>>>> Stashed changes
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
<<<<<<< Updated upstream
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	617b      	str	r3, [r7, #20]
=======
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800839a:	2301      	movs	r3, #1
 800839c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005272:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005274:	4618      	mov	r0, r3
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000274 	.word	0x20000274
 8005284:	20000248 	.word	0x20000248

08005288 <vTaskResume>:
=======
 800839e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80083a0:	4618      	mov	r0, r3
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20001ce4 	.word	0x20001ce4
 80083b0:	20001cb8 	.word	0x20001cb8

080083b4 <vTaskResume>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
<<<<<<< Updated upstream
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <vTaskResume+0x2a>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60bb      	str	r3, [r7, #8]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <vTaskResume+0x26>
=======
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <vTaskResume+0x2a>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60bb      	str	r3, [r7, #8]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <vTaskResume+0x26>
>>>>>>> Stashed changes

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
<<<<<<< Updated upstream
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <vTaskResume+0xac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d037      	beq.n	800532c <vTaskResume+0xa4>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d034      	beq.n	800532c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80052c2:	f000 ff81 	bl	80061c8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ffac 	bl	8005224 <prvTaskIsTaskSuspended>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02a      	beq.n	8005328 <vTaskResume+0xa0>
=======
 80083de:	4b20      	ldr	r3, [pc, #128]	@ (8008460 <vTaskResume+0xac>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d037      	beq.n	8008458 <vTaskResume+0xa4>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d034      	beq.n	8008458 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80083ee:	f000 ff8b 	bl	8009308 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ffac 	bl	8008350 <prvTaskIsTaskSuspended>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02a      	beq.n	8008454 <vTaskResume+0xa0>
>>>>>>> Stashed changes
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f8cd 	bl	8004476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	4b14      	ldr	r3, [pc, #80]	@ (8005338 <vTaskResume+0xb0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <vTaskResume+0xb0>)
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4a10      	ldr	r2, [pc, #64]	@ (800533c <vTaskResume+0xb4>)
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7ff f859 	bl	80043bc <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <vTaskResume+0xac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	429a      	cmp	r2, r3
 8005316:	d307      	bcc.n	8005328 <vTaskResume+0xa0>
=======
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe ffc5 	bl	8007392 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	2201      	movs	r2, #1
 800840e:	409a      	lsls	r2, r3
 8008410:	4b14      	ldr	r3, [pc, #80]	@ (8008464 <vTaskResume+0xb0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4313      	orrs	r3, r2
 8008416:	4a13      	ldr	r2, [pc, #76]	@ (8008464 <vTaskResume+0xb0>)
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4a10      	ldr	r2, [pc, #64]	@ (8008468 <vTaskResume+0xb4>)
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3304      	adds	r3, #4
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f7fe ff51 	bl	80072d8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <vTaskResume+0xac>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	429a      	cmp	r2, r3
 8008442:	d307      	bcc.n	8008454 <vTaskResume+0xa0>
>>>>>>> Stashed changes
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <vTaskResume+0xb8>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
=======
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <vTaskResume+0xb8>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 8005328:	f000 ff80 	bl	800622c <vPortExitCritical>
=======
 8008454:	f000 ff8a 	bl	800936c <vPortExitCritical>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000188 	.word	0x20000188
 8005338:	20000290 	.word	0x20000290
 800533c:	2000018c 	.word	0x2000018c
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskStartScheduler>:
=======
 8008458:	bf00      	nop
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20001bf8 	.word	0x20001bf8
 8008464:	20001d00 	.word	0x20001d00
 8008468:	20001bfc 	.word	0x20001bfc
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
=======
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af02      	add	r7, sp, #8
>>>>>>> Stashed changes
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
<<<<<<< Updated upstream
 800534a:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <vTaskStartScheduler+0x84>)
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	2280      	movs	r2, #128	@ 0x80
 8005356:	491d      	ldr	r1, [pc, #116]	@ (80053cc <vTaskStartScheduler+0x88>)
 8005358:	481d      	ldr	r0, [pc, #116]	@ (80053d0 <vTaskStartScheduler+0x8c>)
 800535a:	f7ff fd4d 	bl	8004df8 <xTaskCreate>
 800535e:	60f8      	str	r0, [r7, #12]
=======
 8008476:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <vTaskStartScheduler+0x84>)
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	2300      	movs	r3, #0
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	2300      	movs	r3, #0
 8008480:	2280      	movs	r2, #128	@ 0x80
 8008482:	491d      	ldr	r1, [pc, #116]	@ (80084f8 <vTaskStartScheduler+0x88>)
 8008484:	481d      	ldr	r0, [pc, #116]	@ (80084fc <vTaskStartScheduler+0x8c>)
 8008486:	f7ff fd4d 	bl	8007f24 <xTaskCreate>
 800848a:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11b      	bne.n	800539e <vTaskStartScheduler+0x5a>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
}
 8005378:	bf00      	nop
=======
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d11b      	bne.n	80084ca <vTaskStartScheduler+0x5a>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60bb      	str	r3, [r7, #8]
}
 80084a4:	bf00      	nop
>>>>>>> Stashed changes
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< Updated upstream
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <vTaskStartScheduler+0x90>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	334c      	adds	r3, #76	@ 0x4c
 8005380:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <vTaskStartScheduler+0x94>)
 8005382:	6013      	str	r3, [r2, #0]
=======
 80084a6:	4b16      	ldr	r3, [pc, #88]	@ (8008500 <vTaskStartScheduler+0x90>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	334c      	adds	r3, #76	@ 0x4c
 80084ac:	4a15      	ldr	r2, [pc, #84]	@ (8008504 <vTaskStartScheduler+0x94>)
 80084ae:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 8005384:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <vTaskStartScheduler+0x98>)
 8005386:	f04f 32ff 	mov.w	r2, #4294967295
 800538a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800538c:	4b14      	ldr	r3, [pc, #80]	@ (80053e0 <vTaskStartScheduler+0x9c>)
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005392:	4b14      	ldr	r3, [pc, #80]	@ (80053e4 <vTaskStartScheduler+0xa0>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
=======
 80084b0:	4b15      	ldr	r3, [pc, #84]	@ (8008508 <vTaskStartScheduler+0x98>)
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084b8:	4b14      	ldr	r3, [pc, #80]	@ (800850c <vTaskStartScheduler+0x9c>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084be:	4b14      	ldr	r3, [pc, #80]	@ (8008510 <vTaskStartScheduler+0xa0>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 8005398:	f000 fe72 	bl	8006080 <xPortStartScheduler>
=======
 80084c4:	f000 fe7c 	bl	80091c0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800539c:	e00f      	b.n	80053be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d10b      	bne.n	80053be <vTaskStartScheduler+0x7a>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <vTaskStartScheduler+0x76>
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200002ac 	.word	0x200002ac
 80053cc:	08006a2c 	.word	0x08006a2c
 80053d0:	0800599d 	.word	0x0800599d
 80053d4:	20000188 	.word	0x20000188
 80053d8:	20000020 	.word	0x20000020
 80053dc:	200002a8 	.word	0x200002a8
 80053e0:	20000294 	.word	0x20000294
 80053e4:	2000028c 	.word	0x2000028c

080053e8 <vTaskSuspendAll>:
=======
 80084c8:	e00f      	b.n	80084ea <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d10b      	bne.n	80084ea <vTaskStartScheduler+0x7a>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	607b      	str	r3, [r7, #4]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <vTaskStartScheduler+0x76>
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20001d1c 	.word	0x20001d1c
 80084f8:	0800c734 	.word	0x0800c734
 80084fc:	08008ae9 	.word	0x08008ae9
 8008500:	20001bf8 	.word	0x20001bf8
 8008504:	20000030 	.word	0x20000030
 8008508:	20001d18 	.word	0x20001d18
 800850c:	20001d04 	.word	0x20001d04
 8008510:	20001cfc 	.word	0x20001cfc

08008514 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
=======
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <vTaskSuspendAll+0x18>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a03      	ldr	r2, [pc, #12]	@ (8005400 <vTaskSuspendAll+0x18>)
 80053f4:	6013      	str	r3, [r2, #0]
=======
 8008518:	4b04      	ldr	r3, [pc, #16]	@ (800852c <vTaskSuspendAll+0x18>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	4a03      	ldr	r2, [pc, #12]	@ (800852c <vTaskSuspendAll+0x18>)
 8008520:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< Updated upstream
 80053f6:	bf00      	nop
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	200002b0 	.word	0x200002b0

08005404 <xTaskResumeAll>:
=======
 8008522:	bf00      	nop
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20001d20 	.word	0x20001d20

08008530 <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
=======
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 8005412:	4b42      	ldr	r3, [pc, #264]	@ (800551c <xTaskResumeAll+0x118>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <xTaskResumeAll+0x2e>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	603b      	str	r3, [r7, #0]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <xTaskResumeAll+0x2a>
=======
 800853e:	4b42      	ldr	r3, [pc, #264]	@ (8008648 <xTaskResumeAll+0x118>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10b      	bne.n	800855e <xTaskResumeAll+0x2e>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	603b      	str	r3, [r7, #0]
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	e7fd      	b.n	800855a <xTaskResumeAll+0x2a>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 8005432:	f000 fec9 	bl	80061c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005436:	4b39      	ldr	r3, [pc, #228]	@ (800551c <xTaskResumeAll+0x118>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a37      	ldr	r2, [pc, #220]	@ (800551c <xTaskResumeAll+0x118>)
 800543e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005440:	4b36      	ldr	r3, [pc, #216]	@ (800551c <xTaskResumeAll+0x118>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d161      	bne.n	800550c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005448:	4b35      	ldr	r3, [pc, #212]	@ (8005520 <xTaskResumeAll+0x11c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d05d      	beq.n	800550c <xTaskResumeAll+0x108>
=======
 800855e:	f000 fed3 	bl	8009308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008562:	4b39      	ldr	r3, [pc, #228]	@ (8008648 <xTaskResumeAll+0x118>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a37      	ldr	r2, [pc, #220]	@ (8008648 <xTaskResumeAll+0x118>)
 800856a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800856c:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <xTaskResumeAll+0x118>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d161      	bne.n	8008638 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008574:	4b35      	ldr	r3, [pc, #212]	@ (800864c <xTaskResumeAll+0x11c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05d      	beq.n	8008638 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 8005450:	e02e      	b.n	80054b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005452:	4b34      	ldr	r3, [pc, #208]	@ (8005524 <xTaskResumeAll+0x120>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3318      	adds	r3, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff f809 	bl	8004476 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f804 	bl	8004476 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	2201      	movs	r2, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	4b2c      	ldr	r3, [pc, #176]	@ (8005528 <xTaskResumeAll+0x124>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	4a2a      	ldr	r2, [pc, #168]	@ (8005528 <xTaskResumeAll+0x124>)
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <xTaskResumeAll+0x128>)
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fe ff90 	bl	80043bc <vListInsertEnd>
=======
 800857c:	e02e      	b.n	80085dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857e:	4b34      	ldr	r3, [pc, #208]	@ (8008650 <xTaskResumeAll+0x120>)
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3318      	adds	r3, #24
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe ff01 	bl	8007392 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fefc 	bl	8007392 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859e:	2201      	movs	r2, #1
 80085a0:	409a      	lsls	r2, r3
 80085a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008654 <xTaskResumeAll+0x124>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	4a2a      	ldr	r2, [pc, #168]	@ (8008654 <xTaskResumeAll+0x124>)
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4a27      	ldr	r2, [pc, #156]	@ (8008658 <xTaskResumeAll+0x128>)
 80085ba:	441a      	add	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7fe fe88 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <xTaskResumeAll+0x12c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054aa:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <xTaskResumeAll+0x130>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <xTaskResumeAll+0x120>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1cc      	bne.n	8005452 <xTaskResumeAll+0x4e>
=======
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085cc:	4b23      	ldr	r3, [pc, #140]	@ (800865c <xTaskResumeAll+0x12c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80085d6:	4b22      	ldr	r3, [pc, #136]	@ (8008660 <xTaskResumeAll+0x130>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008650 <xTaskResumeAll+0x120>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1cc      	bne.n	800857e <xTaskResumeAll+0x4e>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <xTaskResumeAll+0xbe>
=======
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <xTaskResumeAll+0xbe>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 80054be:	f000 fb09 	bl	8005ad4 <prvResetNextTaskUnblockTime>
=======
 80085ea:	f000 fb19 	bl	8008c20 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <xTaskResumeAll+0x134>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <xTaskResumeAll+0xec>
=======
 80085ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008664 <xTaskResumeAll+0x134>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <xTaskResumeAll+0xec>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 80054ce:	f000 f837 	bl	8005540 <xTaskIncrementTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054d8:	4b16      	ldr	r3, [pc, #88]	@ (8005534 <xTaskResumeAll+0x130>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
=======
 80085fa:	f000 f847 	bl	800868c <xTaskIncrementTick>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008604:	4b16      	ldr	r3, [pc, #88]	@ (8008660 <xTaskResumeAll+0x130>)
 8008606:	2201      	movs	r2, #1
 8008608:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< Updated upstream
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f1      	bne.n	80054ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <xTaskResumeAll+0x134>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
=======
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3b01      	subs	r3, #1
 800860e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f1      	bne.n	80085fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008616:	4b13      	ldr	r3, [pc, #76]	@ (8008664 <xTaskResumeAll+0x134>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <xTaskResumeAll+0x130>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <xTaskResumeAll+0x108>
=======
 800861c:	4b10      	ldr	r3, [pc, #64]	@ (8008660 <xTaskResumeAll+0x130>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 80054f8:	2301      	movs	r3, #1
 80054fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054fc:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <xTaskResumeAll+0x138>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
=======
 8008624:	2301      	movs	r3, #1
 8008626:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008628:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <xTaskResumeAll+0x138>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800550c:	f000 fe8e 	bl	800622c <vPortExitCritical>

	return xAlreadyYielded;
 8005510:	68bb      	ldr	r3, [r7, #8]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200002b0 	.word	0x200002b0
 8005520:	20000288 	.word	0x20000288
 8005524:	20000248 	.word	0x20000248
 8005528:	20000290 	.word	0x20000290
 800552c:	2000018c 	.word	0x2000018c
 8005530:	20000188 	.word	0x20000188
 8005534:	2000029c 	.word	0x2000029c
 8005538:	20000298 	.word	0x20000298
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <xTaskIncrementTick>:
=======
 8008638:	f000 fe98 	bl	800936c <vPortExitCritical>

	return xAlreadyYielded;
 800863c:	68bb      	ldr	r3, [r7, #8]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20001d20 	.word	0x20001d20
 800864c:	20001cf8 	.word	0x20001cf8
 8008650:	20001cb8 	.word	0x20001cb8
 8008654:	20001d00 	.word	0x20001d00
 8008658:	20001bfc 	.word	0x20001bfc
 800865c:	20001bf8 	.word	0x20001bf8
 8008660:	20001d0c 	.word	0x20001d0c
 8008664:	20001d08 	.word	0x20001d08
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008672:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <xTaskGetTickCount+0x1c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008678:	687b      	ldr	r3, [r7, #4]
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20001cfc 	.word	0x20001cfc

0800868c <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
=======
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800554a:	4b4f      	ldr	r3, [pc, #316]	@ (8005688 <xTaskIncrementTick+0x148>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 808f 	bne.w	8005672 <xTaskIncrementTick+0x132>
=======
 8008696:	4b4f      	ldr	r3, [pc, #316]	@ (80087d4 <xTaskIncrementTick+0x148>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 808f 	bne.w	80087be <xTaskIncrementTick+0x132>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 8005554:	4b4d      	ldr	r3, [pc, #308]	@ (800568c <xTaskIncrementTick+0x14c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
=======
 80086a0:	4b4d      	ldr	r3, [pc, #308]	@ (80087d8 <xTaskIncrementTick+0x14c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3301      	adds	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800555c:	4a4b      	ldr	r2, [pc, #300]	@ (800568c <xTaskIncrementTick+0x14c>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d121      	bne.n	80055ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005568:	4b49      	ldr	r3, [pc, #292]	@ (8005690 <xTaskIncrementTick+0x150>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xTaskIncrementTick+0x46>
 800558a:	4b41      	ldr	r3, [pc, #260]	@ (8005690 <xTaskIncrementTick+0x150>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	4b40      	ldr	r3, [pc, #256]	@ (8005694 <xTaskIncrementTick+0x154>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3e      	ldr	r2, [pc, #248]	@ (8005690 <xTaskIncrementTick+0x150>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4a3e      	ldr	r2, [pc, #248]	@ (8005694 <xTaskIncrementTick+0x154>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b3e      	ldr	r3, [pc, #248]	@ (8005698 <xTaskIncrementTick+0x158>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005698 <xTaskIncrementTick+0x158>)
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	f000 fa94 	bl	8005ad4 <prvResetNextTaskUnblockTime>
=======
 80086a8:	4a4b      	ldr	r2, [pc, #300]	@ (80087d8 <xTaskIncrementTick+0x14c>)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d121      	bne.n	80086f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086b4:	4b49      	ldr	r3, [pc, #292]	@ (80087dc <xTaskIncrementTick+0x150>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	603b      	str	r3, [r7, #0]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xTaskIncrementTick+0x46>
 80086d6:	4b41      	ldr	r3, [pc, #260]	@ (80087dc <xTaskIncrementTick+0x150>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	4b40      	ldr	r3, [pc, #256]	@ (80087e0 <xTaskIncrementTick+0x154>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a3e      	ldr	r2, [pc, #248]	@ (80087dc <xTaskIncrementTick+0x150>)
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	4a3e      	ldr	r2, [pc, #248]	@ (80087e0 <xTaskIncrementTick+0x154>)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <xTaskIncrementTick+0x158>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	4a3c      	ldr	r2, [pc, #240]	@ (80087e4 <xTaskIncrementTick+0x158>)
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	f000 fa94 	bl	8008c20 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 80055ac:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d348      	bcc.n	8005648 <xTaskIncrementTick+0x108>
=======
 80086f8:	4b3b      	ldr	r3, [pc, #236]	@ (80087e8 <xTaskIncrementTick+0x15c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d348      	bcc.n	8008794 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 80055b6:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <xTaskIncrementTick+0x150>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <xTaskIncrementTick+0x8a>
=======
 8008702:	4b36      	ldr	r3, [pc, #216]	@ (80087dc <xTaskIncrementTick+0x150>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <xTaskIncrementTick+0x8a>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 80055c0:	4b36      	ldr	r3, [pc, #216]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	601a      	str	r2, [r3, #0]
					break;
 80055c8:	e03e      	b.n	8005648 <xTaskIncrementTick+0x108>
=======
 800870c:	4b36      	ldr	r3, [pc, #216]	@ (80087e8 <xTaskIncrementTick+0x15c>)
 800870e:	f04f 32ff 	mov.w	r2, #4294967295
 8008712:	601a      	str	r2, [r3, #0]
					break;
 8008714:	e03e      	b.n	8008794 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <xTaskIncrementTick+0x150>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d203      	bcs.n	80055ea <xTaskIncrementTick+0xaa>
=======
 8008716:	4b31      	ldr	r3, [pc, #196]	@ (80087dc <xTaskIncrementTick+0x150>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d203      	bcs.n	8008736 <xTaskIncrementTick+0xaa>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 80055e2:	4a2e      	ldr	r2, [pc, #184]	@ (800569c <xTaskIncrementTick+0x15c>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e8:	e02e      	b.n	8005648 <xTaskIncrementTick+0x108>
=======
 800872e:	4a2e      	ldr	r2, [pc, #184]	@ (80087e8 <xTaskIncrementTick+0x15c>)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008734:	e02e      	b.n	8008794 <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe ff41 	bl	8004476 <uxListRemove>
=======
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	3304      	adds	r3, #4
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fe29 	bl	8007392 <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3318      	adds	r3, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ff38 	bl	8004476 <uxListRemove>
=======
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3318      	adds	r3, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe fe20 	bl	8007392 <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <xTaskIncrementTick+0x160>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <xTaskIncrementTick+0x160>)
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a1f      	ldr	r2, [pc, #124]	@ (80056a4 <xTaskIncrementTick+0x164>)
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3304      	adds	r3, #4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fe fec4 	bl	80043bc <vListInsertEnd>
=======
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008756:	2201      	movs	r2, #1
 8008758:	409a      	lsls	r2, r3
 800875a:	4b24      	ldr	r3, [pc, #144]	@ (80087ec <xTaskIncrementTick+0x160>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4313      	orrs	r3, r2
 8008760:	4a22      	ldr	r2, [pc, #136]	@ (80087ec <xTaskIncrementTick+0x160>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a1f      	ldr	r2, [pc, #124]	@ (80087f0 <xTaskIncrementTick+0x164>)
 8008772:	441a      	add	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe fdac 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <xTaskIncrementTick+0x168>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d3b9      	bcc.n	80055b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	e7b6      	b.n	80055b6 <xTaskIncrementTick+0x76>
=======
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008784:	4b1b      	ldr	r3, [pc, #108]	@ (80087f4 <xTaskIncrementTick+0x168>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	429a      	cmp	r2, r3
 800878c:	d3b9      	bcc.n	8008702 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008792:	e7b6      	b.n	8008702 <xTaskIncrementTick+0x76>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 8005648:	4b17      	ldr	r3, [pc, #92]	@ (80056a8 <xTaskIncrementTick+0x168>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	4915      	ldr	r1, [pc, #84]	@ (80056a4 <xTaskIncrementTick+0x164>)
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d901      	bls.n	8005664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
=======
 8008794:	4b17      	ldr	r3, [pc, #92]	@ (80087f4 <xTaskIncrementTick+0x168>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800879a:	4915      	ldr	r1, [pc, #84]	@ (80087f0 <xTaskIncrementTick+0x164>)
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d901      	bls.n	80087b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <xTaskIncrementTick+0x16c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e004      	b.n	800567c <xTaskIncrementTick+0x13c>
=======
 80087b0:	4b11      	ldr	r3, [pc, #68]	@ (80087f8 <xTaskIncrementTick+0x16c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	e004      	b.n	80087c8 <xTaskIncrementTick+0x13c>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< Updated upstream
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <xTaskIncrementTick+0x170>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a0d      	ldr	r2, [pc, #52]	@ (80056b0 <xTaskIncrementTick+0x170>)
 800567a:	6013      	str	r3, [r2, #0]
=======
 80087be:	4b0f      	ldr	r3, [pc, #60]	@ (80087fc <xTaskIncrementTick+0x170>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3301      	adds	r3, #1
 80087c4:	4a0d      	ldr	r2, [pc, #52]	@ (80087fc <xTaskIncrementTick+0x170>)
 80087c6:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< Updated upstream
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200002b0 	.word	0x200002b0
 800568c:	2000028c 	.word	0x2000028c
 8005690:	20000240 	.word	0x20000240
 8005694:	20000244 	.word	0x20000244
 8005698:	200002a0 	.word	0x200002a0
 800569c:	200002a8 	.word	0x200002a8
 80056a0:	20000290 	.word	0x20000290
 80056a4:	2000018c 	.word	0x2000018c
 80056a8:	20000188 	.word	0x20000188
 80056ac:	2000029c 	.word	0x2000029c
 80056b0:	20000298 	.word	0x20000298

080056b4 <vTaskSwitchContext>:
=======
 80087c8:	697b      	ldr	r3, [r7, #20]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001d20 	.word	0x20001d20
 80087d8:	20001cfc 	.word	0x20001cfc
 80087dc:	20001cb0 	.word	0x20001cb0
 80087e0:	20001cb4 	.word	0x20001cb4
 80087e4:	20001d10 	.word	0x20001d10
 80087e8:	20001d18 	.word	0x20001d18
 80087ec:	20001d00 	.word	0x20001d00
 80087f0:	20001bfc 	.word	0x20001bfc
 80087f4:	20001bf8 	.word	0x20001bf8
 80087f8:	20001d0c 	.word	0x20001d0c
 80087fc:	20001d08 	.word	0x20001d08

08008800 <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <vTaskSwitchContext+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <vTaskSwitchContext+0x16>
=======
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008806:	4b2a      	ldr	r3, [pc, #168]	@ (80088b0 <vTaskSwitchContext+0xb0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 80056c2:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <vTaskSwitchContext+0xb4>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
=======
 800880e:	4b29      	ldr	r3, [pc, #164]	@ (80088b4 <vTaskSwitchContext+0xb4>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 80056c8:	e045      	b.n	8005756 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <vTaskSwitchContext+0xb4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d0:	4b26      	ldr	r3, [pc, #152]	@ (800576c <vTaskSwitchContext+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	f1c3 031f 	rsb	r3, r3, #31
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	4922      	ldr	r1, [pc, #136]	@ (8005770 <vTaskSwitchContext+0xbc>)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <vTaskSwitchContext+0x5e>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vTaskSwitchContext+0x5a>
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a14      	ldr	r2, [pc, #80]	@ (8005770 <vTaskSwitchContext+0xbc>)
 800571e:	4413      	add	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3308      	adds	r3, #8
 8005734:	429a      	cmp	r2, r3
 8005736:	d104      	bne.n	8005742 <vTaskSwitchContext+0x8e>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a0a      	ldr	r2, [pc, #40]	@ (8005774 <vTaskSwitchContext+0xc0>)
 800574a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <vTaskSwitchContext+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	334c      	adds	r3, #76	@ 0x4c
 8005752:	4a09      	ldr	r2, [pc, #36]	@ (8005778 <vTaskSwitchContext+0xc4>)
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200002b0 	.word	0x200002b0
 8005768:	2000029c 	.word	0x2000029c
 800576c:	20000290 	.word	0x20000290
 8005770:	2000018c 	.word	0x2000018c
 8005774:	20000188 	.word	0x20000188
 8005778:	20000020 	.word	0x20000020

0800577c <vTaskPlaceOnEventList>:
=======
 8008814:	e045      	b.n	80088a2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008816:	4b27      	ldr	r3, [pc, #156]	@ (80088b4 <vTaskSwitchContext+0xb4>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881c:	4b26      	ldr	r3, [pc, #152]	@ (80088b8 <vTaskSwitchContext+0xb8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800882a:	7afb      	ldrb	r3, [r7, #11]
 800882c:	f1c3 031f 	rsb	r3, r3, #31
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	4922      	ldr	r1, [pc, #136]	@ (80088bc <vTaskSwitchContext+0xbc>)
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	607b      	str	r3, [r7, #4]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vTaskSwitchContext+0x5a>
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <vTaskSwitchContext+0xbc>)
 800886a:	4413      	add	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	3308      	adds	r3, #8
 8008880:	429a      	cmp	r2, r3
 8008882:	d104      	bne.n	800888e <vTaskSwitchContext+0x8e>
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	605a      	str	r2, [r3, #4]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	4a0a      	ldr	r2, [pc, #40]	@ (80088c0 <vTaskSwitchContext+0xc0>)
 8008896:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008898:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <vTaskSwitchContext+0xc0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	334c      	adds	r3, #76	@ 0x4c
 800889e:	4a09      	ldr	r2, [pc, #36]	@ (80088c4 <vTaskSwitchContext+0xc4>)
 80088a0:	6013      	str	r3, [r2, #0]
}
 80088a2:	bf00      	nop
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	20001d20 	.word	0x20001d20
 80088b4:	20001d0c 	.word	0x20001d0c
 80088b8:	20001d00 	.word	0x20001d00
 80088bc:	20001bfc 	.word	0x20001bfc
 80088c0:	20001bf8 	.word	0x20001bf8
 80088c4:	20000030 	.word	0x20000030

080088c8 <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <vTaskPlaceOnEventList+0x24>
=======
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10b      	bne.n	80088f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	60fb      	str	r3, [r7, #12]
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <vTaskPlaceOnEventList+0x24>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <vTaskPlaceOnEventList+0x48>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3318      	adds	r3, #24
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fe fe29 	bl	8004404 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b2:	2101      	movs	r1, #1
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f000 fb6d 	bl	8005e94 <prvAddCurrentTaskToDelayedList>
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000188 	.word	0x20000188

080057c8 <xTaskRemoveFromEventList>:
=======
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <vTaskPlaceOnEventList+0x48>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3318      	adds	r3, #24
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fe fd11 	bl	8007320 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088fe:	2101      	movs	r1, #1
 8008900:	6838      	ldr	r0, [r7, #0]
 8008902:	f000 fb6d 	bl	8008fe0 <prvAddCurrentTaskToDelayedList>
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20001bf8 	.word	0x20001bf8

08008914 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
=======
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fe3b 	bl	8004476 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <xTaskRemoveFromEventList+0xb0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11c      	bne.n	8005842 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3304      	adds	r3, #4
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fe32 	bl	8004476 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	2201      	movs	r2, #1
 8005818:	409a      	lsls	r2, r3
 800581a:	4b18      	ldr	r3, [pc, #96]	@ (800587c <xTaskRemoveFromEventList+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	4a16      	ldr	r2, [pc, #88]	@ (800587c <xTaskRemoveFromEventList+0xb4>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <xTaskRemoveFromEventList+0xb8>)
 8005832:	441a      	add	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fdbe 	bl	80043bc <vListInsertEnd>
 8005840:	e005      	b.n	800584e <xTaskRemoveFromEventList+0x86>
=======
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60fb      	str	r3, [r7, #12]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3318      	adds	r3, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fd23 	bl	8007392 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800894c:	4b1d      	ldr	r3, [pc, #116]	@ (80089c4 <xTaskRemoveFromEventList+0xb0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11c      	bne.n	800898e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fd1a 	bl	8007392 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008962:	2201      	movs	r2, #1
 8008964:	409a      	lsls	r2, r3
 8008966:	4b18      	ldr	r3, [pc, #96]	@ (80089c8 <xTaskRemoveFromEventList+0xb4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4313      	orrs	r3, r2
 800896c:	4a16      	ldr	r2, [pc, #88]	@ (80089c8 <xTaskRemoveFromEventList+0xb4>)
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4a13      	ldr	r2, [pc, #76]	@ (80089cc <xTaskRemoveFromEventList+0xb8>)
 800897e:	441a      	add	r2, r3
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fe fca6 	bl	80072d8 <vListInsertEnd>
 800898c:	e005      	b.n	800899a <xTaskRemoveFromEventList+0x86>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3318      	adds	r3, #24
 8005846:	4619      	mov	r1, r3
 8005848:	480e      	ldr	r0, [pc, #56]	@ (8005884 <xTaskRemoveFromEventList+0xbc>)
 800584a:	f7fe fdb7 	bl	80043bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <xTaskRemoveFromEventList+0xc0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	429a      	cmp	r2, r3
 800585a:	d905      	bls.n	8005868 <xTaskRemoveFromEventList+0xa0>
=======
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3318      	adds	r3, #24
 8008992:	4619      	mov	r1, r3
 8008994:	480e      	ldr	r0, [pc, #56]	@ (80089d0 <xTaskRemoveFromEventList+0xbc>)
 8008996:	f7fe fc9f 	bl	80072d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <xTaskRemoveFromEventList+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d905      	bls.n	80089b4 <xTaskRemoveFromEventList+0xa0>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
=======
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 8005860:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <xTaskRemoveFromEventList+0xc4>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e001      	b.n	800586c <xTaskRemoveFromEventList+0xa4>
=======
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <xTaskRemoveFromEventList+0xc4>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e001      	b.n	80089b8 <xTaskRemoveFromEventList+0xa4>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200002b0 	.word	0x200002b0
 800587c:	20000290 	.word	0x20000290
 8005880:	2000018c 	.word	0x2000018c
 8005884:	20000248 	.word	0x20000248
 8005888:	20000188 	.word	0x20000188
 800588c:	2000029c 	.word	0x2000029c

08005890 <vTaskInternalSetTimeOutState>:
=======
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089b8:	697b      	ldr	r3, [r7, #20]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20001d20 	.word	0x20001d20
 80089c8:	20001d00 	.word	0x20001d00
 80089cc:	20001bfc 	.word	0x20001bfc
 80089d0:	20001cb8 	.word	0x20001cb8
 80089d4:	20001bf8 	.word	0x20001bf8
 80089d8:	20001d0c 	.word	0x20001d0c

080089dc <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005898:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <vTaskInternalSetTimeOutState+0x24>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058a0:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <vTaskInternalSetTimeOutState+0x28>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	200002a0 	.word	0x200002a0
 80058b8:	2000028c 	.word	0x2000028c

080058bc <xTaskCheckForTimeOut>:
=======
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <vTaskInternalSetTimeOutState+0x24>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <vTaskInternalSetTimeOutState+0x28>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	605a      	str	r2, [r3, #4]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	20001d10 	.word	0x20001d10
 8008a04:	20001cfc 	.word	0x20001cfc

08008a08 <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	613b      	str	r3, [r7, #16]
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	e7fd      	b.n	80058e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005902:	f000 fc61 	bl	80061c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005906:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <xTaskCheckForTimeOut+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
=======
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	613b      	str	r3, [r7, #16]
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	60fb      	str	r3, [r7, #12]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008a4e:	f000 fc5b 	bl	8009308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a52:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac8 <xTaskCheckForTimeOut+0xc0>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d102      	bne.n	8005926 <xTaskCheckForTimeOut+0x6a>
=======
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d102      	bne.n	8008a72 <xTaskCheckForTimeOut+0x6a>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e023      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
=======
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e023      	b.n	8008aba <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <xTaskCheckForTimeOut+0xc4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d007      	beq.n	8005942 <xTaskCheckForTimeOut+0x86>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <xTaskCheckForTimeOut+0x86>
=======
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b15      	ldr	r3, [pc, #84]	@ (8008acc <xTaskCheckForTimeOut+0xc4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d007      	beq.n	8008a8e <xTaskCheckForTimeOut+0x86>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d302      	bcc.n	8008a8e <xTaskCheckForTimeOut+0x86>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800593c:	2301      	movs	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e015      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	429a      	cmp	r2, r3
 800594a:	d20b      	bcs.n	8005964 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff99 	bl	8005890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e004      	b.n	800596e <xTaskCheckForTimeOut+0xb2>
=======
 8008a88:	2301      	movs	r3, #1
 8008a8a:	61fb      	str	r3, [r7, #28]
 8008a8c:	e015      	b.n	8008aba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d20b      	bcs.n	8008ab0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff99 	bl	80089dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	e004      	b.n	8008aba <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f000 fc5d 	bl	800622c <vPortExitCritical>

	return xReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2000028c 	.word	0x2000028c
 8005980:	200002a0 	.word	0x200002a0

08005984 <vTaskMissedYield>:
=======
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008aba:	f000 fc57 	bl	800936c <vPortExitCritical>

	return xReturn;
 8008abe:	69fb      	ldr	r3, [r7, #28]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20001cfc 	.word	0x20001cfc
 8008acc:	20001d10 	.word	0x20001d10

08008ad0 <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <vTaskMissedYield+0x14>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	2000029c 	.word	0x2000029c

0800599c <prvIdleTask>:
=======
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ad4:	4b03      	ldr	r3, [pc, #12]	@ (8008ae4 <vTaskMissedYield+0x14>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	20001d0c 	.word	0x20001d0c

08008ae8 <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
=======
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 80059a4:	f000 f852 	bl	8005a4c <prvCheckTasksWaitingTermination>
=======
 8008af0:	f000 f852 	bl	8008b98 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <prvIdleTask+0x28>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d9f9      	bls.n	80059a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <prvIdleTask+0x2c>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059c0:	e7f0      	b.n	80059a4 <prvIdleTask+0x8>
 80059c2:	bf00      	nop
 80059c4:	2000018c 	.word	0x2000018c
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <prvInitialiseTaskLists>:
=======
 8008af4:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <prvIdleTask+0x28>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d9f9      	bls.n	8008af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <prvIdleTask+0x2c>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b0c:	e7f0      	b.n	8008af0 <prvIdleTask+0x8>
 8008b0e:	bf00      	nop
 8008b10:	20001bfc 	.word	0x20001bfc
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	e00c      	b.n	80059f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <prvInitialiseTaskLists+0x60>)
 80059e4:	4413      	add	r3, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fcbb 	bl	8004362 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d9ef      	bls.n	80059d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059f8:	480d      	ldr	r0, [pc, #52]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 80059fa:	f7fe fcb2 	bl	8004362 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059fe:	480d      	ldr	r0, [pc, #52]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a00:	f7fe fcaf 	bl	8004362 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a04:	480c      	ldr	r0, [pc, #48]	@ (8005a38 <prvInitialiseTaskLists+0x6c>)
 8005a06:	f7fe fcac 	bl	8004362 <vListInitialise>
=======
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b1e:	2300      	movs	r3, #0
 8008b20:	607b      	str	r3, [r7, #4]
 8008b22:	e00c      	b.n	8008b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4a12      	ldr	r2, [pc, #72]	@ (8008b78 <prvInitialiseTaskLists+0x60>)
 8008b30:	4413      	add	r3, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fba3 	bl	800727e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	d9ef      	bls.n	8008b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b44:	480d      	ldr	r0, [pc, #52]	@ (8008b7c <prvInitialiseTaskLists+0x64>)
 8008b46:	f7fe fb9a 	bl	800727e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b4a:	480d      	ldr	r0, [pc, #52]	@ (8008b80 <prvInitialiseTaskLists+0x68>)
 8008b4c:	f7fe fb97 	bl	800727e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b50:	480c      	ldr	r0, [pc, #48]	@ (8008b84 <prvInitialiseTaskLists+0x6c>)
 8008b52:	f7fe fb94 	bl	800727e <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 8005a0a:	480c      	ldr	r0, [pc, #48]	@ (8005a3c <prvInitialiseTaskLists+0x70>)
 8005a0c:	f7fe fca9 	bl	8004362 <vListInitialise>
=======
 8008b56:	480c      	ldr	r0, [pc, #48]	@ (8008b88 <prvInitialiseTaskLists+0x70>)
 8008b58:	f7fe fb91 	bl	800727e <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 8005a10:	480b      	ldr	r0, [pc, #44]	@ (8005a40 <prvInitialiseTaskLists+0x74>)
 8005a12:	f7fe fca6 	bl	8004362 <vListInitialise>
=======
 8008b5c:	480b      	ldr	r0, [pc, #44]	@ (8008b8c <prvInitialiseTaskLists+0x74>)
 8008b5e:	f7fe fb8e 	bl	800727e <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 8005a16:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <prvInitialiseTaskLists+0x78>)
 8005a18:	4a05      	ldr	r2, [pc, #20]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 8005a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <prvInitialiseTaskLists+0x7c>)
 8005a1e:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a20:	601a      	str	r2, [r3, #0]
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000018c 	.word	0x2000018c
 8005a30:	20000218 	.word	0x20000218
 8005a34:	2000022c 	.word	0x2000022c
 8005a38:	20000248 	.word	0x20000248
 8005a3c:	2000025c 	.word	0x2000025c
 8005a40:	20000274 	.word	0x20000274
 8005a44:	20000240 	.word	0x20000240
 8005a48:	20000244 	.word	0x20000244

08005a4c <prvCheckTasksWaitingTermination>:
=======
 8008b62:	4b0b      	ldr	r3, [pc, #44]	@ (8008b90 <prvInitialiseTaskLists+0x78>)
 8008b64:	4a05      	ldr	r2, [pc, #20]	@ (8008b7c <prvInitialiseTaskLists+0x64>)
 8008b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <prvInitialiseTaskLists+0x7c>)
 8008b6a:	4a05      	ldr	r2, [pc, #20]	@ (8008b80 <prvInitialiseTaskLists+0x68>)
 8008b6c:	601a      	str	r2, [r3, #0]
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20001bfc 	.word	0x20001bfc
 8008b7c:	20001c88 	.word	0x20001c88
 8008b80:	20001c9c 	.word	0x20001c9c
 8008b84:	20001cb8 	.word	0x20001cb8
 8008b88:	20001ccc 	.word	0x20001ccc
 8008b8c:	20001ce4 	.word	0x20001ce4
 8008b90:	20001cb0 	.word	0x20001cb0
 8008b94:	20001cb4 	.word	0x20001cb4

08008b98 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
=======
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 8005a52:	e019      	b.n	8005a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a54:	f000 fbb8 	bl	80061c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a58:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <prvCheckTasksWaitingTermination+0x50>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fd06 	bl	8004476 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a7e:	f000 fbd5 	bl	800622c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f810 	bl	8005aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e1      	bne.n	8005a54 <prvCheckTasksWaitingTermination+0x8>
=======
 8008b9e:	e019      	b.n	8008bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ba0:	f000 fbb2 	bl	8009308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba4:	4b10      	ldr	r3, [pc, #64]	@ (8008be8 <prvCheckTasksWaitingTermination+0x50>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fbee 	bl	8007392 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <prvCheckTasksWaitingTermination+0x54>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8008bec <prvCheckTasksWaitingTermination+0x54>)
 8008bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf0 <prvCheckTasksWaitingTermination+0x58>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf0 <prvCheckTasksWaitingTermination+0x58>)
 8008bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bca:	f000 fbcf 	bl	800936c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f810 	bl	8008bf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd4:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <prvCheckTasksWaitingTermination+0x58>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e1      	bne.n	8008ba0 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000025c 	.word	0x2000025c
 8005aa0:	20000288 	.word	0x20000288
 8005aa4:	20000270 	.word	0x20000270

08005aa8 <prvDeleteTCB>:
=======
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20001ccc 	.word	0x20001ccc
 8008bec:	20001cf8 	.word	0x20001cf8
 8008bf0:	20001ce0 	.word	0x20001ce0

08008bf4 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
=======
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< Updated upstream
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	334c      	adds	r3, #76	@ 0x4c
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fe9f 	bl	80067f8 <_reclaim_reent>
=======
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	334c      	adds	r3, #76	@ 0x4c
 8008c00:	4618      	mov	r0, r3
 8008c02:	f001 fc3f 	bl	800a484 <_reclaim_reent>
>>>>>>> Stashed changes

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd72 	bl	80065a8 <vPortFree>
			vPortFree( pxTCB );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fd6f 	bl	80065a8 <vPortFree>
=======
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fd6c 	bl	80096e8 <vPortFree>
			vPortFree( pxTCB );
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fd69 	bl	80096e8 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <prvResetNextTaskUnblockTime>:
=======
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <prvResetNextTaskUnblockTime+0x38>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <prvResetNextTaskUnblockTime+0x1a>
=======
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c26:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <prvResetNextTaskUnblockTime+0x38>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d104      	bne.n	8008c3a <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <prvResetNextTaskUnblockTime+0x3c>)
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	601a      	str	r2, [r3, #0]
=======
 8008c30:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <prvResetNextTaskUnblockTime+0x3c>)
 8008c32:	f04f 32ff 	mov.w	r2, #4294967295
 8008c36:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 8005aec:	e008      	b.n	8005b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aee:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <prvResetNextTaskUnblockTime+0x38>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a04      	ldr	r2, [pc, #16]	@ (8005b10 <prvResetNextTaskUnblockTime+0x3c>)
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	20000240 	.word	0x20000240
 8005b10:	200002a8 	.word	0x200002a8

08005b14 <xTaskGetSchedulerState>:
=======
 8008c38:	e008      	b.n	8008c4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c3a:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <prvResetNextTaskUnblockTime+0x38>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4a04      	ldr	r2, [pc, #16]	@ (8008c5c <prvResetNextTaskUnblockTime+0x3c>)
 8008c4a:	6013      	str	r3, [r2, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20001cb0 	.word	0x20001cb0
 8008c5c:	20001d18 	.word	0x20001d18

08008c60 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <xTaskGetSchedulerState+0x34>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b22:	2301      	movs	r3, #1
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	e008      	b.n	8005b3a <xTaskGetSchedulerState+0x26>
=======
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <xTaskGetSchedulerState+0x34>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	e008      	b.n	8008c86 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 8005b28:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <xTaskGetSchedulerState+0x38>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b30:	2302      	movs	r3, #2
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e001      	b.n	8005b3a <xTaskGetSchedulerState+0x26>
=======
 8008c74:	4b08      	ldr	r3, [pc, #32]	@ (8008c98 <xTaskGetSchedulerState+0x38>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	e001      	b.n	8008c86 <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
=======
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
			}
		}

		return xReturn;
<<<<<<< Updated upstream
 8005b3a:	687b      	ldr	r3, [r7, #4]
	}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000294 	.word	0x20000294
 8005b4c:	200002b0 	.word	0x200002b0

08005b50 <xTaskPriorityInherit>:
=======
 8008c86:	687b      	ldr	r3, [r7, #4]
	}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	20001d04 	.word	0x20001d04
 8008c98:	20001d20 	.word	0x20001d20

08008c9c <xTaskPriorityInherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
=======
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< Updated upstream
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d05e      	beq.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d05e      	beq.n	8008d70 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d24e      	bcs.n	8005c12 <xTaskPriorityInherit+0xc2>
=======
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	4b31      	ldr	r3, [pc, #196]	@ (8008d7c <xTaskPriorityInherit+0xe0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d24e      	bcs.n	8008d5e <xTaskPriorityInherit+0xc2>
>>>>>>> Stashed changes
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	db06      	blt.n	8005b8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	f1c3 0207 	rsb	r2, r3, #7
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	619a      	str	r2, [r3, #24]
=======
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	db06      	blt.n	8008cd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8008d7c <xTaskPriorityInherit+0xe0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cce:	f1c3 0207 	rsb	r2, r3, #7
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6959      	ldr	r1, [r3, #20]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <xTaskPriorityInherit+0xe4>)
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	d12f      	bne.n	8005c02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fc65 	bl	8004476 <uxListRemove>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xTaskPriorityInherit+0x78>
=======
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6959      	ldr	r1, [r3, #20]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4a26      	ldr	r2, [pc, #152]	@ (8008d80 <xTaskPriorityInherit+0xe4>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	4299      	cmp	r1, r3
 8008cec:	d12f      	bne.n	8008d4e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe fb4d 	bl	8007392 <uxListRemove>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <xTaskPriorityInherit+0x78>
>>>>>>> Stashed changes
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
<<<<<<< Updated upstream
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bc6:	6013      	str	r3, [r2, #0]
=======
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	2201      	movs	r2, #1
 8008d04:	fa02 f303 	lsl.w	r3, r2, r3
 8008d08:	43da      	mvns	r2, r3
 8008d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008d84 <xTaskPriorityInherit+0xe8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	4a1c      	ldr	r2, [pc, #112]	@ (8008d84 <xTaskPriorityInherit+0xe8>)
 8008d12:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 8005bc8:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	4b17      	ldr	r3, [pc, #92]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <xTaskPriorityInherit+0xe8>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <xTaskPriorityInherit+0xe4>)
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fbde 	bl	80043bc <vListInsertEnd>
 8005c00:	e004      	b.n	8005c0c <xTaskPriorityInherit+0xbc>
=======
 8008d14:	4b19      	ldr	r3, [pc, #100]	@ (8008d7c <xTaskPriorityInherit+0xe0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	2201      	movs	r2, #1
 8008d24:	409a      	lsls	r2, r3
 8008d26:	4b17      	ldr	r3, [pc, #92]	@ (8008d84 <xTaskPriorityInherit+0xe8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <xTaskPriorityInherit+0xe8>)
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a10      	ldr	r2, [pc, #64]	@ (8008d80 <xTaskPriorityInherit+0xe4>)
 8008d3e:	441a      	add	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fac6 	bl	80072d8 <vListInsertEnd>
 8008d4c:	e004      	b.n	8008d58 <xTaskPriorityInherit+0xbc>
>>>>>>> Stashed changes
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< Updated upstream
 8005c02:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8008d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d7c <xTaskPriorityInherit+0xe0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e008      	b.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 8008d58:	2301      	movs	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e008      	b.n	8008d70 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <xTaskPriorityInherit+0xe0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d201      	bcs.n	8005c24 <xTaskPriorityInherit+0xd4>
=======
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d62:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <xTaskPriorityInherit+0xe0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d201      	bcs.n	8008d70 <xTaskPriorityInherit+0xd4>
>>>>>>> Stashed changes
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005c20:	2301      	movs	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
=======
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005c24:	68fb      	ldr	r3, [r7, #12]
	}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000188 	.word	0x20000188
 8005c34:	2000018c 	.word	0x2000018c
 8005c38:	20000290 	.word	0x20000290

08005c3c <xTaskPriorityDisinherit>:
=======
 8008d70:	68fb      	ldr	r3, [r7, #12]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20001bf8 	.word	0x20001bf8
 8008d80:	20001bfc 	.word	0x20001bfc
 8008d84:	20001d00 	.word	0x20001d00

08008d88 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d070      	beq.n	8005d34 <xTaskPriorityDisinherit+0xf8>
=======
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d070      	beq.n	8008e80 <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 8005c52:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <xTaskPriorityDisinherit+0x104>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d00b      	beq.n	8005c74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	60bb      	str	r3, [r7, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	e7fd      	b.n	8005c90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c98:	1e5a      	subs	r2, r3, #1
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	649a      	str	r2, [r3, #72]	@ 0x48
=======
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e8c <xTaskPriorityDisinherit+0x104>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d00b      	beq.n	8008dc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	60bb      	str	r3, [r7, #8]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	649a      	str	r2, [r3, #72]	@ 0x48
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d044      	beq.n	8005d34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d140      	bne.n	8005d34 <xTaskPriorityDisinherit+0xf8>
=======
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d044      	beq.n	8008e80 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d140      	bne.n	8008e80 <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fbdd 	bl	8004476 <uxListRemove>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d115      	bne.n	8005cee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	491f      	ldr	r1, [pc, #124]	@ (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xTaskPriorityDisinherit+0xb2>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	2201      	movs	r2, #1
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	43da      	mvns	r2, r3
 8005ce4:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005cec:	6013      	str	r3, [r2, #0]
=======
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fac5 	bl	8007392 <uxListRemove>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d115      	bne.n	8008e3a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e12:	491f      	ldr	r1, [pc, #124]	@ (8008e90 <xTaskPriorityDisinherit+0x108>)
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <xTaskPriorityDisinherit+0xb2>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	2201      	movs	r2, #1
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	43da      	mvns	r2, r3
 8008e30:	4b18      	ldr	r3, [pc, #96]	@ (8008e94 <xTaskPriorityDisinherit+0x10c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4013      	ands	r3, r2
 8008e36:	4a17      	ldr	r2, [pc, #92]	@ (8008e94 <xTaskPriorityDisinherit+0x10c>)
 8008e38:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	f1c3 0207 	rsb	r2, r3, #7
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	2201      	movs	r2, #1
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	4a0d      	ldr	r2, [pc, #52]	@ (8005d48 <xTaskPriorityDisinherit+0x10c>)
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4a08      	ldr	r2, [pc, #32]	@ (8005d44 <xTaskPriorityDisinherit+0x108>)
 8005d22:	441a      	add	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe fb46 	bl	80043bc <vListInsertEnd>
=======
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	f1c3 0207 	rsb	r2, r3, #7
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e52:	2201      	movs	r2, #1
 8008e54:	409a      	lsls	r2, r3
 8008e56:	4b0f      	ldr	r3, [pc, #60]	@ (8008e94 <xTaskPriorityDisinherit+0x10c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e94 <xTaskPriorityDisinherit+0x10c>)
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4a08      	ldr	r2, [pc, #32]	@ (8008e90 <xTaskPriorityDisinherit+0x108>)
 8008e6e:	441a      	add	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7fe fa2e 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
=======
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 8005d34:	697b      	ldr	r3, [r7, #20]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000188 	.word	0x20000188
 8005d44:	2000018c 	.word	0x2000018c
 8005d48:	20000290 	.word	0x20000290

08005d4c <vTaskPriorityDisinheritAfterTimeout>:
=======
 8008e80:	697b      	ldr	r3, [r7, #20]
	}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20001bf8 	.word	0x20001bf8
 8008e90:	20001bfc 	.word	0x20001bfc
 8008e94:	20001d00 	.word	0x20001d00

08008e98 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< Updated upstream
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d079      	beq.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d079      	beq.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< Updated upstream
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60fb      	str	r3, [r7, #12]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> Stashed changes

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< Updated upstream
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d902      	bls.n	8005d94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e002      	b.n	8005d9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
=======
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d902      	bls.n	8008ee0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e002      	b.n	8008ee6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
>>>>>>> Stashed changes
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d98:	61fb      	str	r3, [r7, #28]
=======
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< Updated upstream
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d059      	beq.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d059      	beq.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< Updated upstream
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d154      	bne.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
=======
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d154      	bne.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
>>>>>>> Stashed changes
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< Updated upstream
 8005dae:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10b      	bne.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60bb      	str	r3, [r7, #8]
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <vTaskPriorityDisinheritAfterTimeout+0x80>
=======
 8008efa:	4b2c      	ldr	r3, [pc, #176]	@ (8008fac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d10b      	bne.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60bb      	str	r3, [r7, #8]
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	e7fd      	b.n	8008f18 <vTaskPriorityDisinheritAfterTimeout+0x80>
>>>>>>> Stashed changes

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< Updated upstream
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< Updated upstream
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db04      	blt.n	8005dee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f1c3 0207 	rsb	r2, r3, #7
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	619a      	str	r2, [r3, #24]
=======
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db04      	blt.n	8008f3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f1c3 0207 	rsb	r2, r3, #7
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< Updated upstream
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	6959      	ldr	r1, [r3, #20]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dfe:	4413      	add	r3, r2
 8005e00:	4299      	cmp	r1, r3
 8005e02:	d129      	bne.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fb34 	bl	8004476 <uxListRemove>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <vTaskPriorityDisinheritAfterTimeout+0xde>
=======
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	6959      	ldr	r1, [r3, #20]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4a19      	ldr	r2, [pc, #100]	@ (8008fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d129      	bne.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe fa1c 	bl	8007392 <uxListRemove>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <vTaskPriorityDisinheritAfterTimeout+0xde>
>>>>>>> Stashed changes
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
<<<<<<< Updated upstream
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4013      	ands	r3, r2
 8005e26:	4a10      	ldr	r2, [pc, #64]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e28:	6013      	str	r3, [r2, #0]
=======
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	2201      	movs	r2, #1
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43da      	mvns	r2, r3
 8008f6c:	4b11      	ldr	r3, [pc, #68]	@ (8008fb4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	4a10      	ldr	r2, [pc, #64]	@ (8008fb4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008f74:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a0b      	ldr	r2, [pc, #44]	@ (8005e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a06      	ldr	r2, [pc, #24]	@ (8005e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fab2 	bl	80043bc <vListInsertEnd>
=======
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	409a      	lsls	r2, r3
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	4a0b      	ldr	r2, [pc, #44]	@ (8008fb4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4a06      	ldr	r2, [pc, #24]	@ (8008fb0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008f96:	441a      	add	r2, r3
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f7fe f99a 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 8005e58:	bf00      	nop
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000188 	.word	0x20000188
 8005e64:	2000018c 	.word	0x2000018c
 8005e68:	20000290 	.word	0x20000290

08005e6c <pvTaskIncrementMutexHeldCount>:
=======
 8008fa4:	bf00      	nop
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20001bf8 	.word	0x20001bf8
 8008fb0:	20001bfc 	.word	0x20001bfc
 8008fb4:	20001d00 	.word	0x20001d00

08008fb8 <pvTaskIncrementMutexHeldCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< Updated upstream
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e7e:	3201      	adds	r2, #1
 8005e80:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e82:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e84:	681b      	ldr	r3, [r3, #0]
	}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000188 	.word	0x20000188

08005e94 <prvAddCurrentTaskToDelayedList>:
=======
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008fbc:	4b07      	ldr	r3, [pc, #28]	@ (8008fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008fca:	3201      	adds	r2, #1
 8008fcc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008fce:	4b03      	ldr	r3, [pc, #12]	@ (8008fdc <pvTaskIncrementMutexHeldCount+0x24>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
	}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20001bf8 	.word	0x20001bf8

08008fe0 <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e9e:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
=======
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fea:	4b29      	ldr	r3, [pc, #164]	@ (8009090 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fae3 	bl	8004476 <uxListRemove>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8008ff0:	4b28      	ldr	r3, [pc, #160]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe f9cb 	bl	8007392 <uxListRemove>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< Updated upstream
 8005eb6:	4b24      	ldr	r3, [pc, #144]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	4a20      	ldr	r2, [pc, #128]	@ (8005f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ecc:	6013      	str	r3, [r2, #0]
=======
 8009002:	4b24      	ldr	r3, [pc, #144]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	2201      	movs	r2, #1
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43da      	mvns	r2, r3
 8009010:	4b21      	ldr	r3, [pc, #132]	@ (8009098 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4013      	ands	r3, r2
 8009016:	4a20      	ldr	r2, [pc, #128]	@ (8009098 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009018:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d10a      	bne.n	8005eec <prvAddCurrentTaskToDelayedList+0x58>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <prvAddCurrentTaskToDelayedList+0x58>
=======
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009020:	d10a      	bne.n	8009038 <prvAddCurrentTaskToDelayedList+0x58>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 8005edc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	481a      	ldr	r0, [pc, #104]	@ (8005f50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ee6:	f7fe fa69 	bl	80043bc <vListInsertEnd>
=======
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3304      	adds	r3, #4
 800902e:	4619      	mov	r1, r3
 8009030:	481a      	ldr	r0, [pc, #104]	@ (800909c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009032:	f7fe f951 	bl	80072d8 <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 8005eea:	e026      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef4:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d209      	bcs.n	8005f18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f04:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe fa77 	bl	8004404 <vListInsert>
}
 8005f16:	e010      	b.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f18:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fe fa6d 	bl	8004404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d202      	bcs.n	8005f3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f34:	4a09      	ldr	r2, [pc, #36]	@ (8005f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6013      	str	r3, [r2, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	2000028c 	.word	0x2000028c
 8005f48:	20000188 	.word	0x20000188
 8005f4c:	20000290 	.word	0x20000290
 8005f50:	20000274 	.word	0x20000274
 8005f54:	20000244 	.word	0x20000244
 8005f58:	20000240 	.word	0x20000240
 8005f5c:	200002a8 	.word	0x200002a8

08005f60 <pxPortInitialiseStack>:
=======
 8009036:	e026      	b.n	8009086 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009040:	4b14      	ldr	r3, [pc, #80]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	429a      	cmp	r2, r3
 800904e:	d209      	bcs.n	8009064 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009050:	4b13      	ldr	r3, [pc, #76]	@ (80090a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7fe f95f 	bl	8007320 <vListInsert>
}
 8009062:	e010      	b.n	8009086 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009064:	4b0f      	ldr	r3, [pc, #60]	@ (80090a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4b0a      	ldr	r3, [pc, #40]	@ (8009094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3304      	adds	r3, #4
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fe f955 	bl	8007320 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009076:	4b0c      	ldr	r3, [pc, #48]	@ (80090a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	429a      	cmp	r2, r3
 800907e:	d202      	bcs.n	8009086 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009080:	4a09      	ldr	r2, [pc, #36]	@ (80090a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6013      	str	r3, [r2, #0]
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20001cfc 	.word	0x20001cfc
 8009094:	20001bf8 	.word	0x20001bf8
 8009098:	20001d00 	.word	0x20001d00
 800909c:	20001ce4 	.word	0x20001ce4
 80090a0:	20001cb4 	.word	0x20001cb4
 80090a4:	20001cb0 	.word	0x20001cb0
 80090a8:	20001d18 	.word	0x20001d18

080090ac <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
=======
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b04      	subs	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f90:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc4 <pxPortInitialiseStack+0x64>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3b14      	subs	r3, #20
 8005f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	601a      	str	r2, [r3, #0]
=======
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b04      	subs	r3, #4
 80090bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009110 <pxPortInitialiseStack+0x64>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b14      	subs	r3, #20
 80090e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f06f 0202 	mvn.w	r2, #2
 8005fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3b20      	subs	r3, #32
 8005fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	08005fc9 	.word	0x08005fc9

08005fc8 <prvTaskExitError>:
=======
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3b04      	subs	r3, #4
 80090f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f06f 0202 	mvn.w	r2, #2
 80090fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3b20      	subs	r3, #32
 8009100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	08009115 	.word	0x08009115

08009114 <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
=======
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 8005fd2:	4b13      	ldr	r3, [pc, #76]	@ (8006020 <prvTaskExitError+0x58>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d00b      	beq.n	8005ff4 <prvTaskExitError+0x2c>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <prvTaskExitError+0x28>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
}
 8006006:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006008:	bf00      	nop
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0fc      	beq.n	800600a <prvTaskExitError+0x42>
=======
 800911e:	4b13      	ldr	r3, [pc, #76]	@ (800916c <prvTaskExitError+0x58>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d00b      	beq.n	8009140 <prvTaskExitError+0x2c>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <prvTaskExitError+0x28>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	60bb      	str	r3, [r7, #8]
}
 8009152:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009154:	bf00      	nop
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0fc      	beq.n	8009156 <prvTaskExitError+0x42>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2000001c 	.word	0x2000001c
	...

08006030 <SVC_Handler>:
=======
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	20000020 	.word	0x20000020

08009170 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 8006030:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000188 	.word	0x20000188
=======
 8009170:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <pxCurrentTCBConst2>)
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f380 8809 	msr	PSP, r0
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	4770      	bx	lr
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst2>:
 8009190:	20001bf8 	.word	0x20001bf8
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
=======
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 8006058:	4808      	ldr	r0, [pc, #32]	@ (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
=======
 8009198:	4808      	ldr	r0, [pc, #32]	@ (80091bc <prvPortStartFirstTask+0x24>)
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f380 8808 	msr	MSP, r0
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8814 	msr	CONTROL, r0
 80091aa:	b662      	cpsie	i
 80091ac:	b661      	cpsie	f
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	df00      	svc	0
 80091b8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:
=======
 80091ba:	bf00      	nop
 80091bc:	e000ed08 	.word	0xe000ed08

080091c0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
=======
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< Updated upstream
 8006086:	4b47      	ldr	r3, [pc, #284]	@ (80061a4 <xPortStartScheduler+0x124>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a47      	ldr	r2, [pc, #284]	@ (80061a8 <xPortStartScheduler+0x128>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10b      	bne.n	80060a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a8:	4b3e      	ldr	r3, [pc, #248]	@ (80061a4 <xPortStartScheduler+0x124>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3f      	ldr	r2, [pc, #252]	@ (80061ac <xPortStartScheduler+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10b      	bne.n	80060ca <xPortStartScheduler+0x4a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	613b      	str	r3, [r7, #16]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xPortStartScheduler+0x46>
=======
 80091c6:	4b47      	ldr	r3, [pc, #284]	@ (80092e4 <xPortStartScheduler+0x124>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a47      	ldr	r2, [pc, #284]	@ (80092e8 <xPortStartScheduler+0x128>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d10b      	bne.n	80091e8 <xPortStartScheduler+0x28>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	60fb      	str	r3, [r7, #12]
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	e7fd      	b.n	80091e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091e8:	4b3e      	ldr	r3, [pc, #248]	@ (80092e4 <xPortStartScheduler+0x124>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a3f      	ldr	r2, [pc, #252]	@ (80092ec <xPortStartScheduler+0x12c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d10b      	bne.n	800920a <xPortStartScheduler+0x4a>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	613b      	str	r3, [r7, #16]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <xPortStartScheduler+0x46>
>>>>>>> Stashed changes

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <xPortStartScheduler+0x130>)
 80060cc:	617b      	str	r3, [r7, #20]
=======
 800920a:	4b39      	ldr	r3, [pc, #228]	@ (80092f0 <xPortStartScheduler+0x130>)
 800920c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	607b      	str	r3, [r7, #4]
=======
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	22ff      	movs	r2, #255	@ 0xff
 80060da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	701a      	strb	r2, [r3, #0]
=======
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	22ff      	movs	r2, #255	@ 0xff
 800921a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800922c:	b2da      	uxtb	r2, r3
 800922e:	4b31      	ldr	r3, [pc, #196]	@ (80092f4 <xPortStartScheduler+0x134>)
 8009230:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 80060f2:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060f4:	2207      	movs	r2, #7
 80060f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f8:	e009      	b.n	800610e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060fa:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <xPortStartScheduler+0x138>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3b01      	subs	r3, #1
 8006100:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b80      	cmp	r3, #128	@ 0x80
 8006118:	d0ef      	beq.n	80060fa <xPortStartScheduler+0x7a>
=======
 8009232:	4b31      	ldr	r3, [pc, #196]	@ (80092f8 <xPortStartScheduler+0x138>)
 8009234:	2207      	movs	r2, #7
 8009236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009238:	e009      	b.n	800924e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800923a:	4b2f      	ldr	r3, [pc, #188]	@ (80092f8 <xPortStartScheduler+0x138>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4a2d      	ldr	r2, [pc, #180]	@ (80092f8 <xPortStartScheduler+0x138>)
 8009242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	b2db      	uxtb	r3, r3
 800924c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009256:	2b80      	cmp	r3, #128	@ 0x80
 8009258:	d0ef      	beq.n	800923a <xPortStartScheduler+0x7a>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 800611a:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <xPortStartScheduler+0x138>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1c3 0307 	rsb	r3, r3, #7
 8006122:	2b04      	cmp	r3, #4
 8006124:	d00b      	beq.n	800613e <xPortStartScheduler+0xbe>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60bb      	str	r3, [r7, #8]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xPortStartScheduler+0xba>
=======
 800925a:	4b27      	ldr	r3, [pc, #156]	@ (80092f8 <xPortStartScheduler+0x138>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1c3 0307 	rsb	r3, r3, #7
 8009262:	2b04      	cmp	r3, #4
 8009264:	d00b      	beq.n	800927e <xPortStartScheduler+0xbe>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	60bb      	str	r3, [r7, #8]
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	e7fd      	b.n	800927a <xPortStartScheduler+0xba>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <xPortStartScheduler+0x138>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006150:	4a19      	ldr	r2, [pc, #100]	@ (80061b8 <xPortStartScheduler+0x138>)
 8006152:	6013      	str	r3, [r2, #0]
=======
 800927e:	4b1e      	ldr	r3, [pc, #120]	@ (80092f8 <xPortStartScheduler+0x138>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	4a1c      	ldr	r2, [pc, #112]	@ (80092f8 <xPortStartScheduler+0x138>)
 8009286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009288:	4b1b      	ldr	r3, [pc, #108]	@ (80092f8 <xPortStartScheduler+0x138>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009290:	4a19      	ldr	r2, [pc, #100]	@ (80092f8 <xPortStartScheduler+0x138>)
 8009292:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	701a      	strb	r2, [r3, #0]
=======
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	b2da      	uxtb	r2, r3
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 800615c:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <xPortStartScheduler+0x13c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <xPortStartScheduler+0x13c>)
 8006162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a13      	ldr	r2, [pc, #76]	@ (80061bc <xPortStartScheduler+0x13c>)
 800616e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006172:	6013      	str	r3, [r2, #0]
=======
 800929c:	4b17      	ldr	r3, [pc, #92]	@ (80092fc <xPortStartScheduler+0x13c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <xPortStartScheduler+0x13c>)
 80092a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092a8:	4b14      	ldr	r3, [pc, #80]	@ (80092fc <xPortStartScheduler+0x13c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a13      	ldr	r2, [pc, #76]	@ (80092fc <xPortStartScheduler+0x13c>)
 80092ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092b2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 8006174:	f000 f8da 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <xPortStartScheduler+0x140>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800617e:	f000 f8f9 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006182:	4b10      	ldr	r3, [pc, #64]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a0f      	ldr	r2, [pc, #60]	@ (80061c4 <xPortStartScheduler+0x144>)
 8006188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800618e:	f7ff ff63 	bl	8006058 <prvPortStartFirstTask>
=======
 80092b4:	f000 f8da 	bl	800946c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092b8:	4b11      	ldr	r3, [pc, #68]	@ (8009300 <xPortStartScheduler+0x140>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092be:	f000 f8f9 	bl	80094b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092c2:	4b10      	ldr	r3, [pc, #64]	@ (8009304 <xPortStartScheduler+0x144>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009304 <xPortStartScheduler+0x144>)
 80092c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80092cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092ce:	f7ff ff63 	bl	8009198 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 8006192:	f7ff fa8f 	bl	80056b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006196:	f7ff ff17 	bl	8005fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	410fc271 	.word	0x410fc271
 80061ac:	410fc270 	.word	0x410fc270
 80061b0:	e000e400 	.word	0xe000e400
 80061b4:	200002b4 	.word	0x200002b4
 80061b8:	200002b8 	.word	0x200002b8
 80061bc:	e000ed20 	.word	0xe000ed20
 80061c0:	2000001c 	.word	0x2000001c
 80061c4:	e000ef34 	.word	0xe000ef34

080061c8 <vPortEnterCritical>:
=======
 80092d2:	f7ff fa95 	bl	8008800 <vTaskSwitchContext>
	prvTaskExitError();
 80092d6:	f7ff ff1d 	bl	8009114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	e000ed00 	.word	0xe000ed00
 80092e8:	410fc271 	.word	0x410fc271
 80092ec:	410fc270 	.word	0x410fc270
 80092f0:	e000e400 	.word	0xe000e400
 80092f4:	20001d24 	.word	0x20001d24
 80092f8:	20001d28 	.word	0x20001d28
 80092fc:	e000ed20 	.word	0xe000ed20
 8009300:	20000020 	.word	0x20000020
 8009304:	e000ef34 	.word	0xe000ef34

08009308 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ea:	6013      	str	r3, [r2, #0]
=======
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	607b      	str	r3, [r7, #4]
}
 8009320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009322:	4b10      	ldr	r3, [pc, #64]	@ (8009364 <vPortEnterCritical+0x5c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	4a0e      	ldr	r2, [pc, #56]	@ (8009364 <vPortEnterCritical+0x5c>)
 800932a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <vPortEnterCritical+0x5c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d110      	bne.n	8006216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <vPortEnterCritical+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <vPortEnterCritical+0x4e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <vPortEnterCritical+0x4a>
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	2000001c 	.word	0x2000001c
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortExitCritical>:
=======
 800932c:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <vPortEnterCritical+0x5c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d110      	bne.n	8009356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009334:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <vPortEnterCritical+0x60>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <vPortEnterCritical+0x4e>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	603b      	str	r3, [r7, #0]
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	e7fd      	b.n	8009352 <vPortEnterCritical+0x4a>
	}
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20000020 	.word	0x20000020
 8009368:	e000ed04 	.word	0xe000ed04

0800936c <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006232:	4b12      	ldr	r3, [pc, #72]	@ (800627c <vPortExitCritical+0x50>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <vPortExitCritical+0x26>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006252:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <vPortExitCritical+0x50>)
 800625a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800625c:	4b07      	ldr	r3, [pc, #28]	@ (800627c <vPortExitCritical+0x50>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <vPortExitCritical+0x44>
 8006264:	2300      	movs	r3, #0
 8006266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f383 8811 	msr	BASEPRI, r3
}
 800626e:	bf00      	nop
=======
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009372:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <vPortExitCritical+0x50>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10b      	bne.n	8009392 <vPortExitCritical+0x26>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	607b      	str	r3, [r7, #4]
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	e7fd      	b.n	800938e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009392:	4b0a      	ldr	r3, [pc, #40]	@ (80093bc <vPortExitCritical+0x50>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3b01      	subs	r3, #1
 8009398:	4a08      	ldr	r2, [pc, #32]	@ (80093bc <vPortExitCritical+0x50>)
 800939a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800939c:	4b07      	ldr	r3, [pc, #28]	@ (80093bc <vPortExitCritical+0x50>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <vPortExitCritical+0x44>
 80093a4:	2300      	movs	r3, #0
 80093a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f383 8811 	msr	BASEPRI, r3
}
 80093ae:	bf00      	nop
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000001c 	.word	0x2000001c

08006280 <PendSV_Handler>:
=======
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	20000020 	.word	0x20000020

080093c0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7ff fa00 	bl	80056b4 <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000188 	.word	0x20000188
=======
 80093c0:	f3ef 8009 	mrs	r0, PSP
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	4b15      	ldr	r3, [pc, #84]	@ (8009420 <pxCurrentTCBConst>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f01e 0f10 	tst.w	lr, #16
 80093d0:	bf08      	it	eq
 80093d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	6010      	str	r0, [r2, #0]
 80093dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093e4:	f380 8811 	msr	BASEPRI, r0
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f7ff fa06 	bl	8008800 <vTaskSwitchContext>
 80093f4:	f04f 0000 	mov.w	r0, #0
 80093f8:	f380 8811 	msr	BASEPRI, r0
 80093fc:	bc09      	pop	{r0, r3}
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	6808      	ldr	r0, [r1, #0]
 8009402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009406:	f01e 0f10 	tst.w	lr, #16
 800940a:	bf08      	it	eq
 800940c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009410:	f380 8809 	msr	PSP, r0
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w

08009420 <pxCurrentTCBConst>:
 8009420:	20001bf8 	.word	0x20001bf8
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <SysTick_Handler>:
=======
 8009424:	bf00      	nop
 8009426:	bf00      	nop

08009428 <SysTick_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
=======
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 8006302:	f7ff f91d 	bl	8005540 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <SysTick_Handler+0x2c>
=======
 8009442:	f7ff f923 	bl	800868c <xTaskIncrementTick>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <SysTick_Handler+0x2c>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <SysTick_Handler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
=======
 800944c:	4b06      	ldr	r3, [pc, #24]	@ (8009468 <SysTick_Handler+0x40>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f383 8811 	msr	BASEPRI, r3
}
 800945e:	bf00      	nop
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
=======
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
=======
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	@ (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	@ (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000010 	.word	0x20000010
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
=======
 8009470:	4b0b      	ldr	r3, [pc, #44]	@ (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009476:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <vPortSetupTimerInterrupt+0x38>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800947c:	4b0a      	ldr	r3, [pc, #40]	@ (80094a8 <vPortSetupTimerInterrupt+0x3c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0a      	ldr	r2, [pc, #40]	@ (80094ac <vPortSetupTimerInterrupt+0x40>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	099b      	lsrs	r3, r3, #6
 8009488:	4a09      	ldr	r2, [pc, #36]	@ (80094b0 <vPortSetupTimerInterrupt+0x44>)
 800948a:	3b01      	subs	r3, #1
 800948c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800948e:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010
 80094a4:	e000e018 	.word	0xe000e018
 80094a8:	20000014 	.word	0x20000014
 80094ac:	10624dd3 	.word	0x10624dd3
 80094b0:	e000e014 	.word	0xe000e014

080094b4 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
=======
 80094b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80094c4 <vPortEnableVFP+0x10>
 80094b8:	6801      	ldr	r1, [r0, #0]
 80094ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80094be:	6001      	str	r1, [r0, #0]
 80094c0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
=======
 80094c2:	bf00      	nop
 80094c4:	e000ed88 	.word	0xe000ed88

080094c8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
=======
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d915      	bls.n	80063c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <vPortValidateInterruptPriority+0x74>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
=======
 80094ce:	f3ef 8305 	mrs	r3, IPSR
 80094d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d915      	bls.n	8009506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094da:	4a18      	ldr	r2, [pc, #96]	@ (800953c <vPortValidateInterruptPriority+0x74>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 80063a4:	4b16      	ldr	r3, [pc, #88]	@ (8006400 <vPortValidateInterruptPriority+0x78>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20b      	bcs.n	80063c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
=======
 80094e4:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <vPortValidateInterruptPriority+0x78>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	7afa      	ldrb	r2, [r7, #11]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d20b      	bcs.n	8009506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <vPortValidateInterruptPriority+0x3a>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 80063c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <vPortValidateInterruptPriority+0x80>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90b      	bls.n	80063ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	603b      	str	r3, [r7, #0]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortValidateInterruptPriority+0x62>
	}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	e000e3f0 	.word	0xe000e3f0
 8006400:	200002b4 	.word	0x200002b4
 8006404:	e000ed0c 	.word	0xe000ed0c
 8006408:	200002b8 	.word	0x200002b8

0800640c <pvPortMalloc>:
=======
 8009506:	4b0f      	ldr	r3, [pc, #60]	@ (8009544 <vPortValidateInterruptPriority+0x7c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <vPortValidateInterruptPriority+0x80>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d90b      	bls.n	800952e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	603b      	str	r3, [r7, #0]
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	e7fd      	b.n	800952a <vPortValidateInterruptPriority+0x62>
	}
 800952e:	bf00      	nop
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	e000e3f0 	.word	0xe000e3f0
 8009540:	20001d24 	.word	0x20001d24
 8009544:	e000ed0c 	.word	0xe000ed0c
 8009548:	20001d28 	.word	0x20001d28

0800954c <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	@ 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006418:	f7fe ffe6 	bl	80053e8 <vTaskSuspendAll>
=======
 800954c:	b580      	push	{r7, lr}
 800954e:	b08a      	sub	sp, #40	@ 0x28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009558:	f7fe ffdc 	bl	8008514 <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <pvPortMalloc+0x184>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006424:	f000 f924 	bl	8006670 <prvHeapInit>
=======
 800955c:	4b5c      	ldr	r3, [pc, #368]	@ (80096d0 <pvPortMalloc+0x184>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009564:	f000 f924 	bl	80097b0 <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 8006428:	4b5a      	ldr	r3, [pc, #360]	@ (8006594 <pvPortMalloc+0x188>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 8095 	bne.w	8006560 <pvPortMalloc+0x154>
=======
 8009568:	4b5a      	ldr	r3, [pc, #360]	@ (80096d4 <pvPortMalloc+0x188>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 8095 	bne.w	80096a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01e      	beq.n	800647a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800643c:	2208      	movs	r2, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	607b      	str	r3, [r7, #4]
=======
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01e      	beq.n	80095ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800957c:	2208      	movs	r2, #8
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4413      	add	r3, r2
 8009582:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	3308      	adds	r3, #8
 8006456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <pvPortMalloc+0x6e>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	617b      	str	r3, [r7, #20]
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <pvPortMalloc+0x6a>
=======
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	2b00      	cmp	r3, #0
 800958c:	d015      	beq.n	80095ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f023 0307 	bic.w	r3, r3, #7
 8009594:	3308      	adds	r3, #8
 8009596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <pvPortMalloc+0x6e>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	617b      	str	r3, [r7, #20]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <pvPortMalloc+0x6a>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d06f      	beq.n	8006560 <pvPortMalloc+0x154>
 8006480:	4b45      	ldr	r3, [pc, #276]	@ (8006598 <pvPortMalloc+0x18c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d86a      	bhi.n	8006560 <pvPortMalloc+0x154>
=======
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06f      	beq.n	80096a0 <pvPortMalloc+0x154>
 80095c0:	4b45      	ldr	r3, [pc, #276]	@ (80096d8 <pvPortMalloc+0x18c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d86a      	bhi.n	80096a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 800648a:	4b44      	ldr	r3, [pc, #272]	@ (800659c <pvPortMalloc+0x190>)
 800648c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800648e:	4b43      	ldr	r3, [pc, #268]	@ (800659c <pvPortMalloc+0x190>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006494:	e004      	b.n	80064a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <pvPortMalloc+0xa6>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <pvPortMalloc+0x8a>
=======
 80095ca:	4b44      	ldr	r3, [pc, #272]	@ (80096dc <pvPortMalloc+0x190>)
 80095cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095ce:	4b43      	ldr	r3, [pc, #268]	@ (80096dc <pvPortMalloc+0x190>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095d4:	e004      	b.n	80095e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <pvPortMalloc+0xa6>
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f1      	bne.n	80095d6 <pvPortMalloc+0x8a>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <pvPortMalloc+0x184>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d051      	beq.n	8006560 <pvPortMalloc+0x154>
=======
 80095f2:	4b37      	ldr	r3, [pc, #220]	@ (80096d0 <pvPortMalloc+0x184>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d051      	beq.n	80096a0 <pvPortMalloc+0x154>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]
=======
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2208      	movs	r2, #8
 8009602:	4413      	add	r3, r2
 8009604:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	601a      	str	r2, [r3, #0]
=======
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	2308      	movs	r3, #8
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d920      	bls.n	8006520 <pvPortMalloc+0x114>
=======
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	1ad2      	subs	r2, r2, r3
 8009616:	2308      	movs	r3, #8
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	429a      	cmp	r2, r3
 800961c:	d920      	bls.n	8009660 <pvPortMalloc+0x114>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <pvPortMalloc+0xfc>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <pvPortMalloc+0xf8>
=======
 800961e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <pvPortMalloc+0xfc>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	613b      	str	r3, [r7, #16]
}
 8009642:	bf00      	nop
 8009644:	bf00      	nop
 8009646:	e7fd      	b.n	8009644 <pvPortMalloc+0xf8>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800651a:	69b8      	ldr	r0, [r7, #24]
 800651c:	f000 f90a 	bl	8006734 <prvInsertBlockIntoFreeList>
=======
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800965a:	69b8      	ldr	r0, [r7, #24]
 800965c:	f000 f90a 	bl	8009874 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <pvPortMalloc+0x18c>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <pvPortMalloc+0x18c>)
 800652c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800652e:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <pvPortMalloc+0x18c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b1b      	ldr	r3, [pc, #108]	@ (80065a0 <pvPortMalloc+0x194>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <pvPortMalloc+0x18c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <pvPortMalloc+0x194>)
 8006540:	6013      	str	r3, [r2, #0]
=======
 8009660:	4b1d      	ldr	r3, [pc, #116]	@ (80096d8 <pvPortMalloc+0x18c>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	4a1b      	ldr	r2, [pc, #108]	@ (80096d8 <pvPortMalloc+0x18c>)
 800966c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800966e:	4b1a      	ldr	r3, [pc, #104]	@ (80096d8 <pvPortMalloc+0x18c>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b1b      	ldr	r3, [pc, #108]	@ (80096e0 <pvPortMalloc+0x194>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d203      	bcs.n	8009682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800967a:	4b17      	ldr	r3, [pc, #92]	@ (80096d8 <pvPortMalloc+0x18c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a18      	ldr	r2, [pc, #96]	@ (80096e0 <pvPortMalloc+0x194>)
 8009680:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	4b13      	ldr	r3, [pc, #76]	@ (8006594 <pvPortMalloc+0x188>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	431a      	orrs	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <pvPortMalloc+0x198>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <pvPortMalloc+0x198>)
 800655e:	6013      	str	r3, [r2, #0]
=======
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	4b13      	ldr	r3, [pc, #76]	@ (80096d4 <pvPortMalloc+0x188>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	431a      	orrs	r2, r3
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009696:	4b13      	ldr	r3, [pc, #76]	@ (80096e4 <pvPortMalloc+0x198>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	4a11      	ldr	r2, [pc, #68]	@ (80096e4 <pvPortMalloc+0x198>)
 800969e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 8006560:	f7fe ff50 	bl	8005404 <xTaskResumeAll>
=======
 80096a0:	f7fe ff46 	bl	8008530 <xTaskResumeAll>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <pvPortMalloc+0x17a>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <pvPortMalloc+0x176>
	return pvReturn;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3728      	adds	r7, #40	@ 0x28
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200042c4 	.word	0x200042c4
 8006594:	200042d8 	.word	0x200042d8
 8006598:	200042c8 	.word	0x200042c8
 800659c:	200042bc 	.word	0x200042bc
 80065a0:	200042cc 	.word	0x200042cc
 80065a4:	200042d0 	.word	0x200042d0

080065a8 <vPortFree>:
=======
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <pvPortMalloc+0x17a>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60fb      	str	r3, [r7, #12]
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	e7fd      	b.n	80096c2 <pvPortMalloc+0x176>
	return pvReturn;
 80096c6:	69fb      	ldr	r3, [r7, #28]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3728      	adds	r7, #40	@ 0x28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20003d38 	.word	0x20003d38
 80096d4:	20003d4c 	.word	0x20003d4c
 80096d8:	20003d3c 	.word	0x20003d3c
 80096dc:	20003d30 	.word	0x20003d30
 80096e0:	20003d40 	.word	0x20003d40
 80096e4:	20003d44 	.word	0x20003d44

080096e8 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d04f      	beq.n	800665a <vPortFree+0xb2>
=======
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d04f      	beq.n	800979a <vPortFree+0xb2>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 80065ba:	2308      	movs	r3, #8
 80065bc:	425b      	negs	r3, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b25      	ldr	r3, [pc, #148]	@ (8006664 <vPortFree+0xbc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <vPortFree+0x46>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <vPortFree+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60bb      	str	r3, [r7, #8]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <vPortFree+0xbc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01e      	beq.n	800665a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11a      	bne.n	800665a <vPortFree+0xb2>
=======
 80096fa:	2308      	movs	r3, #8
 80096fc:	425b      	negs	r3, r3
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4413      	add	r3, r2
 8009702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	4b25      	ldr	r3, [pc, #148]	@ (80097a4 <vPortFree+0xbc>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4013      	ands	r3, r2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <vPortFree+0x46>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	e7fd      	b.n	800972a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <vPortFree+0x66>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	60bb      	str	r3, [r7, #8]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	4b14      	ldr	r3, [pc, #80]	@ (80097a4 <vPortFree+0xbc>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4013      	ands	r3, r2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01e      	beq.n	800979a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11a      	bne.n	800979a <vPortFree+0xb2>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <vPortFree+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006634:	f7fe fed8 	bl	80053e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <vPortFree+0xc0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <vPortFree+0xc0>)
 8006644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f874 	bl	8006734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800664c:	4b07      	ldr	r3, [pc, #28]	@ (800666c <vPortFree+0xc4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a06      	ldr	r2, [pc, #24]	@ (800666c <vPortFree+0xc4>)
 8006654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006656:	f7fe fed5 	bl	8005404 <xTaskResumeAll>
=======
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	4b0e      	ldr	r3, [pc, #56]	@ (80097a4 <vPortFree+0xbc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	43db      	mvns	r3, r3
 800976e:	401a      	ands	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009774:	f7fe fece 	bl	8008514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <vPortFree+0xc0>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4413      	add	r3, r2
 8009782:	4a09      	ldr	r2, [pc, #36]	@ (80097a8 <vPortFree+0xc0>)
 8009784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009786:	6938      	ldr	r0, [r7, #16]
 8009788:	f000 f874 	bl	8009874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <vPortFree+0xc4>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	4a06      	ldr	r2, [pc, #24]	@ (80097ac <vPortFree+0xc4>)
 8009794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009796:	f7fe fecb 	bl	8008530 <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800665a:	bf00      	nop
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	200042d8 	.word	0x200042d8
 8006668:	200042c8 	.word	0x200042c8
 800666c:	200042d4 	.word	0x200042d4

08006670 <prvHeapInit>:
=======
 800979a:	bf00      	nop
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20003d4c 	.word	0x20003d4c
 80097a8:	20003d3c 	.word	0x20003d3c
 80097ac:	20003d48 	.word	0x20003d48

080097b0 <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
=======
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 8006676:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800667a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800667c:	4b27      	ldr	r3, [pc, #156]	@ (800671c <prvHeapInit+0xac>)
 800667e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3307      	adds	r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <prvHeapInit+0xac>)
 80066a0:	4413      	add	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	607b      	str	r3, [r7, #4]
=======
 80097b6:	f242 0304 	movw	r3, #8196	@ 0x2004
 80097ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097bc:	4b27      	ldr	r3, [pc, #156]	@ (800985c <prvHeapInit+0xac>)
 80097be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3307      	adds	r3, #7
 80097ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0307 	bic.w	r3, r3, #7
 80097d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	4a1f      	ldr	r2, [pc, #124]	@ (800985c <prvHeapInit+0xac>)
 80097e0:	4413      	add	r3, r2
 80097e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 80066a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <prvHeapInit+0xb0>)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006720 <prvHeapInit+0xb0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	605a      	str	r2, [r3, #4]
=======
 80097e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009860 <prvHeapInit+0xb0>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009860 <prvHeapInit+0xb0>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066bc:	2208      	movs	r2, #8
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a15      	ldr	r2, [pc, #84]	@ (8006724 <prvHeapInit+0xb4>)
 80066d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066d2:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <prvHeapInit+0xb4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <prvHeapInit+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
=======
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097fc:	2208      	movs	r2, #8
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0307 	bic.w	r3, r3, #7
 800980a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a15      	ldr	r2, [pc, #84]	@ (8009864 <prvHeapInit+0xb4>)
 8009810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009812:	4b14      	ldr	r3, [pc, #80]	@ (8009864 <prvHeapInit+0xb4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2200      	movs	r2, #0
 8009818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800981a:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <prvHeapInit+0xb4>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvHeapInit+0xb4>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <prvHeapInit+0xb8>)
 80066fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a09      	ldr	r2, [pc, #36]	@ (800672c <prvHeapInit+0xbc>)
 8006706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006708:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <prvHeapInit+0xc0>)
 800670a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	200002bc 	.word	0x200002bc
 8006720:	200042bc 	.word	0x200042bc
 8006724:	200042c4 	.word	0x200042c4
 8006728:	200042cc 	.word	0x200042cc
 800672c:	200042c8 	.word	0x200042c8
 8006730:	200042d8 	.word	0x200042d8

08006734 <prvInsertBlockIntoFreeList>:
=======
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	1ad2      	subs	r2, r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009830:	4b0c      	ldr	r3, [pc, #48]	@ (8009864 <prvHeapInit+0xb4>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4a0a      	ldr	r2, [pc, #40]	@ (8009868 <prvHeapInit+0xb8>)
 800983e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4a09      	ldr	r2, [pc, #36]	@ (800986c <prvHeapInit+0xbc>)
 8009846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009848:	4b09      	ldr	r3, [pc, #36]	@ (8009870 <prvHeapInit+0xc0>)
 800984a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800984e:	601a      	str	r2, [r3, #0]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20001d2c 	.word	0x20001d2c
 8009860:	20003d30 	.word	0x20003d30
 8009864:	20003d38 	.word	0x20003d38
 8009868:	20003d40 	.word	0x20003d40
 800986c:	20003d3c 	.word	0x20003d3c
 8009870:	20003d4c 	.word	0x20003d4c

08009874 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
=======
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 800673c:	4b28      	ldr	r3, [pc, #160]	@ (80067e0 <prvInsertBlockIntoFreeList+0xac>)
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e002      	b.n	8006748 <prvInsertBlockIntoFreeList+0x14>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d8f7      	bhi.n	8006742 <prvInsertBlockIntoFreeList+0xe>
=======
 800987c:	4b28      	ldr	r3, [pc, #160]	@ (8009920 <prvInsertBlockIntoFreeList+0xac>)
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e002      	b.n	8009888 <prvInsertBlockIntoFreeList+0x14>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	429a      	cmp	r2, r3
 8009890:	d8f7      	bhi.n	8009882 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	4413      	add	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	429a      	cmp	r2, r3
 8006762:	d108      	bne.n	8006776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	441a      	add	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	607b      	str	r3, [r7, #4]
=======
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4413      	add	r3, r2
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d108      	bne.n	80098b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d118      	bne.n	80067bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d00d      	beq.n	80067b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e008      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
=======
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	441a      	add	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d118      	bne.n	80098fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b15      	ldr	r3, [pc, #84]	@ (8009924 <prvInsertBlockIntoFreeList+0xb0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d00d      	beq.n	80098f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	441a      	add	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e008      	b.n	8009904 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 80067b2:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e003      	b.n	80067c4 <prvInsertBlockIntoFreeList+0x90>
=======
 80098f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <prvInsertBlockIntoFreeList+0xb0>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	e003      	b.n	8009904 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
=======
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d002      	beq.n	80067d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
=======
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d002      	beq.n	8009912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200042bc 	.word	0x200042bc
 80067e4:	200042c4 	.word	0x200042c4

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <_reclaim_reent>:
 80067f8:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <_reclaim_reent+0xb8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4283      	cmp	r3, r0
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	d053      	beq.n	80068ac <_reclaim_reent+0xb4>
 8006804:	69c3      	ldr	r3, [r0, #28]
 8006806:	b31b      	cbz	r3, 8006850 <_reclaim_reent+0x58>
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	b163      	cbz	r3, 8006826 <_reclaim_reent+0x2e>
 800680c:	2500      	movs	r5, #0
 800680e:	69e3      	ldr	r3, [r4, #28]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	5959      	ldr	r1, [r3, r5]
 8006814:	b9b1      	cbnz	r1, 8006844 <_reclaim_reent+0x4c>
 8006816:	3504      	adds	r5, #4
 8006818:	2d80      	cmp	r5, #128	@ 0x80
 800681a:	d1f8      	bne.n	800680e <_reclaim_reent+0x16>
 800681c:	69e3      	ldr	r3, [r4, #28]
 800681e:	4620      	mov	r0, r4
 8006820:	68d9      	ldr	r1, [r3, #12]
 8006822:	f000 f87b 	bl	800691c <_free_r>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	b111      	cbz	r1, 8006832 <_reclaim_reent+0x3a>
 800682c:	4620      	mov	r0, r4
 800682e:	f000 f875 	bl	800691c <_free_r>
 8006832:	69e3      	ldr	r3, [r4, #28]
 8006834:	689d      	ldr	r5, [r3, #8]
 8006836:	b15d      	cbz	r5, 8006850 <_reclaim_reent+0x58>
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	682d      	ldr	r5, [r5, #0]
 800683e:	f000 f86d 	bl	800691c <_free_r>
 8006842:	e7f8      	b.n	8006836 <_reclaim_reent+0x3e>
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f868 	bl	800691c <_free_r>
 800684c:	4631      	mov	r1, r6
 800684e:	e7e1      	b.n	8006814 <_reclaim_reent+0x1c>
 8006850:	6961      	ldr	r1, [r4, #20]
 8006852:	b111      	cbz	r1, 800685a <_reclaim_reent+0x62>
 8006854:	4620      	mov	r0, r4
 8006856:	f000 f861 	bl	800691c <_free_r>
 800685a:	69e1      	ldr	r1, [r4, #28]
 800685c:	b111      	cbz	r1, 8006864 <_reclaim_reent+0x6c>
 800685e:	4620      	mov	r0, r4
 8006860:	f000 f85c 	bl	800691c <_free_r>
 8006864:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006866:	b111      	cbz	r1, 800686e <_reclaim_reent+0x76>
 8006868:	4620      	mov	r0, r4
 800686a:	f000 f857 	bl	800691c <_free_r>
 800686e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006870:	b111      	cbz	r1, 8006878 <_reclaim_reent+0x80>
 8006872:	4620      	mov	r0, r4
 8006874:	f000 f852 	bl	800691c <_free_r>
 8006878:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800687a:	b111      	cbz	r1, 8006882 <_reclaim_reent+0x8a>
 800687c:	4620      	mov	r0, r4
 800687e:	f000 f84d 	bl	800691c <_free_r>
 8006882:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006884:	b111      	cbz	r1, 800688c <_reclaim_reent+0x94>
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f848 	bl	800691c <_free_r>
 800688c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800688e:	b111      	cbz	r1, 8006896 <_reclaim_reent+0x9e>
 8006890:	4620      	mov	r0, r4
 8006892:	f000 f843 	bl	800691c <_free_r>
 8006896:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006898:	b111      	cbz	r1, 80068a0 <_reclaim_reent+0xa8>
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f83e 	bl	800691c <_free_r>
 80068a0:	6a23      	ldr	r3, [r4, #32]
 80068a2:	b11b      	cbz	r3, 80068ac <_reclaim_reent+0xb4>
 80068a4:	4620      	mov	r0, r4
 80068a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068aa:	4718      	bx	r3
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	bf00      	nop
 80068b0:	20000020 	.word	0x20000020

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	@ (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	@ (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	@ (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	@ (80068f8 <__libc_init_array+0x44>)
 80068c8:	f000 f87e 	bl	80069c8 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	08006a7c 	.word	0x08006a7c
 80068f0:	08006a7c 	.word	0x08006a7c
 80068f4:	08006a7c 	.word	0x08006a7c
 80068f8:	08006a80 	.word	0x08006a80

080068fc <__retarget_lock_acquire_recursive>:
 80068fc:	4770      	bx	lr

080068fe <__retarget_lock_release_recursive>:
 80068fe:	4770      	bx	lr

08006900 <memcpy>:
 8006900:	440a      	add	r2, r1
 8006902:	4291      	cmp	r1, r2
 8006904:	f100 33ff 	add.w	r3, r0, #4294967295
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	4770      	bx	lr
 800690c:	b510      	push	{r4, lr}
 800690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006916:	4291      	cmp	r1, r2
 8006918:	d1f9      	bne.n	800690e <memcpy+0xe>
 800691a:	bd10      	pop	{r4, pc}

0800691c <_free_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4605      	mov	r5, r0
 8006920:	2900      	cmp	r1, #0
 8006922:	d041      	beq.n	80069a8 <_free_r+0x8c>
 8006924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006928:	1f0c      	subs	r4, r1, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfb8      	it	lt
 800692e:	18e4      	addlt	r4, r4, r3
 8006930:	f000 f83e 	bl	80069b0 <__malloc_lock>
 8006934:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <_free_r+0x90>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	b933      	cbnz	r3, 8006948 <_free_r+0x2c>
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	6014      	str	r4, [r2, #0]
 800693e:	4628      	mov	r0, r5
 8006940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006944:	f000 b83a 	b.w	80069bc <__malloc_unlock>
 8006948:	42a3      	cmp	r3, r4
 800694a:	d908      	bls.n	800695e <_free_r+0x42>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	1821      	adds	r1, r4, r0
 8006950:	428b      	cmp	r3, r1
 8006952:	bf01      	itttt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	1809      	addeq	r1, r1, r0
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	e7ed      	b.n	800693a <_free_r+0x1e>
 800695e:	461a      	mov	r2, r3
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b10b      	cbz	r3, 8006968 <_free_r+0x4c>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d9fa      	bls.n	800695e <_free_r+0x42>
 8006968:	6811      	ldr	r1, [r2, #0]
 800696a:	1850      	adds	r0, r2, r1
 800696c:	42a0      	cmp	r0, r4
 800696e:	d10b      	bne.n	8006988 <_free_r+0x6c>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	4401      	add	r1, r0
 8006974:	1850      	adds	r0, r2, r1
 8006976:	4283      	cmp	r3, r0
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	d1e0      	bne.n	800693e <_free_r+0x22>
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	4408      	add	r0, r1
 8006984:	6010      	str	r0, [r2, #0]
 8006986:	e7da      	b.n	800693e <_free_r+0x22>
 8006988:	d902      	bls.n	8006990 <_free_r+0x74>
 800698a:	230c      	movs	r3, #12
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	e7d6      	b.n	800693e <_free_r+0x22>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	1821      	adds	r1, r4, r0
 8006994:	428b      	cmp	r3, r1
 8006996:	bf04      	itt	eq
 8006998:	6819      	ldreq	r1, [r3, #0]
 800699a:	685b      	ldreq	r3, [r3, #4]
 800699c:	6063      	str	r3, [r4, #4]
 800699e:	bf04      	itt	eq
 80069a0:	1809      	addeq	r1, r1, r0
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	6054      	str	r4, [r2, #4]
 80069a6:	e7ca      	b.n	800693e <_free_r+0x22>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	bf00      	nop
 80069ac:	20004418 	.word	0x20004418

080069b0 <__malloc_lock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__malloc_lock+0x8>)
 80069b2:	f7ff bfa3 	b.w	80068fc <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	20004414 	.word	0x20004414

080069bc <__malloc_unlock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__malloc_unlock+0x8>)
 80069be:	f7ff bf9e 	b.w	80068fe <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	20004414 	.word	0x20004414

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
=======
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	20003d30 	.word	0x20003d30
 8009924:	20003d38 	.word	0x20003d38

08009928 <__cvt>:
 8009928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	ec57 6b10 	vmov	r6, r7, d0
 8009930:	2f00      	cmp	r7, #0
 8009932:	460c      	mov	r4, r1
 8009934:	4619      	mov	r1, r3
 8009936:	463b      	mov	r3, r7
 8009938:	bfbb      	ittet	lt
 800993a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800993e:	461f      	movlt	r7, r3
 8009940:	2300      	movge	r3, #0
 8009942:	232d      	movlt	r3, #45	@ 0x2d
 8009944:	700b      	strb	r3, [r1, #0]
 8009946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009948:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800994c:	4691      	mov	r9, r2
 800994e:	f023 0820 	bic.w	r8, r3, #32
 8009952:	bfbc      	itt	lt
 8009954:	4632      	movlt	r2, r6
 8009956:	4616      	movlt	r6, r2
 8009958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800995c:	d005      	beq.n	800996a <__cvt+0x42>
 800995e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009962:	d100      	bne.n	8009966 <__cvt+0x3e>
 8009964:	3401      	adds	r4, #1
 8009966:	2102      	movs	r1, #2
 8009968:	e000      	b.n	800996c <__cvt+0x44>
 800996a:	2103      	movs	r1, #3
 800996c:	ab03      	add	r3, sp, #12
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	ab02      	add	r3, sp, #8
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	ec47 6b10 	vmov	d0, r6, r7
 8009978:	4653      	mov	r3, sl
 800997a:	4622      	mov	r2, r4
 800997c:	f000 fedc 	bl	800a738 <_dtoa_r>
 8009980:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009984:	4605      	mov	r5, r0
 8009986:	d119      	bne.n	80099bc <__cvt+0x94>
 8009988:	f019 0f01 	tst.w	r9, #1
 800998c:	d00e      	beq.n	80099ac <__cvt+0x84>
 800998e:	eb00 0904 	add.w	r9, r0, r4
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	4630      	mov	r0, r6
 8009998:	4639      	mov	r1, r7
 800999a:	f7f7 f8bd 	bl	8000b18 <__aeabi_dcmpeq>
 800999e:	b108      	cbz	r0, 80099a4 <__cvt+0x7c>
 80099a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099a4:	2230      	movs	r2, #48	@ 0x30
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	454b      	cmp	r3, r9
 80099aa:	d31e      	bcc.n	80099ea <__cvt+0xc2>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099b0:	1b5b      	subs	r3, r3, r5
 80099b2:	4628      	mov	r0, r5
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	b004      	add	sp, #16
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099c0:	eb00 0904 	add.w	r9, r0, r4
 80099c4:	d1e5      	bne.n	8009992 <__cvt+0x6a>
 80099c6:	7803      	ldrb	r3, [r0, #0]
 80099c8:	2b30      	cmp	r3, #48	@ 0x30
 80099ca:	d10a      	bne.n	80099e2 <__cvt+0xba>
 80099cc:	2200      	movs	r2, #0
 80099ce:	2300      	movs	r3, #0
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f7 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 80099d8:	b918      	cbnz	r0, 80099e2 <__cvt+0xba>
 80099da:	f1c4 0401 	rsb	r4, r4, #1
 80099de:	f8ca 4000 	str.w	r4, [sl]
 80099e2:	f8da 3000 	ldr.w	r3, [sl]
 80099e6:	4499      	add	r9, r3
 80099e8:	e7d3      	b.n	8009992 <__cvt+0x6a>
 80099ea:	1c59      	adds	r1, r3, #1
 80099ec:	9103      	str	r1, [sp, #12]
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e7d9      	b.n	80099a6 <__cvt+0x7e>

080099f2 <__exponent>:
 80099f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f4:	2900      	cmp	r1, #0
 80099f6:	bfba      	itte	lt
 80099f8:	4249      	neglt	r1, r1
 80099fa:	232d      	movlt	r3, #45	@ 0x2d
 80099fc:	232b      	movge	r3, #43	@ 0x2b
 80099fe:	2909      	cmp	r1, #9
 8009a00:	7002      	strb	r2, [r0, #0]
 8009a02:	7043      	strb	r3, [r0, #1]
 8009a04:	dd29      	ble.n	8009a5a <__exponent+0x68>
 8009a06:	f10d 0307 	add.w	r3, sp, #7
 8009a0a:	461d      	mov	r5, r3
 8009a0c:	270a      	movs	r7, #10
 8009a0e:	461a      	mov	r2, r3
 8009a10:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a14:	fb07 1416 	mls	r4, r7, r6, r1
 8009a18:	3430      	adds	r4, #48	@ 0x30
 8009a1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a1e:	460c      	mov	r4, r1
 8009a20:	2c63      	cmp	r4, #99	@ 0x63
 8009a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a26:	4631      	mov	r1, r6
 8009a28:	dcf1      	bgt.n	8009a0e <__exponent+0x1c>
 8009a2a:	3130      	adds	r1, #48	@ 0x30
 8009a2c:	1e94      	subs	r4, r2, #2
 8009a2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a32:	1c41      	adds	r1, r0, #1
 8009a34:	4623      	mov	r3, r4
 8009a36:	42ab      	cmp	r3, r5
 8009a38:	d30a      	bcc.n	8009a50 <__exponent+0x5e>
 8009a3a:	f10d 0309 	add.w	r3, sp, #9
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	42ac      	cmp	r4, r5
 8009a42:	bf88      	it	hi
 8009a44:	2300      	movhi	r3, #0
 8009a46:	3302      	adds	r3, #2
 8009a48:	4403      	add	r3, r0
 8009a4a:	1a18      	subs	r0, r3, r0
 8009a4c:	b003      	add	sp, #12
 8009a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a58:	e7ed      	b.n	8009a36 <__exponent+0x44>
 8009a5a:	2330      	movs	r3, #48	@ 0x30
 8009a5c:	3130      	adds	r1, #48	@ 0x30
 8009a5e:	7083      	strb	r3, [r0, #2]
 8009a60:	70c1      	strb	r1, [r0, #3]
 8009a62:	1d03      	adds	r3, r0, #4
 8009a64:	e7f1      	b.n	8009a4a <__exponent+0x58>
	...

08009a68 <_printf_float>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	b08d      	sub	sp, #52	@ 0x34
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a74:	4616      	mov	r6, r2
 8009a76:	461f      	mov	r7, r3
 8009a78:	4605      	mov	r5, r0
 8009a7a:	f000 fcef 	bl	800a45c <_localeconv_r>
 8009a7e:	6803      	ldr	r3, [r0, #0]
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7f6 fc1c 	bl	80002c0 <strlen>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a90:	9005      	str	r0, [sp, #20]
 8009a92:	3307      	adds	r3, #7
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	f103 0208 	add.w	r2, r3, #8
 8009a9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009aa0:	f8d4 b000 	ldr.w	fp, [r4]
 8009aa4:	f8c8 2000 	str.w	r2, [r8]
 8009aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009abe:	4b9c      	ldr	r3, [pc, #624]	@ (8009d30 <_printf_float+0x2c8>)
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	f7f7 f85a 	bl	8000b7c <__aeabi_dcmpun>
 8009ac8:	bb70      	cbnz	r0, 8009b28 <_printf_float+0xc0>
 8009aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ace:	4b98      	ldr	r3, [pc, #608]	@ (8009d30 <_printf_float+0x2c8>)
 8009ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad4:	f7f7 f834 	bl	8000b40 <__aeabi_dcmple>
 8009ad8:	bb30      	cbnz	r0, 8009b28 <_printf_float+0xc0>
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f7 f823 	bl	8000b2c <__aeabi_dcmplt>
 8009ae6:	b110      	cbz	r0, 8009aee <_printf_float+0x86>
 8009ae8:	232d      	movs	r3, #45	@ 0x2d
 8009aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aee:	4a91      	ldr	r2, [pc, #580]	@ (8009d34 <_printf_float+0x2cc>)
 8009af0:	4b91      	ldr	r3, [pc, #580]	@ (8009d38 <_printf_float+0x2d0>)
 8009af2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009af6:	bf8c      	ite	hi
 8009af8:	4690      	movhi	r8, r2
 8009afa:	4698      	movls	r8, r3
 8009afc:	2303      	movs	r3, #3
 8009afe:	6123      	str	r3, [r4, #16]
 8009b00:	f02b 0304 	bic.w	r3, fp, #4
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	f04f 0900 	mov.w	r9, #0
 8009b0a:	9700      	str	r7, [sp, #0]
 8009b0c:	4633      	mov	r3, r6
 8009b0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f9d2 	bl	8009ebc <_printf_common>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f040 808d 	bne.w	8009c38 <_printf_float+0x1d0>
 8009b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b22:	b00d      	add	sp, #52	@ 0x34
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f7 f824 	bl	8000b7c <__aeabi_dcmpun>
 8009b34:	b140      	cbz	r0, 8009b48 <_printf_float+0xe0>
 8009b36:	464b      	mov	r3, r9
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bfbc      	itt	lt
 8009b3c:	232d      	movlt	r3, #45	@ 0x2d
 8009b3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b42:	4a7e      	ldr	r2, [pc, #504]	@ (8009d3c <_printf_float+0x2d4>)
 8009b44:	4b7e      	ldr	r3, [pc, #504]	@ (8009d40 <_printf_float+0x2d8>)
 8009b46:	e7d4      	b.n	8009af2 <_printf_float+0x8a>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	d13b      	bne.n	8009bcc <_printf_float+0x164>
 8009b54:	2306      	movs	r3, #6
 8009b56:	6063      	str	r3, [r4, #4]
 8009b58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6022      	str	r2, [r4, #0]
 8009b60:	9303      	str	r3, [sp, #12]
 8009b62:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b68:	ab09      	add	r3, sp, #36	@ 0x24
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	6861      	ldr	r1, [r4, #4]
 8009b6e:	ec49 8b10 	vmov	d0, r8, r9
 8009b72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b76:	4628      	mov	r0, r5
 8009b78:	f7ff fed6 	bl	8009928 <__cvt>
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b80:	2b47      	cmp	r3, #71	@ 0x47
 8009b82:	4680      	mov	r8, r0
 8009b84:	d129      	bne.n	8009bda <_printf_float+0x172>
 8009b86:	1cc8      	adds	r0, r1, #3
 8009b88:	db02      	blt.n	8009b90 <_printf_float+0x128>
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	dd41      	ble.n	8009c14 <_printf_float+0x1ac>
 8009b90:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b94:	fa5f fa8a 	uxtb.w	sl, sl
 8009b98:	3901      	subs	r1, #1
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ba0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ba2:	f7ff ff26 	bl	80099f2 <__exponent>
 8009ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ba8:	1813      	adds	r3, r2, r0
 8009baa:	2a01      	cmp	r2, #1
 8009bac:	4681      	mov	r9, r0
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	dc02      	bgt.n	8009bb8 <_printf_float+0x150>
 8009bb2:	6822      	ldr	r2, [r4, #0]
 8009bb4:	07d2      	lsls	r2, r2, #31
 8009bb6:	d501      	bpl.n	8009bbc <_printf_float+0x154>
 8009bb8:	3301      	adds	r3, #1
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0a2      	beq.n	8009b0a <_printf_float+0xa2>
 8009bc4:	232d      	movs	r3, #45	@ 0x2d
 8009bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bca:	e79e      	b.n	8009b0a <_printf_float+0xa2>
 8009bcc:	9a06      	ldr	r2, [sp, #24]
 8009bce:	2a47      	cmp	r2, #71	@ 0x47
 8009bd0:	d1c2      	bne.n	8009b58 <_printf_float+0xf0>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1c0      	bne.n	8009b58 <_printf_float+0xf0>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e7bd      	b.n	8009b56 <_printf_float+0xee>
 8009bda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bde:	d9db      	bls.n	8009b98 <_printf_float+0x130>
 8009be0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009be4:	d118      	bne.n	8009c18 <_printf_float+0x1b0>
 8009be6:	2900      	cmp	r1, #0
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	dd0b      	ble.n	8009c04 <_printf_float+0x19c>
 8009bec:	6121      	str	r1, [r4, #16]
 8009bee:	b913      	cbnz	r3, 8009bf6 <_printf_float+0x18e>
 8009bf0:	6822      	ldr	r2, [r4, #0]
 8009bf2:	07d0      	lsls	r0, r2, #31
 8009bf4:	d502      	bpl.n	8009bfc <_printf_float+0x194>
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	440b      	add	r3, r1
 8009bfa:	6123      	str	r3, [r4, #16]
 8009bfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bfe:	f04f 0900 	mov.w	r9, #0
 8009c02:	e7db      	b.n	8009bbc <_printf_float+0x154>
 8009c04:	b913      	cbnz	r3, 8009c0c <_printf_float+0x1a4>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	07d2      	lsls	r2, r2, #31
 8009c0a:	d501      	bpl.n	8009c10 <_printf_float+0x1a8>
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	e7f4      	b.n	8009bfa <_printf_float+0x192>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e7f2      	b.n	8009bfa <_printf_float+0x192>
 8009c14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	db05      	blt.n	8009c2a <_printf_float+0x1c2>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	6121      	str	r1, [r4, #16]
 8009c22:	07d8      	lsls	r0, r3, #31
 8009c24:	d5ea      	bpl.n	8009bfc <_printf_float+0x194>
 8009c26:	1c4b      	adds	r3, r1, #1
 8009c28:	e7e7      	b.n	8009bfa <_printf_float+0x192>
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	bfd4      	ite	le
 8009c2e:	f1c1 0202 	rsble	r2, r1, #2
 8009c32:	2201      	movgt	r2, #1
 8009c34:	4413      	add	r3, r2
 8009c36:	e7e0      	b.n	8009bfa <_printf_float+0x192>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	055a      	lsls	r2, r3, #21
 8009c3c:	d407      	bmi.n	8009c4e <_printf_float+0x1e6>
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	4642      	mov	r2, r8
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d12b      	bne.n	8009ca4 <_printf_float+0x23c>
 8009c4c:	e767      	b.n	8009b1e <_printf_float+0xb6>
 8009c4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c52:	f240 80dd 	bls.w	8009e10 <_printf_float+0x3a8>
 8009c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f7f6 ff5b 	bl	8000b18 <__aeabi_dcmpeq>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d033      	beq.n	8009cce <_printf_float+0x266>
 8009c66:	4a37      	ldr	r2, [pc, #220]	@ (8009d44 <_printf_float+0x2dc>)
 8009c68:	2301      	movs	r3, #1
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f af54 	beq.w	8009b1e <_printf_float+0xb6>
 8009c76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c7a:	4543      	cmp	r3, r8
 8009c7c:	db02      	blt.n	8009c84 <_printf_float+0x21c>
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	07d8      	lsls	r0, r3, #31
 8009c82:	d50f      	bpl.n	8009ca4 <_printf_float+0x23c>
 8009c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f af45 	beq.w	8009b1e <_printf_float+0xb6>
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c9c:	f104 0a1a 	add.w	sl, r4, #26
 8009ca0:	45c8      	cmp	r8, r9
 8009ca2:	dc09      	bgt.n	8009cb8 <_printf_float+0x250>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	079b      	lsls	r3, r3, #30
 8009ca8:	f100 8103 	bmi.w	8009eb2 <_printf_float+0x44a>
 8009cac:	68e0      	ldr	r0, [r4, #12]
 8009cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb0:	4298      	cmp	r0, r3
 8009cb2:	bfb8      	it	lt
 8009cb4:	4618      	movlt	r0, r3
 8009cb6:	e734      	b.n	8009b22 <_printf_float+0xba>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4652      	mov	r2, sl
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f43f af2b 	beq.w	8009b1e <_printf_float+0xb6>
 8009cc8:	f109 0901 	add.w	r9, r9, #1
 8009ccc:	e7e8      	b.n	8009ca0 <_printf_float+0x238>
 8009cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	dc39      	bgt.n	8009d48 <_printf_float+0x2e0>
 8009cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d44 <_printf_float+0x2dc>)
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f af1d 	beq.w	8009b1e <_printf_float+0xb6>
 8009ce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ce8:	ea59 0303 	orrs.w	r3, r9, r3
 8009cec:	d102      	bne.n	8009cf4 <_printf_float+0x28c>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	07d9      	lsls	r1, r3, #31
 8009cf2:	d5d7      	bpl.n	8009ca4 <_printf_float+0x23c>
 8009cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f43f af0d 	beq.w	8009b1e <_printf_float+0xb6>
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	f104 0b1a 	add.w	fp, r4, #26
 8009d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0e:	425b      	negs	r3, r3
 8009d10:	4553      	cmp	r3, sl
 8009d12:	dc01      	bgt.n	8009d18 <_printf_float+0x2b0>
 8009d14:	464b      	mov	r3, r9
 8009d16:	e793      	b.n	8009c40 <_printf_float+0x1d8>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	465a      	mov	r2, fp
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	f43f aefb 	beq.w	8009b1e <_printf_float+0xb6>
 8009d28:	f10a 0a01 	add.w	sl, sl, #1
 8009d2c:	e7ee      	b.n	8009d0c <_printf_float+0x2a4>
 8009d2e:	bf00      	nop
 8009d30:	7fefffff 	.word	0x7fefffff
 8009d34:	0800c780 	.word	0x0800c780
 8009d38:	0800c77c 	.word	0x0800c77c
 8009d3c:	0800c788 	.word	0x0800c788
 8009d40:	0800c784 	.word	0x0800c784
 8009d44:	0800c78c 	.word	0x0800c78c
 8009d48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d4e:	4553      	cmp	r3, sl
 8009d50:	bfa8      	it	ge
 8009d52:	4653      	movge	r3, sl
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	4699      	mov	r9, r3
 8009d58:	dc36      	bgt.n	8009dc8 <_printf_float+0x360>
 8009d5a:	f04f 0b00 	mov.w	fp, #0
 8009d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d62:	f104 021a 	add.w	r2, r4, #26
 8009d66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d68:	9306      	str	r3, [sp, #24]
 8009d6a:	eba3 0309 	sub.w	r3, r3, r9
 8009d6e:	455b      	cmp	r3, fp
 8009d70:	dc31      	bgt.n	8009dd6 <_printf_float+0x36e>
 8009d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d74:	459a      	cmp	sl, r3
 8009d76:	dc3a      	bgt.n	8009dee <_printf_float+0x386>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	07da      	lsls	r2, r3, #31
 8009d7c:	d437      	bmi.n	8009dee <_printf_float+0x386>
 8009d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d80:	ebaa 0903 	sub.w	r9, sl, r3
 8009d84:	9b06      	ldr	r3, [sp, #24]
 8009d86:	ebaa 0303 	sub.w	r3, sl, r3
 8009d8a:	4599      	cmp	r9, r3
 8009d8c:	bfa8      	it	ge
 8009d8e:	4699      	movge	r9, r3
 8009d90:	f1b9 0f00 	cmp.w	r9, #0
 8009d94:	dc33      	bgt.n	8009dfe <_printf_float+0x396>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d9e:	f104 0b1a 	add.w	fp, r4, #26
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	ebaa 0303 	sub.w	r3, sl, r3
 8009da8:	eba3 0309 	sub.w	r3, r3, r9
 8009dac:	4543      	cmp	r3, r8
 8009dae:	f77f af79 	ble.w	8009ca4 <_printf_float+0x23c>
 8009db2:	2301      	movs	r3, #1
 8009db4:	465a      	mov	r2, fp
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f aeae 	beq.w	8009b1e <_printf_float+0xb6>
 8009dc2:	f108 0801 	add.w	r8, r8, #1
 8009dc6:	e7ec      	b.n	8009da2 <_printf_float+0x33a>
 8009dc8:	4642      	mov	r2, r8
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d1c2      	bne.n	8009d5a <_printf_float+0x2f2>
 8009dd4:	e6a3      	b.n	8009b1e <_printf_float+0xb6>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	9206      	str	r2, [sp, #24]
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f ae9c 	beq.w	8009b1e <_printf_float+0xb6>
 8009de6:	9a06      	ldr	r2, [sp, #24]
 8009de8:	f10b 0b01 	add.w	fp, fp, #1
 8009dec:	e7bb      	b.n	8009d66 <_printf_float+0x2fe>
 8009dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d1c0      	bne.n	8009d7e <_printf_float+0x316>
 8009dfc:	e68f      	b.n	8009b1e <_printf_float+0xb6>
 8009dfe:	9a06      	ldr	r2, [sp, #24]
 8009e00:	464b      	mov	r3, r9
 8009e02:	4442      	add	r2, r8
 8009e04:	4631      	mov	r1, r6
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d1c3      	bne.n	8009d96 <_printf_float+0x32e>
 8009e0e:	e686      	b.n	8009b1e <_printf_float+0xb6>
 8009e10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e14:	f1ba 0f01 	cmp.w	sl, #1
 8009e18:	dc01      	bgt.n	8009e1e <_printf_float+0x3b6>
 8009e1a:	07db      	lsls	r3, r3, #31
 8009e1c:	d536      	bpl.n	8009e8c <_printf_float+0x424>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4642      	mov	r2, r8
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f ae78 	beq.w	8009b1e <_printf_float+0xb6>
 8009e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f ae70 	beq.w	8009b1e <_printf_float+0xb6>
 8009e3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e42:	2200      	movs	r2, #0
 8009e44:	2300      	movs	r3, #0
 8009e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e4a:	f7f6 fe65 	bl	8000b18 <__aeabi_dcmpeq>
 8009e4e:	b9c0      	cbnz	r0, 8009e82 <_printf_float+0x41a>
 8009e50:	4653      	mov	r3, sl
 8009e52:	f108 0201 	add.w	r2, r8, #1
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d10c      	bne.n	8009e7a <_printf_float+0x412>
 8009e60:	e65d      	b.n	8009b1e <_printf_float+0xb6>
 8009e62:	2301      	movs	r3, #1
 8009e64:	465a      	mov	r2, fp
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f ae56 	beq.w	8009b1e <_printf_float+0xb6>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	45d0      	cmp	r8, sl
 8009e78:	dbf3      	blt.n	8009e62 <_printf_float+0x3fa>
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e80:	e6df      	b.n	8009c42 <_printf_float+0x1da>
 8009e82:	f04f 0800 	mov.w	r8, #0
 8009e86:	f104 0b1a 	add.w	fp, r4, #26
 8009e8a:	e7f4      	b.n	8009e76 <_printf_float+0x40e>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4642      	mov	r2, r8
 8009e90:	e7e1      	b.n	8009e56 <_printf_float+0x3ee>
 8009e92:	2301      	movs	r3, #1
 8009e94:	464a      	mov	r2, r9
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f ae3e 	beq.w	8009b1e <_printf_float+0xb6>
 8009ea2:	f108 0801 	add.w	r8, r8, #1
 8009ea6:	68e3      	ldr	r3, [r4, #12]
 8009ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009eaa:	1a5b      	subs	r3, r3, r1
 8009eac:	4543      	cmp	r3, r8
 8009eae:	dcf0      	bgt.n	8009e92 <_printf_float+0x42a>
 8009eb0:	e6fc      	b.n	8009cac <_printf_float+0x244>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	f104 0919 	add.w	r9, r4, #25
 8009eba:	e7f4      	b.n	8009ea6 <_printf_float+0x43e>

08009ebc <_printf_common>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	4698      	mov	r8, r3
 8009ec4:	688a      	ldr	r2, [r1, #8]
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bfb8      	it	lt
 8009ed0:	4613      	movlt	r3, r2
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ed8:	4607      	mov	r7, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b10a      	cbz	r2, 8009ee2 <_printf_common+0x26>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	0699      	lsls	r1, r3, #26
 8009ee6:	bf42      	ittt	mi
 8009ee8:	6833      	ldrmi	r3, [r6, #0]
 8009eea:	3302      	addmi	r3, #2
 8009eec:	6033      	strmi	r3, [r6, #0]
 8009eee:	6825      	ldr	r5, [r4, #0]
 8009ef0:	f015 0506 	ands.w	r5, r5, #6
 8009ef4:	d106      	bne.n	8009f04 <_printf_common+0x48>
 8009ef6:	f104 0a19 	add.w	sl, r4, #25
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	6832      	ldr	r2, [r6, #0]
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	42ab      	cmp	r3, r5
 8009f02:	dc26      	bgt.n	8009f52 <_printf_common+0x96>
 8009f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	3b00      	subs	r3, #0
 8009f0c:	bf18      	it	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	0692      	lsls	r2, r2, #26
 8009f12:	d42b      	bmi.n	8009f6c <_printf_common+0xb0>
 8009f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f18:	4641      	mov	r1, r8
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	47c8      	blx	r9
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d01e      	beq.n	8009f60 <_printf_common+0xa4>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6922      	ldr	r2, [r4, #16]
 8009f26:	f003 0306 	and.w	r3, r3, #6
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	bf02      	ittt	eq
 8009f2e:	68e5      	ldreq	r5, [r4, #12]
 8009f30:	6833      	ldreq	r3, [r6, #0]
 8009f32:	1aed      	subeq	r5, r5, r3
 8009f34:	68a3      	ldr	r3, [r4, #8]
 8009f36:	bf0c      	ite	eq
 8009f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f3c:	2500      	movne	r5, #0
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	bfc4      	itt	gt
 8009f42:	1a9b      	subgt	r3, r3, r2
 8009f44:	18ed      	addgt	r5, r5, r3
 8009f46:	2600      	movs	r6, #0
 8009f48:	341a      	adds	r4, #26
 8009f4a:	42b5      	cmp	r5, r6
 8009f4c:	d11a      	bne.n	8009f84 <_printf_common+0xc8>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e008      	b.n	8009f64 <_printf_common+0xa8>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4652      	mov	r2, sl
 8009f56:	4641      	mov	r1, r8
 8009f58:	4638      	mov	r0, r7
 8009f5a:	47c8      	blx	r9
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d103      	bne.n	8009f68 <_printf_common+0xac>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	3501      	adds	r5, #1
 8009f6a:	e7c6      	b.n	8009efa <_printf_common+0x3e>
 8009f6c:	18e1      	adds	r1, r4, r3
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	2030      	movs	r0, #48	@ 0x30
 8009f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f76:	4422      	add	r2, r4
 8009f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f80:	3302      	adds	r3, #2
 8009f82:	e7c7      	b.n	8009f14 <_printf_common+0x58>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4622      	mov	r2, r4
 8009f88:	4641      	mov	r1, r8
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c8      	blx	r9
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d0e6      	beq.n	8009f60 <_printf_common+0xa4>
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7d9      	b.n	8009f4a <_printf_common+0x8e>
	...

08009f98 <_printf_i>:
 8009f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	7e0f      	ldrb	r7, [r1, #24]
 8009f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fa0:	2f78      	cmp	r7, #120	@ 0x78
 8009fa2:	4691      	mov	r9, r2
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	469a      	mov	sl, r3
 8009faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fae:	d807      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fb0:	2f62      	cmp	r7, #98	@ 0x62
 8009fb2:	d80a      	bhi.n	8009fca <_printf_i+0x32>
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	f000 80d1 	beq.w	800a15c <_printf_i+0x1c4>
 8009fba:	2f58      	cmp	r7, #88	@ 0x58
 8009fbc:	f000 80b8 	beq.w	800a130 <_printf_i+0x198>
 8009fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fc8:	e03a      	b.n	800a040 <_printf_i+0xa8>
 8009fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fce:	2b15      	cmp	r3, #21
 8009fd0:	d8f6      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fd8 <_printf_i+0x40>)
 8009fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	08009fc1 	.word	0x08009fc1
 8009fe4:	08009fc1 	.word	0x08009fc1
 8009fe8:	08009fc1 	.word	0x08009fc1
 8009fec:	08009fc1 	.word	0x08009fc1
 8009ff0:	0800a045 	.word	0x0800a045
 8009ff4:	08009fc1 	.word	0x08009fc1
 8009ff8:	08009fc1 	.word	0x08009fc1
 8009ffc:	08009fc1 	.word	0x08009fc1
 800a000:	08009fc1 	.word	0x08009fc1
 800a004:	0800a143 	.word	0x0800a143
 800a008:	0800a06f 	.word	0x0800a06f
 800a00c:	0800a0fd 	.word	0x0800a0fd
 800a010:	08009fc1 	.word	0x08009fc1
 800a014:	08009fc1 	.word	0x08009fc1
 800a018:	0800a165 	.word	0x0800a165
 800a01c:	08009fc1 	.word	0x08009fc1
 800a020:	0800a06f 	.word	0x0800a06f
 800a024:	08009fc1 	.word	0x08009fc1
 800a028:	08009fc1 	.word	0x08009fc1
 800a02c:	0800a105 	.word	0x0800a105
 800a030:	6833      	ldr	r3, [r6, #0]
 800a032:	1d1a      	adds	r2, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6032      	str	r2, [r6, #0]
 800a038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a03c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a040:	2301      	movs	r3, #1
 800a042:	e09c      	b.n	800a17e <_printf_i+0x1e6>
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1d19      	adds	r1, r3, #4
 800a04a:	6031      	str	r1, [r6, #0]
 800a04c:	0606      	lsls	r6, r0, #24
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0xbc>
 800a050:	681d      	ldr	r5, [r3, #0]
 800a052:	e003      	b.n	800a05c <_printf_i+0xc4>
 800a054:	0645      	lsls	r5, r0, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0xb8>
 800a058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	da03      	bge.n	800a068 <_printf_i+0xd0>
 800a060:	232d      	movs	r3, #45	@ 0x2d
 800a062:	426d      	negs	r5, r5
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a068:	4858      	ldr	r0, [pc, #352]	@ (800a1cc <_printf_i+0x234>)
 800a06a:	230a      	movs	r3, #10
 800a06c:	e011      	b.n	800a092 <_printf_i+0xfa>
 800a06e:	6821      	ldr	r1, [r4, #0]
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	0608      	lsls	r0, r1, #24
 800a074:	f853 5b04 	ldr.w	r5, [r3], #4
 800a078:	d402      	bmi.n	800a080 <_printf_i+0xe8>
 800a07a:	0649      	lsls	r1, r1, #25
 800a07c:	bf48      	it	mi
 800a07e:	b2ad      	uxthmi	r5, r5
 800a080:	2f6f      	cmp	r7, #111	@ 0x6f
 800a082:	4852      	ldr	r0, [pc, #328]	@ (800a1cc <_printf_i+0x234>)
 800a084:	6033      	str	r3, [r6, #0]
 800a086:	bf14      	ite	ne
 800a088:	230a      	movne	r3, #10
 800a08a:	2308      	moveq	r3, #8
 800a08c:	2100      	movs	r1, #0
 800a08e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a092:	6866      	ldr	r6, [r4, #4]
 800a094:	60a6      	str	r6, [r4, #8]
 800a096:	2e00      	cmp	r6, #0
 800a098:	db05      	blt.n	800a0a6 <_printf_i+0x10e>
 800a09a:	6821      	ldr	r1, [r4, #0]
 800a09c:	432e      	orrs	r6, r5
 800a09e:	f021 0104 	bic.w	r1, r1, #4
 800a0a2:	6021      	str	r1, [r4, #0]
 800a0a4:	d04b      	beq.n	800a13e <_printf_i+0x1a6>
 800a0a6:	4616      	mov	r6, r2
 800a0a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a0b0:	5dc7      	ldrb	r7, [r0, r7]
 800a0b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0b6:	462f      	mov	r7, r5
 800a0b8:	42bb      	cmp	r3, r7
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	d9f4      	bls.n	800a0a8 <_printf_i+0x110>
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d10b      	bne.n	800a0da <_printf_i+0x142>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	07df      	lsls	r7, r3, #31
 800a0c6:	d508      	bpl.n	800a0da <_printf_i+0x142>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	6861      	ldr	r1, [r4, #4]
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	bfde      	ittt	le
 800a0d0:	2330      	movle	r3, #48	@ 0x30
 800a0d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0da:	1b92      	subs	r2, r2, r6
 800a0dc:	6122      	str	r2, [r4, #16]
 800a0de:	f8cd a000 	str.w	sl, [sp]
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	aa03      	add	r2, sp, #12
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7ff fee7 	bl	8009ebc <_printf_common>
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d14a      	bne.n	800a188 <_printf_i+0x1f0>
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	b004      	add	sp, #16
 800a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	f043 0320 	orr.w	r3, r3, #32
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	4832      	ldr	r0, [pc, #200]	@ (800a1d0 <_printf_i+0x238>)
 800a106:	2778      	movs	r7, #120	@ 0x78
 800a108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	6831      	ldr	r1, [r6, #0]
 800a110:	061f      	lsls	r7, r3, #24
 800a112:	f851 5b04 	ldr.w	r5, [r1], #4
 800a116:	d402      	bmi.n	800a11e <_printf_i+0x186>
 800a118:	065f      	lsls	r7, r3, #25
 800a11a:	bf48      	it	mi
 800a11c:	b2ad      	uxthmi	r5, r5
 800a11e:	6031      	str	r1, [r6, #0]
 800a120:	07d9      	lsls	r1, r3, #31
 800a122:	bf44      	itt	mi
 800a124:	f043 0320 	orrmi.w	r3, r3, #32
 800a128:	6023      	strmi	r3, [r4, #0]
 800a12a:	b11d      	cbz	r5, 800a134 <_printf_i+0x19c>
 800a12c:	2310      	movs	r3, #16
 800a12e:	e7ad      	b.n	800a08c <_printf_i+0xf4>
 800a130:	4826      	ldr	r0, [pc, #152]	@ (800a1cc <_printf_i+0x234>)
 800a132:	e7e9      	b.n	800a108 <_printf_i+0x170>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	f023 0320 	bic.w	r3, r3, #32
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	e7f6      	b.n	800a12c <_printf_i+0x194>
 800a13e:	4616      	mov	r6, r2
 800a140:	e7bd      	b.n	800a0be <_printf_i+0x126>
 800a142:	6833      	ldr	r3, [r6, #0]
 800a144:	6825      	ldr	r5, [r4, #0]
 800a146:	6961      	ldr	r1, [r4, #20]
 800a148:	1d18      	adds	r0, r3, #4
 800a14a:	6030      	str	r0, [r6, #0]
 800a14c:	062e      	lsls	r6, r5, #24
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	d501      	bpl.n	800a156 <_printf_i+0x1be>
 800a152:	6019      	str	r1, [r3, #0]
 800a154:	e002      	b.n	800a15c <_printf_i+0x1c4>
 800a156:	0668      	lsls	r0, r5, #25
 800a158:	d5fb      	bpl.n	800a152 <_printf_i+0x1ba>
 800a15a:	8019      	strh	r1, [r3, #0]
 800a15c:	2300      	movs	r3, #0
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	4616      	mov	r6, r2
 800a162:	e7bc      	b.n	800a0de <_printf_i+0x146>
 800a164:	6833      	ldr	r3, [r6, #0]
 800a166:	1d1a      	adds	r2, r3, #4
 800a168:	6032      	str	r2, [r6, #0]
 800a16a:	681e      	ldr	r6, [r3, #0]
 800a16c:	6862      	ldr	r2, [r4, #4]
 800a16e:	2100      	movs	r1, #0
 800a170:	4630      	mov	r0, r6
 800a172:	f7f6 f855 	bl	8000220 <memchr>
 800a176:	b108      	cbz	r0, 800a17c <_printf_i+0x1e4>
 800a178:	1b80      	subs	r0, r0, r6
 800a17a:	6060      	str	r0, [r4, #4]
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	6123      	str	r3, [r4, #16]
 800a180:	2300      	movs	r3, #0
 800a182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a186:	e7aa      	b.n	800a0de <_printf_i+0x146>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	4632      	mov	r2, r6
 800a18c:	4649      	mov	r1, r9
 800a18e:	4640      	mov	r0, r8
 800a190:	47d0      	blx	sl
 800a192:	3001      	adds	r0, #1
 800a194:	d0ad      	beq.n	800a0f2 <_printf_i+0x15a>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	079b      	lsls	r3, r3, #30
 800a19a:	d413      	bmi.n	800a1c4 <_printf_i+0x22c>
 800a19c:	68e0      	ldr	r0, [r4, #12]
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	bfb8      	it	lt
 800a1a4:	4618      	movlt	r0, r3
 800a1a6:	e7a6      	b.n	800a0f6 <_printf_i+0x15e>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	47d0      	blx	sl
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d09d      	beq.n	800a0f2 <_printf_i+0x15a>
 800a1b6:	3501      	adds	r5, #1
 800a1b8:	68e3      	ldr	r3, [r4, #12]
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	1a5b      	subs	r3, r3, r1
 800a1be:	42ab      	cmp	r3, r5
 800a1c0:	dcf2      	bgt.n	800a1a8 <_printf_i+0x210>
 800a1c2:	e7eb      	b.n	800a19c <_printf_i+0x204>
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	f104 0619 	add.w	r6, r4, #25
 800a1ca:	e7f5      	b.n	800a1b8 <_printf_i+0x220>
 800a1cc:	0800c78e 	.word	0x0800c78e
 800a1d0:	0800c79f 	.word	0x0800c79f

0800a1d4 <std>:
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	4604      	mov	r4, r0
 800a1da:	e9c0 3300 	strd	r3, r3, [r0]
 800a1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1e2:	6083      	str	r3, [r0, #8]
 800a1e4:	8181      	strh	r1, [r0, #12]
 800a1e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1e8:	81c2      	strh	r2, [r0, #14]
 800a1ea:	6183      	str	r3, [r0, #24]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	2208      	movs	r2, #8
 800a1f0:	305c      	adds	r0, #92	@ 0x5c
 800a1f2:	f000 f92a 	bl	800a44a <memset>
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <std+0x58>)
 800a1f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a230 <std+0x5c>)
 800a1fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a234 <std+0x60>)
 800a200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a202:	4b0d      	ldr	r3, [pc, #52]	@ (800a238 <std+0x64>)
 800a204:	6323      	str	r3, [r4, #48]	@ 0x30
 800a206:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <std+0x68>)
 800a208:	6224      	str	r4, [r4, #32]
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d006      	beq.n	800a21c <std+0x48>
 800a20e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a212:	4294      	cmp	r4, r2
 800a214:	d002      	beq.n	800a21c <std+0x48>
 800a216:	33d0      	adds	r3, #208	@ 0xd0
 800a218:	429c      	cmp	r4, r3
 800a21a:	d105      	bne.n	800a228 <std+0x54>
 800a21c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a224:	f000 b9ec 	b.w	800a600 <__retarget_lock_init_recursive>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	bf00      	nop
 800a22c:	0800a3c5 	.word	0x0800a3c5
 800a230:	0800a3e7 	.word	0x0800a3e7
 800a234:	0800a41f 	.word	0x0800a41f
 800a238:	0800a443 	.word	0x0800a443
 800a23c:	20003d50 	.word	0x20003d50

0800a240 <stdio_exit_handler>:
 800a240:	4a02      	ldr	r2, [pc, #8]	@ (800a24c <stdio_exit_handler+0xc>)
 800a242:	4903      	ldr	r1, [pc, #12]	@ (800a250 <stdio_exit_handler+0x10>)
 800a244:	4803      	ldr	r0, [pc, #12]	@ (800a254 <stdio_exit_handler+0x14>)
 800a246:	f000 b869 	b.w	800a31c <_fwalk_sglue>
 800a24a:	bf00      	nop
 800a24c:	20000024 	.word	0x20000024
 800a250:	0800bf85 	.word	0x0800bf85
 800a254:	20000034 	.word	0x20000034

0800a258 <cleanup_stdio>:
 800a258:	6841      	ldr	r1, [r0, #4]
 800a25a:	4b0c      	ldr	r3, [pc, #48]	@ (800a28c <cleanup_stdio+0x34>)
 800a25c:	4299      	cmp	r1, r3
 800a25e:	b510      	push	{r4, lr}
 800a260:	4604      	mov	r4, r0
 800a262:	d001      	beq.n	800a268 <cleanup_stdio+0x10>
 800a264:	f001 fe8e 	bl	800bf84 <_fflush_r>
 800a268:	68a1      	ldr	r1, [r4, #8]
 800a26a:	4b09      	ldr	r3, [pc, #36]	@ (800a290 <cleanup_stdio+0x38>)
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d002      	beq.n	800a276 <cleanup_stdio+0x1e>
 800a270:	4620      	mov	r0, r4
 800a272:	f001 fe87 	bl	800bf84 <_fflush_r>
 800a276:	68e1      	ldr	r1, [r4, #12]
 800a278:	4b06      	ldr	r3, [pc, #24]	@ (800a294 <cleanup_stdio+0x3c>)
 800a27a:	4299      	cmp	r1, r3
 800a27c:	d004      	beq.n	800a288 <cleanup_stdio+0x30>
 800a27e:	4620      	mov	r0, r4
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f001 be7e 	b.w	800bf84 <_fflush_r>
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	bf00      	nop
 800a28c:	20003d50 	.word	0x20003d50
 800a290:	20003db8 	.word	0x20003db8
 800a294:	20003e20 	.word	0x20003e20

0800a298 <global_stdio_init.part.0>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <global_stdio_init.part.0+0x30>)
 800a29c:	4c0b      	ldr	r4, [pc, #44]	@ (800a2cc <global_stdio_init.part.0+0x34>)
 800a29e:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d0 <global_stdio_init.part.0+0x38>)
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	f7ff ff94 	bl	800a1d4 <std>
 800a2ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	2109      	movs	r1, #9
 800a2b4:	f7ff ff8e 	bl	800a1d4 <std>
 800a2b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2bc:	2202      	movs	r2, #2
 800a2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c2:	2112      	movs	r1, #18
 800a2c4:	f7ff bf86 	b.w	800a1d4 <std>
 800a2c8:	20003e88 	.word	0x20003e88
 800a2cc:	20003d50 	.word	0x20003d50
 800a2d0:	0800a241 	.word	0x0800a241

0800a2d4 <__sfp_lock_acquire>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	@ (800a2dc <__sfp_lock_acquire+0x8>)
 800a2d6:	f000 b994 	b.w	800a602 <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20003e91 	.word	0x20003e91

0800a2e0 <__sfp_lock_release>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	@ (800a2e8 <__sfp_lock_release+0x8>)
 800a2e2:	f000 b98f 	b.w	800a604 <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20003e91 	.word	0x20003e91

0800a2ec <__sinit>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	f7ff fff0 	bl	800a2d4 <__sfp_lock_acquire>
 800a2f4:	6a23      	ldr	r3, [r4, #32]
 800a2f6:	b11b      	cbz	r3, 800a300 <__sinit+0x14>
 800a2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2fc:	f7ff bff0 	b.w	800a2e0 <__sfp_lock_release>
 800a300:	4b04      	ldr	r3, [pc, #16]	@ (800a314 <__sinit+0x28>)
 800a302:	6223      	str	r3, [r4, #32]
 800a304:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <__sinit+0x2c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f5      	bne.n	800a2f8 <__sinit+0xc>
 800a30c:	f7ff ffc4 	bl	800a298 <global_stdio_init.part.0>
 800a310:	e7f2      	b.n	800a2f8 <__sinit+0xc>
 800a312:	bf00      	nop
 800a314:	0800a259 	.word	0x0800a259
 800a318:	20003e88 	.word	0x20003e88

0800a31c <_fwalk_sglue>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	4607      	mov	r7, r0
 800a322:	4688      	mov	r8, r1
 800a324:	4614      	mov	r4, r2
 800a326:	2600      	movs	r6, #0
 800a328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a32c:	f1b9 0901 	subs.w	r9, r9, #1
 800a330:	d505      	bpl.n	800a33e <_fwalk_sglue+0x22>
 800a332:	6824      	ldr	r4, [r4, #0]
 800a334:	2c00      	cmp	r4, #0
 800a336:	d1f7      	bne.n	800a328 <_fwalk_sglue+0xc>
 800a338:	4630      	mov	r0, r6
 800a33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d907      	bls.n	800a354 <_fwalk_sglue+0x38>
 800a344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a348:	3301      	adds	r3, #1
 800a34a:	d003      	beq.n	800a354 <_fwalk_sglue+0x38>
 800a34c:	4629      	mov	r1, r5
 800a34e:	4638      	mov	r0, r7
 800a350:	47c0      	blx	r8
 800a352:	4306      	orrs	r6, r0
 800a354:	3568      	adds	r5, #104	@ 0x68
 800a356:	e7e9      	b.n	800a32c <_fwalk_sglue+0x10>

0800a358 <sniprintf>:
 800a358:	b40c      	push	{r2, r3}
 800a35a:	b530      	push	{r4, r5, lr}
 800a35c:	4b18      	ldr	r3, [pc, #96]	@ (800a3c0 <sniprintf+0x68>)
 800a35e:	1e0c      	subs	r4, r1, #0
 800a360:	681d      	ldr	r5, [r3, #0]
 800a362:	b09d      	sub	sp, #116	@ 0x74
 800a364:	da08      	bge.n	800a378 <sniprintf+0x20>
 800a366:	238b      	movs	r3, #139	@ 0x8b
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	b01d      	add	sp, #116	@ 0x74
 800a370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a374:	b002      	add	sp, #8
 800a376:	4770      	bx	lr
 800a378:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a37c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a380:	f04f 0300 	mov.w	r3, #0
 800a384:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a386:	bf14      	ite	ne
 800a388:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a38c:	4623      	moveq	r3, r4
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a396:	9002      	str	r0, [sp, #8]
 800a398:	9006      	str	r0, [sp, #24]
 800a39a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a39e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a3a0:	ab21      	add	r3, sp, #132	@ 0x84
 800a3a2:	a902      	add	r1, sp, #8
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	f001 fc6c 	bl	800bc84 <_svfiprintf_r>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	bfbc      	itt	lt
 800a3b0:	238b      	movlt	r3, #139	@ 0x8b
 800a3b2:	602b      	strlt	r3, [r5, #0]
 800a3b4:	2c00      	cmp	r4, #0
 800a3b6:	d0da      	beq.n	800a36e <sniprintf+0x16>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e7d6      	b.n	800a36e <sniprintf+0x16>
 800a3c0:	20000030 	.word	0x20000030

0800a3c4 <__sread>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f000 f8ca 	bl	800a564 <_read_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	bfab      	itete	ge
 800a3d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d8:	181b      	addge	r3, r3, r0
 800a3da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3de:	bfac      	ite	ge
 800a3e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3e2:	81a3      	strhlt	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__swrite>:
 800a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	461f      	mov	r7, r3
 800a3ec:	898b      	ldrh	r3, [r1, #12]
 800a3ee:	05db      	lsls	r3, r3, #23
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	4616      	mov	r6, r2
 800a3f6:	d505      	bpl.n	800a404 <__swrite+0x1e>
 800a3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	2200      	movs	r2, #0
 800a400:	f000 f89e 	bl	800a540 <_lseek_r>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a40a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	4632      	mov	r2, r6
 800a412:	463b      	mov	r3, r7
 800a414:	4628      	mov	r0, r5
 800a416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41a:	f000 b8b5 	b.w	800a588 <_write_r>

0800a41e <__sseek>:
 800a41e:	b510      	push	{r4, lr}
 800a420:	460c      	mov	r4, r1
 800a422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a426:	f000 f88b 	bl	800a540 <_lseek_r>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	bf15      	itete	ne
 800a430:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a43a:	81a3      	strheq	r3, [r4, #12]
 800a43c:	bf18      	it	ne
 800a43e:	81a3      	strhne	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__sclose>:
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f000 b80d 	b.w	800a464 <_close_r>

0800a44a <memset>:
 800a44a:	4402      	add	r2, r0
 800a44c:	4603      	mov	r3, r0
 800a44e:	4293      	cmp	r3, r2
 800a450:	d100      	bne.n	800a454 <memset+0xa>
 800a452:	4770      	bx	lr
 800a454:	f803 1b01 	strb.w	r1, [r3], #1
 800a458:	e7f9      	b.n	800a44e <memset+0x4>
	...

0800a45c <_localeconv_r>:
 800a45c:	4800      	ldr	r0, [pc, #0]	@ (800a460 <_localeconv_r+0x4>)
 800a45e:	4770      	bx	lr
 800a460:	20000170 	.word	0x20000170

0800a464 <_close_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d06      	ldr	r5, [pc, #24]	@ (800a480 <_close_r+0x1c>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f7 fc38 	bl	8001ce4 <_close>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_close_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_close_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20003e8c 	.word	0x20003e8c

0800a484 <_reclaim_reent>:
 800a484:	4b2d      	ldr	r3, [pc, #180]	@ (800a53c <_reclaim_reent+0xb8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4283      	cmp	r3, r0
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	4604      	mov	r4, r0
 800a48e:	d053      	beq.n	800a538 <_reclaim_reent+0xb4>
 800a490:	69c3      	ldr	r3, [r0, #28]
 800a492:	b31b      	cbz	r3, 800a4dc <_reclaim_reent+0x58>
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	b163      	cbz	r3, 800a4b2 <_reclaim_reent+0x2e>
 800a498:	2500      	movs	r5, #0
 800a49a:	69e3      	ldr	r3, [r4, #28]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	5959      	ldr	r1, [r3, r5]
 800a4a0:	b9b1      	cbnz	r1, 800a4d0 <_reclaim_reent+0x4c>
 800a4a2:	3504      	adds	r5, #4
 800a4a4:	2d80      	cmp	r5, #128	@ 0x80
 800a4a6:	d1f8      	bne.n	800a49a <_reclaim_reent+0x16>
 800a4a8:	69e3      	ldr	r3, [r4, #28]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	68d9      	ldr	r1, [r3, #12]
 800a4ae:	f000 ff13 	bl	800b2d8 <_free_r>
 800a4b2:	69e3      	ldr	r3, [r4, #28]
 800a4b4:	6819      	ldr	r1, [r3, #0]
 800a4b6:	b111      	cbz	r1, 800a4be <_reclaim_reent+0x3a>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 ff0d 	bl	800b2d8 <_free_r>
 800a4be:	69e3      	ldr	r3, [r4, #28]
 800a4c0:	689d      	ldr	r5, [r3, #8]
 800a4c2:	b15d      	cbz	r5, 800a4dc <_reclaim_reent+0x58>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	682d      	ldr	r5, [r5, #0]
 800a4ca:	f000 ff05 	bl	800b2d8 <_free_r>
 800a4ce:	e7f8      	b.n	800a4c2 <_reclaim_reent+0x3e>
 800a4d0:	680e      	ldr	r6, [r1, #0]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 ff00 	bl	800b2d8 <_free_r>
 800a4d8:	4631      	mov	r1, r6
 800a4da:	e7e1      	b.n	800a4a0 <_reclaim_reent+0x1c>
 800a4dc:	6961      	ldr	r1, [r4, #20]
 800a4de:	b111      	cbz	r1, 800a4e6 <_reclaim_reent+0x62>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fef9 	bl	800b2d8 <_free_r>
 800a4e6:	69e1      	ldr	r1, [r4, #28]
 800a4e8:	b111      	cbz	r1, 800a4f0 <_reclaim_reent+0x6c>
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fef4 	bl	800b2d8 <_free_r>
 800a4f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a4f2:	b111      	cbz	r1, 800a4fa <_reclaim_reent+0x76>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 feef 	bl	800b2d8 <_free_r>
 800a4fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4fc:	b111      	cbz	r1, 800a504 <_reclaim_reent+0x80>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 feea 	bl	800b2d8 <_free_r>
 800a504:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a506:	b111      	cbz	r1, 800a50e <_reclaim_reent+0x8a>
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fee5 	bl	800b2d8 <_free_r>
 800a50e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a510:	b111      	cbz	r1, 800a518 <_reclaim_reent+0x94>
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fee0 	bl	800b2d8 <_free_r>
 800a518:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x9e>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 fedb 	bl	800b2d8 <_free_r>
 800a522:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0xa8>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fed6 	bl	800b2d8 <_free_r>
 800a52c:	6a23      	ldr	r3, [r4, #32]
 800a52e:	b11b      	cbz	r3, 800a538 <_reclaim_reent+0xb4>
 800a530:	4620      	mov	r0, r4
 800a532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a536:	4718      	bx	r3
 800a538:	bd70      	pop	{r4, r5, r6, pc}
 800a53a:	bf00      	nop
 800a53c:	20000030 	.word	0x20000030

0800a540 <_lseek_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	@ (800a560 <_lseek_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f7 fbef 	bl	8001d32 <_lseek>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_lseek_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_lseek_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20003e8c 	.word	0x20003e8c

0800a564 <_read_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	@ (800a584 <_read_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7f7 fb7d 	bl	8001c72 <_read>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_read_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_read_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	20003e8c 	.word	0x20003e8c

0800a588 <_write_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	@ (800a5a8 <_write_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 fb88 	bl	8001cac <_write>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_write_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_write_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20003e8c 	.word	0x20003e8c

0800a5ac <__errno>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	@ (800a5b4 <__errno+0x8>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	20000030 	.word	0x20000030

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4d0d      	ldr	r5, [pc, #52]	@ (800a5f0 <__libc_init_array+0x38>)
 800a5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800a5f4 <__libc_init_array+0x3c>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	4d0b      	ldr	r5, [pc, #44]	@ (800a5f8 <__libc_init_array+0x40>)
 800a5ca:	4c0c      	ldr	r4, [pc, #48]	@ (800a5fc <__libc_init_array+0x44>)
 800a5cc:	f002 f86a 	bl	800c6a4 <_init>
 800a5d0:	1b64      	subs	r4, r4, r5
 800a5d2:	10a4      	asrs	r4, r4, #2
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800cafc 	.word	0x0800cafc
 800a5f4:	0800cafc 	.word	0x0800cafc
 800a5f8:	0800cafc 	.word	0x0800cafc
 800a5fc:	0800cb00 	.word	0x0800cb00

0800a600 <__retarget_lock_init_recursive>:
 800a600:	4770      	bx	lr

0800a602 <__retarget_lock_acquire_recursive>:
 800a602:	4770      	bx	lr

0800a604 <__retarget_lock_release_recursive>:
 800a604:	4770      	bx	lr

0800a606 <memcpy>:
 800a606:	440a      	add	r2, r1
 800a608:	4291      	cmp	r1, r2
 800a60a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a60e:	d100      	bne.n	800a612 <memcpy+0xc>
 800a610:	4770      	bx	lr
 800a612:	b510      	push	{r4, lr}
 800a614:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a61c:	4291      	cmp	r1, r2
 800a61e:	d1f9      	bne.n	800a614 <memcpy+0xe>
 800a620:	bd10      	pop	{r4, pc}

0800a622 <quorem>:
 800a622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a626:	6903      	ldr	r3, [r0, #16]
 800a628:	690c      	ldr	r4, [r1, #16]
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	4607      	mov	r7, r0
 800a62e:	db7e      	blt.n	800a72e <quorem+0x10c>
 800a630:	3c01      	subs	r4, #1
 800a632:	f101 0814 	add.w	r8, r1, #20
 800a636:	00a3      	lsls	r3, r4, #2
 800a638:	f100 0514 	add.w	r5, r0, #20
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a64c:	3301      	adds	r3, #1
 800a64e:	429a      	cmp	r2, r3
 800a650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a654:	fbb2 f6f3 	udiv	r6, r2, r3
 800a658:	d32e      	bcc.n	800a6b8 <quorem+0x96>
 800a65a:	f04f 0a00 	mov.w	sl, #0
 800a65e:	46c4      	mov	ip, r8
 800a660:	46ae      	mov	lr, r5
 800a662:	46d3      	mov	fp, sl
 800a664:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a668:	b298      	uxth	r0, r3
 800a66a:	fb06 a000 	mla	r0, r6, r0, sl
 800a66e:	0c02      	lsrs	r2, r0, #16
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	fb06 2303 	mla	r3, r6, r3, r2
 800a676:	f8de 2000 	ldr.w	r2, [lr]
 800a67a:	b280      	uxth	r0, r0
 800a67c:	b292      	uxth	r2, r2
 800a67e:	1a12      	subs	r2, r2, r0
 800a680:	445a      	add	r2, fp
 800a682:	f8de 0000 	ldr.w	r0, [lr]
 800a686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a690:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a694:	b292      	uxth	r2, r2
 800a696:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a69a:	45e1      	cmp	r9, ip
 800a69c:	f84e 2b04 	str.w	r2, [lr], #4
 800a6a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6a4:	d2de      	bcs.n	800a664 <quorem+0x42>
 800a6a6:	9b00      	ldr	r3, [sp, #0]
 800a6a8:	58eb      	ldr	r3, [r5, r3]
 800a6aa:	b92b      	cbnz	r3, 800a6b8 <quorem+0x96>
 800a6ac:	9b01      	ldr	r3, [sp, #4]
 800a6ae:	3b04      	subs	r3, #4
 800a6b0:	429d      	cmp	r5, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	d32f      	bcc.n	800a716 <quorem+0xf4>
 800a6b6:	613c      	str	r4, [r7, #16]
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f001 f97f 	bl	800b9bc <__mcmp>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	db25      	blt.n	800a70e <quorem+0xec>
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6ca:	f8d1 c000 	ldr.w	ip, [r1]
 800a6ce:	fa1f fe82 	uxth.w	lr, r2
 800a6d2:	fa1f f38c 	uxth.w	r3, ip
 800a6d6:	eba3 030e 	sub.w	r3, r3, lr
 800a6da:	4403      	add	r3, r0
 800a6dc:	0c12      	lsrs	r2, r2, #16
 800a6de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ec:	45c1      	cmp	r9, r8
 800a6ee:	f841 3b04 	str.w	r3, [r1], #4
 800a6f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6f6:	d2e6      	bcs.n	800a6c6 <quorem+0xa4>
 800a6f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a700:	b922      	cbnz	r2, 800a70c <quorem+0xea>
 800a702:	3b04      	subs	r3, #4
 800a704:	429d      	cmp	r5, r3
 800a706:	461a      	mov	r2, r3
 800a708:	d30b      	bcc.n	800a722 <quorem+0x100>
 800a70a:	613c      	str	r4, [r7, #16]
 800a70c:	3601      	adds	r6, #1
 800a70e:	4630      	mov	r0, r6
 800a710:	b003      	add	sp, #12
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	3b04      	subs	r3, #4
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d1cb      	bne.n	800a6b6 <quorem+0x94>
 800a71e:	3c01      	subs	r4, #1
 800a720:	e7c6      	b.n	800a6b0 <quorem+0x8e>
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	3b04      	subs	r3, #4
 800a726:	2a00      	cmp	r2, #0
 800a728:	d1ef      	bne.n	800a70a <quorem+0xe8>
 800a72a:	3c01      	subs	r4, #1
 800a72c:	e7ea      	b.n	800a704 <quorem+0xe2>
 800a72e:	2000      	movs	r0, #0
 800a730:	e7ee      	b.n	800a710 <quorem+0xee>
 800a732:	0000      	movs	r0, r0
 800a734:	0000      	movs	r0, r0
	...

0800a738 <_dtoa_r>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	69c7      	ldr	r7, [r0, #28]
 800a73e:	b097      	sub	sp, #92	@ 0x5c
 800a740:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a744:	ec55 4b10 	vmov	r4, r5, d0
 800a748:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a74a:	9107      	str	r1, [sp, #28]
 800a74c:	4681      	mov	r9, r0
 800a74e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a750:	9311      	str	r3, [sp, #68]	@ 0x44
 800a752:	b97f      	cbnz	r7, 800a774 <_dtoa_r+0x3c>
 800a754:	2010      	movs	r0, #16
 800a756:	f000 fe09 	bl	800b36c <malloc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a760:	b920      	cbnz	r0, 800a76c <_dtoa_r+0x34>
 800a762:	4ba9      	ldr	r3, [pc, #676]	@ (800aa08 <_dtoa_r+0x2d0>)
 800a764:	21ef      	movs	r1, #239	@ 0xef
 800a766:	48a9      	ldr	r0, [pc, #676]	@ (800aa0c <_dtoa_r+0x2d4>)
 800a768:	f001 fc5e 	bl	800c028 <__assert_func>
 800a76c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a770:	6007      	str	r7, [r0, #0]
 800a772:	60c7      	str	r7, [r0, #12]
 800a774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	b159      	cbz	r1, 800a794 <_dtoa_r+0x5c>
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	604a      	str	r2, [r1, #4]
 800a780:	2301      	movs	r3, #1
 800a782:	4093      	lsls	r3, r2
 800a784:	608b      	str	r3, [r1, #8]
 800a786:	4648      	mov	r0, r9
 800a788:	f000 fee6 	bl	800b558 <_Bfree>
 800a78c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	1e2b      	subs	r3, r5, #0
 800a796:	bfb9      	ittee	lt
 800a798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a79c:	9305      	strlt	r3, [sp, #20]
 800a79e:	2300      	movge	r3, #0
 800a7a0:	6033      	strge	r3, [r6, #0]
 800a7a2:	9f05      	ldr	r7, [sp, #20]
 800a7a4:	4b9a      	ldr	r3, [pc, #616]	@ (800aa10 <_dtoa_r+0x2d8>)
 800a7a6:	bfbc      	itt	lt
 800a7a8:	2201      	movlt	r2, #1
 800a7aa:	6032      	strlt	r2, [r6, #0]
 800a7ac:	43bb      	bics	r3, r7
 800a7ae:	d112      	bne.n	800a7d6 <_dtoa_r+0x9e>
 800a7b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7bc:	4323      	orrs	r3, r4
 800a7be:	f000 855a 	beq.w	800b276 <_dtoa_r+0xb3e>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa24 <_dtoa_r+0x2ec>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 855c 	beq.w	800b286 <_dtoa_r+0xb4e>
 800a7ce:	f10a 0303 	add.w	r3, sl, #3
 800a7d2:	f000 bd56 	b.w	800b282 <_dtoa_r+0xb4a>
 800a7d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	ec51 0b17 	vmov	r0, r1, d7
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a7e6:	f7f6 f997 	bl	8000b18 <__aeabi_dcmpeq>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	b158      	cbz	r0, 800a806 <_dtoa_r+0xce>
 800a7ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7f6:	b113      	cbz	r3, 800a7fe <_dtoa_r+0xc6>
 800a7f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7fa:	4b86      	ldr	r3, [pc, #536]	@ (800aa14 <_dtoa_r+0x2dc>)
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa28 <_dtoa_r+0x2f0>
 800a802:	f000 bd40 	b.w	800b286 <_dtoa_r+0xb4e>
 800a806:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a80a:	aa14      	add	r2, sp, #80	@ 0x50
 800a80c:	a915      	add	r1, sp, #84	@ 0x54
 800a80e:	4648      	mov	r0, r9
 800a810:	f001 f984 	bl	800bb1c <__d2b>
 800a814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a818:	9002      	str	r0, [sp, #8]
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d078      	beq.n	800a910 <_dtoa_r+0x1d8>
 800a81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a820:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a82c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a838:	4619      	mov	r1, r3
 800a83a:	2200      	movs	r2, #0
 800a83c:	4b76      	ldr	r3, [pc, #472]	@ (800aa18 <_dtoa_r+0x2e0>)
 800a83e:	f7f5 fd4b 	bl	80002d8 <__aeabi_dsub>
 800a842:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9f0 <_dtoa_r+0x2b8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fefe 	bl	8000648 <__aeabi_dmul>
 800a84c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a9f8 <_dtoa_r+0x2c0>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 fd43 	bl	80002dc <__adddf3>
 800a856:	4604      	mov	r4, r0
 800a858:	4630      	mov	r0, r6
 800a85a:	460d      	mov	r5, r1
 800a85c:	f7f5 fe8a 	bl	8000574 <__aeabi_i2d>
 800a860:	a367      	add	r3, pc, #412	@ (adr r3, 800aa00 <_dtoa_r+0x2c8>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 feef 	bl	8000648 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fd33 	bl	80002dc <__adddf3>
 800a876:	4604      	mov	r4, r0
 800a878:	460d      	mov	r5, r1
 800a87a:	f7f6 f995 	bl	8000ba8 <__aeabi_d2iz>
 800a87e:	2200      	movs	r2, #0
 800a880:	4607      	mov	r7, r0
 800a882:	2300      	movs	r3, #0
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f6 f950 	bl	8000b2c <__aeabi_dcmplt>
 800a88c:	b140      	cbz	r0, 800a8a0 <_dtoa_r+0x168>
 800a88e:	4638      	mov	r0, r7
 800a890:	f7f5 fe70 	bl	8000574 <__aeabi_i2d>
 800a894:	4622      	mov	r2, r4
 800a896:	462b      	mov	r3, r5
 800a898:	f7f6 f93e 	bl	8000b18 <__aeabi_dcmpeq>
 800a89c:	b900      	cbnz	r0, 800a8a0 <_dtoa_r+0x168>
 800a89e:	3f01      	subs	r7, #1
 800a8a0:	2f16      	cmp	r7, #22
 800a8a2:	d852      	bhi.n	800a94a <_dtoa_r+0x212>
 800a8a4:	4b5d      	ldr	r3, [pc, #372]	@ (800aa1c <_dtoa_r+0x2e4>)
 800a8a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8b2:	f7f6 f93b 	bl	8000b2c <__aeabi_dcmplt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d049      	beq.n	800a94e <_dtoa_r+0x216>
 800a8ba:	3f01      	subs	r7, #1
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8c2:	1b9b      	subs	r3, r3, r6
 800a8c4:	1e5a      	subs	r2, r3, #1
 800a8c6:	bf45      	ittet	mi
 800a8c8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8cc:	9300      	strmi	r3, [sp, #0]
 800a8ce:	2300      	movpl	r3, #0
 800a8d0:	2300      	movmi	r3, #0
 800a8d2:	9206      	str	r2, [sp, #24]
 800a8d4:	bf54      	ite	pl
 800a8d6:	9300      	strpl	r3, [sp, #0]
 800a8d8:	9306      	strmi	r3, [sp, #24]
 800a8da:	2f00      	cmp	r7, #0
 800a8dc:	db39      	blt.n	800a952 <_dtoa_r+0x21a>
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a8e2:	443b      	add	r3, r7
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	9b07      	ldr	r3, [sp, #28]
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	d863      	bhi.n	800a9b8 <_dtoa_r+0x280>
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	bfc4      	itt	gt
 800a8f4:	3b04      	subgt	r3, #4
 800a8f6:	9307      	strgt	r3, [sp, #28]
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800a8fe:	bfcc      	ite	gt
 800a900:	2400      	movgt	r4, #0
 800a902:	2401      	movle	r4, #1
 800a904:	2b03      	cmp	r3, #3
 800a906:	d863      	bhi.n	800a9d0 <_dtoa_r+0x298>
 800a908:	e8df f003 	tbb	[pc, r3]
 800a90c:	2b375452 	.word	0x2b375452
 800a910:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a914:	441e      	add	r6, r3
 800a916:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	bfc1      	itttt	gt
 800a91e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a922:	409f      	lslgt	r7, r3
 800a924:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a928:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a92c:	bfd6      	itet	le
 800a92e:	f1c3 0320 	rsble	r3, r3, #32
 800a932:	ea47 0003 	orrgt.w	r0, r7, r3
 800a936:	fa04 f003 	lslle.w	r0, r4, r3
 800a93a:	f7f5 fe0b 	bl	8000554 <__aeabi_ui2d>
 800a93e:	2201      	movs	r2, #1
 800a940:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a944:	3e01      	subs	r6, #1
 800a946:	9212      	str	r2, [sp, #72]	@ 0x48
 800a948:	e776      	b.n	800a838 <_dtoa_r+0x100>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e7b7      	b.n	800a8be <_dtoa_r+0x186>
 800a94e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a950:	e7b6      	b.n	800a8c0 <_dtoa_r+0x188>
 800a952:	9b00      	ldr	r3, [sp, #0]
 800a954:	1bdb      	subs	r3, r3, r7
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	427b      	negs	r3, r7
 800a95a:	9308      	str	r3, [sp, #32]
 800a95c:	2300      	movs	r3, #0
 800a95e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a960:	e7c3      	b.n	800a8ea <_dtoa_r+0x1b2>
 800a962:	2301      	movs	r3, #1
 800a964:	9309      	str	r3, [sp, #36]	@ 0x24
 800a966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a968:	eb07 0b03 	add.w	fp, r7, r3
 800a96c:	f10b 0301 	add.w	r3, fp, #1
 800a970:	2b01      	cmp	r3, #1
 800a972:	9303      	str	r3, [sp, #12]
 800a974:	bfb8      	it	lt
 800a976:	2301      	movlt	r3, #1
 800a978:	e006      	b.n	800a988 <_dtoa_r+0x250>
 800a97a:	2301      	movs	r3, #1
 800a97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd28      	ble.n	800a9d6 <_dtoa_r+0x29e>
 800a984:	469b      	mov	fp, r3
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a98c:	2100      	movs	r1, #0
 800a98e:	2204      	movs	r2, #4
 800a990:	f102 0514 	add.w	r5, r2, #20
 800a994:	429d      	cmp	r5, r3
 800a996:	d926      	bls.n	800a9e6 <_dtoa_r+0x2ae>
 800a998:	6041      	str	r1, [r0, #4]
 800a99a:	4648      	mov	r0, r9
 800a99c:	f000 fd9c 	bl	800b4d8 <_Balloc>
 800a9a0:	4682      	mov	sl, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d142      	bne.n	800aa2c <_dtoa_r+0x2f4>
 800a9a6:	4b1e      	ldr	r3, [pc, #120]	@ (800aa20 <_dtoa_r+0x2e8>)
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9ae:	e6da      	b.n	800a766 <_dtoa_r+0x2e>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e7e3      	b.n	800a97c <_dtoa_r+0x244>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e7d5      	b.n	800a964 <_dtoa_r+0x22c>
 800a9b8:	2401      	movs	r4, #1
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	9409      	str	r4, [sp, #36]	@ 0x24
 800a9c0:	f04f 3bff 	mov.w	fp, #4294967295
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9ca:	2312      	movs	r3, #18
 800a9cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9ce:	e7db      	b.n	800a988 <_dtoa_r+0x250>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	e7f4      	b.n	800a9c0 <_dtoa_r+0x288>
 800a9d6:	f04f 0b01 	mov.w	fp, #1
 800a9da:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9de:	465b      	mov	r3, fp
 800a9e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a9e4:	e7d0      	b.n	800a988 <_dtoa_r+0x250>
 800a9e6:	3101      	adds	r1, #1
 800a9e8:	0052      	lsls	r2, r2, #1
 800a9ea:	e7d1      	b.n	800a990 <_dtoa_r+0x258>
 800a9ec:	f3af 8000 	nop.w
 800a9f0:	636f4361 	.word	0x636f4361
 800a9f4:	3fd287a7 	.word	0x3fd287a7
 800a9f8:	8b60c8b3 	.word	0x8b60c8b3
 800a9fc:	3fc68a28 	.word	0x3fc68a28
 800aa00:	509f79fb 	.word	0x509f79fb
 800aa04:	3fd34413 	.word	0x3fd34413
 800aa08:	0800c7bd 	.word	0x0800c7bd
 800aa0c:	0800c7d4 	.word	0x0800c7d4
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	0800c78d 	.word	0x0800c78d
 800aa18:	3ff80000 	.word	0x3ff80000
 800aa1c:	0800c928 	.word	0x0800c928
 800aa20:	0800c82c 	.word	0x0800c82c
 800aa24:	0800c7b9 	.word	0x0800c7b9
 800aa28:	0800c78c 	.word	0x0800c78c
 800aa2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa30:	6018      	str	r0, [r3, #0]
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f200 80a1 	bhi.w	800ab7c <_dtoa_r+0x444>
 800aa3a:	2c00      	cmp	r4, #0
 800aa3c:	f000 809e 	beq.w	800ab7c <_dtoa_r+0x444>
 800aa40:	2f00      	cmp	r7, #0
 800aa42:	dd33      	ble.n	800aaac <_dtoa_r+0x374>
 800aa44:	4b9c      	ldr	r3, [pc, #624]	@ (800acb8 <_dtoa_r+0x580>)
 800aa46:	f007 020f 	and.w	r2, r7, #15
 800aa4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4e:	ed93 7b00 	vldr	d7, [r3]
 800aa52:	05f8      	lsls	r0, r7, #23
 800aa54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aa58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa5c:	d516      	bpl.n	800aa8c <_dtoa_r+0x354>
 800aa5e:	4b97      	ldr	r3, [pc, #604]	@ (800acbc <_dtoa_r+0x584>)
 800aa60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa68:	f7f5 ff18 	bl	800089c <__aeabi_ddiv>
 800aa6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa70:	f004 040f 	and.w	r4, r4, #15
 800aa74:	2603      	movs	r6, #3
 800aa76:	4d91      	ldr	r5, [pc, #580]	@ (800acbc <_dtoa_r+0x584>)
 800aa78:	b954      	cbnz	r4, 800aa90 <_dtoa_r+0x358>
 800aa7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa82:	f7f5 ff0b 	bl	800089c <__aeabi_ddiv>
 800aa86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa8a:	e028      	b.n	800aade <_dtoa_r+0x3a6>
 800aa8c:	2602      	movs	r6, #2
 800aa8e:	e7f2      	b.n	800aa76 <_dtoa_r+0x33e>
 800aa90:	07e1      	lsls	r1, r4, #31
 800aa92:	d508      	bpl.n	800aaa6 <_dtoa_r+0x36e>
 800aa94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa9c:	f7f5 fdd4 	bl	8000648 <__aeabi_dmul>
 800aaa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	1064      	asrs	r4, r4, #1
 800aaa8:	3508      	adds	r5, #8
 800aaaa:	e7e5      	b.n	800aa78 <_dtoa_r+0x340>
 800aaac:	f000 80af 	beq.w	800ac0e <_dtoa_r+0x4d6>
 800aab0:	427c      	negs	r4, r7
 800aab2:	4b81      	ldr	r3, [pc, #516]	@ (800acb8 <_dtoa_r+0x580>)
 800aab4:	4d81      	ldr	r5, [pc, #516]	@ (800acbc <_dtoa_r+0x584>)
 800aab6:	f004 020f 	and.w	r2, r4, #15
 800aaba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aac6:	f7f5 fdbf 	bl	8000648 <__aeabi_dmul>
 800aaca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aace:	1124      	asrs	r4, r4, #4
 800aad0:	2300      	movs	r3, #0
 800aad2:	2602      	movs	r6, #2
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	f040 808f 	bne.w	800abf8 <_dtoa_r+0x4c0>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1d3      	bne.n	800aa86 <_dtoa_r+0x34e>
 800aade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aae0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8094 	beq.w	800ac12 <_dtoa_r+0x4da>
 800aaea:	4b75      	ldr	r3, [pc, #468]	@ (800acc0 <_dtoa_r+0x588>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f6 f81b 	bl	8000b2c <__aeabi_dcmplt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f000 808b 	beq.w	800ac12 <_dtoa_r+0x4da>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 8087 	beq.w	800ac12 <_dtoa_r+0x4da>
 800ab04:	f1bb 0f00 	cmp.w	fp, #0
 800ab08:	dd34      	ble.n	800ab74 <_dtoa_r+0x43c>
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4b6d      	ldr	r3, [pc, #436]	@ (800acc4 <_dtoa_r+0x58c>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fd99 	bl	8000648 <__aeabi_dmul>
 800ab16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab1a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ab1e:	3601      	adds	r6, #1
 800ab20:	465c      	mov	r4, fp
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7f5 fd26 	bl	8000574 <__aeabi_i2d>
 800ab28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2c:	f7f5 fd8c 	bl	8000648 <__aeabi_dmul>
 800ab30:	4b65      	ldr	r3, [pc, #404]	@ (800acc8 <_dtoa_r+0x590>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	f7f5 fbd2 	bl	80002dc <__adddf3>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d16a      	bne.n	800ac18 <_dtoa_r+0x4e0>
 800ab42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab46:	4b61      	ldr	r3, [pc, #388]	@ (800accc <_dtoa_r+0x594>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f7f5 fbc5 	bl	80002d8 <__aeabi_dsub>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4633      	mov	r3, r6
 800ab5a:	f7f6 f805 	bl	8000b68 <__aeabi_dcmpgt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f040 8298 	bne.w	800b094 <_dtoa_r+0x95c>
 800ab64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab68:	462a      	mov	r2, r5
 800ab6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab6e:	f7f5 ffdd 	bl	8000b2c <__aeabi_dcmplt>
 800ab72:	bb38      	cbnz	r0, 800abc4 <_dtoa_r+0x48c>
 800ab74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ab78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f2c0 8157 	blt.w	800ae32 <_dtoa_r+0x6fa>
 800ab84:	2f0e      	cmp	r7, #14
 800ab86:	f300 8154 	bgt.w	800ae32 <_dtoa_r+0x6fa>
 800ab8a:	4b4b      	ldr	r3, [pc, #300]	@ (800acb8 <_dtoa_r+0x580>)
 800ab8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab90:	ed93 7b00 	vldr	d7, [r3]
 800ab94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	ed8d 7b00 	vstr	d7, [sp]
 800ab9c:	f280 80e5 	bge.w	800ad6a <_dtoa_r+0x632>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f300 80e1 	bgt.w	800ad6a <_dtoa_r+0x632>
 800aba8:	d10c      	bne.n	800abc4 <_dtoa_r+0x48c>
 800abaa:	4b48      	ldr	r3, [pc, #288]	@ (800accc <_dtoa_r+0x594>)
 800abac:	2200      	movs	r2, #0
 800abae:	ec51 0b17 	vmov	r0, r1, d7
 800abb2:	f7f5 fd49 	bl	8000648 <__aeabi_dmul>
 800abb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abba:	f7f5 ffcb 	bl	8000b54 <__aeabi_dcmpge>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f000 8266 	beq.w	800b090 <_dtoa_r+0x958>
 800abc4:	2400      	movs	r4, #0
 800abc6:	4625      	mov	r5, r4
 800abc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abca:	4656      	mov	r6, sl
 800abcc:	ea6f 0803 	mvn.w	r8, r3
 800abd0:	2700      	movs	r7, #0
 800abd2:	4621      	mov	r1, r4
 800abd4:	4648      	mov	r0, r9
 800abd6:	f000 fcbf 	bl	800b558 <_Bfree>
 800abda:	2d00      	cmp	r5, #0
 800abdc:	f000 80bd 	beq.w	800ad5a <_dtoa_r+0x622>
 800abe0:	b12f      	cbz	r7, 800abee <_dtoa_r+0x4b6>
 800abe2:	42af      	cmp	r7, r5
 800abe4:	d003      	beq.n	800abee <_dtoa_r+0x4b6>
 800abe6:	4639      	mov	r1, r7
 800abe8:	4648      	mov	r0, r9
 800abea:	f000 fcb5 	bl	800b558 <_Bfree>
 800abee:	4629      	mov	r1, r5
 800abf0:	4648      	mov	r0, r9
 800abf2:	f000 fcb1 	bl	800b558 <_Bfree>
 800abf6:	e0b0      	b.n	800ad5a <_dtoa_r+0x622>
 800abf8:	07e2      	lsls	r2, r4, #31
 800abfa:	d505      	bpl.n	800ac08 <_dtoa_r+0x4d0>
 800abfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac00:	f7f5 fd22 	bl	8000648 <__aeabi_dmul>
 800ac04:	3601      	adds	r6, #1
 800ac06:	2301      	movs	r3, #1
 800ac08:	1064      	asrs	r4, r4, #1
 800ac0a:	3508      	adds	r5, #8
 800ac0c:	e762      	b.n	800aad4 <_dtoa_r+0x39c>
 800ac0e:	2602      	movs	r6, #2
 800ac10:	e765      	b.n	800aade <_dtoa_r+0x3a6>
 800ac12:	9c03      	ldr	r4, [sp, #12]
 800ac14:	46b8      	mov	r8, r7
 800ac16:	e784      	b.n	800ab22 <_dtoa_r+0x3ea>
 800ac18:	4b27      	ldr	r3, [pc, #156]	@ (800acb8 <_dtoa_r+0x580>)
 800ac1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac24:	4454      	add	r4, sl
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d054      	beq.n	800acd4 <_dtoa_r+0x59c>
 800ac2a:	4929      	ldr	r1, [pc, #164]	@ (800acd0 <_dtoa_r+0x598>)
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f7f5 fe35 	bl	800089c <__aeabi_ddiv>
 800ac32:	4633      	mov	r3, r6
 800ac34:	462a      	mov	r2, r5
 800ac36:	f7f5 fb4f 	bl	80002d8 <__aeabi_dsub>
 800ac3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac3e:	4656      	mov	r6, sl
 800ac40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac44:	f7f5 ffb0 	bl	8000ba8 <__aeabi_d2iz>
 800ac48:	4605      	mov	r5, r0
 800ac4a:	f7f5 fc93 	bl	8000574 <__aeabi_i2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac56:	f7f5 fb3f 	bl	80002d8 <__aeabi_dsub>
 800ac5a:	3530      	adds	r5, #48	@ 0x30
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac64:	f806 5b01 	strb.w	r5, [r6], #1
 800ac68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac6c:	f7f5 ff5e 	bl	8000b2c <__aeabi_dcmplt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d172      	bne.n	800ad5a <_dtoa_r+0x622>
 800ac74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac78:	4911      	ldr	r1, [pc, #68]	@ (800acc0 <_dtoa_r+0x588>)
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f7f5 fb2c 	bl	80002d8 <__aeabi_dsub>
 800ac80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac84:	f7f5 ff52 	bl	8000b2c <__aeabi_dcmplt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f040 80b4 	bne.w	800adf6 <_dtoa_r+0x6be>
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	f43f af70 	beq.w	800ab74 <_dtoa_r+0x43c>
 800ac94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac98:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <_dtoa_r+0x58c>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7f5 fcd4 	bl	8000648 <__aeabi_dmul>
 800aca0:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <_dtoa_r+0x58c>)
 800aca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aca6:	2200      	movs	r2, #0
 800aca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acac:	f7f5 fccc 	bl	8000648 <__aeabi_dmul>
 800acb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acb4:	e7c4      	b.n	800ac40 <_dtoa_r+0x508>
 800acb6:	bf00      	nop
 800acb8:	0800c928 	.word	0x0800c928
 800acbc:	0800c900 	.word	0x0800c900
 800acc0:	3ff00000 	.word	0x3ff00000
 800acc4:	40240000 	.word	0x40240000
 800acc8:	401c0000 	.word	0x401c0000
 800accc:	40140000 	.word	0x40140000
 800acd0:	3fe00000 	.word	0x3fe00000
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	f7f5 fcb6 	bl	8000648 <__aeabi_dmul>
 800acdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ace0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ace2:	4656      	mov	r6, sl
 800ace4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ace8:	f7f5 ff5e 	bl	8000ba8 <__aeabi_d2iz>
 800acec:	4605      	mov	r5, r0
 800acee:	f7f5 fc41 	bl	8000574 <__aeabi_i2d>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acfa:	f7f5 faed 	bl	80002d8 <__aeabi_dsub>
 800acfe:	3530      	adds	r5, #48	@ 0x30
 800ad00:	f806 5b01 	strb.w	r5, [r6], #1
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	42a6      	cmp	r6, r4
 800ad0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	d124      	bne.n	800ad5e <_dtoa_r+0x626>
 800ad14:	4baf      	ldr	r3, [pc, #700]	@ (800afd4 <_dtoa_r+0x89c>)
 800ad16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad1a:	f7f5 fadf 	bl	80002dc <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad26:	f7f5 ff1f 	bl	8000b68 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d163      	bne.n	800adf6 <_dtoa_r+0x6be>
 800ad2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad32:	49a8      	ldr	r1, [pc, #672]	@ (800afd4 <_dtoa_r+0x89c>)
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7f5 facf 	bl	80002d8 <__aeabi_dsub>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad42:	f7f5 fef3 	bl	8000b2c <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f43f af14 	beq.w	800ab74 <_dtoa_r+0x43c>
 800ad4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad4e:	1e73      	subs	r3, r6, #1
 800ad50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad56:	2b30      	cmp	r3, #48	@ 0x30
 800ad58:	d0f8      	beq.n	800ad4c <_dtoa_r+0x614>
 800ad5a:	4647      	mov	r7, r8
 800ad5c:	e03b      	b.n	800add6 <_dtoa_r+0x69e>
 800ad5e:	4b9e      	ldr	r3, [pc, #632]	@ (800afd8 <_dtoa_r+0x8a0>)
 800ad60:	f7f5 fc72 	bl	8000648 <__aeabi_dmul>
 800ad64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad68:	e7bc      	b.n	800ace4 <_dtoa_r+0x5ac>
 800ad6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ad6e:	4656      	mov	r6, sl
 800ad70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fd90 	bl	800089c <__aeabi_ddiv>
 800ad7c:	f7f5 ff14 	bl	8000ba8 <__aeabi_d2iz>
 800ad80:	4680      	mov	r8, r0
 800ad82:	f7f5 fbf7 	bl	8000574 <__aeabi_i2d>
 800ad86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8a:	f7f5 fc5d 	bl	8000648 <__aeabi_dmul>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4620      	mov	r0, r4
 800ad94:	4629      	mov	r1, r5
 800ad96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad9a:	f7f5 fa9d 	bl	80002d8 <__aeabi_dsub>
 800ad9e:	f806 4b01 	strb.w	r4, [r6], #1
 800ada2:	9d03      	ldr	r5, [sp, #12]
 800ada4:	eba6 040a 	sub.w	r4, r6, sl
 800ada8:	42a5      	cmp	r5, r4
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	d133      	bne.n	800ae18 <_dtoa_r+0x6e0>
 800adb0:	f7f5 fa94 	bl	80002dc <__adddf3>
 800adb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adb8:	4604      	mov	r4, r0
 800adba:	460d      	mov	r5, r1
 800adbc:	f7f5 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 800adc0:	b9c0      	cbnz	r0, 800adf4 <_dtoa_r+0x6bc>
 800adc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc6:	4620      	mov	r0, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 fea5 	bl	8000b18 <__aeabi_dcmpeq>
 800adce:	b110      	cbz	r0, 800add6 <_dtoa_r+0x69e>
 800add0:	f018 0f01 	tst.w	r8, #1
 800add4:	d10e      	bne.n	800adf4 <_dtoa_r+0x6bc>
 800add6:	9902      	ldr	r1, [sp, #8]
 800add8:	4648      	mov	r0, r9
 800adda:	f000 fbbd 	bl	800b558 <_Bfree>
 800adde:	2300      	movs	r3, #0
 800ade0:	7033      	strb	r3, [r6, #0]
 800ade2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ade4:	3701      	adds	r7, #1
 800ade6:	601f      	str	r7, [r3, #0]
 800ade8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 824b 	beq.w	800b286 <_dtoa_r+0xb4e>
 800adf0:	601e      	str	r6, [r3, #0]
 800adf2:	e248      	b.n	800b286 <_dtoa_r+0xb4e>
 800adf4:	46b8      	mov	r8, r7
 800adf6:	4633      	mov	r3, r6
 800adf8:	461e      	mov	r6, r3
 800adfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adfe:	2a39      	cmp	r2, #57	@ 0x39
 800ae00:	d106      	bne.n	800ae10 <_dtoa_r+0x6d8>
 800ae02:	459a      	cmp	sl, r3
 800ae04:	d1f8      	bne.n	800adf8 <_dtoa_r+0x6c0>
 800ae06:	2230      	movs	r2, #48	@ 0x30
 800ae08:	f108 0801 	add.w	r8, r8, #1
 800ae0c:	f88a 2000 	strb.w	r2, [sl]
 800ae10:	781a      	ldrb	r2, [r3, #0]
 800ae12:	3201      	adds	r2, #1
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e7a0      	b.n	800ad5a <_dtoa_r+0x622>
 800ae18:	4b6f      	ldr	r3, [pc, #444]	@ (800afd8 <_dtoa_r+0x8a0>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fc14 	bl	8000648 <__aeabi_dmul>
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	4604      	mov	r4, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	f7f5 fe76 	bl	8000b18 <__aeabi_dcmpeq>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d09f      	beq.n	800ad70 <_dtoa_r+0x638>
 800ae30:	e7d1      	b.n	800add6 <_dtoa_r+0x69e>
 800ae32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	f000 80ea 	beq.w	800b00e <_dtoa_r+0x8d6>
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	2a01      	cmp	r2, #1
 800ae3e:	f300 80cd 	bgt.w	800afdc <_dtoa_r+0x8a4>
 800ae42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	f000 80c1 	beq.w	800afcc <_dtoa_r+0x894>
 800ae4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae4e:	9c08      	ldr	r4, [sp, #32]
 800ae50:	9e00      	ldr	r6, [sp, #0]
 800ae52:	9a00      	ldr	r2, [sp, #0]
 800ae54:	441a      	add	r2, r3
 800ae56:	9200      	str	r2, [sp, #0]
 800ae58:	9a06      	ldr	r2, [sp, #24]
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	441a      	add	r2, r3
 800ae5e:	4648      	mov	r0, r9
 800ae60:	9206      	str	r2, [sp, #24]
 800ae62:	f000 fc2d 	bl	800b6c0 <__i2b>
 800ae66:	4605      	mov	r5, r0
 800ae68:	b166      	cbz	r6, 800ae84 <_dtoa_r+0x74c>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd09      	ble.n	800ae84 <_dtoa_r+0x74c>
 800ae70:	42b3      	cmp	r3, r6
 800ae72:	9a00      	ldr	r2, [sp, #0]
 800ae74:	bfa8      	it	ge
 800ae76:	4633      	movge	r3, r6
 800ae78:	1ad2      	subs	r2, r2, r3
 800ae7a:	9200      	str	r2, [sp, #0]
 800ae7c:	9a06      	ldr	r2, [sp, #24]
 800ae7e:	1af6      	subs	r6, r6, r3
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	9b08      	ldr	r3, [sp, #32]
 800ae86:	b30b      	cbz	r3, 800aecc <_dtoa_r+0x794>
 800ae88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80c6 	beq.w	800b01c <_dtoa_r+0x8e4>
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	f000 80c0 	beq.w	800b016 <_dtoa_r+0x8de>
 800ae96:	4629      	mov	r1, r5
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	f000 fcc8 	bl	800b830 <__pow5mult>
 800aea0:	9a02      	ldr	r2, [sp, #8]
 800aea2:	4601      	mov	r1, r0
 800aea4:	4605      	mov	r5, r0
 800aea6:	4648      	mov	r0, r9
 800aea8:	f000 fc20 	bl	800b6ec <__multiply>
 800aeac:	9902      	ldr	r1, [sp, #8]
 800aeae:	4680      	mov	r8, r0
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fb51 	bl	800b558 <_Bfree>
 800aeb6:	9b08      	ldr	r3, [sp, #32]
 800aeb8:	1b1b      	subs	r3, r3, r4
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	f000 80b1 	beq.w	800b022 <_dtoa_r+0x8ea>
 800aec0:	9a08      	ldr	r2, [sp, #32]
 800aec2:	4641      	mov	r1, r8
 800aec4:	4648      	mov	r0, r9
 800aec6:	f000 fcb3 	bl	800b830 <__pow5mult>
 800aeca:	9002      	str	r0, [sp, #8]
 800aecc:	2101      	movs	r1, #1
 800aece:	4648      	mov	r0, r9
 800aed0:	f000 fbf6 	bl	800b6c0 <__i2b>
 800aed4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aed6:	4604      	mov	r4, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 81d8 	beq.w	800b28e <_dtoa_r+0xb56>
 800aede:	461a      	mov	r2, r3
 800aee0:	4601      	mov	r1, r0
 800aee2:	4648      	mov	r0, r9
 800aee4:	f000 fca4 	bl	800b830 <__pow5mult>
 800aee8:	9b07      	ldr	r3, [sp, #28]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	4604      	mov	r4, r0
 800aeee:	f300 809f 	bgt.w	800b030 <_dtoa_r+0x8f8>
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f040 8097 	bne.w	800b028 <_dtoa_r+0x8f0>
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 8093 	bne.w	800b02c <_dtoa_r+0x8f4>
 800af06:	9b05      	ldr	r3, [sp, #20]
 800af08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af0c:	0d1b      	lsrs	r3, r3, #20
 800af0e:	051b      	lsls	r3, r3, #20
 800af10:	b133      	cbz	r3, 800af20 <_dtoa_r+0x7e8>
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	3301      	adds	r3, #1
 800af1c:	9306      	str	r3, [sp, #24]
 800af1e:	2301      	movs	r3, #1
 800af20:	9308      	str	r3, [sp, #32]
 800af22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 81b8 	beq.w	800b29a <_dtoa_r+0xb62>
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af30:	6918      	ldr	r0, [r3, #16]
 800af32:	f000 fb79 	bl	800b628 <__hi0bits>
 800af36:	f1c0 0020 	rsb	r0, r0, #32
 800af3a:	9b06      	ldr	r3, [sp, #24]
 800af3c:	4418      	add	r0, r3
 800af3e:	f010 001f 	ands.w	r0, r0, #31
 800af42:	f000 8082 	beq.w	800b04a <_dtoa_r+0x912>
 800af46:	f1c0 0320 	rsb	r3, r0, #32
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	dd73      	ble.n	800b036 <_dtoa_r+0x8fe>
 800af4e:	9b00      	ldr	r3, [sp, #0]
 800af50:	f1c0 001c 	rsb	r0, r0, #28
 800af54:	4403      	add	r3, r0
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	4403      	add	r3, r0
 800af5c:	4406      	add	r6, r0
 800af5e:	9306      	str	r3, [sp, #24]
 800af60:	9b00      	ldr	r3, [sp, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	dd05      	ble.n	800af72 <_dtoa_r+0x83a>
 800af66:	9902      	ldr	r1, [sp, #8]
 800af68:	461a      	mov	r2, r3
 800af6a:	4648      	mov	r0, r9
 800af6c:	f000 fcba 	bl	800b8e4 <__lshift>
 800af70:	9002      	str	r0, [sp, #8]
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd05      	ble.n	800af84 <_dtoa_r+0x84c>
 800af78:	4621      	mov	r1, r4
 800af7a:	461a      	mov	r2, r3
 800af7c:	4648      	mov	r0, r9
 800af7e:	f000 fcb1 	bl	800b8e4 <__lshift>
 800af82:	4604      	mov	r4, r0
 800af84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af86:	2b00      	cmp	r3, #0
 800af88:	d061      	beq.n	800b04e <_dtoa_r+0x916>
 800af8a:	9802      	ldr	r0, [sp, #8]
 800af8c:	4621      	mov	r1, r4
 800af8e:	f000 fd15 	bl	800b9bc <__mcmp>
 800af92:	2800      	cmp	r0, #0
 800af94:	da5b      	bge.n	800b04e <_dtoa_r+0x916>
 800af96:	2300      	movs	r3, #0
 800af98:	9902      	ldr	r1, [sp, #8]
 800af9a:	220a      	movs	r2, #10
 800af9c:	4648      	mov	r0, r9
 800af9e:	f000 fafd 	bl	800b59c <__multadd>
 800afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f107 38ff 	add.w	r8, r7, #4294967295
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8177 	beq.w	800b29e <_dtoa_r+0xb66>
 800afb0:	4629      	mov	r1, r5
 800afb2:	2300      	movs	r3, #0
 800afb4:	220a      	movs	r2, #10
 800afb6:	4648      	mov	r0, r9
 800afb8:	f000 faf0 	bl	800b59c <__multadd>
 800afbc:	f1bb 0f00 	cmp.w	fp, #0
 800afc0:	4605      	mov	r5, r0
 800afc2:	dc6f      	bgt.n	800b0a4 <_dtoa_r+0x96c>
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	dc49      	bgt.n	800b05e <_dtoa_r+0x926>
 800afca:	e06b      	b.n	800b0a4 <_dtoa_r+0x96c>
 800afcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afd2:	e73c      	b.n	800ae4e <_dtoa_r+0x716>
 800afd4:	3fe00000 	.word	0x3fe00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	1e5c      	subs	r4, r3, #1
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	db09      	blt.n	800affa <_dtoa_r+0x8c2>
 800afe6:	1b1c      	subs	r4, r3, r4
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f6bf af30 	bge.w	800ae50 <_dtoa_r+0x718>
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	9a03      	ldr	r2, [sp, #12]
 800aff4:	1a9e      	subs	r6, r3, r2
 800aff6:	2300      	movs	r3, #0
 800aff8:	e72b      	b.n	800ae52 <_dtoa_r+0x71a>
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800affe:	9408      	str	r4, [sp, #32]
 800b000:	1ae3      	subs	r3, r4, r3
 800b002:	441a      	add	r2, r3
 800b004:	9e00      	ldr	r6, [sp, #0]
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	920d      	str	r2, [sp, #52]	@ 0x34
 800b00a:	2400      	movs	r4, #0
 800b00c:	e721      	b.n	800ae52 <_dtoa_r+0x71a>
 800b00e:	9c08      	ldr	r4, [sp, #32]
 800b010:	9e00      	ldr	r6, [sp, #0]
 800b012:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b014:	e728      	b.n	800ae68 <_dtoa_r+0x730>
 800b016:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b01a:	e751      	b.n	800aec0 <_dtoa_r+0x788>
 800b01c:	9a08      	ldr	r2, [sp, #32]
 800b01e:	9902      	ldr	r1, [sp, #8]
 800b020:	e750      	b.n	800aec4 <_dtoa_r+0x78c>
 800b022:	f8cd 8008 	str.w	r8, [sp, #8]
 800b026:	e751      	b.n	800aecc <_dtoa_r+0x794>
 800b028:	2300      	movs	r3, #0
 800b02a:	e779      	b.n	800af20 <_dtoa_r+0x7e8>
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	e777      	b.n	800af20 <_dtoa_r+0x7e8>
 800b030:	2300      	movs	r3, #0
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	e779      	b.n	800af2a <_dtoa_r+0x7f2>
 800b036:	d093      	beq.n	800af60 <_dtoa_r+0x828>
 800b038:	9a00      	ldr	r2, [sp, #0]
 800b03a:	331c      	adds	r3, #28
 800b03c:	441a      	add	r2, r3
 800b03e:	9200      	str	r2, [sp, #0]
 800b040:	9a06      	ldr	r2, [sp, #24]
 800b042:	441a      	add	r2, r3
 800b044:	441e      	add	r6, r3
 800b046:	9206      	str	r2, [sp, #24]
 800b048:	e78a      	b.n	800af60 <_dtoa_r+0x828>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e7f4      	b.n	800b038 <_dtoa_r+0x900>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	46b8      	mov	r8, r7
 800b054:	dc20      	bgt.n	800b098 <_dtoa_r+0x960>
 800b056:	469b      	mov	fp, r3
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	dd1e      	ble.n	800b09c <_dtoa_r+0x964>
 800b05e:	f1bb 0f00 	cmp.w	fp, #0
 800b062:	f47f adb1 	bne.w	800abc8 <_dtoa_r+0x490>
 800b066:	4621      	mov	r1, r4
 800b068:	465b      	mov	r3, fp
 800b06a:	2205      	movs	r2, #5
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 fa95 	bl	800b59c <__multadd>
 800b072:	4601      	mov	r1, r0
 800b074:	4604      	mov	r4, r0
 800b076:	9802      	ldr	r0, [sp, #8]
 800b078:	f000 fca0 	bl	800b9bc <__mcmp>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f77f ada3 	ble.w	800abc8 <_dtoa_r+0x490>
 800b082:	4656      	mov	r6, sl
 800b084:	2331      	movs	r3, #49	@ 0x31
 800b086:	f806 3b01 	strb.w	r3, [r6], #1
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	e59f      	b.n	800abd0 <_dtoa_r+0x498>
 800b090:	9c03      	ldr	r4, [sp, #12]
 800b092:	46b8      	mov	r8, r7
 800b094:	4625      	mov	r5, r4
 800b096:	e7f4      	b.n	800b082 <_dtoa_r+0x94a>
 800b098:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8101 	beq.w	800b2a6 <_dtoa_r+0xb6e>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	dd05      	ble.n	800b0b4 <_dtoa_r+0x97c>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	4648      	mov	r0, r9
 800b0ae:	f000 fc19 	bl	800b8e4 <__lshift>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d05c      	beq.n	800b174 <_dtoa_r+0xa3c>
 800b0ba:	6869      	ldr	r1, [r5, #4]
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f000 fa0b 	bl	800b4d8 <_Balloc>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	b928      	cbnz	r0, 800b0d2 <_dtoa_r+0x99a>
 800b0c6:	4b82      	ldr	r3, [pc, #520]	@ (800b2d0 <_dtoa_r+0xb98>)
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0ce:	f7ff bb4a 	b.w	800a766 <_dtoa_r+0x2e>
 800b0d2:	692a      	ldr	r2, [r5, #16]
 800b0d4:	3202      	adds	r2, #2
 800b0d6:	0092      	lsls	r2, r2, #2
 800b0d8:	f105 010c 	add.w	r1, r5, #12
 800b0dc:	300c      	adds	r0, #12
 800b0de:	f7ff fa92 	bl	800a606 <memcpy>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4648      	mov	r0, r9
 800b0e8:	f000 fbfc 	bl	800b8e4 <__lshift>
 800b0ec:	f10a 0301 	add.w	r3, sl, #1
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	eb0a 030b 	add.w	r3, sl, fp
 800b0f6:	9308      	str	r3, [sp, #32]
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	462f      	mov	r7, r5
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	4605      	mov	r5, r0
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	9802      	ldr	r0, [sp, #8]
 800b108:	4621      	mov	r1, r4
 800b10a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b10e:	f7ff fa88 	bl	800a622 <quorem>
 800b112:	4603      	mov	r3, r0
 800b114:	3330      	adds	r3, #48	@ 0x30
 800b116:	9003      	str	r0, [sp, #12]
 800b118:	4639      	mov	r1, r7
 800b11a:	9802      	ldr	r0, [sp, #8]
 800b11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b11e:	f000 fc4d 	bl	800b9bc <__mcmp>
 800b122:	462a      	mov	r2, r5
 800b124:	9004      	str	r0, [sp, #16]
 800b126:	4621      	mov	r1, r4
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fc63 	bl	800b9f4 <__mdiff>
 800b12e:	68c2      	ldr	r2, [r0, #12]
 800b130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b132:	4606      	mov	r6, r0
 800b134:	bb02      	cbnz	r2, 800b178 <_dtoa_r+0xa40>
 800b136:	4601      	mov	r1, r0
 800b138:	9802      	ldr	r0, [sp, #8]
 800b13a:	f000 fc3f 	bl	800b9bc <__mcmp>
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	4602      	mov	r2, r0
 800b142:	4631      	mov	r1, r6
 800b144:	4648      	mov	r0, r9
 800b146:	920c      	str	r2, [sp, #48]	@ 0x30
 800b148:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14a:	f000 fa05 	bl	800b558 <_Bfree>
 800b14e:	9b07      	ldr	r3, [sp, #28]
 800b150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b152:	9e00      	ldr	r6, [sp, #0]
 800b154:	ea42 0103 	orr.w	r1, r2, r3
 800b158:	9b06      	ldr	r3, [sp, #24]
 800b15a:	4319      	orrs	r1, r3
 800b15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15e:	d10d      	bne.n	800b17c <_dtoa_r+0xa44>
 800b160:	2b39      	cmp	r3, #57	@ 0x39
 800b162:	d027      	beq.n	800b1b4 <_dtoa_r+0xa7c>
 800b164:	9a04      	ldr	r2, [sp, #16]
 800b166:	2a00      	cmp	r2, #0
 800b168:	dd01      	ble.n	800b16e <_dtoa_r+0xa36>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3331      	adds	r3, #49	@ 0x31
 800b16e:	f88b 3000 	strb.w	r3, [fp]
 800b172:	e52e      	b.n	800abd2 <_dtoa_r+0x49a>
 800b174:	4628      	mov	r0, r5
 800b176:	e7b9      	b.n	800b0ec <_dtoa_r+0x9b4>
 800b178:	2201      	movs	r2, #1
 800b17a:	e7e2      	b.n	800b142 <_dtoa_r+0xa0a>
 800b17c:	9904      	ldr	r1, [sp, #16]
 800b17e:	2900      	cmp	r1, #0
 800b180:	db04      	blt.n	800b18c <_dtoa_r+0xa54>
 800b182:	9807      	ldr	r0, [sp, #28]
 800b184:	4301      	orrs	r1, r0
 800b186:	9806      	ldr	r0, [sp, #24]
 800b188:	4301      	orrs	r1, r0
 800b18a:	d120      	bne.n	800b1ce <_dtoa_r+0xa96>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	ddee      	ble.n	800b16e <_dtoa_r+0xa36>
 800b190:	9902      	ldr	r1, [sp, #8]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2201      	movs	r2, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f000 fba4 	bl	800b8e4 <__lshift>
 800b19c:	4621      	mov	r1, r4
 800b19e:	9002      	str	r0, [sp, #8]
 800b1a0:	f000 fc0c 	bl	800b9bc <__mcmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	dc02      	bgt.n	800b1b0 <_dtoa_r+0xa78>
 800b1aa:	d1e0      	bne.n	800b16e <_dtoa_r+0xa36>
 800b1ac:	07da      	lsls	r2, r3, #31
 800b1ae:	d5de      	bpl.n	800b16e <_dtoa_r+0xa36>
 800b1b0:	2b39      	cmp	r3, #57	@ 0x39
 800b1b2:	d1da      	bne.n	800b16a <_dtoa_r+0xa32>
 800b1b4:	2339      	movs	r3, #57	@ 0x39
 800b1b6:	f88b 3000 	strb.w	r3, [fp]
 800b1ba:	4633      	mov	r3, r6
 800b1bc:	461e      	mov	r6, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1c4:	2a39      	cmp	r2, #57	@ 0x39
 800b1c6:	d04e      	beq.n	800b266 <_dtoa_r+0xb2e>
 800b1c8:	3201      	adds	r2, #1
 800b1ca:	701a      	strb	r2, [r3, #0]
 800b1cc:	e501      	b.n	800abd2 <_dtoa_r+0x49a>
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	dd03      	ble.n	800b1da <_dtoa_r+0xaa2>
 800b1d2:	2b39      	cmp	r3, #57	@ 0x39
 800b1d4:	d0ee      	beq.n	800b1b4 <_dtoa_r+0xa7c>
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	e7c9      	b.n	800b16e <_dtoa_r+0xa36>
 800b1da:	9a00      	ldr	r2, [sp, #0]
 800b1dc:	9908      	ldr	r1, [sp, #32]
 800b1de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1e2:	428a      	cmp	r2, r1
 800b1e4:	d028      	beq.n	800b238 <_dtoa_r+0xb00>
 800b1e6:	9902      	ldr	r1, [sp, #8]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	220a      	movs	r2, #10
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f000 f9d5 	bl	800b59c <__multadd>
 800b1f2:	42af      	cmp	r7, r5
 800b1f4:	9002      	str	r0, [sp, #8]
 800b1f6:	f04f 0300 	mov.w	r3, #0
 800b1fa:	f04f 020a 	mov.w	r2, #10
 800b1fe:	4639      	mov	r1, r7
 800b200:	4648      	mov	r0, r9
 800b202:	d107      	bne.n	800b214 <_dtoa_r+0xadc>
 800b204:	f000 f9ca 	bl	800b59c <__multadd>
 800b208:	4607      	mov	r7, r0
 800b20a:	4605      	mov	r5, r0
 800b20c:	9b00      	ldr	r3, [sp, #0]
 800b20e:	3301      	adds	r3, #1
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	e777      	b.n	800b104 <_dtoa_r+0x9cc>
 800b214:	f000 f9c2 	bl	800b59c <__multadd>
 800b218:	4629      	mov	r1, r5
 800b21a:	4607      	mov	r7, r0
 800b21c:	2300      	movs	r3, #0
 800b21e:	220a      	movs	r2, #10
 800b220:	4648      	mov	r0, r9
 800b222:	f000 f9bb 	bl	800b59c <__multadd>
 800b226:	4605      	mov	r5, r0
 800b228:	e7f0      	b.n	800b20c <_dtoa_r+0xad4>
 800b22a:	f1bb 0f00 	cmp.w	fp, #0
 800b22e:	bfcc      	ite	gt
 800b230:	465e      	movgt	r6, fp
 800b232:	2601      	movle	r6, #1
 800b234:	4456      	add	r6, sl
 800b236:	2700      	movs	r7, #0
 800b238:	9902      	ldr	r1, [sp, #8]
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	2201      	movs	r2, #1
 800b23e:	4648      	mov	r0, r9
 800b240:	f000 fb50 	bl	800b8e4 <__lshift>
 800b244:	4621      	mov	r1, r4
 800b246:	9002      	str	r0, [sp, #8]
 800b248:	f000 fbb8 	bl	800b9bc <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dcb4      	bgt.n	800b1ba <_dtoa_r+0xa82>
 800b250:	d102      	bne.n	800b258 <_dtoa_r+0xb20>
 800b252:	9b00      	ldr	r3, [sp, #0]
 800b254:	07db      	lsls	r3, r3, #31
 800b256:	d4b0      	bmi.n	800b1ba <_dtoa_r+0xa82>
 800b258:	4633      	mov	r3, r6
 800b25a:	461e      	mov	r6, r3
 800b25c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b260:	2a30      	cmp	r2, #48	@ 0x30
 800b262:	d0fa      	beq.n	800b25a <_dtoa_r+0xb22>
 800b264:	e4b5      	b.n	800abd2 <_dtoa_r+0x49a>
 800b266:	459a      	cmp	sl, r3
 800b268:	d1a8      	bne.n	800b1bc <_dtoa_r+0xa84>
 800b26a:	2331      	movs	r3, #49	@ 0x31
 800b26c:	f108 0801 	add.w	r8, r8, #1
 800b270:	f88a 3000 	strb.w	r3, [sl]
 800b274:	e4ad      	b.n	800abd2 <_dtoa_r+0x49a>
 800b276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b278:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b2d4 <_dtoa_r+0xb9c>
 800b27c:	b11b      	cbz	r3, 800b286 <_dtoa_r+0xb4e>
 800b27e:	f10a 0308 	add.w	r3, sl, #8
 800b282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	4650      	mov	r0, sl
 800b288:	b017      	add	sp, #92	@ 0x5c
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	2b01      	cmp	r3, #1
 800b292:	f77f ae2e 	ble.w	800aef2 <_dtoa_r+0x7ba>
 800b296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b298:	9308      	str	r3, [sp, #32]
 800b29a:	2001      	movs	r0, #1
 800b29c:	e64d      	b.n	800af3a <_dtoa_r+0x802>
 800b29e:	f1bb 0f00 	cmp.w	fp, #0
 800b2a2:	f77f aed9 	ble.w	800b058 <_dtoa_r+0x920>
 800b2a6:	4656      	mov	r6, sl
 800b2a8:	9802      	ldr	r0, [sp, #8]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	f7ff f9b9 	bl	800a622 <quorem>
 800b2b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b2b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b2b8:	eba6 020a 	sub.w	r2, r6, sl
 800b2bc:	4593      	cmp	fp, r2
 800b2be:	ddb4      	ble.n	800b22a <_dtoa_r+0xaf2>
 800b2c0:	9902      	ldr	r1, [sp, #8]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	220a      	movs	r2, #10
 800b2c6:	4648      	mov	r0, r9
 800b2c8:	f000 f968 	bl	800b59c <__multadd>
 800b2cc:	9002      	str	r0, [sp, #8]
 800b2ce:	e7eb      	b.n	800b2a8 <_dtoa_r+0xb70>
 800b2d0:	0800c82c 	.word	0x0800c82c
 800b2d4:	0800c7b0 	.word	0x0800c7b0

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d041      	beq.n	800b364 <_free_r+0x8c>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f000 f8e8 	bl	800b4c0 <__malloc_lock>
 800b2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b368 <_free_r+0x90>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x2c>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 b8e4 	b.w	800b4cc <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x1e>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x4c>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x42>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1850      	adds	r0, r2, r1
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x6c>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	4401      	add	r1, r0
 800b330:	1850      	adds	r0, r2, r1
 800b332:	4283      	cmp	r3, r0
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x22>
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	4408      	add	r0, r1
 800b340:	6010      	str	r0, [r2, #0]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x22>
 800b344:	d902      	bls.n	800b34c <_free_r+0x74>
 800b346:	230c      	movs	r3, #12
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x22>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1809      	addeq	r1, r1, r0
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7ca      	b.n	800b2fa <_free_r+0x22>
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	20003e98 	.word	0x20003e98

0800b36c <malloc>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	@ (800b378 <malloc+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f000 b825 	b.w	800b3c0 <_malloc_r>
 800b376:	bf00      	nop
 800b378:	20000030 	.word	0x20000030

0800b37c <sbrk_aligned>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	4e0f      	ldr	r6, [pc, #60]	@ (800b3bc <sbrk_aligned+0x40>)
 800b380:	460c      	mov	r4, r1
 800b382:	6831      	ldr	r1, [r6, #0]
 800b384:	4605      	mov	r5, r0
 800b386:	b911      	cbnz	r1, 800b38e <sbrk_aligned+0x12>
 800b388:	f000 fe3e 	bl	800c008 <_sbrk_r>
 800b38c:	6030      	str	r0, [r6, #0]
 800b38e:	4621      	mov	r1, r4
 800b390:	4628      	mov	r0, r5
 800b392:	f000 fe39 	bl	800c008 <_sbrk_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d103      	bne.n	800b3a2 <sbrk_aligned+0x26>
 800b39a:	f04f 34ff 	mov.w	r4, #4294967295
 800b39e:	4620      	mov	r0, r4
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	1cc4      	adds	r4, r0, #3
 800b3a4:	f024 0403 	bic.w	r4, r4, #3
 800b3a8:	42a0      	cmp	r0, r4
 800b3aa:	d0f8      	beq.n	800b39e <sbrk_aligned+0x22>
 800b3ac:	1a21      	subs	r1, r4, r0
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 fe2a 	bl	800c008 <_sbrk_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d1f2      	bne.n	800b39e <sbrk_aligned+0x22>
 800b3b8:	e7ef      	b.n	800b39a <sbrk_aligned+0x1e>
 800b3ba:	bf00      	nop
 800b3bc:	20003e94 	.word	0x20003e94

0800b3c0 <_malloc_r>:
 800b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c4:	1ccd      	adds	r5, r1, #3
 800b3c6:	f025 0503 	bic.w	r5, r5, #3
 800b3ca:	3508      	adds	r5, #8
 800b3cc:	2d0c      	cmp	r5, #12
 800b3ce:	bf38      	it	cc
 800b3d0:	250c      	movcc	r5, #12
 800b3d2:	2d00      	cmp	r5, #0
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	db01      	blt.n	800b3dc <_malloc_r+0x1c>
 800b3d8:	42a9      	cmp	r1, r5
 800b3da:	d904      	bls.n	800b3e6 <_malloc_r+0x26>
 800b3dc:	230c      	movs	r3, #12
 800b3de:	6033      	str	r3, [r6, #0]
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4bc <_malloc_r+0xfc>
 800b3ea:	f000 f869 	bl	800b4c0 <__malloc_lock>
 800b3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f2:	461c      	mov	r4, r3
 800b3f4:	bb44      	cbnz	r4, 800b448 <_malloc_r+0x88>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7ff ffbf 	bl	800b37c <sbrk_aligned>
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	4604      	mov	r4, r0
 800b402:	d158      	bne.n	800b4b6 <_malloc_r+0xf6>
 800b404:	f8d8 4000 	ldr.w	r4, [r8]
 800b408:	4627      	mov	r7, r4
 800b40a:	2f00      	cmp	r7, #0
 800b40c:	d143      	bne.n	800b496 <_malloc_r+0xd6>
 800b40e:	2c00      	cmp	r4, #0
 800b410:	d04b      	beq.n	800b4aa <_malloc_r+0xea>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	4639      	mov	r1, r7
 800b416:	4630      	mov	r0, r6
 800b418:	eb04 0903 	add.w	r9, r4, r3
 800b41c:	f000 fdf4 	bl	800c008 <_sbrk_r>
 800b420:	4581      	cmp	r9, r0
 800b422:	d142      	bne.n	800b4aa <_malloc_r+0xea>
 800b424:	6821      	ldr	r1, [r4, #0]
 800b426:	1a6d      	subs	r5, r5, r1
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f7ff ffa6 	bl	800b37c <sbrk_aligned>
 800b430:	3001      	adds	r0, #1
 800b432:	d03a      	beq.n	800b4aa <_malloc_r+0xea>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	442b      	add	r3, r5
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	f8d8 3000 	ldr.w	r3, [r8]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	bb62      	cbnz	r2, 800b49c <_malloc_r+0xdc>
 800b442:	f8c8 7000 	str.w	r7, [r8]
 800b446:	e00f      	b.n	800b468 <_malloc_r+0xa8>
 800b448:	6822      	ldr	r2, [r4, #0]
 800b44a:	1b52      	subs	r2, r2, r5
 800b44c:	d420      	bmi.n	800b490 <_malloc_r+0xd0>
 800b44e:	2a0b      	cmp	r2, #11
 800b450:	d917      	bls.n	800b482 <_malloc_r+0xc2>
 800b452:	1961      	adds	r1, r4, r5
 800b454:	42a3      	cmp	r3, r4
 800b456:	6025      	str	r5, [r4, #0]
 800b458:	bf18      	it	ne
 800b45a:	6059      	strne	r1, [r3, #4]
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	bf08      	it	eq
 800b460:	f8c8 1000 	streq.w	r1, [r8]
 800b464:	5162      	str	r2, [r4, r5]
 800b466:	604b      	str	r3, [r1, #4]
 800b468:	4630      	mov	r0, r6
 800b46a:	f000 f82f 	bl	800b4cc <__malloc_unlock>
 800b46e:	f104 000b 	add.w	r0, r4, #11
 800b472:	1d23      	adds	r3, r4, #4
 800b474:	f020 0007 	bic.w	r0, r0, #7
 800b478:	1ac2      	subs	r2, r0, r3
 800b47a:	bf1c      	itt	ne
 800b47c:	1a1b      	subne	r3, r3, r0
 800b47e:	50a3      	strne	r3, [r4, r2]
 800b480:	e7af      	b.n	800b3e2 <_malloc_r+0x22>
 800b482:	6862      	ldr	r2, [r4, #4]
 800b484:	42a3      	cmp	r3, r4
 800b486:	bf0c      	ite	eq
 800b488:	f8c8 2000 	streq.w	r2, [r8]
 800b48c:	605a      	strne	r2, [r3, #4]
 800b48e:	e7eb      	b.n	800b468 <_malloc_r+0xa8>
 800b490:	4623      	mov	r3, r4
 800b492:	6864      	ldr	r4, [r4, #4]
 800b494:	e7ae      	b.n	800b3f4 <_malloc_r+0x34>
 800b496:	463c      	mov	r4, r7
 800b498:	687f      	ldr	r7, [r7, #4]
 800b49a:	e7b6      	b.n	800b40a <_malloc_r+0x4a>
 800b49c:	461a      	mov	r2, r3
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	d1fb      	bne.n	800b49c <_malloc_r+0xdc>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6053      	str	r3, [r2, #4]
 800b4a8:	e7de      	b.n	800b468 <_malloc_r+0xa8>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	6033      	str	r3, [r6, #0]
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f000 f80c 	bl	800b4cc <__malloc_unlock>
 800b4b4:	e794      	b.n	800b3e0 <_malloc_r+0x20>
 800b4b6:	6005      	str	r5, [r0, #0]
 800b4b8:	e7d6      	b.n	800b468 <_malloc_r+0xa8>
 800b4ba:	bf00      	nop
 800b4bc:	20003e98 	.word	0x20003e98

0800b4c0 <__malloc_lock>:
 800b4c0:	4801      	ldr	r0, [pc, #4]	@ (800b4c8 <__malloc_lock+0x8>)
 800b4c2:	f7ff b89e 	b.w	800a602 <__retarget_lock_acquire_recursive>
 800b4c6:	bf00      	nop
 800b4c8:	20003e90 	.word	0x20003e90

0800b4cc <__malloc_unlock>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	@ (800b4d4 <__malloc_unlock+0x8>)
 800b4ce:	f7ff b899 	b.w	800a604 <__retarget_lock_release_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	20003e90 	.word	0x20003e90

0800b4d8 <_Balloc>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	69c6      	ldr	r6, [r0, #28]
 800b4dc:	4604      	mov	r4, r0
 800b4de:	460d      	mov	r5, r1
 800b4e0:	b976      	cbnz	r6, 800b500 <_Balloc+0x28>
 800b4e2:	2010      	movs	r0, #16
 800b4e4:	f7ff ff42 	bl	800b36c <malloc>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	61e0      	str	r0, [r4, #28]
 800b4ec:	b920      	cbnz	r0, 800b4f8 <_Balloc+0x20>
 800b4ee:	4b18      	ldr	r3, [pc, #96]	@ (800b550 <_Balloc+0x78>)
 800b4f0:	4818      	ldr	r0, [pc, #96]	@ (800b554 <_Balloc+0x7c>)
 800b4f2:	216b      	movs	r1, #107	@ 0x6b
 800b4f4:	f000 fd98 	bl	800c028 <__assert_func>
 800b4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4fc:	6006      	str	r6, [r0, #0]
 800b4fe:	60c6      	str	r6, [r0, #12]
 800b500:	69e6      	ldr	r6, [r4, #28]
 800b502:	68f3      	ldr	r3, [r6, #12]
 800b504:	b183      	cbz	r3, 800b528 <_Balloc+0x50>
 800b506:	69e3      	ldr	r3, [r4, #28]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b50e:	b9b8      	cbnz	r0, 800b540 <_Balloc+0x68>
 800b510:	2101      	movs	r1, #1
 800b512:	fa01 f605 	lsl.w	r6, r1, r5
 800b516:	1d72      	adds	r2, r6, #5
 800b518:	0092      	lsls	r2, r2, #2
 800b51a:	4620      	mov	r0, r4
 800b51c:	f000 fda2 	bl	800c064 <_calloc_r>
 800b520:	b160      	cbz	r0, 800b53c <_Balloc+0x64>
 800b522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b526:	e00e      	b.n	800b546 <_Balloc+0x6e>
 800b528:	2221      	movs	r2, #33	@ 0x21
 800b52a:	2104      	movs	r1, #4
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 fd99 	bl	800c064 <_calloc_r>
 800b532:	69e3      	ldr	r3, [r4, #28]
 800b534:	60f0      	str	r0, [r6, #12]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e4      	bne.n	800b506 <_Balloc+0x2e>
 800b53c:	2000      	movs	r0, #0
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	6802      	ldr	r2, [r0, #0]
 800b542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b546:	2300      	movs	r3, #0
 800b548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b54c:	e7f7      	b.n	800b53e <_Balloc+0x66>
 800b54e:	bf00      	nop
 800b550:	0800c7bd 	.word	0x0800c7bd
 800b554:	0800c83d 	.word	0x0800c83d

0800b558 <_Bfree>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	69c6      	ldr	r6, [r0, #28]
 800b55c:	4605      	mov	r5, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	b976      	cbnz	r6, 800b580 <_Bfree+0x28>
 800b562:	2010      	movs	r0, #16
 800b564:	f7ff ff02 	bl	800b36c <malloc>
 800b568:	4602      	mov	r2, r0
 800b56a:	61e8      	str	r0, [r5, #28]
 800b56c:	b920      	cbnz	r0, 800b578 <_Bfree+0x20>
 800b56e:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <_Bfree+0x3c>)
 800b570:	4809      	ldr	r0, [pc, #36]	@ (800b598 <_Bfree+0x40>)
 800b572:	218f      	movs	r1, #143	@ 0x8f
 800b574:	f000 fd58 	bl	800c028 <__assert_func>
 800b578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b57c:	6006      	str	r6, [r0, #0]
 800b57e:	60c6      	str	r6, [r0, #12]
 800b580:	b13c      	cbz	r4, 800b592 <_Bfree+0x3a>
 800b582:	69eb      	ldr	r3, [r5, #28]
 800b584:	6862      	ldr	r2, [r4, #4]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b58c:	6021      	str	r1, [r4, #0]
 800b58e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	0800c7bd 	.word	0x0800c7bd
 800b598:	0800c83d 	.word	0x0800c83d

0800b59c <__multadd>:
 800b59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a0:	690d      	ldr	r5, [r1, #16]
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	461e      	mov	r6, r3
 800b5a8:	f101 0c14 	add.w	ip, r1, #20
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b5b2:	b299      	uxth	r1, r3
 800b5b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b5b8:	0c1e      	lsrs	r6, r3, #16
 800b5ba:	0c0b      	lsrs	r3, r1, #16
 800b5bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b5c0:	b289      	uxth	r1, r1
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5c8:	4285      	cmp	r5, r0
 800b5ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b5ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5d2:	dcec      	bgt.n	800b5ae <__multadd+0x12>
 800b5d4:	b30e      	cbz	r6, 800b61a <__multadd+0x7e>
 800b5d6:	68a3      	ldr	r3, [r4, #8]
 800b5d8:	42ab      	cmp	r3, r5
 800b5da:	dc19      	bgt.n	800b610 <__multadd+0x74>
 800b5dc:	6861      	ldr	r1, [r4, #4]
 800b5de:	4638      	mov	r0, r7
 800b5e0:	3101      	adds	r1, #1
 800b5e2:	f7ff ff79 	bl	800b4d8 <_Balloc>
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	b928      	cbnz	r0, 800b5f6 <__multadd+0x5a>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b620 <__multadd+0x84>)
 800b5ee:	480d      	ldr	r0, [pc, #52]	@ (800b624 <__multadd+0x88>)
 800b5f0:	21ba      	movs	r1, #186	@ 0xba
 800b5f2:	f000 fd19 	bl	800c028 <__assert_func>
 800b5f6:	6922      	ldr	r2, [r4, #16]
 800b5f8:	3202      	adds	r2, #2
 800b5fa:	f104 010c 	add.w	r1, r4, #12
 800b5fe:	0092      	lsls	r2, r2, #2
 800b600:	300c      	adds	r0, #12
 800b602:	f7ff f800 	bl	800a606 <memcpy>
 800b606:	4621      	mov	r1, r4
 800b608:	4638      	mov	r0, r7
 800b60a:	f7ff ffa5 	bl	800b558 <_Bfree>
 800b60e:	4644      	mov	r4, r8
 800b610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b614:	3501      	adds	r5, #1
 800b616:	615e      	str	r6, [r3, #20]
 800b618:	6125      	str	r5, [r4, #16]
 800b61a:	4620      	mov	r0, r4
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	0800c82c 	.word	0x0800c82c
 800b624:	0800c83d 	.word	0x0800c83d

0800b628 <__hi0bits>:
 800b628:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b62c:	4603      	mov	r3, r0
 800b62e:	bf36      	itet	cc
 800b630:	0403      	lslcc	r3, r0, #16
 800b632:	2000      	movcs	r0, #0
 800b634:	2010      	movcc	r0, #16
 800b636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b63a:	bf3c      	itt	cc
 800b63c:	021b      	lslcc	r3, r3, #8
 800b63e:	3008      	addcc	r0, #8
 800b640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b644:	bf3c      	itt	cc
 800b646:	011b      	lslcc	r3, r3, #4
 800b648:	3004      	addcc	r0, #4
 800b64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b64e:	bf3c      	itt	cc
 800b650:	009b      	lslcc	r3, r3, #2
 800b652:	3002      	addcc	r0, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	db05      	blt.n	800b664 <__hi0bits+0x3c>
 800b658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b65c:	f100 0001 	add.w	r0, r0, #1
 800b660:	bf08      	it	eq
 800b662:	2020      	moveq	r0, #32
 800b664:	4770      	bx	lr

0800b666 <__lo0bits>:
 800b666:	6803      	ldr	r3, [r0, #0]
 800b668:	4602      	mov	r2, r0
 800b66a:	f013 0007 	ands.w	r0, r3, #7
 800b66e:	d00b      	beq.n	800b688 <__lo0bits+0x22>
 800b670:	07d9      	lsls	r1, r3, #31
 800b672:	d421      	bmi.n	800b6b8 <__lo0bits+0x52>
 800b674:	0798      	lsls	r0, r3, #30
 800b676:	bf49      	itett	mi
 800b678:	085b      	lsrmi	r3, r3, #1
 800b67a:	089b      	lsrpl	r3, r3, #2
 800b67c:	2001      	movmi	r0, #1
 800b67e:	6013      	strmi	r3, [r2, #0]
 800b680:	bf5c      	itt	pl
 800b682:	6013      	strpl	r3, [r2, #0]
 800b684:	2002      	movpl	r0, #2
 800b686:	4770      	bx	lr
 800b688:	b299      	uxth	r1, r3
 800b68a:	b909      	cbnz	r1, 800b690 <__lo0bits+0x2a>
 800b68c:	0c1b      	lsrs	r3, r3, #16
 800b68e:	2010      	movs	r0, #16
 800b690:	b2d9      	uxtb	r1, r3
 800b692:	b909      	cbnz	r1, 800b698 <__lo0bits+0x32>
 800b694:	3008      	adds	r0, #8
 800b696:	0a1b      	lsrs	r3, r3, #8
 800b698:	0719      	lsls	r1, r3, #28
 800b69a:	bf04      	itt	eq
 800b69c:	091b      	lsreq	r3, r3, #4
 800b69e:	3004      	addeq	r0, #4
 800b6a0:	0799      	lsls	r1, r3, #30
 800b6a2:	bf04      	itt	eq
 800b6a4:	089b      	lsreq	r3, r3, #2
 800b6a6:	3002      	addeq	r0, #2
 800b6a8:	07d9      	lsls	r1, r3, #31
 800b6aa:	d403      	bmi.n	800b6b4 <__lo0bits+0x4e>
 800b6ac:	085b      	lsrs	r3, r3, #1
 800b6ae:	f100 0001 	add.w	r0, r0, #1
 800b6b2:	d003      	beq.n	800b6bc <__lo0bits+0x56>
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	4770      	bx	lr
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	4770      	bx	lr
 800b6bc:	2020      	movs	r0, #32
 800b6be:	4770      	bx	lr

0800b6c0 <__i2b>:
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	f7ff ff07 	bl	800b4d8 <_Balloc>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	b928      	cbnz	r0, 800b6da <__i2b+0x1a>
 800b6ce:	4b05      	ldr	r3, [pc, #20]	@ (800b6e4 <__i2b+0x24>)
 800b6d0:	4805      	ldr	r0, [pc, #20]	@ (800b6e8 <__i2b+0x28>)
 800b6d2:	f240 1145 	movw	r1, #325	@ 0x145
 800b6d6:	f000 fca7 	bl	800c028 <__assert_func>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	6144      	str	r4, [r0, #20]
 800b6de:	6103      	str	r3, [r0, #16]
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	bf00      	nop
 800b6e4:	0800c82c 	.word	0x0800c82c
 800b6e8:	0800c83d 	.word	0x0800c83d

0800b6ec <__multiply>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4617      	mov	r7, r2
 800b6f2:	690a      	ldr	r2, [r1, #16]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	bfa8      	it	ge
 800b6fa:	463b      	movge	r3, r7
 800b6fc:	4689      	mov	r9, r1
 800b6fe:	bfa4      	itt	ge
 800b700:	460f      	movge	r7, r1
 800b702:	4699      	movge	r9, r3
 800b704:	693d      	ldr	r5, [r7, #16]
 800b706:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6879      	ldr	r1, [r7, #4]
 800b70e:	eb05 060a 	add.w	r6, r5, sl
 800b712:	42b3      	cmp	r3, r6
 800b714:	b085      	sub	sp, #20
 800b716:	bfb8      	it	lt
 800b718:	3101      	addlt	r1, #1
 800b71a:	f7ff fedd 	bl	800b4d8 <_Balloc>
 800b71e:	b930      	cbnz	r0, 800b72e <__multiply+0x42>
 800b720:	4602      	mov	r2, r0
 800b722:	4b41      	ldr	r3, [pc, #260]	@ (800b828 <__multiply+0x13c>)
 800b724:	4841      	ldr	r0, [pc, #260]	@ (800b82c <__multiply+0x140>)
 800b726:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b72a:	f000 fc7d 	bl	800c028 <__assert_func>
 800b72e:	f100 0414 	add.w	r4, r0, #20
 800b732:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b736:	4623      	mov	r3, r4
 800b738:	2200      	movs	r2, #0
 800b73a:	4573      	cmp	r3, lr
 800b73c:	d320      	bcc.n	800b780 <__multiply+0x94>
 800b73e:	f107 0814 	add.w	r8, r7, #20
 800b742:	f109 0114 	add.w	r1, r9, #20
 800b746:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b74a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b74e:	9302      	str	r3, [sp, #8]
 800b750:	1beb      	subs	r3, r5, r7
 800b752:	3b15      	subs	r3, #21
 800b754:	f023 0303 	bic.w	r3, r3, #3
 800b758:	3304      	adds	r3, #4
 800b75a:	3715      	adds	r7, #21
 800b75c:	42bd      	cmp	r5, r7
 800b75e:	bf38      	it	cc
 800b760:	2304      	movcc	r3, #4
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	9b02      	ldr	r3, [sp, #8]
 800b766:	9103      	str	r1, [sp, #12]
 800b768:	428b      	cmp	r3, r1
 800b76a:	d80c      	bhi.n	800b786 <__multiply+0x9a>
 800b76c:	2e00      	cmp	r6, #0
 800b76e:	dd03      	ble.n	800b778 <__multiply+0x8c>
 800b770:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b774:	2b00      	cmp	r3, #0
 800b776:	d055      	beq.n	800b824 <__multiply+0x138>
 800b778:	6106      	str	r6, [r0, #16]
 800b77a:	b005      	add	sp, #20
 800b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b780:	f843 2b04 	str.w	r2, [r3], #4
 800b784:	e7d9      	b.n	800b73a <__multiply+0x4e>
 800b786:	f8b1 a000 	ldrh.w	sl, [r1]
 800b78a:	f1ba 0f00 	cmp.w	sl, #0
 800b78e:	d01f      	beq.n	800b7d0 <__multiply+0xe4>
 800b790:	46c4      	mov	ip, r8
 800b792:	46a1      	mov	r9, r4
 800b794:	2700      	movs	r7, #0
 800b796:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b79a:	f8d9 3000 	ldr.w	r3, [r9]
 800b79e:	fa1f fb82 	uxth.w	fp, r2
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7a8:	443b      	add	r3, r7
 800b7aa:	f8d9 7000 	ldr.w	r7, [r9]
 800b7ae:	0c12      	lsrs	r2, r2, #16
 800b7b0:	0c3f      	lsrs	r7, r7, #16
 800b7b2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b7b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c0:	4565      	cmp	r5, ip
 800b7c2:	f849 3b04 	str.w	r3, [r9], #4
 800b7c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b7ca:	d8e4      	bhi.n	800b796 <__multiply+0xaa>
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	50e7      	str	r7, [r4, r3]
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7d6:	3104      	adds	r1, #4
 800b7d8:	f1b9 0f00 	cmp.w	r9, #0
 800b7dc:	d020      	beq.n	800b820 <__multiply+0x134>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	4647      	mov	r7, r8
 800b7e2:	46a4      	mov	ip, r4
 800b7e4:	f04f 0a00 	mov.w	sl, #0
 800b7e8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b7ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b7f4:	4452      	add	r2, sl
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7fc:	f84c 3b04 	str.w	r3, [ip], #4
 800b800:	f857 3b04 	ldr.w	r3, [r7], #4
 800b804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b808:	f8bc 3000 	ldrh.w	r3, [ip]
 800b80c:	fb09 330a 	mla	r3, r9, sl, r3
 800b810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b814:	42bd      	cmp	r5, r7
 800b816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b81a:	d8e5      	bhi.n	800b7e8 <__multiply+0xfc>
 800b81c:	9a01      	ldr	r2, [sp, #4]
 800b81e:	50a3      	str	r3, [r4, r2]
 800b820:	3404      	adds	r4, #4
 800b822:	e79f      	b.n	800b764 <__multiply+0x78>
 800b824:	3e01      	subs	r6, #1
 800b826:	e7a1      	b.n	800b76c <__multiply+0x80>
 800b828:	0800c82c 	.word	0x0800c82c
 800b82c:	0800c83d 	.word	0x0800c83d

0800b830 <__pow5mult>:
 800b830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b834:	4615      	mov	r5, r2
 800b836:	f012 0203 	ands.w	r2, r2, #3
 800b83a:	4607      	mov	r7, r0
 800b83c:	460e      	mov	r6, r1
 800b83e:	d007      	beq.n	800b850 <__pow5mult+0x20>
 800b840:	4c25      	ldr	r4, [pc, #148]	@ (800b8d8 <__pow5mult+0xa8>)
 800b842:	3a01      	subs	r2, #1
 800b844:	2300      	movs	r3, #0
 800b846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b84a:	f7ff fea7 	bl	800b59c <__multadd>
 800b84e:	4606      	mov	r6, r0
 800b850:	10ad      	asrs	r5, r5, #2
 800b852:	d03d      	beq.n	800b8d0 <__pow5mult+0xa0>
 800b854:	69fc      	ldr	r4, [r7, #28]
 800b856:	b97c      	cbnz	r4, 800b878 <__pow5mult+0x48>
 800b858:	2010      	movs	r0, #16
 800b85a:	f7ff fd87 	bl	800b36c <malloc>
 800b85e:	4602      	mov	r2, r0
 800b860:	61f8      	str	r0, [r7, #28]
 800b862:	b928      	cbnz	r0, 800b870 <__pow5mult+0x40>
 800b864:	4b1d      	ldr	r3, [pc, #116]	@ (800b8dc <__pow5mult+0xac>)
 800b866:	481e      	ldr	r0, [pc, #120]	@ (800b8e0 <__pow5mult+0xb0>)
 800b868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b86c:	f000 fbdc 	bl	800c028 <__assert_func>
 800b870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b874:	6004      	str	r4, [r0, #0]
 800b876:	60c4      	str	r4, [r0, #12]
 800b878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b87c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b880:	b94c      	cbnz	r4, 800b896 <__pow5mult+0x66>
 800b882:	f240 2171 	movw	r1, #625	@ 0x271
 800b886:	4638      	mov	r0, r7
 800b888:	f7ff ff1a 	bl	800b6c0 <__i2b>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b892:	4604      	mov	r4, r0
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	f04f 0900 	mov.w	r9, #0
 800b89a:	07eb      	lsls	r3, r5, #31
 800b89c:	d50a      	bpl.n	800b8b4 <__pow5mult+0x84>
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f7ff ff22 	bl	800b6ec <__multiply>
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff fe53 	bl	800b558 <_Bfree>
 800b8b2:	4646      	mov	r6, r8
 800b8b4:	106d      	asrs	r5, r5, #1
 800b8b6:	d00b      	beq.n	800b8d0 <__pow5mult+0xa0>
 800b8b8:	6820      	ldr	r0, [r4, #0]
 800b8ba:	b938      	cbnz	r0, 800b8cc <__pow5mult+0x9c>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7ff ff13 	bl	800b6ec <__multiply>
 800b8c6:	6020      	str	r0, [r4, #0]
 800b8c8:	f8c0 9000 	str.w	r9, [r0]
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	e7e4      	b.n	800b89a <__pow5mult+0x6a>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800c8f0 	.word	0x0800c8f0
 800b8dc:	0800c7bd 	.word	0x0800c7bd
 800b8e0:	0800c83d 	.word	0x0800c83d

0800b8e4 <__lshift>:
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	6849      	ldr	r1, [r1, #4]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	4691      	mov	r9, r2
 800b8f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8fc:	f108 0601 	add.w	r6, r8, #1
 800b900:	42b3      	cmp	r3, r6
 800b902:	db0b      	blt.n	800b91c <__lshift+0x38>
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff fde7 	bl	800b4d8 <_Balloc>
 800b90a:	4605      	mov	r5, r0
 800b90c:	b948      	cbnz	r0, 800b922 <__lshift+0x3e>
 800b90e:	4602      	mov	r2, r0
 800b910:	4b28      	ldr	r3, [pc, #160]	@ (800b9b4 <__lshift+0xd0>)
 800b912:	4829      	ldr	r0, [pc, #164]	@ (800b9b8 <__lshift+0xd4>)
 800b914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b918:	f000 fb86 	bl	800c028 <__assert_func>
 800b91c:	3101      	adds	r1, #1
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	e7ee      	b.n	800b900 <__lshift+0x1c>
 800b922:	2300      	movs	r3, #0
 800b924:	f100 0114 	add.w	r1, r0, #20
 800b928:	f100 0210 	add.w	r2, r0, #16
 800b92c:	4618      	mov	r0, r3
 800b92e:	4553      	cmp	r3, sl
 800b930:	db33      	blt.n	800b99a <__lshift+0xb6>
 800b932:	6920      	ldr	r0, [r4, #16]
 800b934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b938:	f104 0314 	add.w	r3, r4, #20
 800b93c:	f019 091f 	ands.w	r9, r9, #31
 800b940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b948:	d02b      	beq.n	800b9a2 <__lshift+0xbe>
 800b94a:	f1c9 0e20 	rsb	lr, r9, #32
 800b94e:	468a      	mov	sl, r1
 800b950:	2200      	movs	r2, #0
 800b952:	6818      	ldr	r0, [r3, #0]
 800b954:	fa00 f009 	lsl.w	r0, r0, r9
 800b958:	4310      	orrs	r0, r2
 800b95a:	f84a 0b04 	str.w	r0, [sl], #4
 800b95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b962:	459c      	cmp	ip, r3
 800b964:	fa22 f20e 	lsr.w	r2, r2, lr
 800b968:	d8f3      	bhi.n	800b952 <__lshift+0x6e>
 800b96a:	ebac 0304 	sub.w	r3, ip, r4
 800b96e:	3b15      	subs	r3, #21
 800b970:	f023 0303 	bic.w	r3, r3, #3
 800b974:	3304      	adds	r3, #4
 800b976:	f104 0015 	add.w	r0, r4, #21
 800b97a:	4560      	cmp	r0, ip
 800b97c:	bf88      	it	hi
 800b97e:	2304      	movhi	r3, #4
 800b980:	50ca      	str	r2, [r1, r3]
 800b982:	b10a      	cbz	r2, 800b988 <__lshift+0xa4>
 800b984:	f108 0602 	add.w	r6, r8, #2
 800b988:	3e01      	subs	r6, #1
 800b98a:	4638      	mov	r0, r7
 800b98c:	612e      	str	r6, [r5, #16]
 800b98e:	4621      	mov	r1, r4
 800b990:	f7ff fde2 	bl	800b558 <_Bfree>
 800b994:	4628      	mov	r0, r5
 800b996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b99e:	3301      	adds	r3, #1
 800b9a0:	e7c5      	b.n	800b92e <__lshift+0x4a>
 800b9a2:	3904      	subs	r1, #4
 800b9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9ac:	459c      	cmp	ip, r3
 800b9ae:	d8f9      	bhi.n	800b9a4 <__lshift+0xc0>
 800b9b0:	e7ea      	b.n	800b988 <__lshift+0xa4>
 800b9b2:	bf00      	nop
 800b9b4:	0800c82c 	.word	0x0800c82c
 800b9b8:	0800c83d 	.word	0x0800c83d

0800b9bc <__mcmp>:
 800b9bc:	690a      	ldr	r2, [r1, #16]
 800b9be:	4603      	mov	r3, r0
 800b9c0:	6900      	ldr	r0, [r0, #16]
 800b9c2:	1a80      	subs	r0, r0, r2
 800b9c4:	b530      	push	{r4, r5, lr}
 800b9c6:	d10e      	bne.n	800b9e6 <__mcmp+0x2a>
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	3114      	adds	r1, #20
 800b9cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9dc:	4295      	cmp	r5, r2
 800b9de:	d003      	beq.n	800b9e8 <__mcmp+0x2c>
 800b9e0:	d205      	bcs.n	800b9ee <__mcmp+0x32>
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	bd30      	pop	{r4, r5, pc}
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d3f3      	bcc.n	800b9d4 <__mcmp+0x18>
 800b9ec:	e7fb      	b.n	800b9e6 <__mcmp+0x2a>
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e7f9      	b.n	800b9e6 <__mcmp+0x2a>
	...

0800b9f4 <__mdiff>:
 800b9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	4689      	mov	r9, r1
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4648      	mov	r0, r9
 800ba00:	4614      	mov	r4, r2
 800ba02:	f7ff ffdb 	bl	800b9bc <__mcmp>
 800ba06:	1e05      	subs	r5, r0, #0
 800ba08:	d112      	bne.n	800ba30 <__mdiff+0x3c>
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff fd63 	bl	800b4d8 <_Balloc>
 800ba12:	4602      	mov	r2, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__mdiff+0x2e>
 800ba16:	4b3f      	ldr	r3, [pc, #252]	@ (800bb14 <__mdiff+0x120>)
 800ba18:	f240 2137 	movw	r1, #567	@ 0x237
 800ba1c:	483e      	ldr	r0, [pc, #248]	@ (800bb18 <__mdiff+0x124>)
 800ba1e:	f000 fb03 	bl	800c028 <__assert_func>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba28:	4610      	mov	r0, r2
 800ba2a:	b003      	add	sp, #12
 800ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba30:	bfbc      	itt	lt
 800ba32:	464b      	movlt	r3, r9
 800ba34:	46a1      	movlt	r9, r4
 800ba36:	4630      	mov	r0, r6
 800ba38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba3c:	bfba      	itte	lt
 800ba3e:	461c      	movlt	r4, r3
 800ba40:	2501      	movlt	r5, #1
 800ba42:	2500      	movge	r5, #0
 800ba44:	f7ff fd48 	bl	800b4d8 <_Balloc>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	b918      	cbnz	r0, 800ba54 <__mdiff+0x60>
 800ba4c:	4b31      	ldr	r3, [pc, #196]	@ (800bb14 <__mdiff+0x120>)
 800ba4e:	f240 2145 	movw	r1, #581	@ 0x245
 800ba52:	e7e3      	b.n	800ba1c <__mdiff+0x28>
 800ba54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba58:	6926      	ldr	r6, [r4, #16]
 800ba5a:	60c5      	str	r5, [r0, #12]
 800ba5c:	f109 0310 	add.w	r3, r9, #16
 800ba60:	f109 0514 	add.w	r5, r9, #20
 800ba64:	f104 0e14 	add.w	lr, r4, #20
 800ba68:	f100 0b14 	add.w	fp, r0, #20
 800ba6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	46d9      	mov	r9, fp
 800ba78:	f04f 0c00 	mov.w	ip, #0
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	fa1f f38a 	uxth.w	r3, sl
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	b283      	uxth	r3, r0
 800ba90:	1acb      	subs	r3, r1, r3
 800ba92:	0c00      	lsrs	r0, r0, #16
 800ba94:	4463      	add	r3, ip
 800ba96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800baa4:	4576      	cmp	r6, lr
 800baa6:	f849 3b04 	str.w	r3, [r9], #4
 800baaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baae:	d8e5      	bhi.n	800ba7c <__mdiff+0x88>
 800bab0:	1b33      	subs	r3, r6, r4
 800bab2:	3b15      	subs	r3, #21
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	3415      	adds	r4, #21
 800baba:	3304      	adds	r3, #4
 800babc:	42a6      	cmp	r6, r4
 800babe:	bf38      	it	cc
 800bac0:	2304      	movcc	r3, #4
 800bac2:	441d      	add	r5, r3
 800bac4:	445b      	add	r3, fp
 800bac6:	461e      	mov	r6, r3
 800bac8:	462c      	mov	r4, r5
 800baca:	4544      	cmp	r4, r8
 800bacc:	d30e      	bcc.n	800baec <__mdiff+0xf8>
 800bace:	f108 0103 	add.w	r1, r8, #3
 800bad2:	1b49      	subs	r1, r1, r5
 800bad4:	f021 0103 	bic.w	r1, r1, #3
 800bad8:	3d03      	subs	r5, #3
 800bada:	45a8      	cmp	r8, r5
 800badc:	bf38      	it	cc
 800bade:	2100      	movcc	r1, #0
 800bae0:	440b      	add	r3, r1
 800bae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bae6:	b191      	cbz	r1, 800bb0e <__mdiff+0x11a>
 800bae8:	6117      	str	r7, [r2, #16]
 800baea:	e79d      	b.n	800ba28 <__mdiff+0x34>
 800baec:	f854 1b04 	ldr.w	r1, [r4], #4
 800baf0:	46e6      	mov	lr, ip
 800baf2:	0c08      	lsrs	r0, r1, #16
 800baf4:	fa1c fc81 	uxtah	ip, ip, r1
 800baf8:	4471      	add	r1, lr
 800bafa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bafe:	b289      	uxth	r1, r1
 800bb00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb04:	f846 1b04 	str.w	r1, [r6], #4
 800bb08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb0c:	e7dd      	b.n	800baca <__mdiff+0xd6>
 800bb0e:	3f01      	subs	r7, #1
 800bb10:	e7e7      	b.n	800bae2 <__mdiff+0xee>
 800bb12:	bf00      	nop
 800bb14:	0800c82c 	.word	0x0800c82c
 800bb18:	0800c83d 	.word	0x0800c83d

0800bb1c <__d2b>:
 800bb1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb20:	460f      	mov	r7, r1
 800bb22:	2101      	movs	r1, #1
 800bb24:	ec59 8b10 	vmov	r8, r9, d0
 800bb28:	4616      	mov	r6, r2
 800bb2a:	f7ff fcd5 	bl	800b4d8 <_Balloc>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	b930      	cbnz	r0, 800bb40 <__d2b+0x24>
 800bb32:	4602      	mov	r2, r0
 800bb34:	4b23      	ldr	r3, [pc, #140]	@ (800bbc4 <__d2b+0xa8>)
 800bb36:	4824      	ldr	r0, [pc, #144]	@ (800bbc8 <__d2b+0xac>)
 800bb38:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb3c:	f000 fa74 	bl	800c028 <__assert_func>
 800bb40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb48:	b10d      	cbz	r5, 800bb4e <__d2b+0x32>
 800bb4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	f1b8 0300 	subs.w	r3, r8, #0
 800bb54:	d023      	beq.n	800bb9e <__d2b+0x82>
 800bb56:	4668      	mov	r0, sp
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	f7ff fd84 	bl	800b666 <__lo0bits>
 800bb5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb62:	b1d0      	cbz	r0, 800bb9a <__d2b+0x7e>
 800bb64:	f1c0 0320 	rsb	r3, r0, #32
 800bb68:	fa02 f303 	lsl.w	r3, r2, r3
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	40c2      	lsrs	r2, r0
 800bb70:	6163      	str	r3, [r4, #20]
 800bb72:	9201      	str	r2, [sp, #4]
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	61a3      	str	r3, [r4, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bf0c      	ite	eq
 800bb7c:	2201      	moveq	r2, #1
 800bb7e:	2202      	movne	r2, #2
 800bb80:	6122      	str	r2, [r4, #16]
 800bb82:	b1a5      	cbz	r5, 800bbae <__d2b+0x92>
 800bb84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb88:	4405      	add	r5, r0
 800bb8a:	603d      	str	r5, [r7, #0]
 800bb8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb90:	6030      	str	r0, [r6, #0]
 800bb92:	4620      	mov	r0, r4
 800bb94:	b003      	add	sp, #12
 800bb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	6161      	str	r1, [r4, #20]
 800bb9c:	e7ea      	b.n	800bb74 <__d2b+0x58>
 800bb9e:	a801      	add	r0, sp, #4
 800bba0:	f7ff fd61 	bl	800b666 <__lo0bits>
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	6163      	str	r3, [r4, #20]
 800bba8:	3020      	adds	r0, #32
 800bbaa:	2201      	movs	r2, #1
 800bbac:	e7e8      	b.n	800bb80 <__d2b+0x64>
 800bbae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbb6:	6038      	str	r0, [r7, #0]
 800bbb8:	6918      	ldr	r0, [r3, #16]
 800bbba:	f7ff fd35 	bl	800b628 <__hi0bits>
 800bbbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbc2:	e7e5      	b.n	800bb90 <__d2b+0x74>
 800bbc4:	0800c82c 	.word	0x0800c82c
 800bbc8:	0800c83d 	.word	0x0800c83d

0800bbcc <__ssputs_r>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	688e      	ldr	r6, [r1, #8]
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	42be      	cmp	r6, r7
 800bbd6:	680b      	ldr	r3, [r1, #0]
 800bbd8:	4682      	mov	sl, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4690      	mov	r8, r2
 800bbde:	d82d      	bhi.n	800bc3c <__ssputs_r+0x70>
 800bbe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbe8:	d026      	beq.n	800bc38 <__ssputs_r+0x6c>
 800bbea:	6965      	ldr	r5, [r4, #20]
 800bbec:	6909      	ldr	r1, [r1, #16]
 800bbee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf2:	eba3 0901 	sub.w	r9, r3, r1
 800bbf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbfa:	1c7b      	adds	r3, r7, #1
 800bbfc:	444b      	add	r3, r9
 800bbfe:	106d      	asrs	r5, r5, #1
 800bc00:	429d      	cmp	r5, r3
 800bc02:	bf38      	it	cc
 800bc04:	461d      	movcc	r5, r3
 800bc06:	0553      	lsls	r3, r2, #21
 800bc08:	d527      	bpl.n	800bc5a <__ssputs_r+0x8e>
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	f7ff fbd8 	bl	800b3c0 <_malloc_r>
 800bc10:	4606      	mov	r6, r0
 800bc12:	b360      	cbz	r0, 800bc6e <__ssputs_r+0xa2>
 800bc14:	6921      	ldr	r1, [r4, #16]
 800bc16:	464a      	mov	r2, r9
 800bc18:	f7fe fcf5 	bl	800a606 <memcpy>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	6126      	str	r6, [r4, #16]
 800bc2a:	6165      	str	r5, [r4, #20]
 800bc2c:	444e      	add	r6, r9
 800bc2e:	eba5 0509 	sub.w	r5, r5, r9
 800bc32:	6026      	str	r6, [r4, #0]
 800bc34:	60a5      	str	r5, [r4, #8]
 800bc36:	463e      	mov	r6, r7
 800bc38:	42be      	cmp	r6, r7
 800bc3a:	d900      	bls.n	800bc3e <__ssputs_r+0x72>
 800bc3c:	463e      	mov	r6, r7
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	4632      	mov	r2, r6
 800bc42:	4641      	mov	r1, r8
 800bc44:	f000 f9c6 	bl	800bfd4 <memmove>
 800bc48:	68a3      	ldr	r3, [r4, #8]
 800bc4a:	1b9b      	subs	r3, r3, r6
 800bc4c:	60a3      	str	r3, [r4, #8]
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	4433      	add	r3, r6
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	2000      	movs	r0, #0
 800bc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	f000 fa28 	bl	800c0b0 <_realloc_r>
 800bc60:	4606      	mov	r6, r0
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d1e0      	bne.n	800bc28 <__ssputs_r+0x5c>
 800bc66:	6921      	ldr	r1, [r4, #16]
 800bc68:	4650      	mov	r0, sl
 800bc6a:	f7ff fb35 	bl	800b2d8 <_free_r>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	f8ca 3000 	str.w	r3, [sl]
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e7e9      	b.n	800bc56 <__ssputs_r+0x8a>
	...

0800bc84 <_svfiprintf_r>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	4698      	mov	r8, r3
 800bc8a:	898b      	ldrh	r3, [r1, #12]
 800bc8c:	061b      	lsls	r3, r3, #24
 800bc8e:	b09d      	sub	sp, #116	@ 0x74
 800bc90:	4607      	mov	r7, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	4614      	mov	r4, r2
 800bc96:	d510      	bpl.n	800bcba <_svfiprintf_r+0x36>
 800bc98:	690b      	ldr	r3, [r1, #16]
 800bc9a:	b973      	cbnz	r3, 800bcba <_svfiprintf_r+0x36>
 800bc9c:	2140      	movs	r1, #64	@ 0x40
 800bc9e:	f7ff fb8f 	bl	800b3c0 <_malloc_r>
 800bca2:	6028      	str	r0, [r5, #0]
 800bca4:	6128      	str	r0, [r5, #16]
 800bca6:	b930      	cbnz	r0, 800bcb6 <_svfiprintf_r+0x32>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	b01d      	add	sp, #116	@ 0x74
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	2340      	movs	r3, #64	@ 0x40
 800bcb8:	616b      	str	r3, [r5, #20]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcbe:	2320      	movs	r3, #32
 800bcc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcc8:	2330      	movs	r3, #48	@ 0x30
 800bcca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be68 <_svfiprintf_r+0x1e4>
 800bcce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcd2:	f04f 0901 	mov.w	r9, #1
 800bcd6:	4623      	mov	r3, r4
 800bcd8:	469a      	mov	sl, r3
 800bcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcde:	b10a      	cbz	r2, 800bce4 <_svfiprintf_r+0x60>
 800bce0:	2a25      	cmp	r2, #37	@ 0x25
 800bce2:	d1f9      	bne.n	800bcd8 <_svfiprintf_r+0x54>
 800bce4:	ebba 0b04 	subs.w	fp, sl, r4
 800bce8:	d00b      	beq.n	800bd02 <_svfiprintf_r+0x7e>
 800bcea:	465b      	mov	r3, fp
 800bcec:	4622      	mov	r2, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff ff6b 	bl	800bbcc <__ssputs_r>
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	f000 80a7 	beq.w	800be4a <_svfiprintf_r+0x1c6>
 800bcfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcfe:	445a      	add	r2, fp
 800bd00:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd02:	f89a 3000 	ldrb.w	r3, [sl]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 809f 	beq.w	800be4a <_svfiprintf_r+0x1c6>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd16:	f10a 0a01 	add.w	sl, sl, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	9307      	str	r3, [sp, #28]
 800bd1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd22:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd24:	4654      	mov	r4, sl
 800bd26:	2205      	movs	r2, #5
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	484e      	ldr	r0, [pc, #312]	@ (800be68 <_svfiprintf_r+0x1e4>)
 800bd2e:	f7f4 fa77 	bl	8000220 <memchr>
 800bd32:	9a04      	ldr	r2, [sp, #16]
 800bd34:	b9d8      	cbnz	r0, 800bd6e <_svfiprintf_r+0xea>
 800bd36:	06d0      	lsls	r0, r2, #27
 800bd38:	bf44      	itt	mi
 800bd3a:	2320      	movmi	r3, #32
 800bd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd40:	0711      	lsls	r1, r2, #28
 800bd42:	bf44      	itt	mi
 800bd44:	232b      	movmi	r3, #43	@ 0x2b
 800bd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd50:	d015      	beq.n	800bd7e <_svfiprintf_r+0xfa>
 800bd52:	9a07      	ldr	r2, [sp, #28]
 800bd54:	4654      	mov	r4, sl
 800bd56:	2000      	movs	r0, #0
 800bd58:	f04f 0c0a 	mov.w	ip, #10
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd62:	3b30      	subs	r3, #48	@ 0x30
 800bd64:	2b09      	cmp	r3, #9
 800bd66:	d94b      	bls.n	800be00 <_svfiprintf_r+0x17c>
 800bd68:	b1b0      	cbz	r0, 800bd98 <_svfiprintf_r+0x114>
 800bd6a:	9207      	str	r2, [sp, #28]
 800bd6c:	e014      	b.n	800bd98 <_svfiprintf_r+0x114>
 800bd6e:	eba0 0308 	sub.w	r3, r0, r8
 800bd72:	fa09 f303 	lsl.w	r3, r9, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	9304      	str	r3, [sp, #16]
 800bd7a:	46a2      	mov	sl, r4
 800bd7c:	e7d2      	b.n	800bd24 <_svfiprintf_r+0xa0>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	1d19      	adds	r1, r3, #4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	9103      	str	r1, [sp, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bfbb      	ittet	lt
 800bd8a:	425b      	neglt	r3, r3
 800bd8c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd90:	9307      	strge	r3, [sp, #28]
 800bd92:	9307      	strlt	r3, [sp, #28]
 800bd94:	bfb8      	it	lt
 800bd96:	9204      	strlt	r2, [sp, #16]
 800bd98:	7823      	ldrb	r3, [r4, #0]
 800bd9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd9c:	d10a      	bne.n	800bdb4 <_svfiprintf_r+0x130>
 800bd9e:	7863      	ldrb	r3, [r4, #1]
 800bda0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bda2:	d132      	bne.n	800be0a <_svfiprintf_r+0x186>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	1d1a      	adds	r2, r3, #4
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	9203      	str	r2, [sp, #12]
 800bdac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdb0:	3402      	adds	r4, #2
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be78 <_svfiprintf_r+0x1f4>
 800bdb8:	7821      	ldrb	r1, [r4, #0]
 800bdba:	2203      	movs	r2, #3
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	f7f4 fa2f 	bl	8000220 <memchr>
 800bdc2:	b138      	cbz	r0, 800bdd4 <_svfiprintf_r+0x150>
 800bdc4:	9b04      	ldr	r3, [sp, #16]
 800bdc6:	eba0 000a 	sub.w	r0, r0, sl
 800bdca:	2240      	movs	r2, #64	@ 0x40
 800bdcc:	4082      	lsls	r2, r0
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	3401      	adds	r4, #1
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd8:	4824      	ldr	r0, [pc, #144]	@ (800be6c <_svfiprintf_r+0x1e8>)
 800bdda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdde:	2206      	movs	r2, #6
 800bde0:	f7f4 fa1e 	bl	8000220 <memchr>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d036      	beq.n	800be56 <_svfiprintf_r+0x1d2>
 800bde8:	4b21      	ldr	r3, [pc, #132]	@ (800be70 <_svfiprintf_r+0x1ec>)
 800bdea:	bb1b      	cbnz	r3, 800be34 <_svfiprintf_r+0x1b0>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	3307      	adds	r3, #7
 800bdf0:	f023 0307 	bic.w	r3, r3, #7
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdfa:	4433      	add	r3, r6
 800bdfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdfe:	e76a      	b.n	800bcd6 <_svfiprintf_r+0x52>
 800be00:	fb0c 3202 	mla	r2, ip, r2, r3
 800be04:	460c      	mov	r4, r1
 800be06:	2001      	movs	r0, #1
 800be08:	e7a8      	b.n	800bd5c <_svfiprintf_r+0xd8>
 800be0a:	2300      	movs	r3, #0
 800be0c:	3401      	adds	r4, #1
 800be0e:	9305      	str	r3, [sp, #20]
 800be10:	4619      	mov	r1, r3
 800be12:	f04f 0c0a 	mov.w	ip, #10
 800be16:	4620      	mov	r0, r4
 800be18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be1c:	3a30      	subs	r2, #48	@ 0x30
 800be1e:	2a09      	cmp	r2, #9
 800be20:	d903      	bls.n	800be2a <_svfiprintf_r+0x1a6>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0c6      	beq.n	800bdb4 <_svfiprintf_r+0x130>
 800be26:	9105      	str	r1, [sp, #20]
 800be28:	e7c4      	b.n	800bdb4 <_svfiprintf_r+0x130>
 800be2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be2e:	4604      	mov	r4, r0
 800be30:	2301      	movs	r3, #1
 800be32:	e7f0      	b.n	800be16 <_svfiprintf_r+0x192>
 800be34:	ab03      	add	r3, sp, #12
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	462a      	mov	r2, r5
 800be3a:	4b0e      	ldr	r3, [pc, #56]	@ (800be74 <_svfiprintf_r+0x1f0>)
 800be3c:	a904      	add	r1, sp, #16
 800be3e:	4638      	mov	r0, r7
 800be40:	f7fd fe12 	bl	8009a68 <_printf_float>
 800be44:	1c42      	adds	r2, r0, #1
 800be46:	4606      	mov	r6, r0
 800be48:	d1d6      	bne.n	800bdf8 <_svfiprintf_r+0x174>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	065b      	lsls	r3, r3, #25
 800be4e:	f53f af2d 	bmi.w	800bcac <_svfiprintf_r+0x28>
 800be52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be54:	e72c      	b.n	800bcb0 <_svfiprintf_r+0x2c>
 800be56:	ab03      	add	r3, sp, #12
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	462a      	mov	r2, r5
 800be5c:	4b05      	ldr	r3, [pc, #20]	@ (800be74 <_svfiprintf_r+0x1f0>)
 800be5e:	a904      	add	r1, sp, #16
 800be60:	4638      	mov	r0, r7
 800be62:	f7fe f899 	bl	8009f98 <_printf_i>
 800be66:	e7ed      	b.n	800be44 <_svfiprintf_r+0x1c0>
 800be68:	0800c896 	.word	0x0800c896
 800be6c:	0800c8a0 	.word	0x0800c8a0
 800be70:	08009a69 	.word	0x08009a69
 800be74:	0800bbcd 	.word	0x0800bbcd
 800be78:	0800c89c 	.word	0x0800c89c

0800be7c <__sflush_r>:
 800be7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	0716      	lsls	r6, r2, #28
 800be86:	4605      	mov	r5, r0
 800be88:	460c      	mov	r4, r1
 800be8a:	d454      	bmi.n	800bf36 <__sflush_r+0xba>
 800be8c:	684b      	ldr	r3, [r1, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dc02      	bgt.n	800be98 <__sflush_r+0x1c>
 800be92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd48      	ble.n	800bf2a <__sflush_r+0xae>
 800be98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	d045      	beq.n	800bf2a <__sflush_r+0xae>
 800be9e:	2300      	movs	r3, #0
 800bea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bea4:	682f      	ldr	r7, [r5, #0]
 800bea6:	6a21      	ldr	r1, [r4, #32]
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	d030      	beq.n	800bf0e <__sflush_r+0x92>
 800beac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	0759      	lsls	r1, r3, #29
 800beb2:	d505      	bpl.n	800bec0 <__sflush_r+0x44>
 800beb4:	6863      	ldr	r3, [r4, #4]
 800beb6:	1ad2      	subs	r2, r2, r3
 800beb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800beba:	b10b      	cbz	r3, 800bec0 <__sflush_r+0x44>
 800bebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bebe:	1ad2      	subs	r2, r2, r3
 800bec0:	2300      	movs	r3, #0
 800bec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bec4:	6a21      	ldr	r1, [r4, #32]
 800bec6:	4628      	mov	r0, r5
 800bec8:	47b0      	blx	r6
 800beca:	1c43      	adds	r3, r0, #1
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	d106      	bne.n	800bede <__sflush_r+0x62>
 800bed0:	6829      	ldr	r1, [r5, #0]
 800bed2:	291d      	cmp	r1, #29
 800bed4:	d82b      	bhi.n	800bf2e <__sflush_r+0xb2>
 800bed6:	4a2a      	ldr	r2, [pc, #168]	@ (800bf80 <__sflush_r+0x104>)
 800bed8:	40ca      	lsrs	r2, r1
 800beda:	07d6      	lsls	r6, r2, #31
 800bedc:	d527      	bpl.n	800bf2e <__sflush_r+0xb2>
 800bede:	2200      	movs	r2, #0
 800bee0:	6062      	str	r2, [r4, #4]
 800bee2:	04d9      	lsls	r1, r3, #19
 800bee4:	6922      	ldr	r2, [r4, #16]
 800bee6:	6022      	str	r2, [r4, #0]
 800bee8:	d504      	bpl.n	800bef4 <__sflush_r+0x78>
 800beea:	1c42      	adds	r2, r0, #1
 800beec:	d101      	bne.n	800bef2 <__sflush_r+0x76>
 800beee:	682b      	ldr	r3, [r5, #0]
 800bef0:	b903      	cbnz	r3, 800bef4 <__sflush_r+0x78>
 800bef2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bef6:	602f      	str	r7, [r5, #0]
 800bef8:	b1b9      	cbz	r1, 800bf2a <__sflush_r+0xae>
 800befa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800befe:	4299      	cmp	r1, r3
 800bf00:	d002      	beq.n	800bf08 <__sflush_r+0x8c>
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7ff f9e8 	bl	800b2d8 <_free_r>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf0c:	e00d      	b.n	800bf2a <__sflush_r+0xae>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b0      	blx	r6
 800bf14:	4602      	mov	r2, r0
 800bf16:	1c50      	adds	r0, r2, #1
 800bf18:	d1c9      	bne.n	800beae <__sflush_r+0x32>
 800bf1a:	682b      	ldr	r3, [r5, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0c6      	beq.n	800beae <__sflush_r+0x32>
 800bf20:	2b1d      	cmp	r3, #29
 800bf22:	d001      	beq.n	800bf28 <__sflush_r+0xac>
 800bf24:	2b16      	cmp	r3, #22
 800bf26:	d11e      	bne.n	800bf66 <__sflush_r+0xea>
 800bf28:	602f      	str	r7, [r5, #0]
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	e022      	b.n	800bf74 <__sflush_r+0xf8>
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf32:	b21b      	sxth	r3, r3
 800bf34:	e01b      	b.n	800bf6e <__sflush_r+0xf2>
 800bf36:	690f      	ldr	r7, [r1, #16]
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	d0f6      	beq.n	800bf2a <__sflush_r+0xae>
 800bf3c:	0793      	lsls	r3, r2, #30
 800bf3e:	680e      	ldr	r6, [r1, #0]
 800bf40:	bf08      	it	eq
 800bf42:	694b      	ldreq	r3, [r1, #20]
 800bf44:	600f      	str	r7, [r1, #0]
 800bf46:	bf18      	it	ne
 800bf48:	2300      	movne	r3, #0
 800bf4a:	eba6 0807 	sub.w	r8, r6, r7
 800bf4e:	608b      	str	r3, [r1, #8]
 800bf50:	f1b8 0f00 	cmp.w	r8, #0
 800bf54:	dde9      	ble.n	800bf2a <__sflush_r+0xae>
 800bf56:	6a21      	ldr	r1, [r4, #32]
 800bf58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf5a:	4643      	mov	r3, r8
 800bf5c:	463a      	mov	r2, r7
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b0      	blx	r6
 800bf62:	2800      	cmp	r0, #0
 800bf64:	dc08      	bgt.n	800bf78 <__sflush_r+0xfc>
 800bf66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf6e:	81a3      	strh	r3, [r4, #12]
 800bf70:	f04f 30ff 	mov.w	r0, #4294967295
 800bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf78:	4407      	add	r7, r0
 800bf7a:	eba8 0800 	sub.w	r8, r8, r0
 800bf7e:	e7e7      	b.n	800bf50 <__sflush_r+0xd4>
 800bf80:	20400001 	.word	0x20400001

0800bf84 <_fflush_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	690b      	ldr	r3, [r1, #16]
 800bf88:	4605      	mov	r5, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	b913      	cbnz	r3, 800bf94 <_fflush_r+0x10>
 800bf8e:	2500      	movs	r5, #0
 800bf90:	4628      	mov	r0, r5
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	b118      	cbz	r0, 800bf9e <_fflush_r+0x1a>
 800bf96:	6a03      	ldr	r3, [r0, #32]
 800bf98:	b90b      	cbnz	r3, 800bf9e <_fflush_r+0x1a>
 800bf9a:	f7fe f9a7 	bl	800a2ec <__sinit>
 800bf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0f3      	beq.n	800bf8e <_fflush_r+0xa>
 800bfa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfa8:	07d0      	lsls	r0, r2, #31
 800bfaa:	d404      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfac:	0599      	lsls	r1, r3, #22
 800bfae:	d402      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfb2:	f7fe fb26 	bl	800a602 <__retarget_lock_acquire_recursive>
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7ff ff5f 	bl	800be7c <__sflush_r>
 800bfbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfc0:	07da      	lsls	r2, r3, #31
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	d4e4      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	059b      	lsls	r3, r3, #22
 800bfca:	d4e1      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfce:	f7fe fb19 	bl	800a604 <__retarget_lock_release_recursive>
 800bfd2:	e7dd      	b.n	800bf90 <_fflush_r+0xc>

0800bfd4 <memmove>:
 800bfd4:	4288      	cmp	r0, r1
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	eb01 0402 	add.w	r4, r1, r2
 800bfdc:	d902      	bls.n	800bfe4 <memmove+0x10>
 800bfde:	4284      	cmp	r4, r0
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	d807      	bhi.n	800bff4 <memmove+0x20>
 800bfe4:	1e43      	subs	r3, r0, #1
 800bfe6:	42a1      	cmp	r1, r4
 800bfe8:	d008      	beq.n	800bffc <memmove+0x28>
 800bfea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bff2:	e7f8      	b.n	800bfe6 <memmove+0x12>
 800bff4:	4402      	add	r2, r0
 800bff6:	4601      	mov	r1, r0
 800bff8:	428a      	cmp	r2, r1
 800bffa:	d100      	bne.n	800bffe <memmove+0x2a>
 800bffc:	bd10      	pop	{r4, pc}
 800bffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c006:	e7f7      	b.n	800bff8 <memmove+0x24>

0800c008 <_sbrk_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d06      	ldr	r5, [pc, #24]	@ (800c024 <_sbrk_r+0x1c>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	f7f5 fe9a 	bl	8001d4c <_sbrk>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d102      	bne.n	800c022 <_sbrk_r+0x1a>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b103      	cbz	r3, 800c022 <_sbrk_r+0x1a>
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	20003e8c 	.word	0x20003e8c

0800c028 <__assert_func>:
 800c028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c02a:	4614      	mov	r4, r2
 800c02c:	461a      	mov	r2, r3
 800c02e:	4b09      	ldr	r3, [pc, #36]	@ (800c054 <__assert_func+0x2c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	68d8      	ldr	r0, [r3, #12]
 800c036:	b14c      	cbz	r4, 800c04c <__assert_func+0x24>
 800c038:	4b07      	ldr	r3, [pc, #28]	@ (800c058 <__assert_func+0x30>)
 800c03a:	9100      	str	r1, [sp, #0]
 800c03c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c040:	4906      	ldr	r1, [pc, #24]	@ (800c05c <__assert_func+0x34>)
 800c042:	462b      	mov	r3, r5
 800c044:	f000 f870 	bl	800c128 <fiprintf>
 800c048:	f000 f880 	bl	800c14c <abort>
 800c04c:	4b04      	ldr	r3, [pc, #16]	@ (800c060 <__assert_func+0x38>)
 800c04e:	461c      	mov	r4, r3
 800c050:	e7f3      	b.n	800c03a <__assert_func+0x12>
 800c052:	bf00      	nop
 800c054:	20000030 	.word	0x20000030
 800c058:	0800c8b1 	.word	0x0800c8b1
 800c05c:	0800c8be 	.word	0x0800c8be
 800c060:	0800c8ec 	.word	0x0800c8ec

0800c064 <_calloc_r>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	fba1 5402 	umull	r5, r4, r1, r2
 800c06a:	b934      	cbnz	r4, 800c07a <_calloc_r+0x16>
 800c06c:	4629      	mov	r1, r5
 800c06e:	f7ff f9a7 	bl	800b3c0 <_malloc_r>
 800c072:	4606      	mov	r6, r0
 800c074:	b928      	cbnz	r0, 800c082 <_calloc_r+0x1e>
 800c076:	4630      	mov	r0, r6
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	220c      	movs	r2, #12
 800c07c:	6002      	str	r2, [r0, #0]
 800c07e:	2600      	movs	r6, #0
 800c080:	e7f9      	b.n	800c076 <_calloc_r+0x12>
 800c082:	462a      	mov	r2, r5
 800c084:	4621      	mov	r1, r4
 800c086:	f7fe f9e0 	bl	800a44a <memset>
 800c08a:	e7f4      	b.n	800c076 <_calloc_r+0x12>

0800c08c <__ascii_mbtowc>:
 800c08c:	b082      	sub	sp, #8
 800c08e:	b901      	cbnz	r1, 800c092 <__ascii_mbtowc+0x6>
 800c090:	a901      	add	r1, sp, #4
 800c092:	b142      	cbz	r2, 800c0a6 <__ascii_mbtowc+0x1a>
 800c094:	b14b      	cbz	r3, 800c0aa <__ascii_mbtowc+0x1e>
 800c096:	7813      	ldrb	r3, [r2, #0]
 800c098:	600b      	str	r3, [r1, #0]
 800c09a:	7812      	ldrb	r2, [r2, #0]
 800c09c:	1e10      	subs	r0, r2, #0
 800c09e:	bf18      	it	ne
 800c0a0:	2001      	movne	r0, #1
 800c0a2:	b002      	add	sp, #8
 800c0a4:	4770      	bx	lr
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	e7fb      	b.n	800c0a2 <__ascii_mbtowc+0x16>
 800c0aa:	f06f 0001 	mvn.w	r0, #1
 800c0ae:	e7f8      	b.n	800c0a2 <__ascii_mbtowc+0x16>

0800c0b0 <_realloc_r>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	4614      	mov	r4, r2
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	b921      	cbnz	r1, 800c0c6 <_realloc_r+0x16>
 800c0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	f7ff b97d 	b.w	800b3c0 <_malloc_r>
 800c0c6:	b92a      	cbnz	r2, 800c0d4 <_realloc_r+0x24>
 800c0c8:	f7ff f906 	bl	800b2d8 <_free_r>
 800c0cc:	4625      	mov	r5, r4
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	f000 f841 	bl	800c15a <_malloc_usable_size_r>
 800c0d8:	4284      	cmp	r4, r0
 800c0da:	4606      	mov	r6, r0
 800c0dc:	d802      	bhi.n	800c0e4 <_realloc_r+0x34>
 800c0de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0e2:	d8f4      	bhi.n	800c0ce <_realloc_r+0x1e>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f7ff f96a 	bl	800b3c0 <_malloc_r>
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	b908      	cbnz	r0, 800c0f4 <_realloc_r+0x44>
 800c0f0:	4645      	mov	r5, r8
 800c0f2:	e7ec      	b.n	800c0ce <_realloc_r+0x1e>
 800c0f4:	42b4      	cmp	r4, r6
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	bf28      	it	cs
 800c0fc:	4632      	movcs	r2, r6
 800c0fe:	f7fe fa82 	bl	800a606 <memcpy>
 800c102:	4629      	mov	r1, r5
 800c104:	4638      	mov	r0, r7
 800c106:	f7ff f8e7 	bl	800b2d8 <_free_r>
 800c10a:	e7f1      	b.n	800c0f0 <_realloc_r+0x40>

0800c10c <__ascii_wctomb>:
 800c10c:	4603      	mov	r3, r0
 800c10e:	4608      	mov	r0, r1
 800c110:	b141      	cbz	r1, 800c124 <__ascii_wctomb+0x18>
 800c112:	2aff      	cmp	r2, #255	@ 0xff
 800c114:	d904      	bls.n	800c120 <__ascii_wctomb+0x14>
 800c116:	228a      	movs	r2, #138	@ 0x8a
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	4770      	bx	lr
 800c120:	700a      	strb	r2, [r1, #0]
 800c122:	2001      	movs	r0, #1
 800c124:	4770      	bx	lr
	...

0800c128 <fiprintf>:
 800c128:	b40e      	push	{r1, r2, r3}
 800c12a:	b503      	push	{r0, r1, lr}
 800c12c:	4601      	mov	r1, r0
 800c12e:	ab03      	add	r3, sp, #12
 800c130:	4805      	ldr	r0, [pc, #20]	@ (800c148 <fiprintf+0x20>)
 800c132:	f853 2b04 	ldr.w	r2, [r3], #4
 800c136:	6800      	ldr	r0, [r0, #0]
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	f000 f83f 	bl	800c1bc <_vfiprintf_r>
 800c13e:	b002      	add	sp, #8
 800c140:	f85d eb04 	ldr.w	lr, [sp], #4
 800c144:	b003      	add	sp, #12
 800c146:	4770      	bx	lr
 800c148:	20000030 	.word	0x20000030

0800c14c <abort>:
 800c14c:	b508      	push	{r3, lr}
 800c14e:	2006      	movs	r0, #6
 800c150:	f000 fa08 	bl	800c564 <raise>
 800c154:	2001      	movs	r0, #1
 800c156:	f7f5 fd81 	bl	8001c5c <_exit>

0800c15a <_malloc_usable_size_r>:
 800c15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c15e:	1f18      	subs	r0, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	bfbc      	itt	lt
 800c164:	580b      	ldrlt	r3, [r1, r0]
 800c166:	18c0      	addlt	r0, r0, r3
 800c168:	4770      	bx	lr

0800c16a <__sfputc_r>:
 800c16a:	6893      	ldr	r3, [r2, #8]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	b410      	push	{r4}
 800c172:	6093      	str	r3, [r2, #8]
 800c174:	da08      	bge.n	800c188 <__sfputc_r+0x1e>
 800c176:	6994      	ldr	r4, [r2, #24]
 800c178:	42a3      	cmp	r3, r4
 800c17a:	db01      	blt.n	800c180 <__sfputc_r+0x16>
 800c17c:	290a      	cmp	r1, #10
 800c17e:	d103      	bne.n	800c188 <__sfputc_r+0x1e>
 800c180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c184:	f000 b932 	b.w	800c3ec <__swbuf_r>
 800c188:	6813      	ldr	r3, [r2, #0]
 800c18a:	1c58      	adds	r0, r3, #1
 800c18c:	6010      	str	r0, [r2, #0]
 800c18e:	7019      	strb	r1, [r3, #0]
 800c190:	4608      	mov	r0, r1
 800c192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <__sfputs_r>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	4606      	mov	r6, r0
 800c19c:	460f      	mov	r7, r1
 800c19e:	4614      	mov	r4, r2
 800c1a0:	18d5      	adds	r5, r2, r3
 800c1a2:	42ac      	cmp	r4, r5
 800c1a4:	d101      	bne.n	800c1aa <__sfputs_r+0x12>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	e007      	b.n	800c1ba <__sfputs_r+0x22>
 800c1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ae:	463a      	mov	r2, r7
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff ffda 	bl	800c16a <__sfputc_r>
 800c1b6:	1c43      	adds	r3, r0, #1
 800c1b8:	d1f3      	bne.n	800c1a2 <__sfputs_r+0xa>
 800c1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1bc <_vfiprintf_r>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	b09d      	sub	sp, #116	@ 0x74
 800c1c4:	4614      	mov	r4, r2
 800c1c6:	4698      	mov	r8, r3
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	b118      	cbz	r0, 800c1d4 <_vfiprintf_r+0x18>
 800c1cc:	6a03      	ldr	r3, [r0, #32]
 800c1ce:	b90b      	cbnz	r3, 800c1d4 <_vfiprintf_r+0x18>
 800c1d0:	f7fe f88c 	bl	800a2ec <__sinit>
 800c1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1d6:	07d9      	lsls	r1, r3, #31
 800c1d8:	d405      	bmi.n	800c1e6 <_vfiprintf_r+0x2a>
 800c1da:	89ab      	ldrh	r3, [r5, #12]
 800c1dc:	059a      	lsls	r2, r3, #22
 800c1de:	d402      	bmi.n	800c1e6 <_vfiprintf_r+0x2a>
 800c1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1e2:	f7fe fa0e 	bl	800a602 <__retarget_lock_acquire_recursive>
 800c1e6:	89ab      	ldrh	r3, [r5, #12]
 800c1e8:	071b      	lsls	r3, r3, #28
 800c1ea:	d501      	bpl.n	800c1f0 <_vfiprintf_r+0x34>
 800c1ec:	692b      	ldr	r3, [r5, #16]
 800c1ee:	b99b      	cbnz	r3, 800c218 <_vfiprintf_r+0x5c>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f000 f938 	bl	800c468 <__swsetup_r>
 800c1f8:	b170      	cbz	r0, 800c218 <_vfiprintf_r+0x5c>
 800c1fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1fc:	07dc      	lsls	r4, r3, #31
 800c1fe:	d504      	bpl.n	800c20a <_vfiprintf_r+0x4e>
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	b01d      	add	sp, #116	@ 0x74
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	0598      	lsls	r0, r3, #22
 800c20e:	d4f7      	bmi.n	800c200 <_vfiprintf_r+0x44>
 800c210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c212:	f7fe f9f7 	bl	800a604 <__retarget_lock_release_recursive>
 800c216:	e7f3      	b.n	800c200 <_vfiprintf_r+0x44>
 800c218:	2300      	movs	r3, #0
 800c21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21c:	2320      	movs	r3, #32
 800c21e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c222:	f8cd 800c 	str.w	r8, [sp, #12]
 800c226:	2330      	movs	r3, #48	@ 0x30
 800c228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3d8 <_vfiprintf_r+0x21c>
 800c22c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c230:	f04f 0901 	mov.w	r9, #1
 800c234:	4623      	mov	r3, r4
 800c236:	469a      	mov	sl, r3
 800c238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23c:	b10a      	cbz	r2, 800c242 <_vfiprintf_r+0x86>
 800c23e:	2a25      	cmp	r2, #37	@ 0x25
 800c240:	d1f9      	bne.n	800c236 <_vfiprintf_r+0x7a>
 800c242:	ebba 0b04 	subs.w	fp, sl, r4
 800c246:	d00b      	beq.n	800c260 <_vfiprintf_r+0xa4>
 800c248:	465b      	mov	r3, fp
 800c24a:	4622      	mov	r2, r4
 800c24c:	4629      	mov	r1, r5
 800c24e:	4630      	mov	r0, r6
 800c250:	f7ff ffa2 	bl	800c198 <__sfputs_r>
 800c254:	3001      	adds	r0, #1
 800c256:	f000 80a7 	beq.w	800c3a8 <_vfiprintf_r+0x1ec>
 800c25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c25c:	445a      	add	r2, fp
 800c25e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c260:	f89a 3000 	ldrb.w	r3, [sl]
 800c264:	2b00      	cmp	r3, #0
 800c266:	f000 809f 	beq.w	800c3a8 <_vfiprintf_r+0x1ec>
 800c26a:	2300      	movs	r3, #0
 800c26c:	f04f 32ff 	mov.w	r2, #4294967295
 800c270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c274:	f10a 0a01 	add.w	sl, sl, #1
 800c278:	9304      	str	r3, [sp, #16]
 800c27a:	9307      	str	r3, [sp, #28]
 800c27c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c280:	931a      	str	r3, [sp, #104]	@ 0x68
 800c282:	4654      	mov	r4, sl
 800c284:	2205      	movs	r2, #5
 800c286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28a:	4853      	ldr	r0, [pc, #332]	@ (800c3d8 <_vfiprintf_r+0x21c>)
 800c28c:	f7f3 ffc8 	bl	8000220 <memchr>
 800c290:	9a04      	ldr	r2, [sp, #16]
 800c292:	b9d8      	cbnz	r0, 800c2cc <_vfiprintf_r+0x110>
 800c294:	06d1      	lsls	r1, r2, #27
 800c296:	bf44      	itt	mi
 800c298:	2320      	movmi	r3, #32
 800c29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c29e:	0713      	lsls	r3, r2, #28
 800c2a0:	bf44      	itt	mi
 800c2a2:	232b      	movmi	r3, #43	@ 0x2b
 800c2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ae:	d015      	beq.n	800c2dc <_vfiprintf_r+0x120>
 800c2b0:	9a07      	ldr	r2, [sp, #28]
 800c2b2:	4654      	mov	r4, sl
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	f04f 0c0a 	mov.w	ip, #10
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2c0:	3b30      	subs	r3, #48	@ 0x30
 800c2c2:	2b09      	cmp	r3, #9
 800c2c4:	d94b      	bls.n	800c35e <_vfiprintf_r+0x1a2>
 800c2c6:	b1b0      	cbz	r0, 800c2f6 <_vfiprintf_r+0x13a>
 800c2c8:	9207      	str	r2, [sp, #28]
 800c2ca:	e014      	b.n	800c2f6 <_vfiprintf_r+0x13a>
 800c2cc:	eba0 0308 	sub.w	r3, r0, r8
 800c2d0:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	9304      	str	r3, [sp, #16]
 800c2d8:	46a2      	mov	sl, r4
 800c2da:	e7d2      	b.n	800c282 <_vfiprintf_r+0xc6>
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	1d19      	adds	r1, r3, #4
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	9103      	str	r1, [sp, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bfbb      	ittet	lt
 800c2e8:	425b      	neglt	r3, r3
 800c2ea:	f042 0202 	orrlt.w	r2, r2, #2
 800c2ee:	9307      	strge	r3, [sp, #28]
 800c2f0:	9307      	strlt	r3, [sp, #28]
 800c2f2:	bfb8      	it	lt
 800c2f4:	9204      	strlt	r2, [sp, #16]
 800c2f6:	7823      	ldrb	r3, [r4, #0]
 800c2f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2fa:	d10a      	bne.n	800c312 <_vfiprintf_r+0x156>
 800c2fc:	7863      	ldrb	r3, [r4, #1]
 800c2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800c300:	d132      	bne.n	800c368 <_vfiprintf_r+0x1ac>
 800c302:	9b03      	ldr	r3, [sp, #12]
 800c304:	1d1a      	adds	r2, r3, #4
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	9203      	str	r2, [sp, #12]
 800c30a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c30e:	3402      	adds	r4, #2
 800c310:	9305      	str	r3, [sp, #20]
 800c312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3e8 <_vfiprintf_r+0x22c>
 800c316:	7821      	ldrb	r1, [r4, #0]
 800c318:	2203      	movs	r2, #3
 800c31a:	4650      	mov	r0, sl
 800c31c:	f7f3 ff80 	bl	8000220 <memchr>
 800c320:	b138      	cbz	r0, 800c332 <_vfiprintf_r+0x176>
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	eba0 000a 	sub.w	r0, r0, sl
 800c328:	2240      	movs	r2, #64	@ 0x40
 800c32a:	4082      	lsls	r2, r0
 800c32c:	4313      	orrs	r3, r2
 800c32e:	3401      	adds	r4, #1
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c336:	4829      	ldr	r0, [pc, #164]	@ (800c3dc <_vfiprintf_r+0x220>)
 800c338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c33c:	2206      	movs	r2, #6
 800c33e:	f7f3 ff6f 	bl	8000220 <memchr>
 800c342:	2800      	cmp	r0, #0
 800c344:	d03f      	beq.n	800c3c6 <_vfiprintf_r+0x20a>
 800c346:	4b26      	ldr	r3, [pc, #152]	@ (800c3e0 <_vfiprintf_r+0x224>)
 800c348:	bb1b      	cbnz	r3, 800c392 <_vfiprintf_r+0x1d6>
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	3307      	adds	r3, #7
 800c34e:	f023 0307 	bic.w	r3, r3, #7
 800c352:	3308      	adds	r3, #8
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c358:	443b      	add	r3, r7
 800c35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35c:	e76a      	b.n	800c234 <_vfiprintf_r+0x78>
 800c35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c362:	460c      	mov	r4, r1
 800c364:	2001      	movs	r0, #1
 800c366:	e7a8      	b.n	800c2ba <_vfiprintf_r+0xfe>
 800c368:	2300      	movs	r3, #0
 800c36a:	3401      	adds	r4, #1
 800c36c:	9305      	str	r3, [sp, #20]
 800c36e:	4619      	mov	r1, r3
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4620      	mov	r0, r4
 800c376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c37a:	3a30      	subs	r2, #48	@ 0x30
 800c37c:	2a09      	cmp	r2, #9
 800c37e:	d903      	bls.n	800c388 <_vfiprintf_r+0x1cc>
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0c6      	beq.n	800c312 <_vfiprintf_r+0x156>
 800c384:	9105      	str	r1, [sp, #20]
 800c386:	e7c4      	b.n	800c312 <_vfiprintf_r+0x156>
 800c388:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38c:	4604      	mov	r4, r0
 800c38e:	2301      	movs	r3, #1
 800c390:	e7f0      	b.n	800c374 <_vfiprintf_r+0x1b8>
 800c392:	ab03      	add	r3, sp, #12
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	462a      	mov	r2, r5
 800c398:	4b12      	ldr	r3, [pc, #72]	@ (800c3e4 <_vfiprintf_r+0x228>)
 800c39a:	a904      	add	r1, sp, #16
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7fd fb63 	bl	8009a68 <_printf_float>
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	1c78      	adds	r0, r7, #1
 800c3a6:	d1d6      	bne.n	800c356 <_vfiprintf_r+0x19a>
 800c3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3aa:	07d9      	lsls	r1, r3, #31
 800c3ac:	d405      	bmi.n	800c3ba <_vfiprintf_r+0x1fe>
 800c3ae:	89ab      	ldrh	r3, [r5, #12]
 800c3b0:	059a      	lsls	r2, r3, #22
 800c3b2:	d402      	bmi.n	800c3ba <_vfiprintf_r+0x1fe>
 800c3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3b6:	f7fe f925 	bl	800a604 <__retarget_lock_release_recursive>
 800c3ba:	89ab      	ldrh	r3, [r5, #12]
 800c3bc:	065b      	lsls	r3, r3, #25
 800c3be:	f53f af1f 	bmi.w	800c200 <_vfiprintf_r+0x44>
 800c3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3c4:	e71e      	b.n	800c204 <_vfiprintf_r+0x48>
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b05      	ldr	r3, [pc, #20]	@ (800c3e4 <_vfiprintf_r+0x228>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7fd fde1 	bl	8009f98 <_printf_i>
 800c3d6:	e7e4      	b.n	800c3a2 <_vfiprintf_r+0x1e6>
 800c3d8:	0800c896 	.word	0x0800c896
 800c3dc:	0800c8a0 	.word	0x0800c8a0
 800c3e0:	08009a69 	.word	0x08009a69
 800c3e4:	0800c199 	.word	0x0800c199
 800c3e8:	0800c89c 	.word	0x0800c89c

0800c3ec <__swbuf_r>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	460e      	mov	r6, r1
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	b118      	cbz	r0, 800c3fe <__swbuf_r+0x12>
 800c3f6:	6a03      	ldr	r3, [r0, #32]
 800c3f8:	b90b      	cbnz	r3, 800c3fe <__swbuf_r+0x12>
 800c3fa:	f7fd ff77 	bl	800a2ec <__sinit>
 800c3fe:	69a3      	ldr	r3, [r4, #24]
 800c400:	60a3      	str	r3, [r4, #8]
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	071a      	lsls	r2, r3, #28
 800c406:	d501      	bpl.n	800c40c <__swbuf_r+0x20>
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	b943      	cbnz	r3, 800c41e <__swbuf_r+0x32>
 800c40c:	4621      	mov	r1, r4
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 f82a 	bl	800c468 <__swsetup_r>
 800c414:	b118      	cbz	r0, 800c41e <__swbuf_r+0x32>
 800c416:	f04f 37ff 	mov.w	r7, #4294967295
 800c41a:	4638      	mov	r0, r7
 800c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	6922      	ldr	r2, [r4, #16]
 800c422:	1a98      	subs	r0, r3, r2
 800c424:	6963      	ldr	r3, [r4, #20]
 800c426:	b2f6      	uxtb	r6, r6
 800c428:	4283      	cmp	r3, r0
 800c42a:	4637      	mov	r7, r6
 800c42c:	dc05      	bgt.n	800c43a <__swbuf_r+0x4e>
 800c42e:	4621      	mov	r1, r4
 800c430:	4628      	mov	r0, r5
 800c432:	f7ff fda7 	bl	800bf84 <_fflush_r>
 800c436:	2800      	cmp	r0, #0
 800c438:	d1ed      	bne.n	800c416 <__swbuf_r+0x2a>
 800c43a:	68a3      	ldr	r3, [r4, #8]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	60a3      	str	r3, [r4, #8]
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	6022      	str	r2, [r4, #0]
 800c446:	701e      	strb	r6, [r3, #0]
 800c448:	6962      	ldr	r2, [r4, #20]
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d004      	beq.n	800c45a <__swbuf_r+0x6e>
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	07db      	lsls	r3, r3, #31
 800c454:	d5e1      	bpl.n	800c41a <__swbuf_r+0x2e>
 800c456:	2e0a      	cmp	r6, #10
 800c458:	d1df      	bne.n	800c41a <__swbuf_r+0x2e>
 800c45a:	4621      	mov	r1, r4
 800c45c:	4628      	mov	r0, r5
 800c45e:	f7ff fd91 	bl	800bf84 <_fflush_r>
 800c462:	2800      	cmp	r0, #0
 800c464:	d0d9      	beq.n	800c41a <__swbuf_r+0x2e>
 800c466:	e7d6      	b.n	800c416 <__swbuf_r+0x2a>

0800c468 <__swsetup_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4b29      	ldr	r3, [pc, #164]	@ (800c510 <__swsetup_r+0xa8>)
 800c46c:	4605      	mov	r5, r0
 800c46e:	6818      	ldr	r0, [r3, #0]
 800c470:	460c      	mov	r4, r1
 800c472:	b118      	cbz	r0, 800c47c <__swsetup_r+0x14>
 800c474:	6a03      	ldr	r3, [r0, #32]
 800c476:	b90b      	cbnz	r3, 800c47c <__swsetup_r+0x14>
 800c478:	f7fd ff38 	bl	800a2ec <__sinit>
 800c47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c480:	0719      	lsls	r1, r3, #28
 800c482:	d422      	bmi.n	800c4ca <__swsetup_r+0x62>
 800c484:	06da      	lsls	r2, r3, #27
 800c486:	d407      	bmi.n	800c498 <__swsetup_r+0x30>
 800c488:	2209      	movs	r2, #9
 800c48a:	602a      	str	r2, [r5, #0]
 800c48c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c490:	81a3      	strh	r3, [r4, #12]
 800c492:	f04f 30ff 	mov.w	r0, #4294967295
 800c496:	e033      	b.n	800c500 <__swsetup_r+0x98>
 800c498:	0758      	lsls	r0, r3, #29
 800c49a:	d512      	bpl.n	800c4c2 <__swsetup_r+0x5a>
 800c49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c49e:	b141      	cbz	r1, 800c4b2 <__swsetup_r+0x4a>
 800c4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	d002      	beq.n	800c4ae <__swsetup_r+0x46>
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	f7fe ff15 	bl	800b2d8 <_free_r>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4b8:	81a3      	strh	r3, [r4, #12]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	6923      	ldr	r3, [r4, #16]
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f043 0308 	orr.w	r3, r3, #8
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	b94b      	cbnz	r3, 800c4e2 <__swsetup_r+0x7a>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4d8:	d003      	beq.n	800c4e2 <__swsetup_r+0x7a>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f883 	bl	800c5e8 <__smakebuf_r>
 800c4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e6:	f013 0201 	ands.w	r2, r3, #1
 800c4ea:	d00a      	beq.n	800c502 <__swsetup_r+0x9a>
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	60a2      	str	r2, [r4, #8]
 800c4f0:	6962      	ldr	r2, [r4, #20]
 800c4f2:	4252      	negs	r2, r2
 800c4f4:	61a2      	str	r2, [r4, #24]
 800c4f6:	6922      	ldr	r2, [r4, #16]
 800c4f8:	b942      	cbnz	r2, 800c50c <__swsetup_r+0xa4>
 800c4fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4fe:	d1c5      	bne.n	800c48c <__swsetup_r+0x24>
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	0799      	lsls	r1, r3, #30
 800c504:	bf58      	it	pl
 800c506:	6962      	ldrpl	r2, [r4, #20]
 800c508:	60a2      	str	r2, [r4, #8]
 800c50a:	e7f4      	b.n	800c4f6 <__swsetup_r+0x8e>
 800c50c:	2000      	movs	r0, #0
 800c50e:	e7f7      	b.n	800c500 <__swsetup_r+0x98>
 800c510:	20000030 	.word	0x20000030

0800c514 <_raise_r>:
 800c514:	291f      	cmp	r1, #31
 800c516:	b538      	push	{r3, r4, r5, lr}
 800c518:	4605      	mov	r5, r0
 800c51a:	460c      	mov	r4, r1
 800c51c:	d904      	bls.n	800c528 <_raise_r+0x14>
 800c51e:	2316      	movs	r3, #22
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	f04f 30ff 	mov.w	r0, #4294967295
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c52a:	b112      	cbz	r2, 800c532 <_raise_r+0x1e>
 800c52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c530:	b94b      	cbnz	r3, 800c546 <_raise_r+0x32>
 800c532:	4628      	mov	r0, r5
 800c534:	f000 f830 	bl	800c598 <_getpid_r>
 800c538:	4622      	mov	r2, r4
 800c53a:	4601      	mov	r1, r0
 800c53c:	4628      	mov	r0, r5
 800c53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c542:	f000 b817 	b.w	800c574 <_kill_r>
 800c546:	2b01      	cmp	r3, #1
 800c548:	d00a      	beq.n	800c560 <_raise_r+0x4c>
 800c54a:	1c59      	adds	r1, r3, #1
 800c54c:	d103      	bne.n	800c556 <_raise_r+0x42>
 800c54e:	2316      	movs	r3, #22
 800c550:	6003      	str	r3, [r0, #0]
 800c552:	2001      	movs	r0, #1
 800c554:	e7e7      	b.n	800c526 <_raise_r+0x12>
 800c556:	2100      	movs	r1, #0
 800c558:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c55c:	4620      	mov	r0, r4
 800c55e:	4798      	blx	r3
 800c560:	2000      	movs	r0, #0
 800c562:	e7e0      	b.n	800c526 <_raise_r+0x12>

0800c564 <raise>:
 800c564:	4b02      	ldr	r3, [pc, #8]	@ (800c570 <raise+0xc>)
 800c566:	4601      	mov	r1, r0
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	f7ff bfd3 	b.w	800c514 <_raise_r>
 800c56e:	bf00      	nop
 800c570:	20000030 	.word	0x20000030

0800c574 <_kill_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d07      	ldr	r5, [pc, #28]	@ (800c594 <_kill_r+0x20>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	4611      	mov	r1, r2
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	f7f5 fb5b 	bl	8001c3c <_kill>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	d102      	bne.n	800c590 <_kill_r+0x1c>
 800c58a:	682b      	ldr	r3, [r5, #0]
 800c58c:	b103      	cbz	r3, 800c590 <_kill_r+0x1c>
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	bf00      	nop
 800c594:	20003e8c 	.word	0x20003e8c

0800c598 <_getpid_r>:
 800c598:	f7f5 bb48 	b.w	8001c2c <_getpid>

0800c59c <__swhatbuf_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	460c      	mov	r4, r1
 800c5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	b096      	sub	sp, #88	@ 0x58
 800c5a8:	4615      	mov	r5, r2
 800c5aa:	461e      	mov	r6, r3
 800c5ac:	da0d      	bge.n	800c5ca <__swhatbuf_r+0x2e>
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	bf14      	ite	ne
 800c5ba:	2340      	movne	r3, #64	@ 0x40
 800c5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	6031      	str	r1, [r6, #0]
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	b016      	add	sp, #88	@ 0x58
 800c5c8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ca:	466a      	mov	r2, sp
 800c5cc:	f000 f848 	bl	800c660 <_fstat_r>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	dbec      	blt.n	800c5ae <__swhatbuf_r+0x12>
 800c5d4:	9901      	ldr	r1, [sp, #4]
 800c5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5de:	4259      	negs	r1, r3
 800c5e0:	4159      	adcs	r1, r3
 800c5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5e6:	e7eb      	b.n	800c5c0 <__swhatbuf_r+0x24>

0800c5e8 <__smakebuf_r>:
 800c5e8:	898b      	ldrh	r3, [r1, #12]
 800c5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5ec:	079d      	lsls	r5, r3, #30
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	d507      	bpl.n	800c604 <__smakebuf_r+0x1c>
 800c5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	6123      	str	r3, [r4, #16]
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	6163      	str	r3, [r4, #20]
 800c600:	b003      	add	sp, #12
 800c602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c604:	ab01      	add	r3, sp, #4
 800c606:	466a      	mov	r2, sp
 800c608:	f7ff ffc8 	bl	800c59c <__swhatbuf_r>
 800c60c:	9f00      	ldr	r7, [sp, #0]
 800c60e:	4605      	mov	r5, r0
 800c610:	4639      	mov	r1, r7
 800c612:	4630      	mov	r0, r6
 800c614:	f7fe fed4 	bl	800b3c0 <_malloc_r>
 800c618:	b948      	cbnz	r0, 800c62e <__smakebuf_r+0x46>
 800c61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c61e:	059a      	lsls	r2, r3, #22
 800c620:	d4ee      	bmi.n	800c600 <__smakebuf_r+0x18>
 800c622:	f023 0303 	bic.w	r3, r3, #3
 800c626:	f043 0302 	orr.w	r3, r3, #2
 800c62a:	81a3      	strh	r3, [r4, #12]
 800c62c:	e7e2      	b.n	800c5f4 <__smakebuf_r+0xc>
 800c62e:	89a3      	ldrh	r3, [r4, #12]
 800c630:	6020      	str	r0, [r4, #0]
 800c632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c63e:	b15b      	cbz	r3, 800c658 <__smakebuf_r+0x70>
 800c640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c644:	4630      	mov	r0, r6
 800c646:	f000 f81d 	bl	800c684 <_isatty_r>
 800c64a:	b128      	cbz	r0, 800c658 <__smakebuf_r+0x70>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	f043 0301 	orr.w	r3, r3, #1
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	431d      	orrs	r5, r3
 800c65c:	81a5      	strh	r5, [r4, #12]
 800c65e:	e7cf      	b.n	800c600 <__smakebuf_r+0x18>

0800c660 <_fstat_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4d07      	ldr	r5, [pc, #28]	@ (800c680 <_fstat_r+0x20>)
 800c664:	2300      	movs	r3, #0
 800c666:	4604      	mov	r4, r0
 800c668:	4608      	mov	r0, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	602b      	str	r3, [r5, #0]
 800c66e:	f7f5 fb45 	bl	8001cfc <_fstat>
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	d102      	bne.n	800c67c <_fstat_r+0x1c>
 800c676:	682b      	ldr	r3, [r5, #0]
 800c678:	b103      	cbz	r3, 800c67c <_fstat_r+0x1c>
 800c67a:	6023      	str	r3, [r4, #0]
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	20003e8c 	.word	0x20003e8c

0800c684 <_isatty_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4d06      	ldr	r5, [pc, #24]	@ (800c6a0 <_isatty_r+0x1c>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	f7f5 fb44 	bl	8001d1c <_isatty>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_isatty_r+0x1a>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_isatty_r+0x1a>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20003e8c 	.word	0x20003e8c

0800c6a4 <_init>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	bf00      	nop
 800c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6aa:	bc08      	pop	{r3}
 800c6ac:	469e      	mov	lr, r3
 800c6ae:	4770      	bx	lr

0800c6b0 <_fini>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	bf00      	nop
 800c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b6:	bc08      	pop	{r3}
 800c6b8:	469e      	mov	lr, r3
 800c6ba:	4770      	bx	lr
>>>>>>> Stashed changes
