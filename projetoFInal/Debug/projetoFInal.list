
projetoFInal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005210  08005210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005290  08005290  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005298  08005298  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00006298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800529c  0800529c  0000629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080052a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f9c  2000006c  0800530c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001008  0800530c  00008008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f59  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003492  00000000  00000000  0001eff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00022488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ab  00000000  00000000  000239f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc8  00000000  00000000  00024a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178f4  00000000  00000000  00027a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce10e  00000000  00000000  0003f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  0010d4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001131c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080051f8 	.word	0x080051f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080051f8 	.word	0x080051f8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <led_task>:
	GPIO_TypeDef* port;
	uint16_t pin;
	TickType_t time;
}led_t;

void led_task(void *args){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *) args;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60fb      	str	r3, [r7, #12]

	while(1){
		HAL_GPIO_TogglePin(led->port, led->pin);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f000 fd58 	bl	8001018 <HAL_GPIO_TogglePin>
		vTaskDelay(led->time);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fba3 	bl	8003cb8 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port, led->pin);
 8000572:	bf00      	nop
 8000574:	e7f0      	b.n	8000558 <led_task+0xc>
	...

08000578 <button_task>:
	}
}

void button_task(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	while(1){
		xSemaphoreTake(bSemaphore,portMAX_DELAY);
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <button_task+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f04f 31ff 	mov.w	r1, #4294967295
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f8bb 	bl	8003700 <xQueueSemaphoreTake>
 800058a:	e7f7      	b.n	800057c <button_task+0x4>
 800058c:	20000120 	.word	0x20000120

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
int main(void)
 8000596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059a:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN 1 */
	static led_t led = {.port = GPIOA, .pin = GPIO_PIN_5, .time = 500};
	(void)xTaskCreate(led_task, "led_task", 256, &led, 7, NULL);
 800059c:	2300      	movs	r3, #0
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2307      	movs	r3, #7
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <main+0x80>)
 80005a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005aa:	491a      	ldr	r1, [pc, #104]	@ (8000614 <main+0x84>)
 80005ac:	481a      	ldr	r0, [pc, #104]	@ (8000618 <main+0x88>)
 80005ae:	f003 fa37 	bl	8003a20 <xTaskCreate>
	(void)xTaskCreate(button_task, "button_task", 256, NULL, 7, NULL);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2307      	movs	r3, #7
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005c0:	4916      	ldr	r1, [pc, #88]	@ (800061c <main+0x8c>)
 80005c2:	4817      	ldr	r0, [pc, #92]	@ (8000620 <main+0x90>)
 80005c4:	f003 fa2c 	bl	8003a20 <xTaskCreate>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fa8d 	bl	8000ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f830 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8c4 	bl	800075c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f878 	bl	80006c8 <MX_LPUART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  bSemaphore = xSemaphoreCreateBinary();
 80005d8:	2203      	movs	r2, #3
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f003 f839 	bl	8003654 <xQueueGenericCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <main+0x94>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <main+0x98>)
 80005ea:	463c      	mov	r4, r7
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fed1 	bl	80033a2 <osThreadCreate>
 8000600:	4603      	mov	r3, r0
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <main+0x9c>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f002 fec5 	bl	8003394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	bf00      	nop
 800060c:	e7fd      	b.n	800060a <main+0x7a>
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000
 8000614:	08005210 	.word	0x08005210
 8000618:	0800054d 	.word	0x0800054d
 800061c:	0800521c 	.word	0x0800521c
 8000620:	08000579 	.word	0x08000579
 8000624:	20000120 	.word	0x20000120
 8000628:	08005234 	.word	0x08005234
 800062c:	2000011c 	.word	0x2000011c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2238      	movs	r2, #56	@ 0x38
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fcf8 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fd1e 	bl	8001094 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000672:	2355      	movs	r3, #85	@ 0x55
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fdb8 	bl	80011fc <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000692:	f000 f8cb 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f8b6 	bl	8001820 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ba:	f000 f8b7 	bl	800082c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006ce:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006d4:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <MX_LPUART1_UART_Init+0x90>)
 80006d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006de:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000708:	4811      	ldr	r0, [pc, #68]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 800070a:	f001 ffed 	bl	80026e8 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000714:	f000 f88a 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 800071c:	f002 fd58 	bl	80031d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000726:	f000 f881 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4808      	ldr	r0, [pc, #32]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 800072e:	f002 fd8d 	bl	800324c <HAL_UARTEx_SetRxFifoThreshold>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000738:	f000 f878 	bl	800082c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_LPUART1_UART_Init+0x88>)
 800073e:	f002 fd0e 	bl	800315e <HAL_UARTEx_DisableFifoMode>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000748:	f000 f870 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088
 8000754:	40008000 	.word	0x40008000
 8000758:	00033324 	.word	0x00033324

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_GPIO_Init+0x94>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <MX_GPIO_Init+0x94>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_GPIO_Init+0x94>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_GPIO_Init+0x94>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x94>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_GPIO_Init+0x94>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_GPIO_Init+0x94>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0x94>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_GPIO_Init+0x94>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <MX_GPIO_Init+0x98>)
 80007d2:	f000 fa9f 	bl	8000d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2105      	movs	r1, #5
 80007da:	2028      	movs	r0, #40	@ 0x28
 80007dc:	f000 fa72 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f000 fa89 	bl	8000cf8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000800 	.word	0x48000800

080007f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f002 fdf5 	bl	80033f0 <osDelay>
 8000806:	e7fb      	b.n	8000800 <StartDefaultTask+0x8>

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800081a:	f000 f97d 	bl	8000b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012c00 	.word	0x40012c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_MspInit+0x50>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000842:	4a11      	ldr	r2, [pc, #68]	@ (8000888 <HAL_MspInit+0x50>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	@ 0x60
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x50>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_MspInit+0x50>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085a:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <HAL_MspInit+0x50>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	@ 0x58
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x50>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f000 fa25 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800087a:	f000 fcaf 	bl	80011dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09a      	sub	sp, #104	@ 0x68
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2244      	movs	r2, #68	@ 0x44
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fbc1 	bl	8005034 <memset>
  if(huart->Instance==LPUART1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <HAL_UART_MspInit+0xa8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d136      	bne.n	800092a <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008bc:	2320      	movs	r3, #32
 80008be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f9f7 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d4:	f7ff ffaa 	bl	800082c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008dc:	4a16      	ldr	r2, [pc, #88]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_UART_MspInit+0xac>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000908:	230c      	movs	r3, #12
 800090a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000918:	230c      	movs	r3, #12
 800091a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000926:	f000 f9f5 	bl	8000d14 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800092a:	bf00      	nop
 800092c:	3768      	adds	r7, #104	@ 0x68
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40008000 	.word	0x40008000
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <HAL_InitTick+0xc4>)
 800094e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000950:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <HAL_InitTick+0xc4>)
 8000952:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000956:	6613      	str	r3, [r2, #96]	@ 0x60
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <HAL_InitTick+0xc4>)
 800095a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 020c 	add.w	r2, r7, #12
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f92c 	bl	8001bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000974:	f001 f914 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8000978:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097c:	4a21      	ldr	r2, [pc, #132]	@ (8000a04 <HAL_InitTick+0xc8>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <HAL_InitTick+0xcc>)
 800098a:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <HAL_InitTick+0xd0>)
 800098c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <HAL_InitTick+0xcc>)
 8000990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <HAL_InitTick+0xcc>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <HAL_InitTick+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_InitTick+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80009a8:	4817      	ldr	r0, [pc, #92]	@ (8000a08 <HAL_InitTick+0xcc>)
 80009aa:	f001 fb77 	bl	800209c <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d11b      	bne.n	80009f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009bc:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <HAL_InitTick+0xcc>)
 80009be:	f001 fbcf 	bl	8002160 <HAL_TIM_Base_Start_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d111      	bne.n	80009f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009d0:	2019      	movs	r0, #25
 80009d2:	f000 f991 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d808      	bhi.n	80009ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2019      	movs	r0, #25
 80009e2:	f000 f96f 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_InitTick+0xd4>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e002      	b.n	80009f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3730      	adds	r7, #48	@ 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	20000124 	.word	0x20000124
 8000a0c:	40012c00 	.word	0x40012c00
 8000a10:	20000010 	.word	0x20000010

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a52:	f001 fbef 	bl	8002234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000124 	.word	0x20000124

08000a60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000a64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a68:	f000 faf0 	bl	800104c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a94:	480d      	ldr	r0, [pc, #52]	@ (8000acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 fb1d 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fd63 	bl	8000590 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   r0, =_estack
 8000acc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ad8:	080052a0 	.word	0x080052a0
  ldr r2, =_sbss
 8000adc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ae0:	20001008 	.word	0x20001008

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>

08000ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f8dc 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	200f      	movs	r0, #15
 8000af8:	f7ff ff20 	bl	800093c <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b08:	f7ff fe96 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a03      	ldr	r2, [pc, #12]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	20000170 	.word	0x20000170
 8000b38:	20000014 	.word	0x20000014

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000170 	.word	0x20000170

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd2:	f7ff ff63 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff ffb3 	bl	8000c48 <NVIC_EncodePriority>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff82 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff56 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d22:	e15a      	b.n	8000fda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 814c 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d005      	beq.n	8000d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0203 	and.w	r2, r3, #3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a6 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e94:	4b58      	ldr	r3, [pc, #352]	@ (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea0:	4a56      	ldr	r2, [pc, #344]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x1f8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4c      	ldr	r2, [pc, #304]	@ (8001000 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x1f4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8001004 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4a      	ldr	r2, [pc, #296]	@ (8001008 <HAL_GPIO_Init+0x2f4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1ec>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a49      	ldr	r2, [pc, #292]	@ (800100c <HAL_GPIO_Init+0x2f8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a48      	ldr	r2, [pc, #288]	@ (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e4>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f50:	4a30      	ldr	r2, [pc, #192]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7a:	4a26      	ldr	r2, [pc, #152]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae9d 	bne.w	8000d24 <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4013      	ands	r3, r2
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43d9      	mvns	r1, r3
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	400b      	ands	r3, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f806 	bl	800107c <HAL_GPIO_EXTI_Callback>
  }
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40010400 	.word	0x40010400

0800107c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d141      	bne.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a2:	4b4b      	ldr	r3, [pc, #300]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ae:	d131      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010b0:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010b6:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010c8:	4a41      	ldr	r2, [pc, #260]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d0:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2232      	movs	r2, #50	@ 0x32
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	4a3f      	ldr	r2, [pc, #252]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0c9b      	lsrs	r3, r3, #18
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e6:	e002      	b.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ee:	4b38      	ldr	r3, [pc, #224]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fa:	d102      	bne.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f2      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001102:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110e:	d158      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e057      	b.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111a:	4a2d      	ldr	r2, [pc, #180]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001124:	e04d      	b.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112c:	d141      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800112e:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113a:	d131      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001154:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2232      	movs	r2, #50	@ 0x32
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001172:	e002      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3b01      	subs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001186:	d102      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f2      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119a:	d112      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e011      	b.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011b0:	e007      	b.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40007000 	.word	0x40007000
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	431bde83 	.word	0x431bde83

080011dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ea:	6093      	str	r3, [r2, #8]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e2fe      	b.n	800180c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d075      	beq.n	8001306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b97      	ldr	r3, [pc, #604]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001224:	4b94      	ldr	r3, [pc, #592]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d102      	bne.n	800123a <HAL_RCC_OscConfig+0x3e>
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d002      	beq.n	8001240 <HAL_RCC_OscConfig+0x44>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b08      	cmp	r3, #8
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b8d      	ldr	r3, [pc, #564]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d05b      	beq.n	8001304 <HAL_RCC_OscConfig+0x108>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d157      	bne.n	8001304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e2d9      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x74>
 8001262:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a84      	ldr	r2, [pc, #528]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7e      	ldr	r2, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7b      	ldr	r2, [pc, #492]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001294:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a77      	ldr	r2, [pc, #476]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b75      	ldr	r3, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a74      	ldr	r2, [pc, #464]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc42 	bl	8000b3c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc3e 	bl	8000b3c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	@ 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e29e      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xc0>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc2e 	bl	8000b3c <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fc2a 	bl	8000b3c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	@ 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e28a      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0xe8>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001312:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800131c:	4b56      	ldr	r3, [pc, #344]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x136>
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d002      	beq.n	8001338 <HAL_RCC_OscConfig+0x13c>
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d11f      	bne.n	8001378 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	4b4f      	ldr	r3, [pc, #316]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x154>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e25d      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b49      	ldr	r3, [pc, #292]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4946      	ldr	r1, [pc, #280]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001364:	4b45      	ldr	r3, [pc, #276]	@ (800147c <HAL_RCC_OscConfig+0x280>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fae7 	bl	800093c <HAL_InitTick>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d043      	beq.n	80013fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e249      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a3c      	ldr	r2, [pc, #240]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fbd6 	bl	8000b3c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fbd2 	bl	8000b3c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e232      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a6:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	492d      	ldr	r1, [pc, #180]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e01a      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbb2 	bl	8000b3c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbae 	bl	8000b3c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e20e      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1e0>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d041      	beq.n	800148e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01c      	beq.n	800144c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001422:	f7ff fb8b 	bl	8000b3c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fb87 	bl	8000b3c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1e7      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800143e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ef      	beq.n	800142a <HAL_RCC_OscConfig+0x22e>
 800144a:	e020      	b.n	800148e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_RCC_OscConfig+0x27c>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fb6e 	bl	8000b3c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001462:	e00d      	b.n	8001480 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fb6a 	bl	8000b3c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d906      	bls.n	8001480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1ca      	b.n	800180c <HAL_RCC_OscConfig+0x610>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	4b8c      	ldr	r3, [pc, #560]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ea      	bne.n	8001464 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80a6 	beq.w	80015e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014a0:	4b84      	ldr	r3, [pc, #528]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2b4>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x2b6>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00d      	beq.n	80014d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b7f      	ldr	r3, [pc, #508]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	4a7e      	ldr	r2, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c2:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	4b79      	ldr	r3, [pc, #484]	@ (80016b8 <HAL_RCC_OscConfig+0x4bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014de:	4b76      	ldr	r3, [pc, #472]	@ (80016b8 <HAL_RCC_OscConfig+0x4bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a75      	ldr	r2, [pc, #468]	@ (80016b8 <HAL_RCC_OscConfig+0x4bc>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb27 	bl	8000b3c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb23 	bl	8000b3c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e183      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001504:	4b6c      	ldr	r3, [pc, #432]	@ (80016b8 <HAL_RCC_OscConfig+0x4bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_RCC_OscConfig+0x32e>
 8001518:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a65      	ldr	r2, [pc, #404]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001528:	e024      	b.n	8001574 <HAL_RCC_OscConfig+0x378>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d110      	bne.n	8001554 <HAL_RCC_OscConfig+0x358>
 8001532:	4b60      	ldr	r3, [pc, #384]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001538:	4a5e      	ldr	r2, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001548:	4a5a      	ldr	r2, [pc, #360]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001552:	e00f      	b.n	8001574 <HAL_RCC_OscConfig+0x378>
 8001554:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	4a56      	ldr	r2, [pc, #344]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001564:	4b53      	ldr	r3, [pc, #332]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800156a:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d016      	beq.n	80015aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fade 	bl	8000b3c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fada 	bl	8000b3c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e138      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159a:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ed      	beq.n	8001584 <HAL_RCC_OscConfig+0x388>
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fac7 	bl	8000b3c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fac3 	bl	8000b3c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e121      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c8:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80015ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ed      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	4a34      	ldr	r2, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 80015fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001602:	4a2c      	ldr	r2, [pc, #176]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fa96 	bl	8000b3c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001614:	f7ff fa92 	bl	8000b3c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e0f2      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x418>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa79 	bl	8000b3c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800164e:	f7ff fa75 	bl	8000b3c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0d5      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80c9 	beq.w	800180a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b0c      	cmp	r3, #12
 8001682:	f000 8083 	beq.w	800178c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d15e      	bne.n	800174c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fa4f 	bl	8000b3c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	e00c      	b.n	80016bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fa4b 	bl	8000b3c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d905      	bls.n	80016bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0ab      	b.n	800180c <HAL_RCC_OscConfig+0x610>
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016bc:	4b55      	ldr	r3, [pc, #340]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ec      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b52      	ldr	r3, [pc, #328]	@ (8001818 <HAL_RCC_OscConfig+0x61c>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6a11      	ldr	r1, [r2, #32]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016d8:	3a01      	subs	r2, #1
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	4311      	orrs	r1, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80016e2:	0212      	lsls	r2, r2, #8
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016ea:	0852      	lsrs	r2, r2, #1
 80016ec:	3a01      	subs	r2, #1
 80016ee:	0552      	lsls	r2, r2, #21
 80016f0:	4311      	orrs	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016f6:	0852      	lsrs	r2, r2, #1
 80016f8:	3a01      	subs	r2, #1
 80016fa:	0652      	lsls	r2, r2, #25
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001702:	06d2      	lsls	r2, r2, #27
 8001704:	430a      	orrs	r2, r1
 8001706:	4943      	ldr	r1, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a40      	ldr	r2, [pc, #256]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a3d      	ldr	r2, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fa0a 	bl	8000b3c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fa06 	bl	8000b3c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e066      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x530>
 800174a:	e05e      	b.n	800180a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff f9f0 	bl	8000b3c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f9ec 	bl	8000b3c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e04c      	b.n	800180c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800177e:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4924      	ldr	r1, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <HAL_RCC_OscConfig+0x620>)
 8001786:	4013      	ands	r3, r2
 8001788:	60cb      	str	r3, [r1, #12]
 800178a:	e03e      	b.n	800180a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e039      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001798:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <HAL_RCC_OscConfig+0x618>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d12c      	bne.n	8001806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d123      	bne.n	8001806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d11b      	bne.n	8001806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d113      	bne.n	8001806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000
 8001818:	019f800c 	.word	0x019f800c
 800181c:	feeefffc 	.word	0xfeeefffc

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e11e      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b91      	ldr	r3, [pc, #580]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 020f 	bic.w	r2, r3, #15
 800184e:	498c      	ldr	r1, [pc, #560]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b8a      	ldr	r3, [pc, #552]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e106      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d073      	beq.n	800195c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d129      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0f4      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800188c:	f000 f9d0 	bl	8001c30 <RCC_GetSysClockFreqFromPLLSource>
 8001890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4a7c      	ldr	r2, [pc, #496]	@ (8001a88 <HAL_RCC_ClockConfig+0x268>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d93f      	bls.n	800191a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800189a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d033      	beq.n	800191a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d12f      	bne.n	800191a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ba:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018c2:	4a70      	ldr	r2, [pc, #448]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e024      	b.n	800191a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0c6      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e8:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0be      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018f8:	f000 f8ce 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a61      	ldr	r2, [pc, #388]	@ (8001a88 <HAL_RCC_ClockConfig+0x268>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d909      	bls.n	800191a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001906:	4b5f      	ldr	r3, [pc, #380]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800190e:	4a5d      	ldr	r2, [pc, #372]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001914:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4957      	ldr	r1, [pc, #348]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192c:	f7ff f906 	bl	8000b3c <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff f902 	bl	8000b3c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e095      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b43      	ldr	r3, [pc, #268]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a42      	ldr	r2, [pc, #264]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800197a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800197e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800198c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001994:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001996:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800199a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4936      	ldr	r1, [pc, #216]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b80      	cmp	r3, #128	@ 0x80
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019b6:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4a32      	ldr	r2, [pc, #200]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d21d      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 020f 	bic.w	r2, r3, #15
 80019d8:	4929      	ldr	r1, [pc, #164]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019e0:	f7ff f8ac 	bl	8000b3c <HAL_GetTick>
 80019e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7ff f8a8 	bl	8000b3c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e03b      	b.n	8001a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1ed      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4917      	ldr	r1, [pc, #92]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490f      	ldr	r1, [pc, #60]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4a:	f000 f825 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <HAL_RCC_ClockConfig+0x26c>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_RCC_ClockConfig+0x270>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_RCC_ClockConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ff64 	bl	800093c <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	04c4b400 	.word	0x04c4b400
 8001a8c:	08005250 	.word	0x08005250
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	20000010 	.word	0x20000010

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e047      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001abc:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e03e      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d136      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aec:	4a1a      	ldr	r2, [pc, #104]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af6:	68d2      	ldr	r2, [r2, #12]
 8001af8:	0a12      	lsrs	r2, r2, #8
 8001afa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
      break;
 8001b04:	e00c      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b06:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	0a12      	lsrs	r2, r2, #8
 8001b14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0e5b      	lsrs	r3, r3, #25
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e001      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b40:	693b      	ldr	r3, [r7, #16]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	02dc6c00 	.word	0x02dc6c00

08001b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4904      	ldr	r1, [pc, #16]	@ (8001b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08005260 	.word	0x08005260

08001ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ba4:	f7ff ffda 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0adb      	lsrs	r3, r3, #11
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4904      	ldr	r1, [pc, #16]	@ (8001bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08005260 	.word	0x08005260

08001bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	220f      	movs	r2, #15
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_RCC_GetClockConfig+0x60>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40022000 	.word	0x40022000

08001c30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10c      	bne.n	8001c6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c54:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c5e:	68d2      	ldr	r2, [r2, #12]
 8001c60:	0a12      	lsrs	r2, r2, #8
 8001c62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
    break;
 8001c6c:	e00c      	b.n	8001c88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c6e:	4a12      	ldr	r2, [pc, #72]	@ (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	0a12      	lsrs	r2, r2, #8
 8001c7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    break;
 8001c86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0e5b      	lsrs	r3, r3, #25
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	02dc6c00 	.word	0x02dc6c00
 8001cb8:	00f42400 	.word	0x00f42400

08001cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8098 	beq.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	4a3f      	ldr	r2, [pc, #252]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d06:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a39      	ldr	r2, [pc, #228]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d12:	f7fe ff13 	bl	8000b3c <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d18:	e009      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7fe ff0f 	bl	8000b3c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d902      	bls.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	74fb      	strb	r3, [r7, #19]
        break;
 8001d2c:	e005      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d2e:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0ef      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d3a:	7cfb      	ldrb	r3, [r7, #19]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d159      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01e      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d68:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d88:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fecf 	bl	8000b3c <HAL_GetTick>
 8001d9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da0:	e00b      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe fecb 	bl	8000b3c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d902      	bls.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	74fb      	strb	r3, [r7, #19]
            break;
 8001db8:	e006      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ec      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	4903      	ldr	r1, [pc, #12]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001de4:	e008      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	74bb      	strb	r3, [r7, #18]
 8001dea:	e005      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df8:	7c7b      	ldrb	r3, [r7, #17]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4ba6      	ldr	r3, [pc, #664]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	4aa5      	ldr	r2, [pc, #660]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e16:	4ba0      	ldr	r3, [pc, #640]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1c:	f023 0203 	bic.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	499c      	ldr	r1, [pc, #624]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e38:	4b97      	ldr	r3, [pc, #604]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3e:	f023 020c 	bic.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4994      	ldr	r1, [pc, #592]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	498b      	ldr	r1, [pc, #556]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e7c:	4b86      	ldr	r3, [pc, #536]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	4983      	ldr	r1, [pc, #524]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	497a      	ldr	r1, [pc, #488]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec0:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4972      	ldr	r1, [pc, #456]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4969      	ldr	r1, [pc, #420]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f04:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4961      	ldr	r1, [pc, #388]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f26:	4b5c      	ldr	r3, [pc, #368]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	4958      	ldr	r1, [pc, #352]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f48:	4b53      	ldr	r3, [pc, #332]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	4950      	ldr	r1, [pc, #320]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4b4b      	ldr	r3, [pc, #300]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f80:	4b45      	ldr	r3, [pc, #276]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	4942      	ldr	r1, [pc, #264]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f9e:	d105      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fb8:	4b37      	ldr	r3, [pc, #220]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4934      	ldr	r1, [pc, #208]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fe2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff0:	4b29      	ldr	r3, [pc, #164]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffe:	4926      	ldr	r1, [pc, #152]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800201a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	4918      	ldr	r1, [pc, #96]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206e:	490a      	ldr	r1, [pc, #40]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800208c:	7cbb      	ldrb	r3, [r7, #18]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e049      	b.n	8002142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f841 	bl	800214a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 fa22 	bl	8002524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04a      	b.n	800220e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a21      	ldr	r2, [pc, #132]	@ (800221c <HAL_TIM_Base_Start_IT+0xbc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a2:	d013      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <HAL_TIM_Base_Start_IT+0xc0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <HAL_TIM_Base_Start_IT+0xc4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002228 <HAL_TIM_Base_Start_IT+0xc8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x6c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_TIM_Base_Start_IT+0xcc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d115      	bne.n	80021f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_TIM_Base_Start_IT+0xd0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d015      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d011      	beq.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	e008      	b.n	800220a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e000      	b.n	800220c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40013400 	.word	0x40013400
 800222c:	40014000 	.word	0x40014000
 8002230:	00010007 	.word	0x00010007

08002234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d020      	beq.n	8002298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0202 	mvn.w	r2, #2
 8002268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f931 	bl	80024e6 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f923 	bl	80024d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f934 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d020      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0204 	mvn.w	r2, #4
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f90b 	bl	80024e6 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8fd 	bl	80024d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f90e 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0208 	mvn.w	r2, #8
 8002300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8e5 	bl	80024e6 <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8d7 	bl	80024d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8e8 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2208      	movs	r2, #8
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8bf 	bl	80024e6 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8b1 	bl	80024d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8c2 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0201 	mvn.w	r2, #1
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fa34 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80023c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f951 	bl	8002670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00c      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f949 	bl	8002684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f87c 	bl	800250e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0220 	mvn.w	r2, #32
 8002432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f911 	bl	800265c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f91d 	bl	8002698 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f915 	bl	80026ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800249e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f90d 	bl	80026c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00c      	beq.n	80024ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80024c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f905 	bl	80026d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <TIM_Base_SetConfig+0x11c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00f      	beq.n	800255c <TIM_Base_SetConfig+0x38>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002542:	d00b      	beq.n	800255c <TIM_Base_SetConfig+0x38>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3f      	ldr	r2, [pc, #252]	@ (8002644 <TIM_Base_SetConfig+0x120>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <TIM_Base_SetConfig+0x38>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a3e      	ldr	r2, [pc, #248]	@ (8002648 <TIM_Base_SetConfig+0x124>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d003      	beq.n	800255c <TIM_Base_SetConfig+0x38>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a3d      	ldr	r2, [pc, #244]	@ (800264c <TIM_Base_SetConfig+0x128>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d108      	bne.n	800256e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a33      	ldr	r2, [pc, #204]	@ (8002640 <TIM_Base_SetConfig+0x11c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01b      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257c:	d017      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <TIM_Base_SetConfig+0x120>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a2f      	ldr	r2, [pc, #188]	@ (8002648 <TIM_Base_SetConfig+0x124>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00f      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a2e      	ldr	r2, [pc, #184]	@ (800264c <TIM_Base_SetConfig+0x128>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <TIM_Base_SetConfig+0x12c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <TIM_Base_SetConfig+0x130>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x8a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002658 <TIM_Base_SetConfig+0x134>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a16      	ldr	r2, [pc, #88]	@ (8002640 <TIM_Base_SetConfig+0x11c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00f      	beq.n	800260c <TIM_Base_SetConfig+0xe8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <TIM_Base_SetConfig+0x128>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00b      	beq.n	800260c <TIM_Base_SetConfig+0xe8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a16      	ldr	r2, [pc, #88]	@ (8002650 <TIM_Base_SetConfig+0x12c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <TIM_Base_SetConfig+0xe8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a15      	ldr	r2, [pc, #84]	@ (8002654 <TIM_Base_SetConfig+0x130>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <TIM_Base_SetConfig+0xe8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <TIM_Base_SetConfig+0x134>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f023 0201 	bic.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  }
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800
 800264c:	40013400 	.word	0x40013400
 8002650:	40014000 	.word	0x40014000
 8002654:	40014400 	.word	0x40014400
 8002658:	40014800 	.word	0x40014800

0800265c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e042      	b.n	8002780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe f8bd 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2224      	movs	r2, #36	@ 0x24
 8002716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 faf4 	bl	8002d20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f825 	bl	8002788 <UART_SetConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e01b      	b.n	8002780 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fb73 	bl	8002e64 <UART_CheckIdleState>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b08c      	sub	sp, #48	@ 0x30
 800278e:	af00      	add	r7, sp, #0
 8002790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4bab      	ldr	r3, [pc, #684]	@ (8002a64 <UART_SetConfig+0x2dc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4aa0      	ldr	r2, [pc, #640]	@ (8002a68 <UART_SetConfig+0x2e0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f0:	4313      	orrs	r3, r2
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80027fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	f023 010f 	bic.w	r1, r3, #15
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a91      	ldr	r2, [pc, #580]	@ (8002a6c <UART_SetConfig+0x2e4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d125      	bne.n	8002878 <UART_SetConfig+0xf0>
 800282c:	4b90      	ldr	r3, [pc, #576]	@ (8002a70 <UART_SetConfig+0x2e8>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b03      	cmp	r3, #3
 8002838:	d81a      	bhi.n	8002870 <UART_SetConfig+0xe8>
 800283a:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <UART_SetConfig+0xb8>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002851 	.word	0x08002851
 8002844:	08002861 	.word	0x08002861
 8002848:	08002859 	.word	0x08002859
 800284c:	08002869 	.word	0x08002869
 8002850:	2301      	movs	r3, #1
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002856:	e0d6      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002858:	2302      	movs	r3, #2
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285e:	e0d2      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002860:	2304      	movs	r3, #4
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002866:	e0ce      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002868:	2308      	movs	r3, #8
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286e:	e0ca      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002870:	2310      	movs	r3, #16
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002876:	e0c6      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7d      	ldr	r2, [pc, #500]	@ (8002a74 <UART_SetConfig+0x2ec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d138      	bne.n	80028f4 <UART_SetConfig+0x16c>
 8002882:	4b7b      	ldr	r3, [pc, #492]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d82d      	bhi.n	80028ec <UART_SetConfig+0x164>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <UART_SetConfig+0x110>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028cd 	.word	0x080028cd
 800289c:	080028ed 	.word	0x080028ed
 80028a0:	080028ed 	.word	0x080028ed
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028ed 	.word	0x080028ed
 80028b4:	080028ed 	.word	0x080028ed
 80028b8:	080028d5 	.word	0x080028d5
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028ed 	.word	0x080028ed
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028e5 	.word	0x080028e5
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d2:	e098      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028d4:	2302      	movs	r3, #2
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028da:	e094      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028dc:	2304      	movs	r3, #4
 80028de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028e2:	e090      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028e4:	2308      	movs	r3, #8
 80028e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ea:	e08c      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028ec:	2310      	movs	r3, #16
 80028ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028f2:	e088      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002a78 <UART_SetConfig+0x2f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d125      	bne.n	800294a <UART_SetConfig+0x1c2>
 80028fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002908:	2b30      	cmp	r3, #48	@ 0x30
 800290a:	d016      	beq.n	800293a <UART_SetConfig+0x1b2>
 800290c:	2b30      	cmp	r3, #48	@ 0x30
 800290e:	d818      	bhi.n	8002942 <UART_SetConfig+0x1ba>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d00a      	beq.n	800292a <UART_SetConfig+0x1a2>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d814      	bhi.n	8002942 <UART_SetConfig+0x1ba>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <UART_SetConfig+0x19a>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d008      	beq.n	8002932 <UART_SetConfig+0x1aa>
 8002920:	e00f      	b.n	8002942 <UART_SetConfig+0x1ba>
 8002922:	2300      	movs	r3, #0
 8002924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002928:	e06d      	b.n	8002a06 <UART_SetConfig+0x27e>
 800292a:	2302      	movs	r3, #2
 800292c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002930:	e069      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002932:	2304      	movs	r3, #4
 8002934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002938:	e065      	b.n	8002a06 <UART_SetConfig+0x27e>
 800293a:	2308      	movs	r3, #8
 800293c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002940:	e061      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002942:	2310      	movs	r3, #16
 8002944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002948:	e05d      	b.n	8002a06 <UART_SetConfig+0x27e>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <UART_SetConfig+0x2f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d125      	bne.n	80029a0 <UART_SetConfig+0x218>
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800295e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002960:	d016      	beq.n	8002990 <UART_SetConfig+0x208>
 8002962:	2bc0      	cmp	r3, #192	@ 0xc0
 8002964:	d818      	bhi.n	8002998 <UART_SetConfig+0x210>
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d00a      	beq.n	8002980 <UART_SetConfig+0x1f8>
 800296a:	2b80      	cmp	r3, #128	@ 0x80
 800296c:	d814      	bhi.n	8002998 <UART_SetConfig+0x210>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <UART_SetConfig+0x1f0>
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d008      	beq.n	8002988 <UART_SetConfig+0x200>
 8002976:	e00f      	b.n	8002998 <UART_SetConfig+0x210>
 8002978:	2300      	movs	r3, #0
 800297a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800297e:	e042      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002980:	2302      	movs	r3, #2
 8002982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002986:	e03e      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002988:	2304      	movs	r3, #4
 800298a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800298e:	e03a      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002990:	2308      	movs	r3, #8
 8002992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002996:	e036      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002998:	2310      	movs	r3, #16
 800299a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800299e:	e032      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <UART_SetConfig+0x2e0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12a      	bne.n	8002a00 <UART_SetConfig+0x278>
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <UART_SetConfig+0x2e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029b8:	d01a      	beq.n	80029f0 <UART_SetConfig+0x268>
 80029ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029be:	d81b      	bhi.n	80029f8 <UART_SetConfig+0x270>
 80029c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029c4:	d00c      	beq.n	80029e0 <UART_SetConfig+0x258>
 80029c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ca:	d815      	bhi.n	80029f8 <UART_SetConfig+0x270>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <UART_SetConfig+0x250>
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d4:	d008      	beq.n	80029e8 <UART_SetConfig+0x260>
 80029d6:	e00f      	b.n	80029f8 <UART_SetConfig+0x270>
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029de:	e012      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029e6:	e00e      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029e8:	2304      	movs	r3, #4
 80029ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ee:	e00a      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029f0:	2308      	movs	r3, #8
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029f6:	e006      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029f8:	2310      	movs	r3, #16
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029fe:	e002      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002a00:	2310      	movs	r3, #16
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <UART_SetConfig+0x2e0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f040 80a8 	bne.w	8002b62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d834      	bhi.n	8002a84 <UART_SetConfig+0x2fc>
 8002a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0x298>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a45 	.word	0x08002a45
 8002a24:	08002a85 	.word	0x08002a85
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a85 	.word	0x08002a85
 8002a30:	08002a53 	.word	0x08002a53
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a85 	.word	0x08002a85
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a5b 	.word	0x08002a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a44:	f7ff f896 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a4a:	e021      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <UART_SetConfig+0x2f8>)
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a50:	e01e      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a52:	f7ff f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a58:	e01a      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a60:	e016      	b.n	8002a90 <UART_SetConfig+0x308>
 8002a62:	bf00      	nop
 8002a64:	cfff69f3 	.word	0xcfff69f3
 8002a68:	40008000 	.word	0x40008000
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40004800 	.word	0x40004800
 8002a7c:	40004c00 	.word	0x40004c00
 8002a80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 812a 	beq.w	8002cec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	4a9e      	ldr	r2, [pc, #632]	@ (8002d18 <UART_SetConfig+0x590>)
 8002a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d305      	bcc.n	8002ac8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d903      	bls.n	8002ad0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ace:	e10d      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	60fa      	str	r2, [r7, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	4a8e      	ldr	r2, [pc, #568]	@ (8002d18 <UART_SetConfig+0x590>)
 8002ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af2:	f7fd fb95 	bl	8000220 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	020b      	lsls	r3, r1, #8
 8002b08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b0c:	0202      	lsls	r2, r0, #8
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	6849      	ldr	r1, [r1, #4]
 8002b12:	0849      	lsrs	r1, r1, #1
 8002b14:	2000      	movs	r0, #0
 8002b16:	460c      	mov	r4, r1
 8002b18:	4605      	mov	r5, r0
 8002b1a:	eb12 0804 	adds.w	r8, r2, r4
 8002b1e:	eb43 0905 	adc.w	r9, r3, r5
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	469a      	mov	sl, r3
 8002b2a:	4693      	mov	fp, r2
 8002b2c:	4652      	mov	r2, sl
 8002b2e:	465b      	mov	r3, fp
 8002b30:	4640      	mov	r0, r8
 8002b32:	4649      	mov	r1, r9
 8002b34:	f7fd fb74 	bl	8000220 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b46:	d308      	bcc.n	8002b5a <UART_SetConfig+0x3d2>
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b4e:	d204      	bcs.n	8002b5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	e0c8      	b.n	8002cec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b60:	e0c4      	b.n	8002cec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6a:	d167      	bne.n	8002c3c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d828      	bhi.n	8002bc6 <UART_SetConfig+0x43e>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <UART_SetConfig+0x3f4>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002ba9 	.word	0x08002ba9
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	08002bc7 	.word	0x08002bc7
 8002b8c:	08002bb7 	.word	0x08002bb7
 8002b90:	08002bc7 	.word	0x08002bc7
 8002b94:	08002bc7 	.word	0x08002bc7
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002bbf 	.word	0x08002bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f7fe ffe8 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ba6:	e014      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7fe fffa 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bae:	e010      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d1c <UART_SetConfig+0x594>)
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bb4:	e00d      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7fe ff6f 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002bba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bbc:	e009      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bc4:	e005      	b.n	8002bd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8089 	beq.w	8002cec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <UART_SetConfig+0x590>)
 8002be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d916      	bls.n	8002c34 <UART_SetConfig+0x4ac>
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d212      	bcs.n	8002c34 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	8bfb      	ldrh	r3, [r7, #30]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	8bfa      	ldrh	r2, [r7, #30]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e05b      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c3a:	e057      	b.n	8002cec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d828      	bhi.n	8002c96 <UART_SetConfig+0x50e>
 8002c44:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <UART_SetConfig+0x4c4>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c81 	.word	0x08002c81
 8002c58:	08002c97 	.word	0x08002c97
 8002c5c:	08002c87 	.word	0x08002c87
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002c97 	.word	0x08002c97
 8002c6c:	08002c8f 	.word	0x08002c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7fe ff80 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c76:	e014      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7fe ff92 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c7e:	e010      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <UART_SetConfig+0x594>)
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c84:	e00d      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c86:	f7fe ff07 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c8c:	e009      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c94:	e005      	b.n	8002ca2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <UART_SetConfig+0x590>)
 8002cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	441a      	add	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d909      	bls.n	8002ce6 <UART_SetConfig+0x55e>
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd8:	d205      	bcs.n	8002ce6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e002      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002d08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	@ 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	08005268 	.word	0x08005268
 8002d1c:	00f42400 	.word	0x00f42400

08002d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e1e:	d10a      	bne.n	8002e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b098      	sub	sp, #96	@ 0x60
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e74:	f7fd fe62 	bl	8000b3c <HAL_GetTick>
 8002e78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d12f      	bne.n	8002ee8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f88e 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e6      	bne.n	8002ea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e063      	b.n	8002fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d149      	bne.n	8002f8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f857 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d03c      	beq.n	8002f8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e6      	bne.n	8002f10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f62:	61fa      	str	r2, [r7, #28]
 8002f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e012      	b.n	8002fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3758      	adds	r7, #88	@ 0x58
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc8:	e04f      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d04b      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fd fdb3 	bl	8000b3c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e04e      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d037      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b80      	cmp	r3, #128	@ 0x80
 8002ffe:	d034      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d031      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d110      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f838 	bl	8003092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2208      	movs	r2, #8
 8003026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e029      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003044:	d111      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800304e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f81e 	bl	8003092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e00f      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0a0      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b095      	sub	sp, #84	@ 0x54
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e6      	bne.n	800309a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3308      	adds	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	61fb      	str	r3, [r7, #28]
   return(result);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e3      	bne.n	80030cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d118      	bne.n	800313e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	60bb      	str	r3, [r7, #8]
   return(result);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 0310 	bic.w	r3, r3, #16
 8003120:	647b      	str	r3, [r7, #68]	@ 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	613b      	str	r3, [r7, #16]
   return(result);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e6      	bne.n	800310c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003152:	bf00      	nop
 8003154:	3754      	adds	r7, #84	@ 0x54
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_UARTEx_DisableFifoMode+0x16>
 8003170:	2302      	movs	r3, #2
 8003172:	e027      	b.n	80031c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	@ 0x24
 8003180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80031a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e02d      	b.n	8003244 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	@ 0x24
 80031f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f84f 	bl	80032c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003260:	2302      	movs	r3, #2
 8003262:	e02d      	b.n	80032c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f811 	bl	80032c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d108      	bne.n	80032ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032e8:	e031      	b.n	800334e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032ea:	2308      	movs	r3, #8
 80032ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032ee:	2308      	movs	r3, #8
 80032f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	0f5b      	lsrs	r3, r3, #29
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003312:	7bbb      	ldrb	r3, [r7, #14]
 8003314:	7b3a      	ldrb	r2, [r7, #12]
 8003316:	4911      	ldr	r1, [pc, #68]	@ (800335c <UARTEx_SetNbDataToProcess+0x94>)
 8003318:	5c8a      	ldrb	r2, [r1, r2]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800331e:	7b3a      	ldrb	r2, [r7, #12]
 8003320:	490f      	ldr	r1, [pc, #60]	@ (8003360 <UARTEx_SetNbDataToProcess+0x98>)
 8003322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003324:	fb93 f3f2 	sdiv	r3, r3, r2
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	7b7a      	ldrb	r2, [r7, #13]
 8003334:	4909      	ldr	r1, [pc, #36]	@ (800335c <UARTEx_SetNbDataToProcess+0x94>)
 8003336:	5c8a      	ldrb	r2, [r1, r2]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800333c:	7b7a      	ldrb	r2, [r7, #13]
 800333e:	4908      	ldr	r1, [pc, #32]	@ (8003360 <UARTEx_SetNbDataToProcess+0x98>)
 8003340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003342:	fb93 f3f2 	sdiv	r3, r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	08005280 	.word	0x08005280
 8003360:	08005288 	.word	0x08005288

08003364 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	2b84      	cmp	r3, #132	@ 0x84
 8003378:	d005      	beq.n	8003386 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800337a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	3303      	adds	r3, #3
 8003384:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003398:	f000 fcc4 	bl	8003d24 <vTaskStartScheduler>
  
  return osOK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685c      	ldr	r4, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033b8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ffcf 	bl	8003364 <makeFreeRtosPriority>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4632      	mov	r2, r6
 80033d4:	4629      	mov	r1, r5
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 fb22 	bl	8003a20 <xTaskCreate>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <osDelay+0x16>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	e000      	b.n	8003408 <osDelay+0x18>
 8003406:	2301      	movs	r3, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fc55 	bl	8003cb8 <vTaskDelay>
  
  return osOK;
 800340e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f103 0208 	add.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f103 0208 	add.w	r2, r3, #8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f103 0208 	add.w	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e00c      	b.n	80034f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3308      	adds	r3, #8
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e002      	b.n	80034e8 <vListInsert+0x2e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d2f6      	bcs.n	80034e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6852      	ldr	r2, [r2, #4]
 800354c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d103      	bne.n	8003560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1e5a      	subs	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035ac:	f001 fa74 	bl	8004a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	3b01      	subs	r3, #1
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	441a      	add	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	22ff      	movs	r2, #255	@ 0xff
 80035f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01a      	beq.n	8003640 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3310      	adds	r3, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fdca 	bl	80041a8 <xTaskRemoveFromEventList>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <xQueueGenericReset+0xd0>)
 800361c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	e009      	b.n	8003640 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3310      	adds	r3, #16
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fef1 	bl	8003418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3324      	adds	r3, #36	@ 0x24
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff feec 	bl	8003418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003640:	f001 fa5c 	bl	8004afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	@ 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	613b      	str	r3, [r7, #16]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3348      	adds	r3, #72	@ 0x48
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fae2 	bl	8004c58 <pvPortMalloc>
 8003694:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3348      	adds	r3, #72	@ 0x48
 80036a4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f805 	bl	80036c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036b8:	69bb      	ldr	r3, [r7, #24]
	}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036f0:	2101      	movs	r1, #1
 80036f2:	69b8      	ldr	r0, [r7, #24]
 80036f4:	f7ff ff44 	bl	8003580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	@ 0x38
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003712:	2300      	movs	r3, #0
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	623b      	str	r3, [r7, #32]
}
 800372e:	bf00      	nop
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61fb      	str	r3, [r7, #28]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003754:	f000 fece 	bl	80044f4 <xTaskGetSchedulerState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xQueueSemaphoreTake+0x64>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xQueueSemaphoreTake+0x68>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xQueueSemaphoreTake+0x6a>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	61bb      	str	r3, [r7, #24]
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003786:	f001 f987 	bl	8004a98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d024      	beq.n	80037e0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	1e5a      	subs	r2, r3, #1
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037a6:	f000 ffc9 	bl	800473c <pvTaskIncrementMutexHeldCount>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00f      	beq.n	80037d8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	3310      	adds	r3, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fcf3 	bl	80041a8 <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037c8:	4b54      	ldr	r3, [pc, #336]	@ (800391c <xQueueSemaphoreTake+0x21c>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037d8:	f001 f990 	bl	8004afc <vPortExitCritical>
				return pdPASS;
 80037dc:	2301      	movs	r3, #1
 80037de:	e098      	b.n	8003912 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d112      	bne.n	800380c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	617b      	str	r3, [r7, #20]
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003804:	f001 f97a 	bl	8004afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003808:	2300      	movs	r3, #0
 800380a:	e082      	b.n	8003912 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800380c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fd2a 	bl	8004270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003820:	f001 f96c 	bl	8004afc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003824:	f000 fad0 	bl	8003dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003828:	f001 f936 	bl	8004a98 <vPortEnterCritical>
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003832:	b25b      	sxtb	r3, r3
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d103      	bne.n	8003842 <xQueueSemaphoreTake+0x142>
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003848:	b25b      	sxtb	r3, r3
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d103      	bne.n	8003858 <xQueueSemaphoreTake+0x158>
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003858:	f001 f950 	bl	8004afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385c:	463a      	mov	r2, r7
 800385e:	f107 030c 	add.w	r3, r7, #12
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fd19 	bl	800429c <xTaskCheckForTimeOut>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d132      	bne.n	80038d6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003872:	f000 f8bf 	bl	80039f4 <prvIsQueueEmpty>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d026      	beq.n	80038ca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003884:	f001 f908 	bl	8004a98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fe4f 	bl	8004530 <xTaskPriorityInherit>
 8003892:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003894:	f001 f932 	bl	8004afc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	3324      	adds	r3, #36	@ 0x24
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fc5b 	bl	800415c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038a8:	f000 f852 	bl	8003950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038ac:	f000 fa9a 	bl	8003de4 <xTaskResumeAll>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f af67 	bne.w	8003786 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80038b8:	4b18      	ldr	r3, [pc, #96]	@ (800391c <xQueueSemaphoreTake+0x21c>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	e75d      	b.n	8003786 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80038ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038cc:	f000 f840 	bl	8003950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038d0:	f000 fa88 	bl	8003de4 <xTaskResumeAll>
 80038d4:	e757      	b.n	8003786 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80038d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038d8:	f000 f83a 	bl	8003950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038dc:	f000 fa82 	bl	8003de4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038e2:	f000 f887 	bl	80039f4 <prvIsQueueEmpty>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f43f af4c 	beq.w	8003786 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80038f4:	f001 f8d0 	bl	8004a98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80038f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038fa:	f000 f811 	bl	8003920 <prvGetDisinheritPriorityAfterTimeout>
 80038fe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe88 	bl	800461c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800390c:	f001 f8f6 	bl	8004afc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003910:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003912:	4618      	mov	r0, r3
 8003914:	3738      	adds	r7, #56	@ 0x38
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e001      	b.n	8003942 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003942:	68fb      	ldr	r3, [r7, #12]
	}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003958:	f001 f89e 	bl	8004a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003964:	e011      	b.n	800398a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3324      	adds	r3, #36	@ 0x24
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc18 	bl	80041a8 <xTaskRemoveFromEventList>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800397e:	f000 fcf1 	bl	8004364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3b01      	subs	r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	dce9      	bgt.n	8003966 <prvUnlockQueue+0x16>
 8003992:	e000      	b.n	8003996 <prvUnlockQueue+0x46>
					break;
 8003994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800399e:	f001 f8ad 	bl	8004afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039a2:	f001 f879 	bl	8004a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039ae:	e011      	b.n	80039d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3310      	adds	r3, #16
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fbf3 	bl	80041a8 <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039c8:	f000 fccc 	bl	8004364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039cc:	7bbb      	ldrb	r3, [r7, #14]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dce9      	bgt.n	80039b0 <prvUnlockQueue+0x60>
 80039dc:	e000      	b.n	80039e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	22ff      	movs	r2, #255	@ 0xff
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039e8:	f001 f888 	bl	8004afc <vPortExitCritical>
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039fc:	f001 f84c 	bl	8004a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e001      	b.n	8003a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a12:	f001 f873 	bl	8004afc <vPortExitCritical>

	return xReturn;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	@ 0x30
 8003a24:	af04      	add	r7, sp, #16
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 f90f 	bl	8004c58 <pvPortMalloc>
 8003a3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a42:	20a0      	movs	r0, #160	@ 0xa0
 8003a44:	f001 f908 	bl	8004c58 <pvPortMalloc>
 8003a48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a56:	e005      	b.n	8003a64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f001 f9cb 	bl	8004df4 <vPortFree>
 8003a5e:	e001      	b.n	8003a64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d013      	beq.n	8003a92 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f80f 	bl	8003aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a86:	69f8      	ldr	r0, [r7, #28]
 8003a88:	f000 f8ac 	bl	8003be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e002      	b.n	8003a98 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a98:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003abc:	3b01      	subs	r3, #1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f023 0307 	bic.w	r3, r3, #7
 8003aca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	617b      	str	r3, [r7, #20]
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01f      	beq.n	8003b34 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e012      	b.n	8003b20 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	7819      	ldrb	r1, [r3, #0]
 8003b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	3334      	adds	r3, #52	@ 0x34
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d9e9      	bls.n	8003afa <prvInitialiseNewTask+0x56>
 8003b26:	e000      	b.n	8003b2a <prvInitialiseNewTask+0x86>
			{
				break;
 8003b28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b32:	e003      	b.n	8003b3c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d901      	bls.n	8003b46 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b42:	2306      	movs	r3, #6
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fc7b 	bl	8003458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	3318      	adds	r3, #24
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fc76 	bl	8003458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b74:	f1c3 0207 	rsb	r2, r3, #7
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	334c      	adds	r3, #76	@ 0x4c
 8003b96:	224c      	movs	r2, #76	@ 0x4c
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fa4a 	bl	8005034 <memset>
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <prvInitialiseNewTask+0x134>)
 8003ba4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <prvInitialiseNewTask+0x138>)
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	4a0c      	ldr	r2, [pc, #48]	@ (8003be0 <prvInitialiseNewTask+0x13c>)
 8003bb0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	69b8      	ldr	r0, [r7, #24]
 8003bb8:	f000 fe3a 	bl	8004830 <pxPortInitialiseStack>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bce:	bf00      	nop
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000ec8 	.word	0x20000ec8
 8003bdc:	20000f30 	.word	0x20000f30
 8003be0:	20000f98 	.word	0x20000f98

08003be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bec:	f000 ff54 	bl	8004a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a29      	ldr	r2, [pc, #164]	@ (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c02:	4a27      	ldr	r2, [pc, #156]	@ (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c08:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <prvAddNewTaskToReadyList+0xb8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d110      	bne.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c10:	f000 fbcc 	bl	80043ac <prvInitialiseTaskLists>
 8003c14:	e00d      	b.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d802      	bhi.n	8003c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <prvAddNewTaskToReadyList+0xc4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <prvAddNewTaskToReadyList+0xc4>)
 8003c3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <prvAddNewTaskToReadyList+0xc8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <prvAddNewTaskToReadyList+0xc8>)
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <prvAddNewTaskToReadyList+0xcc>)
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7ff fc04 	bl	8003472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c6a:	f000 ff47 	bl	8004afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <prvAddNewTaskToReadyList+0xbc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d207      	bcs.n	8003c94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <prvAddNewTaskToReadyList+0xd0>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000274 	.word	0x20000274
 8003ca0:	20000174 	.word	0x20000174
 8003ca4:	20000280 	.word	0x20000280
 8003ca8:	20000290 	.word	0x20000290
 8003cac:	2000027c 	.word	0x2000027c
 8003cb0:	20000178 	.word	0x20000178
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <vTaskDelay+0x64>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <vTaskDelay+0x32>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cea:	f000 f86d 	bl	8003dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fd37 	bl	8004764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cf6:	f000 f875 	bl	8003de4 <xTaskResumeAll>
 8003cfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <vTaskDelay+0x68>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000029c 	.word	0x2000029c
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <vTaskStartScheduler+0x84>)
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2300      	movs	r3, #0
 8003d34:	2280      	movs	r2, #128	@ 0x80
 8003d36:	491d      	ldr	r1, [pc, #116]	@ (8003dac <vTaskStartScheduler+0x88>)
 8003d38:	481d      	ldr	r0, [pc, #116]	@ (8003db0 <vTaskStartScheduler+0x8c>)
 8003d3a:	f7ff fe71 	bl	8003a20 <xTaskCreate>
 8003d3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d11b      	bne.n	8003d7e <vTaskStartScheduler+0x5a>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	60bb      	str	r3, [r7, #8]
}
 8003d58:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d5a:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <vTaskStartScheduler+0x90>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	334c      	adds	r3, #76	@ 0x4c
 8003d60:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <vTaskStartScheduler+0x94>)
 8003d62:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d64:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <vTaskStartScheduler+0x98>)
 8003d66:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <vTaskStartScheduler+0x9c>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d72:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <vTaskStartScheduler+0xa0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d78:	f000 fdea 	bl	8004950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d7c:	e00f      	b.n	8003d9e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d10b      	bne.n	8003d9e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	607b      	str	r3, [r7, #4]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <vTaskStartScheduler+0x76>
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000298 	.word	0x20000298
 8003dac:	08005248 	.word	0x08005248
 8003db0:	0800437d 	.word	0x0800437d
 8003db4:	20000174 	.word	0x20000174
 8003db8:	2000001c 	.word	0x2000001c
 8003dbc:	20000294 	.word	0x20000294
 8003dc0:	20000280 	.word	0x20000280
 8003dc4:	20000278 	.word	0x20000278

08003dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <vTaskSuspendAll+0x18>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	4a03      	ldr	r2, [pc, #12]	@ (8003de0 <vTaskSuspendAll+0x18>)
 8003dd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	2000029c 	.word	0x2000029c

08003de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003df2:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <xTaskResumeAll+0x118>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <xTaskResumeAll+0x2e>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	603b      	str	r3, [r7, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	e7fd      	b.n	8003e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e12:	f000 fe41 	bl	8004a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e16:	4b39      	ldr	r3, [pc, #228]	@ (8003efc <xTaskResumeAll+0x118>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	4a37      	ldr	r2, [pc, #220]	@ (8003efc <xTaskResumeAll+0x118>)
 8003e1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <xTaskResumeAll+0x118>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d161      	bne.n	8003eec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e28:	4b35      	ldr	r3, [pc, #212]	@ (8003f00 <xTaskResumeAll+0x11c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05d      	beq.n	8003eec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e30:	e02e      	b.n	8003e90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <xTaskResumeAll+0x120>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3318      	adds	r3, #24
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fb74 	bl	800352c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fb6f 	bl	800352c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	2201      	movs	r2, #1
 8003e54:	409a      	lsls	r2, r3
 8003e56:	4b2c      	ldr	r3, [pc, #176]	@ (8003f08 <xTaskResumeAll+0x124>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f08 <xTaskResumeAll+0x124>)
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4a27      	ldr	r2, [pc, #156]	@ (8003f0c <xTaskResumeAll+0x128>)
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7ff fafb 	bl	8003472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <xTaskResumeAll+0x12c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e8a:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <xTaskResumeAll+0x130>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e90:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <xTaskResumeAll+0x120>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1cc      	bne.n	8003e32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e9e:	f000 fb09 	bl	80044b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <xTaskResumeAll+0x134>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eae:	f000 f837 	bl	8003f20 <xTaskIncrementTick>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003eb8:	4b16      	ldr	r3, [pc, #88]	@ (8003f14 <xTaskResumeAll+0x130>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f1      	bne.n	8003eae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003eca:	4b13      	ldr	r3, [pc, #76]	@ (8003f18 <xTaskResumeAll+0x134>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ed0:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <xTaskResumeAll+0x130>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <xTaskResumeAll+0x138>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eec:	f000 fe06 	bl	8004afc <vPortExitCritical>

	return xAlreadyYielded;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000029c 	.word	0x2000029c
 8003f00:	20000274 	.word	0x20000274
 8003f04:	20000234 	.word	0x20000234
 8003f08:	2000027c 	.word	0x2000027c
 8003f0c:	20000178 	.word	0x20000178
 8003f10:	20000174 	.word	0x20000174
 8003f14:	20000288 	.word	0x20000288
 8003f18:	20000284 	.word	0x20000284
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004068 <xTaskIncrementTick+0x148>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 808f 	bne.w	8004052 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f34:	4b4d      	ldr	r3, [pc, #308]	@ (800406c <xTaskIncrementTick+0x14c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800406c <xTaskIncrementTick+0x14c>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d121      	bne.n	8003f8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f48:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <xTaskIncrementTick+0x150>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	603b      	str	r3, [r7, #0]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xTaskIncrementTick+0x46>
 8003f6a:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <xTaskIncrementTick+0x150>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <xTaskIncrementTick+0x154>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3e      	ldr	r2, [pc, #248]	@ (8004070 <xTaskIncrementTick+0x150>)
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <xTaskIncrementTick+0x154>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004078 <xTaskIncrementTick+0x158>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a3c      	ldr	r2, [pc, #240]	@ (8004078 <xTaskIncrementTick+0x158>)
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	f000 fa94 	bl	80044b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <xTaskIncrementTick+0x15c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d348      	bcc.n	8004028 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <xTaskIncrementTick+0x15c>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
					break;
 8003fa8:	e03e      	b.n	8004028 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <xTaskIncrementTick+0x150>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d203      	bcs.n	8003fca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800407c <xTaskIncrementTick+0x15c>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fc8:	e02e      	b.n	8004028 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff faac 	bl	800352c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff faa3 	bl	800352c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	2201      	movs	r2, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <xTaskIncrementTick+0x160>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <xTaskIncrementTick+0x160>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <xTaskIncrementTick+0x164>)
 8004006:	441a      	add	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f7ff fa2f 	bl	8003472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <xTaskIncrementTick+0x168>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	429a      	cmp	r2, r3
 8004020:	d3b9      	bcc.n	8003f96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004026:	e7b6      	b.n	8003f96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <xTaskIncrementTick+0x168>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402e:	4915      	ldr	r1, [pc, #84]	@ (8004084 <xTaskIncrementTick+0x164>)
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d901      	bls.n	8004044 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <xTaskIncrementTick+0x16c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e004      	b.n	800405c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004052:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <xTaskIncrementTick+0x170>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	4a0d      	ldr	r2, [pc, #52]	@ (8004090 <xTaskIncrementTick+0x170>)
 800405a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800405c:	697b      	ldr	r3, [r7, #20]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	2000029c 	.word	0x2000029c
 800406c:	20000278 	.word	0x20000278
 8004070:	2000022c 	.word	0x2000022c
 8004074:	20000230 	.word	0x20000230
 8004078:	2000028c 	.word	0x2000028c
 800407c:	20000294 	.word	0x20000294
 8004080:	2000027c 	.word	0x2000027c
 8004084:	20000178 	.word	0x20000178
 8004088:	20000174 	.word	0x20000174
 800408c:	20000288 	.word	0x20000288
 8004090:	20000284 	.word	0x20000284

08004094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800409a:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <vTaskSwitchContext+0xb0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <vTaskSwitchContext+0xb4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040a8:	e045      	b.n	8004136 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80040aa:	4b27      	ldr	r3, [pc, #156]	@ (8004148 <vTaskSwitchContext+0xb4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b26      	ldr	r3, [pc, #152]	@ (800414c <vTaskSwitchContext+0xb8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	f1c3 031f 	rsb	r3, r3, #31
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	4922      	ldr	r1, [pc, #136]	@ (8004150 <vTaskSwitchContext+0xbc>)
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	607b      	str	r3, [r7, #4]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <vTaskSwitchContext+0x5a>
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <vTaskSwitchContext+0xbc>)
 80040fe:	4413      	add	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3308      	adds	r3, #8
 8004114:	429a      	cmp	r2, r3
 8004116:	d104      	bne.n	8004122 <vTaskSwitchContext+0x8e>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <vTaskSwitchContext+0xc0>)
 800412a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <vTaskSwitchContext+0xc0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	334c      	adds	r3, #76	@ 0x4c
 8004132:	4a09      	ldr	r2, [pc, #36]	@ (8004158 <vTaskSwitchContext+0xc4>)
 8004134:	6013      	str	r3, [r2, #0]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	2000029c 	.word	0x2000029c
 8004148:	20000288 	.word	0x20000288
 800414c:	2000027c 	.word	0x2000027c
 8004150:	20000178 	.word	0x20000178
 8004154:	20000174 	.word	0x20000174
 8004158:	2000001c 	.word	0x2000001c

0800415c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004184:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <vTaskPlaceOnEventList+0x48>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3318      	adds	r3, #24
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff f994 	bl	80034ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004192:	2101      	movs	r1, #1
 8004194:	6838      	ldr	r0, [r7, #0]
 8004196:	f000 fae5 	bl	8004764 <prvAddCurrentTaskToDelayedList>
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000174 	.word	0x20000174

080041a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60fb      	str	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3318      	adds	r3, #24
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff f9a6 	bl	800352c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <xTaskRemoveFromEventList+0xb0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d11c      	bne.n	8004222 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f99d 	bl	800352c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	4b18      	ldr	r3, [pc, #96]	@ (800425c <xTaskRemoveFromEventList+0xb4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <xTaskRemoveFromEventList+0xb4>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <xTaskRemoveFromEventList+0xb8>)
 8004212:	441a      	add	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f7ff f929 	bl	8003472 <vListInsertEnd>
 8004220:	e005      	b.n	800422e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3318      	adds	r3, #24
 8004226:	4619      	mov	r1, r3
 8004228:	480e      	ldr	r0, [pc, #56]	@ (8004264 <xTaskRemoveFromEventList+0xbc>)
 800422a:	f7ff f922 	bl	8003472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <xTaskRemoveFromEventList+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	429a      	cmp	r2, r3
 800423a:	d905      	bls.n	8004248 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <xTaskRemoveFromEventList+0xc4>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e001      	b.n	800424c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800424c:	697b      	ldr	r3, [r7, #20]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2000029c 	.word	0x2000029c
 800425c:	2000027c 	.word	0x2000027c
 8004260:	20000178 	.word	0x20000178
 8004264:	20000234 	.word	0x20000234
 8004268:	20000174 	.word	0x20000174
 800426c:	20000288 	.word	0x20000288

08004270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <vTaskInternalSetTimeOutState+0x24>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <vTaskInternalSetTimeOutState+0x28>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	2000028c 	.word	0x2000028c
 8004298:	20000278 	.word	0x20000278

0800429c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60fb      	str	r3, [r7, #12]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80042e2:	f000 fbd9 	bl	8004a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042e6:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <xTaskCheckForTimeOut+0xc0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d102      	bne.n	8004306 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e023      	b.n	800434e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <xTaskCheckForTimeOut+0xc4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d007      	beq.n	8004322 <xTaskCheckForTimeOut+0x86>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e015      	b.n	800434e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	429a      	cmp	r2, r3
 800432a:	d20b      	bcs.n	8004344 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff99 	bl	8004270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e004      	b.n	800434e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800434a:	2301      	movs	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800434e:	f000 fbd5 	bl	8004afc <vPortExitCritical>

	return xReturn;
 8004352:	69fb      	ldr	r3, [r7, #28]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000278 	.word	0x20000278
 8004360:	2000028c 	.word	0x2000028c

08004364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <vTaskMissedYield+0x14>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	20000288 	.word	0x20000288

0800437c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004384:	f000 f852 	bl	800442c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <prvIdleTask+0x28>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d9f9      	bls.n	8004384 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <prvIdleTask+0x2c>)
 8004392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043a0:	e7f0      	b.n	8004384 <prvIdleTask+0x8>
 80043a2:	bf00      	nop
 80043a4:	20000178 	.word	0x20000178
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	e00c      	b.n	80043d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4a12      	ldr	r2, [pc, #72]	@ (800440c <prvInitialiseTaskLists+0x60>)
 80043c4:	4413      	add	r3, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f826 	bl	8003418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3301      	adds	r3, #1
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d9ef      	bls.n	80043b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043d8:	480d      	ldr	r0, [pc, #52]	@ (8004410 <prvInitialiseTaskLists+0x64>)
 80043da:	f7ff f81d 	bl	8003418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043de:	480d      	ldr	r0, [pc, #52]	@ (8004414 <prvInitialiseTaskLists+0x68>)
 80043e0:	f7ff f81a 	bl	8003418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043e4:	480c      	ldr	r0, [pc, #48]	@ (8004418 <prvInitialiseTaskLists+0x6c>)
 80043e6:	f7ff f817 	bl	8003418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043ea:	480c      	ldr	r0, [pc, #48]	@ (800441c <prvInitialiseTaskLists+0x70>)
 80043ec:	f7ff f814 	bl	8003418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043f0:	480b      	ldr	r0, [pc, #44]	@ (8004420 <prvInitialiseTaskLists+0x74>)
 80043f2:	f7ff f811 	bl	8003418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <prvInitialiseTaskLists+0x78>)
 80043f8:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <prvInitialiseTaskLists+0x64>)
 80043fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <prvInitialiseTaskLists+0x7c>)
 80043fe:	4a05      	ldr	r2, [pc, #20]	@ (8004414 <prvInitialiseTaskLists+0x68>)
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000178 	.word	0x20000178
 8004410:	20000204 	.word	0x20000204
 8004414:	20000218 	.word	0x20000218
 8004418:	20000234 	.word	0x20000234
 800441c:	20000248 	.word	0x20000248
 8004420:	20000260 	.word	0x20000260
 8004424:	2000022c 	.word	0x2000022c
 8004428:	20000230 	.word	0x20000230

0800442c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004432:	e019      	b.n	8004468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004434:	f000 fb30 	bl	8004a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <prvCheckTasksWaitingTermination+0x50>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f871 	bl	800352c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <prvCheckTasksWaitingTermination+0x54>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a0b      	ldr	r2, [pc, #44]	@ (8004480 <prvCheckTasksWaitingTermination+0x54>)
 8004452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <prvCheckTasksWaitingTermination+0x58>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3b01      	subs	r3, #1
 800445a:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <prvCheckTasksWaitingTermination+0x58>)
 800445c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800445e:	f000 fb4d 	bl	8004afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f810 	bl	8004488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004468:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <prvCheckTasksWaitingTermination+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e1      	bne.n	8004434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000248 	.word	0x20000248
 8004480:	20000274 	.word	0x20000274
 8004484:	2000025c 	.word	0x2000025c

08004488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	334c      	adds	r3, #76	@ 0x4c
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fdd5 	bl	8005044 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fca8 	bl	8004df4 <vPortFree>
			vPortFree( pxTCB );
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fca5 	bl	8004df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <prvResetNextTaskUnblockTime+0x38>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <prvResetNextTaskUnblockTime+0x3c>)
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044cc:	e008      	b.n	80044e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <prvResetNextTaskUnblockTime+0x38>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a04      	ldr	r2, [pc, #16]	@ (80044f0 <prvResetNextTaskUnblockTime+0x3c>)
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	2000022c 	.word	0x2000022c
 80044f0:	20000294 	.word	0x20000294

080044f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <xTaskGetSchedulerState+0x34>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004502:	2301      	movs	r3, #1
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	e008      	b.n	800451a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <xTaskGetSchedulerState+0x38>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004510:	2302      	movs	r3, #2
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e001      	b.n	800451a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800451a:	687b      	ldr	r3, [r7, #4]
	}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000280 	.word	0x20000280
 800452c:	2000029c 	.word	0x2000029c

08004530 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d05e      	beq.n	8004604 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454a:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <xTaskPriorityInherit+0xe0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d24e      	bcs.n	80045f2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db06      	blt.n	800456a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455c:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <xTaskPriorityInherit+0xe0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	f1c3 0207 	rsb	r2, r3, #7
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6959      	ldr	r1, [r3, #20]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a26      	ldr	r2, [pc, #152]	@ (8004614 <xTaskPriorityInherit+0xe4>)
 800457c:	4413      	add	r3, r2
 800457e:	4299      	cmp	r1, r3
 8004580:	d12f      	bne.n	80045e2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe ffd0 	bl	800352c <uxListRemove>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43da      	mvns	r2, r3
 800459e:	4b1e      	ldr	r3, [pc, #120]	@ (8004618 <xTaskPriorityInherit+0xe8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4013      	ands	r3, r2
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <xTaskPriorityInherit+0xe8>)
 80045a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <xTaskPriorityInherit+0xe0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	2201      	movs	r2, #1
 80045b8:	409a      	lsls	r2, r3
 80045ba:	4b17      	ldr	r3, [pc, #92]	@ (8004618 <xTaskPriorityInherit+0xe8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <xTaskPriorityInherit+0xe8>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a10      	ldr	r2, [pc, #64]	@ (8004614 <xTaskPriorityInherit+0xe4>)
 80045d2:	441a      	add	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7fe ff49 	bl	8003472 <vListInsertEnd>
 80045e0:	e004      	b.n	80045ec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <xTaskPriorityInherit+0xe0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e008      	b.n	8004604 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f6:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <xTaskPriorityInherit+0xe0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d201      	bcs.n	8004604 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004604:	68fb      	ldr	r3, [r7, #12]
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000174 	.word	0x20000174
 8004614:	20000178 	.word	0x20000178
 8004618:	2000027c 	.word	0x2000027c

0800461c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800462a:	2301      	movs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d079      	beq.n	8004728 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d902      	bls.n	8004664 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e002      	b.n	800466a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	429a      	cmp	r2, r3
 8004672:	d059      	beq.n	8004728 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	429a      	cmp	r2, r3
 800467c:	d154      	bne.n	8004728 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800467e:	4b2c      	ldr	r3, [pc, #176]	@ (8004730 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	d10b      	bne.n	80046a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	60bb      	str	r3, [r7, #8]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db04      	blt.n	80046be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f1c3 0207 	rsb	r2, r3, #7
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	6959      	ldr	r1, [r3, #20]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80046ce:	4413      	add	r3, r2
 80046d0:	4299      	cmp	r1, r3
 80046d2:	d129      	bne.n	8004728 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe ff27 	bl	800352c <uxListRemove>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	2201      	movs	r2, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43da      	mvns	r2, r3
 80046f0:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4013      	ands	r3, r2
 80046f6:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80046f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	2201      	movs	r2, #1
 8004700:	409a      	lsls	r2, r3
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	4a0b      	ldr	r2, [pc, #44]	@ (8004738 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a06      	ldr	r2, [pc, #24]	@ (8004734 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800471a:	441a      	add	r2, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7fe fea5 	bl	8003472 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004728:	bf00      	nop
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000174 	.word	0x20000174
 8004734:	20000178 	.word	0x20000178
 8004738:	2000027c 	.word	0x2000027c

0800473c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004740:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <pvTaskIncrementMutexHeldCount+0x24>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <pvTaskIncrementMutexHeldCount+0x24>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800474e:	3201      	adds	r2, #1
 8004750:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004752:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <pvTaskIncrementMutexHeldCount+0x24>)
 8004754:	681b      	ldr	r3, [r3, #0]
	}
 8004756:	4618      	mov	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20000174 	.word	0x20000174

08004764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800476e:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004774:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fed6 	bl	800352c <uxListRemove>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004786:	4b24      	ldr	r3, [pc, #144]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	2201      	movs	r2, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4013      	ands	r3, r2
 800479a:	4a20      	ldr	r2, [pc, #128]	@ (800481c <prvAddCurrentTaskToDelayedList+0xb8>)
 800479c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d10a      	bne.n	80047bc <prvAddCurrentTaskToDelayedList+0x58>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	481a      	ldr	r0, [pc, #104]	@ (8004820 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047b6:	f7fe fe5c 	bl	8003472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ba:	e026      	b.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047c4:	4b14      	ldr	r3, [pc, #80]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d209      	bcs.n	80047e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d4:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7fe fe6a 	bl	80034ba <vListInsert>
}
 80047e6:	e010      	b.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fe60 	bl	80034ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047fa:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	d202      	bcs.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004804:	4a09      	ldr	r2, [pc, #36]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6013      	str	r3, [r2, #0]
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000278 	.word	0x20000278
 8004818:	20000174 	.word	0x20000174
 800481c:	2000027c 	.word	0x2000027c
 8004820:	20000260 	.word	0x20000260
 8004824:	20000230 	.word	0x20000230
 8004828:	2000022c 	.word	0x2000022c
 800482c:	20000294 	.word	0x20000294

08004830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b04      	subs	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b04      	subs	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b04      	subs	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004860:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <pxPortInitialiseStack+0x64>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b14      	subs	r3, #20
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b04      	subs	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f06f 0202 	mvn.w	r2, #2
 800487e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b20      	subs	r3, #32
 8004884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004886:	68fb      	ldr	r3, [r7, #12]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	08004899 	.word	0x08004899

08004898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048a2:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <prvTaskExitError+0x58>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d00b      	beq.n	80048c4 <prvTaskExitError+0x2c>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <prvTaskExitError+0x28>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60bb      	str	r3, [r7, #8]
}
 80048d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048d8:	bf00      	nop
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0fc      	beq.n	80048da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000018 	.word	0x20000018
	...

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	20000174 	.word	0x20000174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004928:	4808      	ldr	r0, [pc, #32]	@ (800494c <prvPortStartFirstTask+0x24>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8814 	msr	CONTROL, r0
 800493a:	b662      	cpsie	i
 800493c:	b661      	cpsie	f
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	df00      	svc	0
 8004948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800494a:	bf00      	nop
 800494c:	e000ed08 	.word	0xe000ed08

08004950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004956:	4b47      	ldr	r3, [pc, #284]	@ (8004a74 <xPortStartScheduler+0x124>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a47      	ldr	r2, [pc, #284]	@ (8004a78 <xPortStartScheduler+0x128>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10b      	bne.n	8004978 <xPortStartScheduler+0x28>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004978:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <xPortStartScheduler+0x124>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a7c <xPortStartScheduler+0x12c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10b      	bne.n	800499a <xPortStartScheduler+0x4a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	613b      	str	r3, [r7, #16]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <xPortStartScheduler+0x130>)
 800499c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	22ff      	movs	r2, #255	@ 0xff
 80049aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b31      	ldr	r3, [pc, #196]	@ (8004a84 <xPortStartScheduler+0x134>)
 80049c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049c4:	2207      	movs	r2, #7
 80049c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049c8:	e009      	b.n	80049de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80049ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e6:	2b80      	cmp	r3, #128	@ 0x80
 80049e8:	d0ef      	beq.n	80049ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049ea:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <xPortStartScheduler+0x138>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1c3 0307 	rsb	r3, r3, #7
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d00b      	beq.n	8004a0e <xPortStartScheduler+0xbe>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60bb      	str	r3, [r7, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	021b      	lsls	r3, r3, #8
 8004a14:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a20:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <xPortStartScheduler+0x138>)
 8004a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a16      	ldr	r2, [pc, #88]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a38:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a13      	ldr	r2, [pc, #76]	@ (8004a8c <xPortStartScheduler+0x13c>)
 8004a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a44:	f000 f8da 	bl	8004bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <xPortStartScheduler+0x140>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a4e:	f000 f8f9 	bl	8004c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <xPortStartScheduler+0x144>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	@ (8004a94 <xPortStartScheduler+0x144>)
 8004a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a5e:	f7ff ff63 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a62:	f7ff fb17 	bl	8004094 <vTaskSwitchContext>
	prvTaskExitError();
 8004a66:	f7ff ff17 	bl	8004898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	e000ed00 	.word	0xe000ed00
 8004a78:	410fc271 	.word	0x410fc271
 8004a7c:	410fc270 	.word	0x410fc270
 8004a80:	e000e400 	.word	0xe000e400
 8004a84:	200002a0 	.word	0x200002a0
 8004a88:	200002a4 	.word	0x200002a4
 8004a8c:	e000ed20 	.word	0xe000ed20
 8004a90:	20000018 	.word	0x20000018
 8004a94:	e000ef34 	.word	0xe000ef34

08004a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004aba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <vPortEnterCritical+0x5c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d110      	bne.n	8004ae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <vPortEnterCritical+0x60>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <vPortEnterCritical+0x4a>
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000018 	.word	0x20000018
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <vPortExitCritical+0x26>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	4a08      	ldr	r2, [pc, #32]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <vPortExitCritical+0x50>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <vPortExitCritical+0x44>
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000018 	.word	0x20000018

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b74:	f380 8811 	msr	BASEPRI, r0
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f7ff fa88 	bl	8004094 <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	bc09      	pop	{r0, r3}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b96:	f01e 0f10 	tst.w	lr, #16
 8004b9a:	bf08      	it	eq
 8004b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba0:	f380 8809 	msr	PSP, r0
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	20000174 	.word	0x20000174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bd2:	f7ff f9a5 	bl	8003f20 <xTaskIncrementTick>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <SysTick_Handler+0x40>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <vPortSetupTimerInterrupt+0x38>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <vPortSetupTimerInterrupt+0x3c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <vPortSetupTimerInterrupt+0x40>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	4a09      	ldr	r2, [pc, #36]	@ (8004c40 <vPortSetupTimerInterrupt+0x44>)
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1e:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e010 	.word	0xe000e010
 8004c34:	e000e018 	.word	0xe000e018
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	10624dd3 	.word	0x10624dd3
 8004c40:	e000e014 	.word	0xe000e014

08004c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c54 <vPortEnableVFP+0x10>
 8004c48:	6801      	ldr	r1, [r0, #0]
 8004c4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c4e:	6001      	str	r1, [r0, #0]
 8004c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c52:	bf00      	nop
 8004c54:	e000ed88 	.word	0xe000ed88

08004c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c64:	f7ff f8b0 	bl	8003dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c68:	4b5c      	ldr	r3, [pc, #368]	@ (8004ddc <pvPortMalloc+0x184>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c70:	f000 f924 	bl	8004ebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c74:	4b5a      	ldr	r3, [pc, #360]	@ (8004de0 <pvPortMalloc+0x188>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 8095 	bne.w	8004dac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01e      	beq.n	8004cc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c88:	2208      	movs	r2, #8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f023 0307 	bic.w	r3, r3, #7
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <pvPortMalloc+0x6e>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	617b      	str	r3, [r7, #20]
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	e7fd      	b.n	8004cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d06f      	beq.n	8004dac <pvPortMalloc+0x154>
 8004ccc:	4b45      	ldr	r3, [pc, #276]	@ (8004de4 <pvPortMalloc+0x18c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d86a      	bhi.n	8004dac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cd6:	4b44      	ldr	r3, [pc, #272]	@ (8004de8 <pvPortMalloc+0x190>)
 8004cd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cda:	4b43      	ldr	r3, [pc, #268]	@ (8004de8 <pvPortMalloc+0x190>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ce0:	e004      	b.n	8004cec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d903      	bls.n	8004cfe <pvPortMalloc+0xa6>
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f1      	bne.n	8004ce2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cfe:	4b37      	ldr	r3, [pc, #220]	@ (8004ddc <pvPortMalloc+0x184>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d051      	beq.n	8004dac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4413      	add	r3, r2
 8004d10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	1ad2      	subs	r2, r2, r3
 8004d22:	2308      	movs	r3, #8
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d920      	bls.n	8004d6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <pvPortMalloc+0xfc>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	613b      	str	r3, [r7, #16]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d66:	69b8      	ldr	r0, [r7, #24]
 8004d68:	f000 f90a 	bl	8004f80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <pvPortMalloc+0x18c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	4a1b      	ldr	r2, [pc, #108]	@ (8004de4 <pvPortMalloc+0x18c>)
 8004d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004de4 <pvPortMalloc+0x18c>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <pvPortMalloc+0x194>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d203      	bcs.n	8004d8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d86:	4b17      	ldr	r3, [pc, #92]	@ (8004de4 <pvPortMalloc+0x18c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <pvPortMalloc+0x194>)
 8004d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <pvPortMalloc+0x188>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <pvPortMalloc+0x198>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <pvPortMalloc+0x198>)
 8004daa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dac:	f7ff f81a 	bl	8003de4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <pvPortMalloc+0x17a>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60fb      	str	r3, [r7, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	e7fd      	b.n	8004dce <pvPortMalloc+0x176>
	return pvReturn;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	@ 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000eb0 	.word	0x20000eb0
 8004de0:	20000ec4 	.word	0x20000ec4
 8004de4:	20000eb4 	.word	0x20000eb4
 8004de8:	20000ea8 	.word	0x20000ea8
 8004dec:	20000eb8 	.word	0x20000eb8
 8004df0:	20000ebc 	.word	0x20000ebc

08004df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d04f      	beq.n	8004ea6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e06:	2308      	movs	r3, #8
 8004e08:	425b      	negs	r3, r3
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4b25      	ldr	r3, [pc, #148]	@ (8004eb0 <vPortFree+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <vPortFree+0x46>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60fb      	str	r3, [r7, #12]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <vPortFree+0x66>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60bb      	str	r3, [r7, #8]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <vPortFree+0xbc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01e      	beq.n	8004ea6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11a      	bne.n	8004ea6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <vPortFree+0xbc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e80:	f7fe ffa2 	bl	8003dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <vPortFree+0xc0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4a09      	ldr	r2, [pc, #36]	@ (8004eb4 <vPortFree+0xc0>)
 8004e90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e92:	6938      	ldr	r0, [r7, #16]
 8004e94:	f000 f874 	bl	8004f80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e98:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <vPortFree+0xc4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a06      	ldr	r2, [pc, #24]	@ (8004eb8 <vPortFree+0xc4>)
 8004ea0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ea2:	f7fe ff9f 	bl	8003de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000ec4 	.word	0x20000ec4
 8004eb4:	20000eb4 	.word	0x20000eb4
 8004eb8:	20000ec0 	.word	0x20000ec0

08004ebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ec2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ec8:	4b27      	ldr	r3, [pc, #156]	@ (8004f68 <prvHeapInit+0xac>)
 8004eca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3307      	adds	r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <prvHeapInit+0xac>)
 8004eec:	4413      	add	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f6c <prvHeapInit+0xb0>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004efa:	4b1c      	ldr	r3, [pc, #112]	@ (8004f6c <prvHeapInit+0xb0>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f08:	2208      	movs	r2, #8
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a15      	ldr	r2, [pc, #84]	@ (8004f70 <prvHeapInit+0xb4>)
 8004f1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f1e:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <prvHeapInit+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f26:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <prvHeapInit+0xb4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	1ad2      	subs	r2, r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <prvHeapInit+0xb4>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <prvHeapInit+0xb8>)
 8004f4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <prvHeapInit+0xbc>)
 8004f52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f54:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <prvHeapInit+0xc0>)
 8004f56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	200002a8 	.word	0x200002a8
 8004f6c:	20000ea8 	.word	0x20000ea8
 8004f70:	20000eb0 	.word	0x20000eb0
 8004f74:	20000eb8 	.word	0x20000eb8
 8004f78:	20000eb4 	.word	0x20000eb4
 8004f7c:	20000ec4 	.word	0x20000ec4

08004f80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <prvInsertBlockIntoFreeList+0xac>)
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e002      	b.n	8004f94 <prvInsertBlockIntoFreeList+0x14>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d8f7      	bhi.n	8004f8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d108      	bne.n	8004fc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d118      	bne.n	8005008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <prvInsertBlockIntoFreeList+0xb0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d00d      	beq.n	8004ffe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e008      	b.n	8005010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <prvInsertBlockIntoFreeList+0xb0>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e003      	b.n	8005010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d002      	beq.n	800501e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000ea8 	.word	0x20000ea8
 8005030:	20000eb0 	.word	0x20000eb0

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <_reclaim_reent>:
 8005044:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <_reclaim_reent+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4283      	cmp	r3, r0
 800504a:	b570      	push	{r4, r5, r6, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	d053      	beq.n	80050f8 <_reclaim_reent+0xb4>
 8005050:	69c3      	ldr	r3, [r0, #28]
 8005052:	b31b      	cbz	r3, 800509c <_reclaim_reent+0x58>
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	b163      	cbz	r3, 8005072 <_reclaim_reent+0x2e>
 8005058:	2500      	movs	r5, #0
 800505a:	69e3      	ldr	r3, [r4, #28]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	5959      	ldr	r1, [r3, r5]
 8005060:	b9b1      	cbnz	r1, 8005090 <_reclaim_reent+0x4c>
 8005062:	3504      	adds	r5, #4
 8005064:	2d80      	cmp	r5, #128	@ 0x80
 8005066:	d1f8      	bne.n	800505a <_reclaim_reent+0x16>
 8005068:	69e3      	ldr	r3, [r4, #28]
 800506a:	4620      	mov	r0, r4
 800506c:	68d9      	ldr	r1, [r3, #12]
 800506e:	f000 f86d 	bl	800514c <_free_r>
 8005072:	69e3      	ldr	r3, [r4, #28]
 8005074:	6819      	ldr	r1, [r3, #0]
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x3a>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f867 	bl	800514c <_free_r>
 800507e:	69e3      	ldr	r3, [r4, #28]
 8005080:	689d      	ldr	r5, [r3, #8]
 8005082:	b15d      	cbz	r5, 800509c <_reclaim_reent+0x58>
 8005084:	4629      	mov	r1, r5
 8005086:	4620      	mov	r0, r4
 8005088:	682d      	ldr	r5, [r5, #0]
 800508a:	f000 f85f 	bl	800514c <_free_r>
 800508e:	e7f8      	b.n	8005082 <_reclaim_reent+0x3e>
 8005090:	680e      	ldr	r6, [r1, #0]
 8005092:	4620      	mov	r0, r4
 8005094:	f000 f85a 	bl	800514c <_free_r>
 8005098:	4631      	mov	r1, r6
 800509a:	e7e1      	b.n	8005060 <_reclaim_reent+0x1c>
 800509c:	6961      	ldr	r1, [r4, #20]
 800509e:	b111      	cbz	r1, 80050a6 <_reclaim_reent+0x62>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 f853 	bl	800514c <_free_r>
 80050a6:	69e1      	ldr	r1, [r4, #28]
 80050a8:	b111      	cbz	r1, 80050b0 <_reclaim_reent+0x6c>
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 f84e 	bl	800514c <_free_r>
 80050b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050b2:	b111      	cbz	r1, 80050ba <_reclaim_reent+0x76>
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 f849 	bl	800514c <_free_r>
 80050ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050bc:	b111      	cbz	r1, 80050c4 <_reclaim_reent+0x80>
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f844 	bl	800514c <_free_r>
 80050c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80050c6:	b111      	cbz	r1, 80050ce <_reclaim_reent+0x8a>
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 f83f 	bl	800514c <_free_r>
 80050ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050d0:	b111      	cbz	r1, 80050d8 <_reclaim_reent+0x94>
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f83a 	bl	800514c <_free_r>
 80050d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80050da:	b111      	cbz	r1, 80050e2 <_reclaim_reent+0x9e>
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 f835 	bl	800514c <_free_r>
 80050e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050e4:	b111      	cbz	r1, 80050ec <_reclaim_reent+0xa8>
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 f830 	bl	800514c <_free_r>
 80050ec:	6a23      	ldr	r3, [r4, #32]
 80050ee:	b11b      	cbz	r3, 80050f8 <_reclaim_reent+0xb4>
 80050f0:	4620      	mov	r0, r4
 80050f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050f6:	4718      	bx	r3
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	bf00      	nop
 80050fc:	2000001c 	.word	0x2000001c

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	@ (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	@ (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	@ (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	@ (8005144 <__libc_init_array+0x44>)
 8005114:	f000 f870 	bl	80051f8 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	08005298 	.word	0x08005298
 800513c:	08005298 	.word	0x08005298
 8005140:	08005298 	.word	0x08005298
 8005144:	0800529c 	.word	0x0800529c

08005148 <__retarget_lock_acquire_recursive>:
 8005148:	4770      	bx	lr

0800514a <__retarget_lock_release_recursive>:
 800514a:	4770      	bx	lr

0800514c <_free_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4605      	mov	r5, r0
 8005150:	2900      	cmp	r1, #0
 8005152:	d041      	beq.n	80051d8 <_free_r+0x8c>
 8005154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005158:	1f0c      	subs	r4, r1, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	18e4      	addlt	r4, r4, r3
 8005160:	f000 f83e 	bl	80051e0 <__malloc_lock>
 8005164:	4a1d      	ldr	r2, [pc, #116]	@ (80051dc <_free_r+0x90>)
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	b933      	cbnz	r3, 8005178 <_free_r+0x2c>
 800516a:	6063      	str	r3, [r4, #4]
 800516c:	6014      	str	r4, [r2, #0]
 800516e:	4628      	mov	r0, r5
 8005170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005174:	f000 b83a 	b.w	80051ec <__malloc_unlock>
 8005178:	42a3      	cmp	r3, r4
 800517a:	d908      	bls.n	800518e <_free_r+0x42>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	1821      	adds	r1, r4, r0
 8005180:	428b      	cmp	r3, r1
 8005182:	bf01      	itttt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	1809      	addeq	r1, r1, r0
 800518a:	6021      	streq	r1, [r4, #0]
 800518c:	e7ed      	b.n	800516a <_free_r+0x1e>
 800518e:	461a      	mov	r2, r3
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b10b      	cbz	r3, 8005198 <_free_r+0x4c>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d9fa      	bls.n	800518e <_free_r+0x42>
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	1850      	adds	r0, r2, r1
 800519c:	42a0      	cmp	r0, r4
 800519e:	d10b      	bne.n	80051b8 <_free_r+0x6c>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	4401      	add	r1, r0
 80051a4:	1850      	adds	r0, r2, r1
 80051a6:	4283      	cmp	r3, r0
 80051a8:	6011      	str	r1, [r2, #0]
 80051aa:	d1e0      	bne.n	800516e <_free_r+0x22>
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6053      	str	r3, [r2, #4]
 80051b2:	4408      	add	r0, r1
 80051b4:	6010      	str	r0, [r2, #0]
 80051b6:	e7da      	b.n	800516e <_free_r+0x22>
 80051b8:	d902      	bls.n	80051c0 <_free_r+0x74>
 80051ba:	230c      	movs	r3, #12
 80051bc:	602b      	str	r3, [r5, #0]
 80051be:	e7d6      	b.n	800516e <_free_r+0x22>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	1821      	adds	r1, r4, r0
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf04      	itt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	bf04      	itt	eq
 80051d0:	1809      	addeq	r1, r1, r0
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	6054      	str	r4, [r2, #4]
 80051d6:	e7ca      	b.n	800516e <_free_r+0x22>
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	bf00      	nop
 80051dc:	20001004 	.word	0x20001004

080051e0 <__malloc_lock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	@ (80051e8 <__malloc_lock+0x8>)
 80051e2:	f7ff bfb1 	b.w	8005148 <__retarget_lock_acquire_recursive>
 80051e6:	bf00      	nop
 80051e8:	20001000 	.word	0x20001000

080051ec <__malloc_unlock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__malloc_unlock+0x8>)
 80051ee:	f7ff bfac 	b.w	800514a <__retarget_lock_release_recursive>
 80051f2:	bf00      	nop
 80051f4:	20001000 	.word	0x20001000

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
